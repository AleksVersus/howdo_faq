/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/codemirror.js
var require_codemirror = __commonJS({
  "lib/codemirror.js"(exports, module2) {
    module2.exports = CodeMirror;
  }
});

// mode/qsp/qsp-syntax.js
var require_qsp_syntax = __commonJS({
  "mode/qsp/qsp-syntax.js"(exports, module2) {
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror3) {
      let kw_operators = "inclib|freelib|addqst|killqst|openqst|opengame|savegame|addobj|delobj|killobj|unsel|unselect|cls|cla|delact|cmdclr|cmdclear|play|close|all|jump|dynamic|goto|gt|xgoto|xgt|gosub|gs|menu|exit|showobjs|showstat|showacts|showinput|refint|copyarr|killvar|killall|view|msg|settimer|wait|exec";
      let kw_controls = "act|if|elseif|else|loop|while|step|end";
      let kw_text_operators = "\\*(pl?|nl|clr|clear)|(pl?|nl|clr|clear)";
      let functions_string = "\\$(desc|user_text|usrtxt|maintxt|stattxt|curloc|selobj|selact|mid|(u|l)case|trim|replace|str|strfind|input|qspver|curacts|getobj|iif|dyneval|func|max|min|arritem)\\b";
      let functions_num = "\\b(loc|obj|isnum|isplay|len|val|instr|strcomp|strpos|arrsize|arrpos|arrcomp|msecscount|rgb|countobj|ra?nd|iif|dyneval|func|max|min|arritem)\\b";
      let system_vars_string = "\\$(counter|ongload|ongsave|onnewloc|onactsel|onobjsel|onobjadd|onobjdel|usercom|fname|backimage|args|result)\\b";
      let system_vars_num = "\\b(nosave|disablescroll|disablesubex|debug|usehtml|(b|f|l)color|fsize|args|result)\\b";
      CodeMirror3.defineSimpleMode("qsp", {
        start: [
          { token: "start-location", regex: /^#\s*\S+.*$/im },
          { token: "end-location", regex: /^-.*$/im },
          { regex: /\d+/, token: "number" },
          { regex: /((^\s*?)|(&\s*?))(!.*$)/m, token: "comment" },
          { regex: RegExp(`(?:((${kw_text_operators})\b)|${kw_operators}|${kw_controls})`, "i"), token: "keyword" },
          { regex: /[<>+*/-]=|<>|\+|-|<|>|=|\/|\*|!|\b(and|or|mod)\b/i, token: "operator" },
          { regex: RegExp(`(?:(${functions_string}|${functions_num}))`, "i"), token: "builtin" },
          { regex: /("|')(?:[\s\S]*?)\1/i, token: "string" },
          { token: "sys-variable", regex: RegExp(`(?:${system_vars_string}|${system_vars_num})`, "i") },
          { regex: RegExp(`(?:${system_vars_string}|${system_vars_num})`, "i"), token: "sys-variable" }
        ],
        definition: [
          { regex: /(\w+)/, token: "attribute", pop: true }
        ]
      });
    });
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => QspSyntaxPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_qsp_syntax = __toESM(require_qsp_syntax());
var CodeMirror2 = __toESM(require_codemirror());
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var QspSyntaxPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
  }
  onunload() {
    delete CodeMirror2.modes["qsp"];
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
