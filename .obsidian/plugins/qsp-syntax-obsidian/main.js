/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/codemirror.js
var require_codemirror = __commonJS({
  "lib/codemirror.js"(exports, module2) {
    module2.exports = CodeMirror;
  }
});

// mode/qsp/qsp-syntax.js
var require_qsp_syntax = __commonJS({
  "mode/qsp/qsp-syntax.js"(exports, module2) {
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror2) {
      "use strict";
      let kw_operators = "inclib|freelib|addqst|killqst|openqst|opengame|savegame|addobj|delobj|killobj|unsel|unselect|cls|cla|delact|cmdclr|cmdclear|play|close|all|jump|dynamic|goto|gt|xgoto|xgt|gosub|gs|menu|exit|showobjs|showstat|showacts|showinput|refint|copyarr|killvar|killall|view|msg|settimer|wait|exec";
      let kw_controls = "act|if|elseif|else|loop|while|step|end";
      let kw_text_operators = "\\*(pl?|nl|clr|clear)|(pl?|nl|clr|clear)";
      let functions_string = "\\$(desc|user_text|usrtxt|maintxt|stattxt|curloc|selobj|selact|mid|(u|l)case|trim|replace|str|strfind|input|qspver|curacts|getobj|iif|dyneval|func|max|min|arritem)\\b";
      let functions_num = "\\b(loc|obj|isnum|isplay|len|val|instr|strcomp|strpos|arrsize|arrpos|arrcomp|msecscount|rgb|countobj|ra?nd|iif|dyneval|func|max|min|arritem)\\b";
      let system_vars_string = "\\$(counter|ongload|ongsave|onnewloc|onactsel|onobjsel|onobjadd|onobjdel|usercom|fname|backimage|args|result)\b";
      let system_vars_num = "\\b(nosave|disablescroll|disablesubex|debug|usehtml|(b|f|l)color|fsize|args|result)\\b";
      CodeMirror2.defineSimpleMode("qsp", {
        start: [
          { token: "start-location", regex: /^\#\s*\S+.*$/im },
          { token: "end-location", regex: /^\-.*$/im },
          { regex: /\d+/, token: "number" },
          { regex: /((^\s*?)|(\&\s*?))(!.*$)/m, token: "comment" },
          { regex: RegExp(`(?:((${kw_text_operators})\b)|${kw_operators}|${kw_controls})`, "i"), token: "keyword" },
          { regex: /[<>\+\-\*\/]=|<>|\+|-|<|>|=|\/|\*|!|and|or|mod/i, token: "operator" },
          { regex: RegExp(`(?:(${functions_string}|${functions_num}))`, "i"), token: "builtin" },
          { regex: /("|')(?:[\s\S]*?)\1/i, token: "string" },
          { token: "sys-variable", regex: RegExp(`(?:${system_vars_string}|${system_vars_num})`, "i") },
          { regex: RegExp(`(?:${system_vars_string}|${system_vars_num})`, "i"), token: "sys-variable" }
        ],
        definition: [
          { regex: /(\w+)/, token: "attribute", pop: true }
        ]
      });
    });
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => QspSyntaxHighlightPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_qsp_syntax = __toESM(require_qsp_syntax());
var QspSyntaxHighlightPlugin = class extends import_obsidian.Plugin {
  onload() {
  }
  onunload() {
    delete CodeMirror.modes["qsp"];
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibGliL2NvZGVtaXJyb3IuanMiLCAibW9kZS9xc3AvcXNwLXN5bnRheC5qcyIsICJtYWluLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJtb2R1bGUuZXhwb3J0cyA9IENvZGVNaXJyb3I7IiwgIihmdW5jdGlvbihtb2QpIHtcclxuICAgIGlmICh0eXBlb2YgZXhwb3J0cyA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT0gXCJvYmplY3RcIilcclxuICAgICAgbW9kKHJlcXVpcmUoXCIuLi8uLi9saWIvY29kZW1pcnJvclwiKSlcclxuICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpXHJcbiAgICAgIGRlZmluZShbXCIuLi8uLi9saWIvY29kZW1pcnJvclwiXSwgbW9kKVxyXG4gICAgZWxzZVxyXG4gICAgICBtb2QoQ29kZU1pcnJvcilcclxuICB9KShmdW5jdGlvbihDb2RlTWlycm9yKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIGxldCBrd19vcGVyYXRvcnMgPSAnaW5jbGlifGZyZWVsaWJ8YWRkcXN0fGtpbGxxc3R8b3BlbnFzdHxvcGVuZ2FtZXxzYXZlZ2FtZXxhZGRvYmp8ZGVsb2JqfGtpbGxvYmp8dW5zZWx8dW5zZWxlY3R8Y2xzfGNsYXxkZWxhY3R8Y21kY2xyfGNtZGNsZWFyfHBsYXl8Y2xvc2V8YWxsfGp1bXB8ZHluYW1pY3xnb3RvfGd0fHhnb3RvfHhndHxnb3N1Ynxnc3xtZW51fGV4aXR8c2hvd29ianN8c2hvd3N0YXR8c2hvd2FjdHN8c2hvd2lucHV0fHJlZmludHxjb3B5YXJyfGtpbGx2YXJ8a2lsbGFsbHx2aWV3fG1zZ3xzZXR0aW1lcnx3YWl0fGV4ZWMnO1xyXG4gICAgbGV0IGt3X2NvbnRyb2xzID0gJ2FjdHxpZnxlbHNlaWZ8ZWxzZXxsb29wfHdoaWxlfHN0ZXB8ZW5kJztcclxuICAgIGxldCBrd190ZXh0X29wZXJhdG9ycyA9ICdcXFxcKihwbD98bmx8Y2xyfGNsZWFyKXwocGw/fG5sfGNscnxjbGVhciknO1xyXG4gIFxyXG4gICAgbGV0IGZ1bmN0aW9uc19zdHJpbmcgPSAnXFxcXCQoZGVzY3x1c2VyX3RleHR8dXNydHh0fG1haW50eHR8c3RhdHR4dHxjdXJsb2N8c2Vsb2JqfHNlbGFjdHxtaWR8KHV8bCljYXNlfHRyaW18cmVwbGFjZXxzdHJ8c3RyZmluZHxpbnB1dHxxc3B2ZXJ8Y3VyYWN0c3xnZXRvYmp8aWlmfGR5bmV2YWx8ZnVuY3xtYXh8bWlufGFycml0ZW0pXFxcXGInO1xyXG4gICAgbGV0IGZ1bmN0aW9uc19udW0gPSAnXFxcXGIobG9jfG9ianxpc251bXxpc3BsYXl8bGVufHZhbHxpbnN0cnxzdHJjb21wfHN0cnBvc3xhcnJzaXplfGFycnBvc3xhcnJjb21wfG1zZWNzY291bnR8cmdifGNvdW50b2JqfHJhP25kfGlpZnxkeW5ldmFsfGZ1bmN8bWF4fG1pbnxhcnJpdGVtKVxcXFxiJztcclxuICBcclxuICAgIGxldCBzeXN0ZW1fdmFyc19zdHJpbmcgPSAnXFxcXCQoY291bnRlcnxvbmdsb2FkfG9uZ3NhdmV8b25uZXdsb2N8b25hY3RzZWx8b25vYmpzZWx8b25vYmphZGR8b25vYmpkZWx8dXNlcmNvbXxmbmFtZXxiYWNraW1hZ2V8YXJnc3xyZXN1bHQpXFxiJztcclxuICAgIGxldCBzeXN0ZW1fdmFyc19udW0gPSAnXFxcXGIobm9zYXZlfGRpc2FibGVzY3JvbGx8ZGlzYWJsZXN1YmV4fGRlYnVnfHVzZWh0bWx8KGJ8ZnxsKWNvbG9yfGZzaXplfGFyZ3N8cmVzdWx0KVxcXFxiJztcclxuICAgIENvZGVNaXJyb3IuZGVmaW5lU2ltcGxlTW9kZShcInFzcFwiLCB7XHJcbiAgICAgIHN0YXJ0OiBbXHJcbiAgICAgICAgeyB0b2tlbjogJ3N0YXJ0LWxvY2F0aW9uJywgcmVnZXg6IC9eXFwjXFxzKlxcUysuKiQvaW0gfSxcclxuICAgICAgICB7IHRva2VuOiAnZW5kLWxvY2F0aW9uJywgcmVnZXg6IC9eXFwtLiokL2ltIH0sXHJcbiAgICAgICAgeyByZWdleDogL1xcZCsvLCB0b2tlbjogXCJudW1iZXJcIiB9LFxyXG4gICAgICAgIHsgcmVnZXg6IC8oKF5cXHMqPyl8KFxcJlxccyo/KSkoIS4qJCkvbSwgdG9rZW46IFwiY29tbWVudFwiIH0sXHJcbiAgICAgICAgeyByZWdleDogUmVnRXhwKGAoPzooKCR7a3dfdGV4dF9vcGVyYXRvcnN9KVxcYil8JHtrd19vcGVyYXRvcnN9fCR7a3dfY29udHJvbHN9KWAsICdpJyksIHRva2VuOiBcImtleXdvcmRcIiB9LFxyXG4gICAgICAgIHsgcmVnZXg6IC9bPD5cXCtcXC1cXCpcXC9dPXw8PnxcXCt8LXw8fD58PXxcXC98XFwqfCF8YW5kfG9yfG1vZC9pLCB0b2tlbjogXCJvcGVyYXRvclwiIH0sXHJcbiAgICAgICAgeyByZWdleDogUmVnRXhwKGAoPzooJHtmdW5jdGlvbnNfc3RyaW5nfXwke2Z1bmN0aW9uc19udW19KSlgLCAnaScpLCB0b2tlbjogXCJidWlsdGluXCJ9LFxyXG4gICAgICAgIHsgcmVnZXg6IC8oXCJ8JykoPzpbXFxzXFxTXSo/KVxcMS9pLCB0b2tlbjogXCJzdHJpbmdcIiB9LFxyXG4gICAgICAgIHsgdG9rZW46ICdzeXMtdmFyaWFibGUnLCByZWdleDogUmVnRXhwKGAoPzoke3N5c3RlbV92YXJzX3N0cmluZ318JHtzeXN0ZW1fdmFyc19udW19KWAsICdpJykgfSxcclxuICAgICAgICB7IHJlZ2V4OiBSZWdFeHAoYCg/OiR7c3lzdGVtX3ZhcnNfc3RyaW5nfXwke3N5c3RlbV92YXJzX251bX0pYCwgJ2knKSwgdG9rZW46ICdzeXMtdmFyaWFibGUnIH0sXHJcbiAgICAgICAgXHJcbiAgXHJcbiAgICAgIF0sXHJcbiAgICAgIGRlZmluaXRpb246IFtcclxuICAgICAgICB7IHJlZ2V4OiAvKFxcdyspLywgdG9rZW46IFwiYXR0cmlidXRlXCIsIHBvcDogdHJ1ZSB9XHJcbiAgICAgIF1cclxuICAgIH0pXHJcbiAgfSk7XHJcbiAgIiwgImltcG9ydCB7IFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcclxuXHJcbmltcG9ydCAnLi9tb2RlL3FzcC9xc3Atc3ludGF4J1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXNwU3ludGF4SGlnaGxpZ2h0UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuXHJcbiAgb25sb2FkKCk6IHZvaWQgeyB9XHJcblxyXG4gIG9udW5sb2FkKCkge1xyXG4gICAgZGVsZXRlIENvZGVNaXJyb3IubW9kZXNbXCJxc3BcIl07XHJcbiAgfVxyXG5cclxufSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBLCtCQUFBQSxTQUFBO0FBQUEsSUFBQUEsUUFBTyxVQUFVO0FBQUE7QUFBQTs7O0FDQWpCO0FBQUEsb0NBQUFDLFNBQUE7QUFBQSxLQUFDLFNBQVMsS0FBSztBQUNYLFVBQUksT0FBTyxXQUFXLFlBQVksT0FBT0EsV0FBVTtBQUNqRCxZQUFJLG9CQUErQjtBQUFBLGVBQzVCLE9BQU8sVUFBVSxjQUFjLE9BQU87QUFDN0MsZUFBTyxDQUFDLHNCQUFzQixHQUFHLEdBQUc7QUFBQTtBQUVwQyxZQUFJLFVBQVU7QUFBQSxJQUNsQixHQUFHLFNBQVNDLGFBQVk7QUFDdEI7QUFDQSxVQUFJLGVBQWU7QUFDbkIsVUFBSSxjQUFjO0FBQ2xCLFVBQUksb0JBQW9CO0FBRXhCLFVBQUksbUJBQW1CO0FBQ3ZCLFVBQUksZ0JBQWdCO0FBRXBCLFVBQUkscUJBQXFCO0FBQ3pCLFVBQUksa0JBQWtCO0FBQ3RCLE1BQUFBLFlBQVcsaUJBQWlCLE9BQU87QUFBQSxRQUNqQyxPQUFPO0FBQUEsVUFDTCxFQUFFLE9BQU8sa0JBQWtCLE9BQU8saUJBQWlCO0FBQUEsVUFDbkQsRUFBRSxPQUFPLGdCQUFnQixPQUFPLFdBQVc7QUFBQSxVQUMzQyxFQUFFLE9BQU8sT0FBTyxPQUFPLFNBQVM7QUFBQSxVQUNoQyxFQUFFLE9BQU8sNkJBQTZCLE9BQU8sVUFBVTtBQUFBLFVBQ3ZELEVBQUUsT0FBTyxPQUFPLFFBQVEseUJBQXlCLGdCQUFnQixnQkFBZ0IsR0FBRyxHQUFHLE9BQU8sVUFBVTtBQUFBLFVBQ3hHLEVBQUUsT0FBTyxtREFBbUQsT0FBTyxXQUFXO0FBQUEsVUFDOUUsRUFBRSxPQUFPLE9BQU8sT0FBTyxvQkFBb0IsbUJBQW1CLEdBQUcsR0FBRyxPQUFPLFVBQVM7QUFBQSxVQUNwRixFQUFFLE9BQU8sd0JBQXdCLE9BQU8sU0FBUztBQUFBLFVBQ2pELEVBQUUsT0FBTyxnQkFBZ0IsT0FBTyxPQUFPLE1BQU0sc0JBQXNCLG9CQUFvQixHQUFHLEVBQUU7QUFBQSxVQUM1RixFQUFFLE9BQU8sT0FBTyxNQUFNLHNCQUFzQixvQkFBb0IsR0FBRyxHQUFHLE9BQU8sZUFBZTtBQUFBLFFBRzlGO0FBQUEsUUFDQSxZQUFZO0FBQUEsVUFDVixFQUFFLE9BQU8sU0FBUyxPQUFPLGFBQWEsS0FBSyxLQUFLO0FBQUEsUUFDbEQ7QUFBQSxNQUNGLENBQUM7QUFBQSxJQUNILENBQUM7QUFBQTtBQUFBOzs7QUNyQ0g7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUF1QjtBQUV2Qix3QkFBTztBQUVQLElBQXFCLDJCQUFyQixjQUFzRCx1QkFBTztBQUFBLEVBRTNELFNBQWU7QUFBQSxFQUFFO0FBQUEsRUFFakIsV0FBVztBQUNULFdBQU8sV0FBVyxNQUFNLEtBQUs7QUFBQSxFQUMvQjtBQUVGOyIsCiAgIm5hbWVzIjogWyJtb2R1bGUiLCAibW9kdWxlIiwgIkNvZGVNaXJyb3IiXQp9Cg==
