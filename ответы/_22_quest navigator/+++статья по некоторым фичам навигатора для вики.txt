=====Циклы=====

  * **FOR** //[#переменная]//**=** //[#выражение]// **TO** //[#выражение]//**:** //[операторы]// - Выполняет //[#операторы]// несколько раз, по очереди присваивая //[#переменной]// все численные значения от первого до второго //[#выражения]//.
    * Однострочная форма записи:<sxh qsp>
for номер_нпц = 1 to количество_нпц: gs 'инициализировать нпц', номер_нпц
стоимость['меч'] = 10
стоимость['доспех'] = 250
стоимость['щит'] = 15
стоимость_снаряжения = 0
for номер_предмета = 0 to arrsize('стоимость')-1: стоимость_снаряжения += стоимость[номер предмета]
</sxh>
    * Многострочная форма записи:
      * После символа ":" ставится перенос строки
      * Заканчивается FOR строкой "END"
      * Допускается вложенность неограниченной глубины. Каждый уровень вложения должен заканчиваться своей строкой "END".
      * //Пример://<sxh qsp>
for i = 0 to arrsize('arr')-1:
    *pn!pl! arr[i]
    if arr[i] > 10:
        jump 'конец'
    end
end
:конец
</sxh>

* Шаг цикла может быть отличным от нуля !единицы!. Для этого используется **STEP**:<sxh qsp>
for нечётные = 1 to 10 step 2: *pl нечётные
</sxh>

=====Локальные переменные=====

  * **LOCAL** //[переменная]// **=** //[выражение]// - Создаёт //[переменную]// и присваивает ей значение //[выражения]//. Переменная созданная таким образом доступна только из обработчика текущей локации, текущего блока ACT или текущего блока DYNAMIC/DYNEVAL. Это позволяет избежать ошибок связанных со случайным использованием одной и той же переменной в нескольких локациях и других блоках.
    * Локальными становятся и строковая и численная переменные. Т.е. "LOCAL $имя" сделает локальной и "$имя" и "имя".
    * При неизвестном начальном значении можно использовать форму **LOCAL** //[переменная]//<sxh qsp>
local lvar = 1
gvar = 1
dynamic { local lvar = 2 & gvar = 2 & *pl "<<lvar>>, <<gvar>>" } &! выведет 2, 2
*pl "<<lvar>>, <<gvar>>" &! выведет 1, 2 т.к. переменная gvar была изменена в dynamic блоке
</sxh>