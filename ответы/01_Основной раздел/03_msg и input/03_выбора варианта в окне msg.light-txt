=3.3. Как прикрутить возможность выбора варианта к окну msg?=
[:faq_03_03]
В: Как прикрутить возможность выбора варианта к окну msg?
В: Подскажите аналог команды confirm в QSP.

О:
	В классическом плеере у msg нет такой возможности, поскольку msg не возвращает значений. Вы можете использовать функцию $input, и ограничить для игрока возможные варианты ответов:
```qsp
		:loop
		! выводим на экран окошко с полем ввода, а результат,
		! введёный игроком, возвращаем переменной $answer
		$answer = $INPUT ('Хотите продолжить (д/н)?')
		! чтобы не учитывать регистр, переводим значение в нижний регистр
		$answer=$LCASE($answer)
		! проверяем, правильный ли ответ ввёл игрок
		IF $answer = 'д':
		! если ответ "д" переходим к локации, продолжающей игру
			goto "далее"
		ELSEIF $answer = 'н':
		! если ответ "н" переходим к локации, прерывающей игру
			goto "конец"
		ELSE
		! если игрок ввёл неверный ответ, или не ввёл ничего
			! перепрыгиваем на метку loop
			JUMP 'loop'
		END
```
	Есть вариант использовать всплывающее меню в качестве диалогового окна, но это не очень хороший вариант, так как всплывающее меню появляется точно под мышкой и выглядит совсем не как диалоговое окно. Тем не менее вариант приведу:

```qsp
	# start
	*pl "На следующей локации демонстрируется использование меню в качестве даилогового окна для выбора двух вариантов"
	$dialog[]="Сообщение: кошелёк или жизнь:dial_loc:?"
	$dialog[]="> Кошелёк:dial_loc"
	$dialog[]="> Жизнь:dial_loc"
	act "Перейти в следующую локацию":
		goto 'room'
	end
	- start

	# room
	refint & ! данная функция принудительно обновит содержимое окон плеера при входе на локацию
	:loop
	menu '$dialog'
	if variant<>1: jump 'loop'
	- room

	# dial_loc
	if args[0]=1:
		! данный пункт меню не работает
	elseif args[0]=2:
		*pl "Вы выбрали вариант кошелёк"
		variant=1
	elseif args[0]=3:
		*pl "Вы выбради вариант жизнь"
		variant=1
	end
	- dial_loc
```

	В Quest Navigator Вы можете самостоятельно написать такое окошко, даже не прибегая к помощи JavaScript.

	Далее следует готовое решение от evp с комментариями от Aleks Versus.

	В игре:
```qsp
		! не забываем включать html
		USEHTML = 1
		! следующая строка заставит плеер обратиться к элементу
		!  с id openModal когда игрок щёлкнет по ссылке
		*nl'<a href="#openModal">Открыть диалог</a>'
		! в переменную $life в виде текста вносим код, который
		! должен выполняться при выборе варианта "Жизнь"
		$life = { 
			*pl 'код, выполняемый при выборе варианта "Жизнь"'
		}
		! соответственно в переменную $money — код, который
		! должен выполняться при выборе варианта "Деньги"
		$money = { 
			*pl 'код, выполняемый при выборе варианта "Кошелёк"'
		} 
		! выводим на экран "окошко", а вернее блок, стилизованный под окошко, с двумя кнопками
		! общий блок/затенение
		*p '<div class="modalDialog" id="openModal">'
			! окошко
			*p '<div>' 
				*p '<p>Жизнь или кошелёк?</p>' 
				*p '<button style="float: left;"><a href="EXEC: dynamic $life">Жизнь</a></button>' 
				*p '<button style="float: right;"><a href="EXEC: dynamic $money">Кошелёк</a></button>' 
			*p '</div>' 
		*pl '</div>'
```
	В game.css вашего шаблона:
```css
		/*
			данный стиль описывает внешний вид общего блока, играющего в т.ч. роль затенения
			(обратите внимание, на какую область в вашем шаблоне распространяется затенение)
		 */
		.modalDialog { 
			position: fixed; 
			top: 0;    right: 0;    bottom: 0; left: 0; 
			background: hsla(0,0%,0%,0.8); 
			z-index: 50; /* выводится одним из верхних слоёв */
			opacity: 0; /* видимость на нуле, чтобы игрок не видел содержимое */
			-webkit-transition: opacity 400ms ease-in; /* обеспечивает плавное появление */
			pointer-events: none; /* скрывает блок от курсора мыши */
		} 
		/* 
			псевдокласс :target применяется к тому элементу
			к которому обратился браузер/плеер по нажатию на ссылку (по id)
		*/
		.modalDialog:target { 
			opacity: 1; /* видимость повышается до 100% */
			pointer-events: auto; /* с блоком снова может работать мышь */
		} 
		/* стилизация дочернего блока, т.е. непосредственно окошка */
		.modalDialog > div { 
			width: 400px; 
			position: relative; 
			margin: 10% auto; 
			padding: 5px 20px 13px 20px; 
			border-radius: 10px; 
			background: #fff; 
			background: -webkit-linear-gradient(#fff, #b8ecfb); 
		}
```
