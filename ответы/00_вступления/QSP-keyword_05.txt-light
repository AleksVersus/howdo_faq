=Синтаксемы и спецсимволы=

--END--

Ключевое слово (оператор), отмечающее окончание многострочной конструкции. Многострочными могут быть действия, конструкции условий. /* и циклы (появляются в новых версиях плеера, например в Quest Navigator) */ Примеры:

		! открываем условие
		if obj "Кувшин":
			*pl "У вас есть кувшин."
		! закрываем условие
		end

		! открываем действие
		act "Взять яблоко":
			яблоко+=1
			addobj "Яблоко"
		! закрываем действие
		end

	Каждая многострочная конструкция должна завершаться ключевым словом end. Однако здесь работают такие же правила, как для HTML-тегов или скобок: если мы вкладываем одну конструкцию в другую, сначала необходимо закрывать последнюю открытую конструкцию:

		! открываем условие
		if obj "Пустой кувшин":
			! код, который относится к условию
			*pl "У вас есть пустой кувшин."
			! открываем действие
			act "Наполнить кувшин":
				! код который относится к действию
				delobj "Пустой кувшин"
				addobj "Полный кувшин"
			! закрываем ДЕЙСТВИЕ
			end
			*pl "Кувшин можно наполнить из колодца."
		! закрываем УСЛОВИЕ
		end

	Можно использовать не просто end, а end if и end act:

		! открываем действие
		act "Купить 10 стрел по 5 рублей":
			! открываем условие 1 уровня
			if money>=10*5:
				arrow+=10
				money-=10*5
				! открываем условие 2 уровня
				if no (obj "Стрелы"):
					addobj "Стрелы"
				! закрываем условие 2 уровня
				end if
			else
				*pl "Вам не хватает денег."
			! закрываем условие 1 уровня
			end if
		! закрываем действие
		end act

	Вообще, после ключевого слова end допускается, но не одобряется, запись любого текста. При этом игнорируется весь текст до следующей команды. Если команда записывается в той же строке, что и end, то эта команда должна стоять после амперсанда:

		! открываем действие
		act "Взять яблоко":
			яблоко+=1
			addobj "Яблоко"
		! закрываем действие
		end присутствие этого текста после end не одобряется & *pl "Новая команда"

--Метки `:`--

Метки — это особые синтаксические конструкции (а вернее меньше, чем конструкции, — синтаксемы), которые отмечают указанную строку кода и служат для быстрого перемещения к таким строкам с помощью оператора JUMP. Общая запись:

		:[название метки]

	, где [название метки] — теоретически любое сочетание символов, однако на практике желательно использовать лишь буквы, цифры, символы подчёркивания и пробелы. Перед двоеточием могут стоять символы пробелов и табуляции в любом количестве. Так же игнорируются прилегающие к названию метки символы пробелов и табуляций (однако ставить их не рекомендуется для удобства чтения кода).

		! рекомендуемый вариант использования метки
		jump 'метка'
		! ...
		:метка

		! рабочий вариант с игнорированием прилегающих пробелов в метке
		jump "метка с прилегающими пробелами"
		! ...
		: метка с прилегающими пробелами

		! рабочий вариант с игнорированием прилегающих пробелов в jump
		jump "  метка с прилегающими пробелами  "
		! ...
		:метка с прилегающими пробелами

	Непосредственно после метки, в той же строке, через амперсанд (&) могут идти любые другие команды, однако так делать не рекомендуется.

		! метка с командами после неё
		jump 'markdown'
		! ...
		:markdown & *pl "вывожу текст" & ! комментарий

	Метки не чувствительны к регистру:

		jump "FoR"
		! ...
		:for

	Оператор jump "видит" метки только внутри текущего блока кода. Иными словами метки локальны, метки с одинаковыми названиями могут располагаться на разных локациях, в разных блоках кода).

	Если метки с одинаковыми названиями расположены в одном блоке кода, то все дублирующие метки, кроме самой первой, игнорируются плеером.

	Отдельными блоками кода считаются:
		* код "Выполнить при посещении" конкретной локации (каждая локация — отдельный блок кода),
		* код действия даже если действие добавлено программно,
		* код в гиперссылке,
		* код, передаваемый DYNAMIC/DYNEVAL.

	Случайные метки, то есть метки, на которые в текущем блоке кода нет перехода с помощью jump, просто игнорируются интерпретатором.

--Амперсанд `&`--

`&` — символ амперсанда служит для перечисления команд в одной строке. Общая запись:

		<команда 1> & <команда 2> & ...

	Данный символ не следует путать с операцией объединения строк (конкатенация), а использовать нужно с осторожностью.

	Примеры:

		*pl "Я сорвал с ветки яблоко." & addobj "Яблоко" & яблоко+=1

		a=3 & b=7 & g=rand(1,6) & ("26"&"27") & ! в скобках — конкатенация

--Запятая ,--

Запятая "," в QSP используется для перечисления аргументов, передаваемых различным операторам и функциям:

	rgb(25,67,250)
	max(12,45,67,89,90,122,135,168,90)
	addobj "Отвёртка","img/screwdriver.png"
	gosub "add_object","Апельсин",2,"Еда",37

--Круглые скобки ()--

Круглые скобки "()" в QSP используются в двух случаях:

	1. В различных выражениях скобки повышают приоритет операций (операции в скобках выполняются в первую очередь):

		! повышение приоритета арифметических операций
		(256+789)*(789-256)
		! повышение приоритета операций сравнения
		if A=(A<>B): ...

	2. Если нужно передать функции более одного аргумента следует помещать всю группу аргументов в скобки:

		rgb(25,67,250)
		max(12,45,67,89,90,122,135,168,90)
		rand(1,1000)

		Будет хорошим тоном помещать даже один аргумент функции в скобки:

		rand(999)

		Не будет осуждаться, хотя так обычно не делают, если в скобки помещать и группу аргументов к операторам:

		showinput(0)
		addobj("Отвёртка","img/screwdriver.png")
		gosub("add_object","Апельсин",2,"Еда",37)
		gosub("add_object","Рек",rand(23,45),"Артефакт",max(36,67,90,a))


--Квадратные скобки []--

Квадратные скобки "[]" в QSP используются для указания индекса ячейки массива:

	! присваиваем значение седьмой ячейке массива $mass
	$mass[7]="textstring"

Для индексации ячеек массивов можно использовать строковые значения:

	$mass["x:4,y:6"]="map-dot"

Если квадратные скобки после названия массива не стоят, значит происходит работа с нулевой ячейкой массива:

	$mass="text"
	! равнозначно
	$mass[0]="text"

Если индекс в квадратных скобках не указан, значит мы работаем с последней ячейкой массива:

	! создаём новую ячейку в конце массива и присваиваем ей значение
	$mass[]="last_cell"

	! получаем значение из последней ячейки массива:
	$mass[]

--Фигурные скобки {}--

Фигурные скобки "{}" в QSP выступают как спецсимволы, отмечающие начало и конец строковых значений. Иными словами, по наличию таких скобок плеер может понять, где начинается и где кончается строковое значение:

	*pl {Текст, который будет выведен на экран.}

Особенностью указания текстового значения с помощью фигурных скобок является то, что в таких строках не раскрываются подвыражения:
	
	health=150
	*pl {Здоровье: <<health>>}
	! на экран будет выведен текст 'Здоровье: <<health>>'
	*pl "Здоровье: <<health>>"
	! на экран будет выведен текст 'Здоровье: 150'

Для большей совместимости с различными версиями плееров, а так же для удобства чтения, фигурные скобки следует в основном использовать для записи кода, предназначенного для оператора dynamic или функции dyneval:

	*pl $dyneval({$result = mid("abcd",2,1)+"qwerty"})
	dynamic {
		$args[0]
		addobj $args[1]
	},'Текст','Вилка'

Так же фигурные скобки можно использовать для написания многострочных комментариев:

	! {
		многострочный
		комментарий
	}

Допустимо вложение любого количества фигурных скобок друг в друга.

--Кавычки `""`--

Кавычки "" (двойные апострофы) в QSP выступают как спецсимволы, отмечающие начало и конец строковых значений. Иными словами, по наличию кавычек плеер может понять, где начинается и где кончается строковое значение:

	*pl "Текст, который будет выведен на экран."

Особенностью указания текстового значения с помощью апострофов является то, что в таких строках раскрываются подвыражения:
	
	health=150
	*pl "Здоровье: <<health>>"
	! на экран будет выведен текст 'Здоровье: 150'

Кавычки внутри строки можно экранировать дублированием:

	*pl "В кабачке ""У Мо"" сегодня весело и шумно."


Так же кавычки можно использовать для написания многострочных комментариев:

/*
	! "
		многострочный
		комментарий
	"
*/

--Апострофы ''--

Апострофы '' в QSP выступают как спецсимволы, отмечающие начало и конец строковых значений. Иными словами, по наличию апострофов плеер может понять, где начинается и где кончается строковое значение:

	*pl 'Текст, который будет выведен на экран.'

Особенностью указания текстового значения с помощью апострофов является то, что в таких строках раскрываются подвыражения:
	
	health=150
	*pl 'Здоровье: <<health>>'
	! на экран будет выведен текст 'Здоровье: 150'

Кавычки внутри строки можно экранировать дублированием:

	*pl 'Руг''Ста''Раг сказал: — Что ты хочешь, мора? Хочешь мухомора?'


Так же апострофы можно использовать для написания многострочных комментариев:

/*
	! '
		многострочный
		комментарий
	'
*/