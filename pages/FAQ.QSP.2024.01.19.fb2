<?xml version="1.0" encoding="utf-8"?>
<FictionBook xmlns="http://www.gribuser.ru/xml/fictionbook/2.0" xmlns:l="http://www.w3.org/1999/xlink">
 <description>
  <title-info>
   <genre>ref_ref</genre>
   <genre>comp_programming</genre>
   <author>
    <first-name>Алексей</first-name>
    <middle-name>Олегович</middle-name>
    <last-name>Шпак</last-name>
   </author>
   <book-title>Как сделать? Часто Задаваемые Вопросы по QSP</book-title>
   <annotation>
    <p>На форуме QSP.su в теме "Как сделать?" было задано очень много вопросов. В этом сборнике представлены наиболее часто задаваемые. </p>
    <p>редакция от <strong>2024.01.19 г.</strong></p>
   </annotation>
   <date value="2024-01-19">07 марта 2023</date>
   <coverpage>
    <image l:href="#cover.png"/></coverpage>
   <lang>ru</lang>
  </title-info>
  <document-info>
   <author>
    <first-name>Aleks</first-name>
    <last-name>Versus</last-name>
   </author>
   <program-used>build_fb2.py, FictionBook Editor Release 2.6.6</program-used>
   <date value="2024-01-19">2024-01-19</date>
   <id>691C3AD3-DB00-4DCD-8B3F-FE36355FD126</id>
   <version>2.0</version>
   <history>
    <p>1.0 — создание файла</p>
    <p>2.0 — полное обновление файла</p>
   </history>
  </document-info>
 </description>
 <body><section id="how_do_faq">
<section>
<section id="vazhnoje_predislovije">
<title head-level="h1">
<p>Важное предисловие</p>
</title>

<section>

<p>В этом сборнике представлены наиболее часто задаваемые вопросы из темы "Как сделать ?" на форуме QSP.su. Статьи разбиты на тематические разделы для удобства навигации по вопросам. В конце справочника представлены ссылки на материалы по каждому вопросу, некоторые из них могут работать некорректно в связи с перемещением ряда вопросов в тему "Как сделать?". К сожалению это не подлежит исправлению, однако для удобства поиска к ссылкам добавлена информация об авторе, дате и номере сообщения в теме.</p>
<p>Так же следует помнить, что все представленные в сборнике примеры даны в целях обучения. Не стоит тупо копировать их в свою игру, а потом бегать с претензиями типа "А вот я скопировал код отсюда, но он почему-то не работает", или "делает что-то не то". Важно прочитать статью и разобрать то, как работает пример. Ещё лучше, сначала самому попытаться решить поставленную задачу, а уже после обращаться к "F.A.Q". Данный сборник не является перечнем готовых решений.</p>
<p>Если вы нашли ошибку, опечатку или неточность, а так же если у вас есть замечания к статьям, или желание написать более развёрнутую и подробную их версию, пишите на `aleksversus@mail.ru` , либо в "ВК" 
<a l:href="https://vk.com/id40090736">
https://vk.com/id40090736</a>.</p>
<p><strong>
Внимание!!!</strong>

 Все статьи сборника актуализированы для плееров версии 5.8.0. Если вам нужен справочник по плеерам версии 5.7.0, скачайте оффлайн-версию на 
<a l:href="https://github.com/AleksVersus/howdo_faq/releases">
странице релизов</a>.</p>

</section>

<section id="raz_iasneniia-i-terminy"><title>
<p>Разъяснения и термины:</p>
</title>

<p>`Обработка локации`, `посещение локации` — под этими терминами понимаются следующие процессы: выполнение кода из поля "Выполнить при посещении" указанной локации, добавление в окно основного описания базового описания указанной локации, а так же добавление в окно действий базовых действий указанной локации. Обработка локации происходит в двух случаях: в случае "перехода" на локацию с помощью операторов `goto` и `xgoto`, или в случае "вызова" локации с помощью операторов `gosub`, `menu`, функции `func` или в качестве обработчика события в автоматическом режиме. С понятиями "переход на локацию" и "вызов локации" вы можете подробнее ознакомиться в разделе 
<a l:href="#faq_01_08">
"Разница между `goto` и `gosub`"</a>.</p>
<p>`индекс` — в контексте данного справочника под индексом подразумевается указатель на какой-либо элемент. Например, у каждой ячейки массива есть собственный числовой индекс. Если массив состоит из пяти элементов, то его элементы нумеруются от нуля до четырёх — эти числа и являются индексами элементов. Для того, чтобы обратиться к какому-то конкретному элементу массива, нужно указать название этого массива, а за названием в квадратных скобках - индекс:</p>
<p><code>*pl mass[3] &amp; ! выводим на экран значение элемента массива mass под индексом 3</code></p>
<p>У элементов массивов могут быть текстовые индексы: `mass["35,56"]`.</p>
<p>Индексы есть практически у всех исчислимых элементов для удобства обращения. Например, каждый символ строки обладает собственным индексом (номером), каждый предмет, добавленный в окно предметов тоже. И т.д. Если вы встречаете фразу "элементы индексируются с единицы", это означает, что нумерация элементов начинается с числа 1. Элементы массивов индексируются с нуля.</p>
<p>`Переменная-маркер` — это пользовательская (не системная) переменная, которую мы вводим, чтобы отмечать изменение события или состояния в игре. Например, переменной-маркером можно назвать переменную, обозначающую размещение предмета на локации:</p>
<p><code>if ваза_на_столе=1:</code></p>
<p><code>! если переменная-маркер ваза_на_столе равна 1</code></p>
<p><code></code></p>
<p><code>! создаём действие</code></p>
<p><code>act "Взять вазу со стола":</code></p>
<p><code>! в действии изменяем значение переменной-маркера</code></p>
<p><code>ваза_на_столе=0</code></p>
<p><code>addobj "Ваза"</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<p>`Системная переменная` — это зарезервированная в плеере переменная. Изменение её значения внутри игры изменяет настройки и поведение плеера. Например, системной является переменная nosave. Если её значение отлично от нуля, игрок не может пользоваться пунктами меню плеера "загрузить состояние игры" и "сохранить состояние игры":</p>
<p><code>nosave=1</code></p>
<p>Окна плеера могут называться по-разному:</p>
<p>* 
`Окно основного описания` может называться `основным окном`, `окном основных описаний`, `главным окном`, или `окном игрока`.</p>
<p>* 
`Окно дополнительного описания` может называться `дополнительным окном описаний`, `окном статистики` (статов), или `окном пользователя`.</p>
<p>* 
`Окно предметов` может называться `окном инвентаря`, `инвентарём`, `списком предметов`, или `рюкзаком`.</p>
<p>* 
`Окно действий` может называться `списком действий`.</p>
<p>* 
`Окно с полем ввода` может называться `полем ввода`, `строкой ввода` и пр.</p>
<p>* 
Диалоговое окно, вызываемое функцией `$input`, может называться `окном ввода`.</p>
<p>* 
Диалоговое окно, вызываемое оператором `msg`, может называться `окном сообщения`.</p>
<p>* 
Окно, в котором выводится изображение при использовании команды `view`, может называться `окном предпросмотра`, `окном просмотра изображения`.</p>
<p>В разделе "Зарезервированные слова, переменные и спецсимволы" используются обозначения:</p>
<p>* 
[выражение] - значение выражения, которое может быть как текстового, так и числового типа.</p>
<p>* 
[$выражение] - значение выражения, которое может быть только текстового (строкового) типа (но при необходимости движок автоматически переведёт число в строку).</p>
<p>* 
[#выражение] - значение выражения, которое может быть только числового типа (если возможно, движок автоматически переведёт строку в число).</p>
<p>Примечение. Символ `#` использован в справочнике только чтобы разделить выражения произвольного и числового типов. К синтаксису QSP данный символ отношения не имеет.</p>
<p>В том же разделе: если для оператора или функции не указана общая запись, значит этот оператор или функцию нужно запускать без аргументов. Например, оператор `unselect`, функция `$curloc`.</p>

</section>

<section id="blagodarnosti"><title>
<p>Благодарности</p>
</title>

<p>Спасибо всему сообществу QSP, подписчикам моего канала, а так же всем, кто задавал вопросы по изложенным в сборнике статьям.</p>
<p>Отдельная благодарность `Nex`у, `NickoAilus`у, `Последнему из Гаяр`, `evp`, `newsash`у, `Олегусу`, `Storm`у, `Svartberg`у, `Oliver`у, `mkir`у, `svandrus`у, `Lisichk`е, `Ajent`е, `ejikplains`у, `Larson`у, `dmvikar`у, и всем прочим авторам, чьи наработки, примеры и кусочки кода послужили материалом для этих статей. Прошу прощения, кого забыл упомянуть.</p>

</section>

</section>
<section id="soderzhanije">
<title head-level="h1">
<p>Содержание</p>
</title>

<section>
</section>

<section id="1-v-chiom-raznitsa"><title>
<p>1. В чём разница?</p>
</title>

<p>1.1. 
<a l:href="#faq_01_01">
В чём разница между `set x=10`, `let x=10` и `x=10`?</a></p>
<p>1.2. 
<a l:href="#faq_01_02">
В чём разница между переменной со знаком $ и без знака $?</a></p>
<p>1.3. 
<a l:href="#faq_01_03">
В чём разница между `' '` (апострофы) и `" "` (кавычки)?</a></p>
<p>1.4. 
<a l:href="#faq_01_04">
В чём разница между `*pl "строка"` и просто `" строка" `?</a></p>
<p>1.5. 
<a l:href="#faq_01_05">

Чем отличаются эти две команды? `
<emphasis>
pl "&lt;&lt;$perem&gt;&gt;"` и `</emphasis>

pl $perem`
</a></p>
<p>1.6. 
<a l:href="#faq_01_06">
В чём разница между dynamic и dyneval?</a></p>
<p>1.7. 
<a l:href="#faq_01_07">
В чём разница между gt и goto?</a></p>
<p>1.8. 
<a l:href="#faq_01_08">
Чем отличается goto от gosub?</a></p>
<p>18.1. 
<a l:href="#faq_18_01">
Чем отличаются команды `inclib` и `openqst`?</a></p>
<p><a l:href="#link_01">
Источники и дополнительные материалы</a></p>

</section>

<section id="2-voprosy-o-counter"><title>
<p>2. Вопросы о $COUNTER</p>
</title>

<p>2.1. 
<a l:href="#faq_02_01">
Как сделать, чтобы значение переменной изменялось с течением времени?</a></p>
<p>2.2. 
<a l:href="#faq_02_02">
Как сделать, чтобы из одной локации меня через пару секунд перебрасывало в другую локацию?</a></p>
<p>2.3. 
<a l:href="#faq_02_03">
Как сделать, чтобы через пару секунд после входа на локацию появлялось новое действие?</a></p>
<p>2.4. 
<a l:href="#faq_02_04">
Как сделать, чтобы цикл выполнялся параллельно остальному коду, а не прерывал его?</a></p>
<p><a l:href="#link_02">
Источники и дополнительные материалы</a></p>

</section>

<section id="3-voprosy-o-msg-i-input"><title>
<p>3. Вопросы о MSG и $INPUT</p>
</title>

<p>3.1. 
<a l:href="#faq_03_01">
Как вывести на экран отдельное окошко с текстом?</a>

 | Подскажите аналог команды alert в QSP.</p>
<p>3.2. 
<a l:href="#faq_03_02">
Как вывести на экран окошко, в котором игрок должен ввести текст?</a>

 | Подскажите аналог команды prompt в QSP.</p>
<p>3.3. 
<a l:href="#faq_03_03">
Как прикрутить возможность выбора варианта к окну msg?</a>

 | Подскажите аналог команды confirm в QSP.</p>
<p>3.4. 
<a l:href="#faq_03_04">
Как сделать ввод имени игроком?</a></p>
<p>3.5. 
<a l:href="#faq_03_05">
Как увеличить число правильных ответов, которые может ввести игрок?</a>

 | Как сделать варианты для ответа через $input?</p>
<p><a l:href="#link_03">
Источники и дополнительные материалы</a></p>

</section>

<section id="4-voprosy-o-meniu"><title>
<p>4. Вопросы о меню</p>
</title>

<p>4.1. 
<a l:href="#faq_04_01">
Как сделать меню предмета?</a></p>
<p>4.2. 
<a l:href="#faq_04_02">
Как сделать разные меню для двух и более предметов?</a></p>
<p>4.3. 
<a l:href="#faq_04_03">
Как сделать меню в ссылках?</a></p>
<p>4.4. 
<a l:href="#faq_04_04">
Как передавать локациям-пунктам меню аргументы?</a></p>
<p>4.5. 
<a l:href="#faq_04_05">
Как делать контекстное (динамическое) меню?</a></p>
<p>4.6. 
<a l:href="#faq_04_06">
Как вставить разделитель в меню?</a></p>
<p>4.7. 
<a l:href="#faq_04_07">
Как вставить картинки в меню?</a></p>
<p><a l:href="#link_04">
Источники и дополнительные материалы</a></p>

</section>

<section id="5-voprosy-po-onnewloc"><title>
<p>5. Вопросы по $ONNEWLOC</p>
</title>

<p>5.1. 
<a l:href="#faq_05_01">
Как сделать так, чтобы не писать один и тот же код в каждой локации?</a></p>
<p>5.2. 
<a l:href="#faq_05_02">
Как сделать кнопку "Назад", работающую на каждой локации?</a></p>
<p>5.3. 
<a l:href="#faq_05_03">
Почему в `args` на локации-обработчике перехода на новую локацию уже есть данные?</a></p>
<p><a l:href="#link_05">
Источники и дополнительные материалы</a></p>

</section>

<section id="6-voprosy-po-zvukovym-fajlam-v-qsp"><title>
<p>6. Вопросы по звуковым файлам в QSP</p>
</title>

<p>6.1. 
<a l:href="#faq_06_01">
Как вставить музыку или звук в игру?</a></p>
<p>6.2. 
<a l:href="#faq_06_02">
Как запустить две звуковые дорожки?</a></p>
<p>6.3. 
<a l:href="#faq_06_03">
Как при переходе на новую локацию прервать одну мелодию и запустить другую?</a></p>
<p>6.4. 
<a l:href="#faq_06_04">
Как перезапустить звуковую дорожку?</a></p>
<p>6.5. 
<a l:href="#faq_06_05">
Как приглушить музыку?</a></p>
<p>6.6. 
<a l:href="#faq_06_06">
Как зациклить мелодию?</a></p>
<p>6.7. 
<a l:href="#faq_06_07">
Как сделать плейлист?</a></p>
<p><a l:href="#link_06">
Источники и дополнительные материалы</a></p>

</section>

<section id="7-voprosy-o-giperssylkah"><title>
<p>7. Вопросы о гиперссылках</p>
</title>

<p>7.1. 
<a l:href="#faq_07_01">
Как делать гиперссылки, по нажатию на которые выполняется код?</a>

 | Как делать кликабельный текст? | Как сделать, чтобы по нажатию на текст что-то происходило?</p>
<p>7.2. 
<a l:href="#faq_07_02">
Как менять цвет гиперссылки?</a></p>
<p>7.3. 
<a l:href="#faq_07_03">
Как помещать в гиперссылки сложный код?</a></p>
<p>7.4. 
<a l:href="#faq_07_04">
Как сделать гиперссылки без подчёркивания?</a></p>
<p><a l:href="#link_07">
Источники и дополнительные материалы</a></p>

</section>

<section id="8-est_-li-komanda"><title>
<p>8. Есть ли команда...</p>
</title>

<p>8.1. 
<a l:href="#faq_08_01">
Какой командой можно очистить окно дополнительного описания?</a></p>
<p>8.2. 
<a l:href="#faq_08_02">
Существует ли команда для того, чтобы получить название текущей локации?</a></p>
<p>8.3. 
<a l:href="#faq_08_03">
Какой командой можно вывести текст в окно дополнительного описания?</a></p>
<p>8.4. 
<a l:href="#faq_08_04">
Есть ли команда, которая делает выход из игры?</a></p>
<p><a l:href="#link_08">
Источники и дополнительные материалы</a></p>

</section>

<section id="9-voprosy-o-izobrazheniiah"><title>
<p>9. Вопросы о изображениях</p>
</title>

<p>9.1. 
<a l:href="#faq_09_01">
Как вставить картинку в игру?</a></p>
<p>9.2. 
<a l:href="#faq_09_02">
Можно ли вставить в игру gif-файл?</a></p>
<p>9.3. 
<a l:href="#faq_09_03">
Как вставить картинку в действие?</a></p>
<p>9.4. 
<a l:href="#faq_09_04">
Как поставить картинку фоном?</a></p>
<p>9.5. 
<a l:href="#faq_09_05">
Как выводить изображения послойно? Накладывать друг на друга?</a></p>
<p>9.6. 
<a l:href="#faq_09_06">
Как сделать кликабельное изображение?</a>

 | Как сделать так, чтобы при щелчке по изображению выполнялись какие-то действия?</p>
<p>9.7. 
<a l:href="#faq_09_07">
Как сделать сменяемое изображение на локации?</a></p>
<p>9.8. 
<a l:href="#faq_09_08">
Как сделать вывод рандомного изображения?</a></p>
<p><a l:href="#link_09">
Источники и дополнительные материалы</a></p>

</section>

<section id="10-interfejs-dizajn-ukrasheniia"><title>
<p>10. Интерфейс, дизайн, украшения</p>
</title>

<p>10.1. 
<a l:href="#faq_10_01">
Для чего нужен оператор `REFINT`, и как он работает?</a></p>
<p>10.2. 
<a l:href="#faq_10_02">
Как изменить цвет фона в игре?</a></p>
<p>10.3. 
<a l:href="#faq_10_03">
Как изменить формат части текста? Размер, цвет, наклон и т.д.?</a></p>
<p>10.4. 
<a l:href="#faq_10_04">
Как сделать красивый фон в классическом плеере?</a></p>
<p>10.5. 
<a l:href="#faq_10_05">
Хочу, чтоб в игре окна располагались определённым образом. Как это сделать?</a></p>
<p>10.6. 
<a l:href="#faq_10_06">
Можно ли задавать размер окон из кода игры? Чтобы в одной локации были одни настройки, в другой — другие.</a></p>
<p>10.7. 
<a l:href="#faq_10_07">
Настроил расположение окна предпросмотра, но когда выключаю его, другие окна смещаются, как это исправить?</a></p>
<p>10.8. 
<a l:href="#faq_10_08">
Как изменить цвет подсветки действий?</a></p>
<p>10.9. 
<a l:href="#faq_10_09">
Как изменить цвет фона для отдельного окна?</a></p>
<p>10.10. 
<a l:href="#faq_10_10">
Как сделать плавное появление текста?</a>

 | Как сделать плавное изменение цвета фона? | Как сделать плавное изменение цвета текста?</p>
<p>10.11. 
<a l:href="#faq_10_11">
Как использовать в игре собственный шрифт?</a></p>
<p>10.12. 
<a l:href="#faq_10_12">
С предметов можно снимать выделение, а можно ли снять выделение с действия?</a></p>
<p><a l:href="#link_10">
Источники и дополнительные материалы</a></p>

</section>

<section id="11-voprosy-ob-usloviiah"><title>
<p>11. Вопросы об условиях</p>
</title>

<p>11.1. 
<a l:href="#faq_11_01">
При проверке условия записано просто число, без операции сравнения, но QSP не выдаёт ошибку. Почему?</a></p>
<p>11.2. 
<a l:href="#faq_11_02">
Как сделать так, чтобы действие появлялось только при определённом условии?</a></p>
<p>11.3. 
<a l:href="#faq_11_03">
Видел в одной из игр, как после нажатия на действие, оно становится неактивным. Как это сделать?</a></p>
<p>11.4. 
<a l:href="#faq_11_04">
Как добавить текст, который будет выводиться только при выполнении определённого условия?</a></p>
<p>11.5. 
<a l:href="#faq_11_05">
Как сделать, чтобы в диалоговом окне текст набирался в зависимости от условий? Чтобы при срабатывании одного или обоих условий текст в любом случае выводился? Логическое ИЛИ (OR).</a></p>
<p>11.6. 
<a l:href="#faq_11_06">
Как упростить условие с логическим И (AND)?</a></p>
<p>11.7. 
<a l:href="#faq_11_07">
Как упростить взаимоисключающие условия? Логическое XOR.</a></p>
<p><a l:href="#link_11">
Источники и дополнительные материалы</a></p>

</section>

<section id="12-voprosy-o-dynamic"><title>
<p>12. Вопросы о DYNAMIC</p>
</title>

<p>12.1. 
<a l:href="#faq_12_01">
Зачем нужен оператор dynamic?</a></p>
<p>12.2. 
<a l:href="#faq_12_02">
Можно ли сделать переменную с рандомным (случайным) названием?</a></p>
<p>12.3. 
<a l:href="#faq_12_03">
Создаю действия с помощью цикла, но они работают неправильно. Что делать?</a></p>
<p>12.4. 
<a l:href="#faq_12_04">
Почему не работает dynamic?</a></p>
<p><a l:href="#link_12">
Источники и дополнительные материалы</a></p>

</section>

<section id="13-ne-rabotaet"><title>
<p>13. Не работает...</p>
</title>

<p>13.1. 
<a l:href="#faq_13_01">
Рисую таблицу и хочу зафиксировать высоту, но атрибут height не работает.</a></p>
<p>13.2. 
<a l:href="#faq_13_02">
Пытаюсь использовать разные HTML-теги в игре, но они не работают — просто не выводятся. Почему?</a></p>
<p>13.3. 
<a l:href="#faq_13_03">
Не работает IIF!</a></p>
<p>13.4. 
<a l:href="#faq_13_04">
Пытаюсь сделать кликабельную картинку с помощью тегов MAP и AREA, но ничего не получается.</a>

 | Не выводится картинка, не работает область клика, область клика смещена.</p>
<p>13.5. 
<a l:href="#faq_13_05">
Не работает *pl в действии с goto.</a></p>
<p>13.6. 
<a l:href="#faq_13_08">
Не работает оператор JUMP — не может найти метку.</a></p>
<p>13.7. 
<a l:href="#faq_13_09">
Не работает многострочный код. Как исправить?</a></p>
<p>13.8. 
<a l:href="#faq_13_10">
Не работает многострочный код. Как исправить?</a></p>
<p>13.9. 
<a l:href="#faq_13_11">
Сколько END`ов нужно добавить?</a></p>
<p>13.10. 
<a l:href="#faq_13_12">
Не работает условие. Как исправить? (`if skrom&gt;10 and &lt;15`)</a></p>
<p>13.11. 
<a l:href="#faq_13_13">
Не работают десятичные дроби, дробные числа, числа с запятыми!</a></p>
<p><a l:href="#link_13">
Источники и дополнительные материалы</a></p>

</section>

<section id="14-voprosy-o-predmetah"><title>
<p>14. Вопросы о предметах</p>
</title>

<p>14.1. 
<a l:href="#faq_14_01">
Как добавить предмет в окно предметов?</a></p>
<p>14.2. 
<a l:href="#faq_14_02">
Как удалить предмет из окна предметов?</a></p>
<p>14.3. 
<a l:href="#faq_14_03">
Как удалить все предметы?</a></p>
<p>14.4. 
<a l:href="#faq_14_04">
Как добавить предмет в определённую позицию в окне предметов?</a></p>
<p>14.5. 
<a l:href="#faq_14_05">
Как заменить один предмет на другой?</a></p>
<p>14.6. 
<a l:href="#faq_14_06">
Как делать динамические/считаемые предметы?</a>

 | Как делать стакающиеся предметы? | Как делать предметы рядом с названиями которых выводится их количество?</p>
<p>14.7. 
<a l:href="#faq_14_07">
Как добавить предмет с картинкой но без названия?</a></p>
<p>14.8. 
<a l:href="#faq_14_08">
Как сделать, чтоб при щелчке по предмету выполнялся какой-либо код?</a></p>
<p>14.9. 
<a l:href="#faq_14_09">
Как снять выделение предмета?</a>

 | Как сделать, чтобы выбранный предмет можно было кликнуть ещё раз?</p>
<p>14.10. 
<a l:href="#faq_14_10">
Как сделать два списка предметов? Например для игры за разных персонажей.</a></p>
<p>14.11. 
<a l:href="#faq_14_11">
Как сделать, чтобы плеер выполнял определённый код при добавлении любого предмета?</a></p>
<p>14.12. 
<a l:href="#faq_14_12">
Как сделать два разных предмета с одинаковыми названиями?</a></p>
<p>14.13. 
<a l:href="#faq_14_13">
Как сделать многоуровневый рюкзак?</a>

 | Как сделать предметы в предметах?</p>
<p>14.14. 
<a l:href="#faq_14_14">
Можно ли выводить предметы не в окне предметов?</a></p>
<p><a l:href="#link_14">
Источники и дополнительные материалы</a></p>

</section>

<section id="15-voprosy-o-stroke-vvoda"><title>
<p>15. Вопросы о строке ввода</p>
</title>

<p>15.1. 
<a l:href="#faq_15_01">
Зачем вообще нужна строка ввода (поле ввода)?</a></p>
<p>15.2. 
<a l:href="#faq_15_02">
Как задействовать строку ввода в игре?</a></p>
<p><a l:href="#link_15">
Источники и дополнительные материалы</a></p>

</section>

<section id="16-voprosy-po-viorstke"><title>
<p>16. Вопросы по вёрстке</p>
</title>

<p>16.1. 
<a l:href="#faq_16_01">
Можно ли писать текст поверх вставленной картинки (не бэкграунда)?</a></p>
<p>16.2. 
<a l:href="#faq_16_02">
Возможно ли сделать плавный переход между локациями?</a></p>
<p>16.3. 
<a l:href="#faq_16_03">
Как расположить картинку справа, а текст слева?</a></p>
<p>16.4. 
<a l:href="#faq_16_04">
Как ограничить размер выводимого изображения?</a></p>
<p>16.5. 
<a l:href="#faq_16_05">
Как сделать рамку окна основного описания?</a>

 | Как сделать, чтобы картинки шли по контуру основного окна?</p>
<p>16.6. 
<a l:href="#faq_16_06">
Как сделать вывод предметов магазина не длинным списком, а в виде таблицы?</a></p>
<p>16.7. 
<a l:href="#faq_16_07">
Можно ли зеркально отразить картинку методами плеера?</a>

 | Можно ли задать максимальную или минимальную ширину элементу? | Можно ли вычислить доступное место в основном окне?</p>
<p>16.8. 
<a l:href="#faq_16_08">
Вывожу в окно табличку, а потом текст, но между текстом и табличкой возникают пустые строки. Что это и как этого избежать?</a></p>
<p>16.9. 
<a l:href="#faq_16_09">
Можно как нибудь вывести текст в два столба в классике? К примеру характеристики персонажей.</a></p>
<p>16.10. 
<a l:href="#faq_16_10">
Как работать с тегами MAP и AREA? Как разметить картинку на кликабельные зоны?</a></p>
<p><a l:href="#link_16">
Источники и дополнительные материалы</a></p>

</section>

<section id="17-voprosy-o-sohraneniiah"><title>
<p>17. Вопросы о сохранениях</p>
</title>

<p>17.1. 
<a l:href="#faq_17_01">
Как запретить игроку самостоятельно сохранять игру?</a></p>
<p>17.2. 
<a l:href="#faq_17_02">
Во время теста игры делал сохранения, затем внёс в игру несколько правок, но сохранения перестали загружаться. Почему так происходит, и что теперь делать?</a></p>
<p>17.3. 
<a l:href="#faq_17_03">
Как сделать чекпойнты в игре?</a></p>
<p>17.4. 
<a l:href="#faq_17_04">
Как написать действие, которое при каждом клике сохраняло бы игру в файлы "1.sav" и "2.sav" поочерёдно?</a></p>
<p><a l:href="#link_17">
Источники и дополнительные материалы</a></p>

</section>

<section id="18-voprosy-o-fajlah-i-moduliah"><title>
<p>18. Вопросы о файлах и модулях</p>
</title>

<p>18.1. 
<a l:href="#faq_18_01">
Чем отличаются команды `inclib` и `openqst`?</a></p>
<p>18.2. 
<a l:href="#faq_18_02">
Как сделать лаунчер?</a></p>
<p>18.3. 
<a l:href="#faq_18_03">
Мне нужно узнать, есть ли в папке файл (картинка, музыка и т.д.). Как это сделать?</a></p>
<p>18.4. 
<a l:href="#faq_18_04">
Перенёс файл игры из одной папки в другую. В Quest Generator пропали все папки. Почему так происходит, и как этого избежать?</a></p>
<p>18.5. 
<a l:href="#faq_18_05">
В папке с игрой стали появляться файлы с расширением `.tmp`. Что это за файлы, нужны они, и как избавиться от их появления?</a></p>
<p><a l:href="#link_18">
Источники и дополнительные материалы</a></p>

</section>

<section id="19-izyski"><title>
<p>19. Изыски</p>
</title>

<p>19.1. 
<a l:href="#faq_19_01">
Как использовать ASCII-графику в QSP?</a></p>
<p>19.2. 
<a l:href="#faq_19_02">
Как вставить в игру видео?</a></p>
<p>19.3. 
<a l:href="#faq_19_03">
Как сделать так, чтобы текст появлялся на экране постепенно? По буквам?</a></p>
<p>19.4. 
<a l:href="#faq_19_04">
Как защитить игру от чита?</a></p>
<p>19.5. 
<a l:href="#faq_19_05">
Как задействовать клавиатуру в игре?</a></p>
<p>19.6. 
<a l:href="#faq_19_06">
Как пропустить прохождение нескольких глав, чтобы протестировать вновь написанную главу и только её?</a></p>
<p>19.7. 
<a l:href="#faq_19_07">
Как из под плеера выполнить произвольную строку кода?</a></p>
<p>19.8. 
<a l:href="#faq_19_08">
Как узнать, на каком устройстве запущена игра? Телефон, компьютер, планшет?</a></p>
<p>19.9. 
<a l:href="#faq_19_09">
Как обновлять переменные на экране?</a></p>
<p>19.10. 
<a l:href="#faq_19_10">
Как сделать, чтобы текст выводился снизу вверх?</a></p>
<p><a l:href="#link_19">
Источники и дополнительные материалы</a></p>

</section>

<section id="20-konkretnye-zadachi"><title>
<p>20. Конкретные задачи</p>
</title>

<p>20.1. 
<a l:href="#faq_20_01">
Как сделать возврат на предыдущую локацию?</a></p>
<p>20.2. 
<a l:href="#faq_20_02">
Как проверить число на чётность?</a></p>
<p>20.3. 
<a l:href="#faq_20_03">
Как сделать шанс на выпадение определённой вещи? Например 25 процентный шанс на то, что в сундуке окажется золотая чаша?</a></p>
<p>20.4. 
<a l:href="#faq_20_04">
Как сделать, чтобы текст выводился не внизу окна основного описания, а сверху?</a></p>
<p>20.5. 
<a l:href="#faq_20_05">
Как можно удалить часть текста из описания?</a></p>
<p>20.6. 
<a l:href="#faq_20_06">
Как вывести на экран HTML-разметку, не отключая режим распознавания HTML? То есть при `usehtml=1`.</a></p>
<p>20.7. 
<a l:href="#faq_20_07">
Есть несколько переменных с разными значениями. Как получить имя переменной, в которой находится наибольшее значение?</a></p>
<p>20.8. 
<a l:href="#faq_20_08">
Как в QSP сравнить два массива?</a></p>
<p>20.9. 
<a l:href="#faq_20_09">
Как сделать вытягивание случайных карт из колоды? Карты вытягиваются несколько раз, но они не должны повторяться.</a></p>
<p>20.10. 
<a l:href="#faq_20_10">
Как отсортировать данные? Например, список персонажей по алфавиту, или набор чисел от меньшего к большему.</a></p>
<p>20.11. 
<a l:href="#faq_20_11">
Как сделать проценты?</a></p>
<p>20.12. 
<a l:href="#faq_20_12">
Как решить задачу по поиску случайного набора слагаемых?</a></p>
<p>20.13. 
<a l:href="#faq_20_13">
Как разредить текст пробелами?</a></p>
<p>20.14. 
<a l:href="#faq_20_14">
Как сделать записную книжку в игре?</a></p>
<p>20.15. 
<a l:href="#faq_20_15">
Как сделать так, чтобы на локацию можно было зайти только один раз?</a></p>
<p>20.16. 
<a l:href="#faq_20_16">
Как заставить действия выводиться в нужном мне порядке?</a></p>
<p>20.17. 
<a l:href="#faq_20_17">
Как сделать в игре книгу? Чтобы её можно было взять и потом прочитать?</a></p>
<p>20.18. 
<a l:href="#faq_20_18">
Как сделать склад, сундук, тайник, место, в котором можно выкладывать и хранить предметы?</a></p>
<p>20.19. 
<a l:href="#faq_20_19">
Как сделать выпадение случайного действия на локации?</a></p>
<p>20.20. 
<a l:href="#faq_20_20">
Как сделать перемещение на случайную локацию?</a></p>
<p>20.21. 
<a l:href="#faq_20_21">
Как сделать случайный предмет?</a></p>
<p>20.22. 
<a l:href="#faq_20_22">
Как узнать, какие переменные есть в игре? Может для этого есть специальная команда?</a></p>
<p>20.23. 
<a l:href="#faq_20_23">
Как убрать преформатирование из HTML-разметки?</a></p>
<p>20.24. 
<a l:href="#faq_20_24">
Упрощённое заполнение массива</a></p>
<p><a l:href="#link_20">
Источники и дополнительные материалы</a></p>

</section>

<section id="21-voprosy-po-quest-generator-v400beta"><title>
<p>21. Вопросы по Quest Generator (v.4.0.0.Beta)</p>
</title>

<p>21.1. 
<a l:href="#faq_21_01">
Мне часто приходится вставлять одинаковые или почти одинаковые кусочки кода. Как автоматизировать этот процесс?</a></p>
<p>21.2. 
<a l:href="#faq_21_02">
Делаю преформатирование пробелами, чтобы появлялась вертикальная полоска, так нагляднее. Нет ли какой-то комбинации клавиш, чтобы не тыкать пробел по пять раз?</a></p>
<p>21.3. 
<a l:href="#faq_21_03">
Как свернуть кусочек кода, написанный под комментарием? В идеале, чтоб остался один только комментарий.</a></p>
<p><a l:href="#link_21">
Источники и дополнительные материалы</a></p>

</section>

<section id="22-ogranicheniia"><title>
<p>22. Ограничения</p>
</title>

<p>22.1. 
<a l:href="#faq_23_01">
Видел в справке ограничение на 100 подключаемых файлов? Это что, я не смогу использовать более ста файлов картинок и музыки?</a></p>
<p>22.2. 
<a l:href="#faq_23_02">
Хочу разместить на локации около 100 действий. Это вообще возможно?</a></p>
<p>22.3. 
<a l:href="#faq_23_03">
Генерирую переменные с помощью оператора dynamic, и вдруг выходит ошибка 123. Что это, и как с этим бороться?</a></p>
<p><a l:href="#link_23">
Источники и дополнительные материалы</a></p>

</section>

<section id="zarezervirovannye-slova-sistemnye-peremennye-spetssimvoly"><title>
<p>Зарезервированные слова, системные переменные, спецсимволы</p>
</title>

<p><a l:href="#faq_80_01">
Операции</a></p>
<p><a l:href="#faq_80_02">
Операторы</a></p>
<p><a l:href="#faq_80_03">
Функции</a></p>
<p><a l:href="#faq_80_04">
Системные переменные</a></p>
<p><a l:href="#faq_80_05">
Иные синтаксемы</a></p>
<p><a l:href="#faq_80_06">
Алфавитный указатель ключевых слов, спецсимволов, синтаксем</a></p>

</section>

<section id="istochniki-i-dopolnitel_nye-materialy"><title>
<p>Источники и дополнительные материалы</p>
</title>


<p>* 
<a l:href="#link_01">
1. В чём разница?</a></p>
<p>* 
<a l:href="#link_02">
2. Вопросы о $COUNTER</a></p>
<p>* 
<a l:href="#link_03">
3. Вопросы о MSG и $INPUT</a></p>
<p>* 
<a l:href="#link_04">
4. Вопросы о меню</a></p>
<p>* 
<a l:href="#link_05">
5. Вопросы по $ONNEWLOC</a></p>
<p>* 
<a l:href="#link_06">
6. Вопросы по звуковым файлам в QSP</a></p>
<p>* 
<a l:href="#link_07">
7. Вопросы о гиперссылках</a></p>
<p>* 
<a l:href="#link_08">
8. Есть ли команда...</a></p>
<p>* 
<a l:href="#link_09">
9. Вопросы о изображениях</a></p>
<p>* 
<a l:href="#link_10">
10. Интерфейс, дизайн, украшения</a></p>
<p>* 
<a l:href="#link_11">
11. Вопросы об условиях</a></p>
<p>* 
<a l:href="#link_12">
12. Вопросы о DYNAMIC</a></p>
<p>* 
<a l:href="#link_13">
13. Не работает...</a></p>
<p>* 
<a l:href="#link_14">
14. Вопросы о предметах</a></p>
<p>* 
<a l:href="#link_15">
15. Вопросы о строке ввода</a></p>
<p>* 
<a l:href="#link_16">
16. Вопросы по вёрстке</a></p>
<p>* 
<a l:href="#link_17">
17. Вопросы о сохранениях</a></p>
<p>* 
<a l:href="#link_18">
18. Вопросы о файлах и модулях</a></p>
<p>* 
<a l:href="#link_19">
19. Изыски</a></p>
<p>* 
<a l:href="#link_20">
20. Конкретные задачи</a></p>
<p>* 
<a l:href="#link_21">
21. Вопросы по Quest Generator (v.4.0.0.Beta)</a></p>
<p>* 
<a l:href="#link_23">
22. Ограничения</a></p>


</section>

</section>
</section>
<section id="faq_01">
<title anchor="how_do_faq" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\00.txt-light">
<p>Как сделать? Ча.Во. F.A.Q.</p>
</title>
<section>
<title anchor="faq_01" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\01_в чём разница\00.txt-light">
<p>1. В чём разница?</p>
</title>
<section id="faq_01_01">
<title head-level="h2">
<p>1.1. В чём разница между `set x=10`, `let x=10` и `x=10`?</p>
</title>

<segment>
<p>В: В чём разница между `set x=10`, `let x=10` и `x=10`?</p>
<p>О:</p>
<p>Никакой разницы нет, Вы можете использовать все три варианта.</p>
</segment>
<p><code>set x=10</code></p>
<p><code>let x=10</code></p>
<p><code>x=10</code></p>
<segment>
<p>Операторы `set` и `let` считаются устаревшими, однако вы можете их использовать для улучшения читаемости кода. Например, если вам нужно объявить сразу несколько переменных, гораздо нагляднее это сделать, используя оператор `set` или `let`:</p>
</segment>
<p><code>set x,y,z = 10,20,30</code></p>
<p><code>let f,b,d = 5,15,137</code></p>

</section>
<section id="faq_01_02">
<title head-level="h2">
<p>1.2. В чём разница между переменной со знаком `$` и без знака `$`?</p>
</title>

<segment>
<p>В: В чём разница между переменной со знаком `$` и без знака `$`?</p>
<p>О:</p>
<p>В QSP данные бывают двух типов: текстовые и целочисленные (числовые). Для работы с текстовыми значениями перед названием переменной ставится знак `$`:</p>
</segment>
<p><code>$string="В эту перменную записана строка текста"</code></p>
<segment>
<p>Для работы с числовыми значениями перед именем переменной знак `$` не ставится:</p>
</segment>
<p><code>box=100</code></p>
<segment>
<p>Различие в работе двух этих типов переменных легко проверить:</p>
</segment>
<p><code>$number="4"</code></p>
<p><code>$count="5"</code></p>
<p><code>*pl $number+$count</code></p>
<p><code>! на экране увидим 45</code></p>
<p><code></code></p>
<p><code>number=4</code></p>
<p><code>count=5</code></p>
<p><code>*pl number+count</code></p>
<p><code>! на экране увидим 9</code></p>
<segment>
<p>Также переменные с символом `$` в начале имени могут хранить кортежи:</p>
</segment>
<p><code>! упаковка данных в кортеж</code></p>
<p><code>$tuple = ("Петя", 23, 191, 87)</code></p>
<p><code>! распаковка данных из кортежа</code></p>
<p><code>$name, age, height, weight = $tuple</code></p>

</section>
<section id="faq_01_03">
<title head-level="h2">
<p>1.3. В чём разница между `' '` (апострофы) и `" "` (кавычки)?</p>
</title>

<segment>
<p>В: В чём разница между `' '` (апострофы) и `" "` (кавычки)?</p>
<p>О:</p>
<p>В поведении двух этих групп символов нет никакой разницы. Они используются, чтобы дать понять плееру, где начинается и где заканчивается строковая константа.</p>
</segment>
<p><code>*pl "Строка текста"</code></p>
<p><code>*nl 'Ещё одна строка текста'</code></p>
<segment>
<p>Две группы символов нужны для того, чтобы мы с вами могли выводить и те и другие на экран. Например:</p>
</segment>
<p><code>*pl 'В кабачке "У Мо" сегодня весело и шумно.'</code></p>
<p><code>*pl "Руг'Ста'Раг сказал: — Что ты хочешь, мора? Хочешь мухомора?"</code></p>
<segment>
<p>Если в строке предполагается использовать обе группы символов, их можно экранировать дублированием:</p>
</segment>
<p><code>! экранируем апострофы</code></p>
<p><code>*pl 'По дороге в кабачок "У Мо" наш старый приятель Руг''Ста''Раг чуть не нарвался на неприятности.'</code></p>
<p><code>! экранируем кавычки</code></p>
<p><code>*pl "По дороге в кабачок ""У Мо"" наш старый приятель Руг'Ста'Раг чуть не нарвался на неприятности."</code></p>
<segment>
<p>Если вам нужно вставить значение какого-либо выражения в строку, вы можете использовать так называемые вложенные выражения (я называю их "подвыражениями", но это не совсем корректно), используя продублированные угловые скобки.</p>
</segment>
<p><code>health=100</code></p>
<p><code>maxhealth=300</code></p>
<p><code>*pl "Ваше здоровье: &lt;&lt;health&gt;&gt;/&lt;&lt;maxhealth&gt;&gt;"</code></p>
<segment>
<p>При этом, когда плеер начнёт выполнять команду `*pl`, он увидит, что в строке присутствуют вложенные выражения и постарается вычислить их значения. В данном случае он подставит вместо переменных их значения, и на экране мы увидим строку:</p>
</segment>
<p><code>Ваше здоровье: 100/300</code></p>
<segment>
<p>Есть ещё третья группа символов — фигурные скобки, и вот их поведение отличается от двух предыдущих.</p>
</segment>


<p>* 
В фигурных скобках нельзя оставлять открытыми апострофы или кавычки.</p>
<p>* 
В момент выполнения команды, в которой есть фигурные скобки, в фигурных скобках не "раскрываются" вложенные выражения.</p>



</section>
<section id="faq_01_04">
<title head-level="h2">
<p>1.4. В чём разница между `*pl "строка"` и просто `"строка"`?</p>
</title>

<segment>
<p>В: В чём разница между `*pl "строка"` и просто `"строка"`?</p>
<p>О:</p>
<p>Любое значение, записанное без оператора, плеер автоматически выводит на экран, как если бы перед этим значением стоял оператор `*pl`:</p>
</segment>
<p><code>*pl "Строка текста, после которой будет вставлен перевод каретки."</code></p>
<p><code>"Строка текста, после которой будет вставлен перевод каретки."</code></p>
<segment>
<p>На самом деле значение, записанное без оператора, передаётся так называемому "неявному оператору". То есть оператору, название которого попросту никогда не указывается. В большинстве случаев неявный оператор ведёт себя так же, как оператор `*pl`:</p>
</segment>
<p><code>123</code></p>
<p><code>triz+bort</code></p>
<p><code>48*59-rtu</code></p>
<p><code>$mid("какая-то строка",10)</code></p>
<segment>
<p>Однако существует одно отличие между неявным оператором и оператором `*pl`.</p>
<p>Если выражение, переданное неявному оператору, не возвращает никакого результата (например, пользовательская функция), плеер просто ничего не выведет на экран.</p>
<p>Если выражение, которое не возвращает никакого результата, передано оператору `
<emphasis>
pl`, оператор `</emphasis>

pl` выведет на экран пустую строку и сделает перевод каретки.</p>
</segment>
<p><code># start</code></p>
<p><code>*pl 'explicit'</code></p>
<p><code>*pl $func('foo')</code></p>
<p><code>*pl 'explicit'</code></p>
<p><code></code></p>
<p><code>'implicit'</code></p>
<p><code>$func('foo')</code></p>
<p><code>'implicit'</code></p>
<p><code>--- start ---</code></p>
<p><code></code></p>
<p><code># foo</code></p>
<p><code>N=45+67</code></p>
<p><code>--- foo ---</code></p>

</section>
<section id="faq_01_05">
<title head-level="h2">
<p>1.5. Чем отличаются эти две команды? `
<emphasis>
pl "&lt;&lt;$perem&gt;&gt;"` и `</emphasis>

pl $perem`</p>
</title>

<segment>
<p>В: Чем отличаются эти две команды?</p>
</segment>
<p><code>*pl "&lt;&lt;$perem&gt;&gt;"</code></p>
<p><code>*pl $perem</code></p>
<segment>
<p>О:</p>
<p>На экране различий Вы не увидите, да и в игре особой разницы не почувствуете. Результат их работы одинаков.</p>
<p>А вот работают они по разному.</p>
<p>Когда плеер встречает первую команду, он видит оператор `
<emphasis>
pl`, и что этому оператору передано некое значение — строка. Так же он видит, что в строке присутствует подвыражение. Первым делом он пытается вычислить значение этого подвыражения, которое соответствует значению переменной `$perem`. Это значение плеер подставляет в строку. Таким образом у него получается текстовая константа. Затем он берёт значение этой текстовой константы и передаёт оператору `</emphasis>

pl`, который и выводит значение на экран.</p>
<p>Когда плеер встречает вторую команду, он просто получает значение переменной `$perem` и передаёт его оператору.</p>
<p>Первая команда принуждает плеер выполнять двойную работу. Это будет заметно при больших объёмах вычислений. Первая команда выполняется примерно в 1,3 раза дольше.</p>
</segment>

</section>
<section id="faq_01_06">
<title head-level="h2">
<p>1.6. В чём разница между `dynamic` и `dyneval`?</p>
</title>

<segment>
<p>В: В чём разница между `dynamic` и `dyneval`?</p>
<p>О:</p>
<p>И `dynamic`, и `dyneval` выполняют код, который мы передаём им в виде текста. Однако разница есть. И она заключается в том, что `dynamic` — это оператор, а `dyneval` — это функция. Функция умеет `возвращать` результат. Сравните работу этих двух команд:</p>
</segment>
<p><code>dynamic "result=1 &amp; act 'Прибавить единицу (0)': dyn=dyn+1"</code></p>
<p><code>dyneval("result=2 &amp; act 'Прибавить единицу (1)': dyn=dyn+1")</code></p>
<segment>
<p>Первая просто выведет действие в окно действий, а вторая выведет действие, и число `2` на экран. Потому что результатом работы этой функции в данном случае станет `2`.</p>
<p>Чтобы воспользоваться возможностями `dyneval`, следует в конце вычислений присвоить результат переменной `result`:</p>
</segment>
<p><code>dyneval("result=500*13/45")</code></p>
<segment>
<p>Подобно `gosub` и `func`, `dynamic` и `dyneval` работают с аргументами:</p>
</segment>
<p><code>dynamic "hp=hp+args[0]</code></p>
<p><code>if hp&gt;hp_max:</code></p>
<p><code>hp=hp_max</code></p>
<p><code>elseif hp&lt;0:</code></p>
<p><code>hp=0</code></p>
<p><code>end",23</code></p>
<p><code></code></p>
<p><code>dyneval("result=1</code></p>
<p><code>:for</code></p>
<p><code>if args[1]&gt;0:</code></p>
<p><code>result=result*args[0]</code></p>
<p><code>args[1]-=1</code></p>
<p><code>jump 'for'</code></p>
<p><code>end",57,3)</code></p>
<segment>
<p>Если переданный в `dyneval` код не содержит переменную `$result` (ей не присваивается значение), при использовании неявного оператора такая функция `dyneval` будет работать, как оператор `dynamic`.</p>
</segment>
<p><code>"Первая строка"</code></p>
<p><code>dyneval("HP=HP+34")</code></p>
<p><code>"Последняя строка"</code></p>

</section>
<section id="faq_01_07">
<title head-level="h2">
<p>1.7. В чём разница между `gt` и `goto`?</p>
</title>

<segment>
<p>В: В чём разница между `gt` и `goto`?</p>
<p>О:</p>
<p>Никакой разницы нет. `GT` это краткая форма `GOTO`. Программисты любят всё сокращать. У некоторых команд в QSP есть полная и краткая формы записи.</p>
</segment>


<segment>
<p>* 
Операторы:</p>
</segment>


<p>* 

`
<emphasis>
clear` или `</emphasis>

clr` — очистка окна основного описания</p>
<p>* 
`clear` или `clr` — очистка окна дополнительного описания</p>
<p>* 
`cmdclear` или `cmdclr` — очистка поля ввода</p>
<p>* 
`unselect` или `unsel` — снимает выделение с выделенного предмета</p>
<p>* 
`gosub` или `gs` — вызов указанной локации без перехода на неё</p>
<p>* 
`goto` или `gt` — переход на указанную локацию</p>
<p>* 
`xgoto` или `xgt` — переход на указанную локацию без очистки окна основного описания</p>




<segment>
<p>* 
Функции:</p>
</segment>


<p>* 
`$user_text` и `$usrtxt` — возвращает текст, введённый в поле ввода игроком</p>




<segment>
<p>Также, если вы пишете собственные функции с помощью отдельных локаций, вы можете использовать сокращённую запись для вызова таких функций:</p>
</segment>
<p><code>func('foo', 34, 56)</code></p>
<p><code>! эквивалентно</code></p>
<p><code>@foo(34, 56)</code></p>

</section>
<section id="faq_01_08">
<title head-level="h2">
<p>1.8. Чем отличается `goto` от `gosub`?</p>
</title>

<segment>
<p>В: Чем отличается `goto` от `gosub`?</p>
<p>О:</p>
<p>Разница между этими двумя командами заключается в том, как ведёт себя плеер при их выполнении.</p>
<p>Команда `goto` осуществляет переход на указанную локацию:</p>
</segment>
<p><code>goto "комната"</code></p>
<segment>
<p>При этом происходит следующее:</p>
</segment>


<p>1. 
Плеер, выполняя какой-то код, встречает команду `goto` и видит название локации, указанное в качестве аргумента.</p>
<p>2. 
Плеер "переходит" на указанную локацию. Технически это означает, что функция `$curloc` будет возвращать название локации, на которую был осуществлён "переход".</p>
<p>3. 
При переходе по `goto` плеер очищает окно основного описания и окно действий.</p>
<p>4. 
Далее плеер выводит в окно основного описания "Базовое описание", а в окно действий — "базовые действия". После чего выполняет код из поля "Выполнить при посещении".</p>
<p>5. 

Закончив выполнять код из поля "Выполнить при посещении", плеер (опционально) выполняет код из локации-обработчика события "переход на новую локацию" (см. 
<a l:href="#faq_80_04_onnewloc">
`onNewLoc`</a>), а затем перестаёт что-либо делать и ждёт участия игрока.</p>


<segment>
<p>Таким образом, если после команды `goto` были написаны ещё какие-то команды, эти команды плеер не выполняет, так как уже "находится" на другой локации.</p>
<p>Команда `gosub` не осуществляет перехода на указанную локацию, она осуществляет её вызов:</p>
</segment>
<p><code>gosub "комната"</code></p>
<segment>
<p>Здесь плеер ведёт себя по-другому:</p>
</segment>


<p>1. 
Плеер, выполняя какой-то код, встречает команду `gosub` и видит название локации, указанное в качестве аргумента.</p>
<p>2. 
Плеер прерывает выполнение текущего кода, и переходит к локации, указанной в качестве аргумента к `gosub`.</p>
<p>3. 
При этом НЕ ПРОИСХОДИТ очистка окна основного описания и окна действий.</p>
<p>4. 
В окно основного описания добавляется текст из "Базового описания", а в окно действий — "базовые действия" локации, указанной аргументом к `gosub`. Потом выполняется код этой локации из поля "Выполнить при посещении".</p>
<p>5. 
Закончив выполнять код из поля "Выполнить при посещении", плеер возвращается к выполнению кода на той локации, где была встречена команда `gosub` и продолжает выполнение этого кода уже после команды `gosub`.</p>


<segment>
<p>Таким образом команда `gosub` позволяет использовать локации как подпрограммы. Плеер обрабатывает эти локации, но технически не "переходит" на них.</p>
<p>Отличие же `xgoto` от `goto` заключается лишь в одном: при переходе по `xgoto` НЕ ПРОИСХОДИТ очистка окна основного описания.</p>
</segment>

</section>
</section>
<section id="faq_02">
<title anchor="faq_02" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\02_counter\00.txt-light">
<p>2. Вопросы о $COUNTER</p>
</title>
<section id="faq_02_01">
<title head-level="h2">
<p>2.1. Как сделать, чтобы значение переменной изменялось с течением времени?</p>
</title>

<segment>
<p>В: Как сделать, чтобы значение переменной изменялось с течением времени?</p>
<p>О:</p>
<p>Вы можете написать любое событие, происходящее с течением действительного времени, если будете использовать локацию-счётчик.</p>
<p>Для начала нужно создать локацию-счётчик:</p>
</segment>


<p>* 
создаём локацию, название может быть любым, например "реалтайм".</p>
<p>* 
указываем плееру, какую локацию ему нужно использовать как локацию-счётчик. Пишем, например на самой первой локации в игре:</p>
<p><code>$counter="реалтайм"</code></p>
<segment>
<p>По умолчанию обращение к локации-счётчику выполняется каждые пол секунды. Если нужно изменить период обращения, воспользуйтесь оператором `settimer`. В качестве аргумента этому оператору указывается период обращения к локации-счётчику в миллисекундах:</p>
</segment>
<p><code>! обращение к локации-счётчику каждые 100 мс.</code></p>
<p><code>settimer 100</code></p>
<segment>
<p>Теперь на локации-счётчике пишем требуемый код. Например, данный код будет увеличивать значение переменной `health` на 1 каждые пять секунд:</p>
</segment>
<p><code>! фиксируем, в какое время обратились к локации-счётчику</code></p>
<p><code>local time_now = msecscount</code></p>
<p><code>if timer=0 or time_now&gt;=(timer+5000):</code></p>
<p><code>! если переменной timer не присвоено значение</code></p>
<p><code>! или текущее время превышает timer+5000 либо равно ему</code></p>
<p><code>! фиксируем в timer текущее время</code></p>
<p><code>timer = time_now</code></p>
<p><code>! повышаем health на 1</code></p>
<p><code>health = health+1</code></p>
<p><code>! закрываем условие</code></p>
<p><code>end</code></p>
<p><code>! переменные timer и health являются глобальными</code></p>
<segment>
<p>Довольно простой код. Функция `msecscount` возвращает, сколько прошло миллисекунд с момента начала игры.</p>
</segment>

</section>
<section id="faq_02_02">
<title head-level="h2">
<p>2.2. Как сделать, чтобы из одной локации меня через пару секунд перебрасывало в другую локацию?</p>
</title>

<segment>
<p>В: Как сделать, чтобы из одной локации меня через пару секунд перебрасывало в другую локацию?</p>
<p>О:</p>
<p>Вы можете написать любое событие, происходящее с течением действительного времени, если будете использовать локацию-счётчик.</p>
<p>Для начала нужно создать локацию-счётчик:</p>
</segment>


<p>* 
создаём локацию, название может быть любым, например "реалтайм".</p>
<p>* 
указываем плееру, какую локацию ему нужно использовать, как локацию-счётчик. Пишем, например на самой первой локации в игре:</p>
<p><code>$counter="реалтайм"</code></p>
<segment>
<p>По умолчанию обращение к локации-счётчику выполняется каждые пол секунды. Если нужно изменить период обращения, воспользуйтесь оператором `settimer`. В качестве аргумента этому оператору указывается период обращения к локации-счётчику в миллисекундах:</p>
</segment>
<p><code>! обращение к локации-счётчику каждые 100 мс.</code></p>
<p><code>settimer 100</code></p>
<segment>
<p>Теперь на локации-счётчике пишем требуемый код. Например, данный код будет перебрасывать на локацию "комната" через 4 секунды после того, как игрок зашёл на локацию "коридор":</p>
</segment>
<p><code>! фиксируем, в какое время обратились к локации-счётчику</code></p>
<p><code>local time_now = msecscount</code></p>
<p><code>if $curloc="коридор":</code></p>
<p><code>! если текущая локация "коридор"</code></p>
<p><code>! фиксируем в timer время, в какое должен произойти переход</code></p>
<p><code>if timer=0: timer=time_now+4000</code></p>
<p><code>if time_now&gt;=timer and timer&gt;0:</code></p>
<p><code>! если текущее время достигло нужного</code></p>
<p><code>! записываем в переменную timer -1,</code></p>
<p><code>! чтобы больше этот код не исполнялся</code></p>
<p><code>timer=-1</code></p>
<p><code>! совершаем переход</code></p>
<p><code>goto "комната"</code></p>
<p><code>! закрываем условие</code></p>
<p><code>end</code></p>
<p><code>! закрываем условие</code></p>
<p><code>end</code></p>
<p><code>! переменная timer являюется глобальной</code></p>
<segment>
<p>Довольно простой код. Функция `msecscount` возвращает, сколько прошло миллисекунд с момента начала игры.</p>
</segment>

</section>
<section id="faq_02_03">
<title head-level="h2">
<p>2.3. Как сделать, чтобы через пару секунд после входа на локацию появлялось новое действие?</p>
</title>

<segment>
<p>В: Как сделать, чтобы через пару секунд после входа на локацию появлялось новое действие?</p>
<p>О:</p>
<p>Вы можете написать любое событие, происходящее с течением действительного времени, если будете использовать локацию-счётчик.</p>
<p>Для начала нужно создать локацию-счётчик:</p>
</segment>


<p>* 
создаём локацию, название может быть любым, например "реалтайм".</p>
<p>* 
указываем плееру, какую локацию ему нужно использовать, как локацию-счётчик. Пишем, например на самой первой локации в игре:</p>
<p><code>$counter="реалтайм"</code></p>
<segment>
<p>По умолчанию обращение к локации-счётчику выполняется каждые пол секунды. Если нужно изменить период обращения, воспользуйтесь оператором `settimer`. В качестве аргумента этому оператору указывается период обращения к локации-счётчику в миллисекундах:</p>
</segment>
<p><code>! обращение к локации-счётчику каждые 100 мс.</code></p>
<p><code>settimer 100</code></p>
<segment>
<p>Теперь на локации-счётчике пишем требуемый код. Например, данный код будет создавать действие "Шагнуть в портал" через 7 секунд после входа на локацию "зал_с_порталами":</p>
</segment>
<p><code>! фиксируем, в какое время обратились к локации-счётчику</code></p>
<p><code>local time_now=msecscount</code></p>
<p><code>if $curloc="зал_с_порталами":</code></p>
<p><code>! если текущая локация "зал_с_порталами"</code></p>
<p><code>! фиксируем в timer время, когда должно появиться действие</code></p>
<p><code>if timer=0: timer=time_now+7000</code></p>
<p><code>if time_now&gt;=timer and timer&gt;0:</code></p>
<p><code>! если текущее время достигло нужного</code></p>
<p><code>! записываем в переменную timer -1,</code></p>
<p><code>! чтобы больше этот код не исполнялся</code></p>
<p><code>timer=-1</code></p>
<p><code>! создаём действие</code></p>
<p><code>act "Шагнуть в портал":</code></p>
<p><code>! код в действии</code></p>
<p><code>goto "лес_темносилья"</code></p>
<p><code>! закрываем действие</code></p>
<p><code>end</code></p>
<p><code>! закрываем условие</code></p>
<p><code>end</code></p>
<p><code>! закрываем условие</code></p>
<p><code>end</code></p>
<p><code>! переменная timer являюется глобальной</code></p>
<segment>
<p>Довольно простой код. Функция `msecscount` возвращает, сколько прошло миллисекунд с момента начала игры.</p>
</segment>

</section>
<section id="faq_02_04">
<title head-level="h2">
<p>2.4. Как сделать, чтобы цикл выполнялся параллельно остальному коду, а не прерывал его?</p>
</title>

<segment>
<p>В: Как сделать, чтобы цикл выполнялся параллельно остальному коду, а не прерывал его?</p>
<p>Дело в том, что в цикле много операций, и пока он не выполнится, игра висит. Можно ли сделать так, чтобы цикл выполнялся, но игра продолжалась?</p>
<p>О:</p>
<p>В этом случае нужно использовать локацию-счётчик. Если игра может продолжаться даже пока цикл не выполнен, то локация-счётчик позволит распределить вычисления цикла во времени. Однако, `это вовсе не означает, что код локации-счётчика выполняется параллельно коду остальной игры`. Плеер только лишь прерывает выполнение основного кода (с определённой периодичностью) и выполняет код на локации-счётчике, затем продолжает выполнение основного кода.</p>
<p>Для начала нужно создать локацию-счётчик:</p>
</segment>


<p>* 
создаём локацию, название может быть любым, например "реалтайм".</p>
<p>* 
указываем плееру, какую локацию ему нужно использовать, как локацию-счётчик. Пишем, например на самой первой локации в игре:</p>
<p><code>$counter="реалтайм"</code></p>
<segment>
<p>По умолчанию обращение к локации-счётчику выполняется каждые пол секунды. Если нужно изменить период обращения, воспользуйтесь оператором `settimer`. В качестве аргумента этому оператору указывается период обращения к локации-счётчику в миллисекундах:</p>
</segment>
<p><code>! обращение к локации-счётчику каждые 100 мс.</code></p>
<p><code>settimer 100</code></p>
<segment>
<p>На локации счётчике пишем непосредственно код для циклических вычислений:</p>
</segment>
<p><code>! чтобы запустить выполнение цикла,</code></p>
<p><code>! необходимо переменной цикл_вкл присвоить единицу</code></p>
<p><code>if цикл_вкл=1:</code></p>
<p><code>! если цикл запущен</code></p>
<p><code>! увеличиваем частоту обращения к локации-счётчику</code></p>
<p><code>settimer 10</code></p>
<p><code>if i&lt;1000:</code></p>
<p><code>! если значение счётчика не достигло предела</code></p>
<p><code>! выполняем требуемые операции</code></p>
<p><code>! здесь заполняем массив</code></p>
<p><code>data[i]=i</code></p>
<p><code>! увеличиваем счётчик</code></p>
<p><code>i=i+1</code></p>
<p><code>else</code></p>
<p><code>! если значение счётчика достигло предела</code></p>
<p><code>! останавливаем выполнение цикла</code></p>
<p><code>цикл_вкл=0</code></p>
<p><code>! уменьшаем частоту обращения к локации-счётчику</code></p>
<p><code>settimer 500</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<p><code>! все перечисленные переменные - глобальные</code></p>

</section>
</section>
<section id="faq_03">
<title anchor="faq_03" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\03_msg и input\00.txt-light">
<p>3. Вопросы о MSG и $INPUT</p>
</title>
<section id="faq_03_01">
<title head-level="h2">
<p>3.1. Как вывести на экран отдельное окошко с текстом?</p>
</title>

<segment>
<p>В: Как вывести на экран отдельное окошко с текстом?</p>
<p>В: Подскажите аналог команды `alert` в QSP.</p>
<p>О:</p>
<p>Вывод сообщения в виде всплывающего окна в QSP выполняет оператор `msg`. В качестве аргумента оператору указывается строка текста, которую мы хотим увидеть в сообщении:</p>
</segment>
<p><code>msg "Осторожно! Мост разрушен!"</code></p>
<segment>
<p>Обратите внимание, команда `msg` выводит на экран сообщение и прерывает дальнейшее выполнение кода, пока игрок не нажмёт кнопку "ОК".</p>
</segment>

</section>
<section id="faq_03_02">
<title head-level="h2">
<p>3.2. Как вывести на экран окошко, в котором игрок должен ввести текст?</p>
</title>

<segment>
<p>В: Как вывести на экран окошко, в котором игрок должен ввести текст?</p>
<p>В: Подскажите аналог команды `prompt` в QSP.</p>
<p>О:</p>
<p>Чтобы вывести на экран отдельное окошко, в котором игрок должен вводить текст, воспользуйтесь функцией `$input`. В качестве аргумента этой функции указывается строка текста, которую мы хотим увидеть во всплывающем окошке. А возвращает функция текст, введённый игроком.</p>
<p>Например:</p>
</segment>
<p><code>$name=$input("Введите своё имя.")</code></p>
<p><code>*pl "Вас зовут &lt;&lt;$name&gt;&gt;."</code></p>
<segment>
<p>При выполнении этого кода на экране появится окошко с текстом "Введите своё имя." и полем ввода. Если игрок введёт в этом поле слово "Вася", то переменной `$name` присвоится значение "Вася". Следующая команда выведет на экран текст "Вас зовут Вася."</p>
<p>Обратите внимание, пока игрок не нажмёт кнопку "ОК", или "Отмена", выполнение всего остального кода будет приостановлено.</p>
</segment>

</section>
<section id="faq_03_03">
<title head-level="h2">
<p>3.3. Как прикрутить возможность выбора варианта к окну msg?</p>
</title>

<segment>
<p>В: Как прикрутить возможность выбора варианта к окну msg?</p>
<p>В: Подскажите аналог команды `confirm` в QSP.</p>
<p>О:</p>
<p>В классическом плеере у `msg` нет такой возможности, поскольку `msg` не возвращает значений. Вы можете использовать функцию `$input`, и ограничить для игрока возможные варианты ответов:</p>
</segment>
<p><code>:loop</code></p>
<p><code>! выводим на экран окошко с полем ввода, а результат,</code></p>
<p><code>! введёный игроком, возвращаем переменной $answer</code></p>
<p><code>$answer = $INPUT ('Хотите продолжить (д/н)?')</code></p>
<p><code>! чтобы не учитывать регистр, переводим значение в нижний регистр</code></p>
<p><code>$answer=$LCASE($answer)</code></p>
<p><code>! проверяем, правильный ли ответ ввёл игрок</code></p>
<p><code>IF $answer = 'д':</code></p>
<p><code>! если ответ "д" переходим к локации, продолжающей игру</code></p>
<p><code>goto "далее"</code></p>
<p><code>ELSEIF $answer = 'н':</code></p>
<p><code>! если ответ "н" переходим к локации, прерывающей игру</code></p>
<p><code>goto "конец"</code></p>
<p><code>ELSE</code></p>
<p><code>! если игрок ввёл неверный ответ, или не ввёл ничего</code></p>
<p><code>! перепрыгиваем на метку loop</code></p>
<p><code>JUMP 'loop'</code></p>
<p><code>END</code></p>
<segment>
<p>Есть вариант использовать всплывающее меню в качестве диалогового окна, но это не очень хороший вариант, так как всплывающее меню появляется точно под курсором мышки и выглядит совсем не как диалоговое окно. Тем не менее вариант рабочий:</p>
</segment>
<p><code># start</code></p>
<p><code>*pl "На следующей локации демонстрируется использование меню в качестве даилогового окна для выбора двух вариантов"</code></p>
<p><code>$dialog[]="Сообщение: кошелёк или жизнь:dial_loc:?"</code></p>
<p><code>$dialog[]="&gt; Кошелёк:dial_loc"</code></p>
<p><code>$dialog[]="&gt; Жизнь:dial_loc"</code></p>
<p><code>act "Перейти в следующую локацию":</code></p>
<p><code>goto 'room'</code></p>
<p><code>end</code></p>
<p><code>-- start</code></p>
<p><code></code></p>
<p><code># room</code></p>
<p><code>refint &amp; ! данная функция принудительно обновит содержимое окон плеера при входе на локацию</code></p>
<p><code>:loop</code></p>
<p><code>menu '$dialog'</code></p>
<p><code>if variant&lt;&gt;1: jump 'loop'</code></p>
<p><code>-- room</code></p>
<p><code></code></p>
<p><code># dial_loc</code></p>
<p><code>if args[0]=1:</code></p>
<p><code>! данный пункт меню не работает</code></p>
<p><code>elseif args[0]=2:</code></p>
<p><code>*pl "Вы выбрали вариант кошелёк"</code></p>
<p><code>variant=1</code></p>
<p><code>elseif args[0]=3:</code></p>
<p><code>*pl "Вы выбради вариант жизнь"</code></p>
<p><code>variant=1</code></p>
<p><code>end</code></p>
<p><code>-- dial_loc</code></p>
<segment>
<p>В qSpider вы можете написать собственное такое окошко, используя CSS и JavaScript.</p>
</segment>

</section>
<section id="faq_03_04">
<title head-level="h2">
<p>3.4. Как сделать ввод имени игроком?</p>
</title>

<segment>
<p>В: Как сделать ввод имени игроком?</p>
<p>О:</p>
<p>Для этого необходимо использовать функцию `$input`. В качестве аргумента этой функции указывается строка текста, которую мы хотим увидеть во всплывающем окошке. А возвращает функция текст, введённый игроком.</p>
<p>Например:</p>
</segment>
<p><code>$name=$input("Введите своё имя.")</code></p>
<segment>
<p>Чтобы игрок не мог проигнорировать ввод имени, нужно зациклить выполнение данного кода, если `$input` возвращает пустую строку:</p>
</segment>
<p><code>loop while $name="":</code></p>
<p><code>$name=$input("Введите своё имя.")</code></p>
<p><code>end</code></p>

</section>
<section id="faq_03_05">
<title head-level="h2">
<p>3.5. Как сделать варианты для ответа через $input?</p>
</title>

<segment>
<p>В: Как увеличить число правильных ответов, которые может ввести игрок?</p>
<p>В: Как сделать варианты для ответа через `$input`?</p>
<p>О:</p>
<p>Можно воспользоваться сложным условием, где перечислены варианты ответа:</p>
</segment>
<p><code>$answer=$TRIM($LCASE($input('Цвет светофора бывает?..')))</code></p>
<p><code>if $answer='красный' OR $answer='желтый' OR $answer='зеленый':</code></p>
<p><code>goto 'win'</code></p>
<p><code>end</code></p>
<segment>
<p>Функция `$trim` обрежет прилегающие пробелы и символы табуляции в возвращённой строке.</p>
<p>Функция `$lcase` переведёт все символы в нижний регистр.</p>
<p>Этот код удобен, если вариантов немного. Однако, если строка условия получается слишком длинной, можно воспользоваться таким способом:</p>
</segment>
<p><code>! заранее вносим варианты ответа в массив:</code></p>
<p><code>$answer_var[0]="красный"</code></p>
<p><code>$answer_var[1]="желтый"</code></p>
<p><code>$answer_var[2]="зеленый"</code></p>
<p><code>! получаем ответ игрока</code></p>
<p><code>$answer=$trim($lcase($input("Цвет светофора бывает?..")))</code></p>
<p><code>! теперь проверяем, есть ли такой вариант в массиве</code></p>
<p><code>if arrpos("$answer_var", $answer)&lt;&gt;-1:</code></p>
<p><code>goto "win"</code></p>
<p><code>end</code></p>

</section>
</section>
<section id="faq_04">
<title anchor="faq_04" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\04_вопросы о меню\00.txt-light">
<p>4. Вопросы о меню</p>
</title>
<section id="faq_04_01">
<title head-level="h2">
<p>4.1. Как сделать меню предмета?</p>
</title>

<segment>
<p>В: Как сделать меню предмета?</p>
<p>О:</p>
<p>Чтобы меню всплывало по щелчку на предмете, нужно задействовать локацию-обработчик выделения предмета. Для этого:</p>
</segment>


<p>* 
создаём локацию и называем, например, "если_предмет_выбран". Название может быть любым.</p>


<segment>
<p>* 
в самой первой локации в игре указываем плееру, какую локацию он должен использовать, как обработчик выделения предмета. Для этого в системную переменную `$onobjsel` вносим имя нашей новой локации:</p>
</segment>
<p><code>$onobjsel="если_предмет_выбран"</code></p>


<segment>
<p>Теперь мы должны определиться с тем, сколько пунктов будет в нашем меню. Допустим, у нас есть предмет "Отвёртка" (добавленный где-то в игре с помощью `addobj "Отвёртка"`), и мы хотим сделать три пункта:</p>
</segment>


<p>* 
Осмотреть</p>
<p>* 
Использовать</p>
<p>* 
Выбросить</p>


<segment>
<p>На каждый пункт меню нам нужно создать отдельную локацию:</p>
</segment>


<p>* 
Для пункта "Осмотреть" локация будет называться "info_screw"</p>
<p>* 
Для пункта "Использовать" локация будет называться "use_screw"</p>
<p>* 
Для пункта "Выбросить" локация будет называться "put_screw"</p>


<segment>
<p>Далее нам нужно завести массив, в котором мы пропишем все наши пункты меню. Назовём его, например, `$меню_отвёртка`:</p>
</segment>
<p><code>$меню_отвёртка[0]="Осмотреть:info_screw"</code></p>
<p><code>$меню_отвёртка[1]="Использовать:use_screw"</code></p>
<p><code>$меню_отвёртка[2]="Выбросить:put_screw"</code></p>
<segment>
<p>(этот код можно прописать на самой первой локации в игре)</p>
<p>Как видите, пункты нужно вписывать в массив, начиная с нулевой ячейки, по порядку. Каждый пункт состоит из двух частей:</p>
</segment>


<p>* 
первая часть — название пункта меню</p>
<p>* 
вторая часть — название локации, которая отвечает за этот пункт меню.</p>


<segment>
<p>Части разделяются двоеточием.</p>
<p>Теперь на локации-обработчике выделения предмета ("если_предмет_выбран") пишем такой код:</p>
</segment>
<p><code>if $selobj="Отвёртка":</code></p>
<p><code>! если выделен предмет отвёртка</code></p>
<p><code>! вывести всплывающее меню</code></p>
<p><code>menu "$меню_отвёртка"</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>! в самом конце локации не забудьте снять выделение с предмета:</code></p>
<p><code>unselect</code></p>
<segment>
<p>В качестве аргумента оператору `menu` передаётся название массива, в который мы прописали пункты меню.</p>
<p>Не забываем прописать код для каждой локации, которая отвечает за выполнение пункта меню:</p>
</segment>


<segment>
<p>* 
локация "info_screw":</p>
</segment>
<p><code>! очищаем окно дополнительного описания</code></p>
<p><code>clr</code></p>
<p><code>! выводим описание отвёртки</code></p>
<p><code>pl "Обыкновенная крестовая отвёртка. Подойдёт для регулирования громкости"</code></p>


<segment>
<p>* 
локация "use_screw"</p>
</segment>
<p><code>! например изменяем значение переменной</code></p>
<p><code>громкость=громкость-50</code></p>
<p><code>! выводим на экран текст</code></p>
<p><code>*nl "Вы сунули отвёртку в ухо и звуки стали тише."</code></p>


<segment>
<p>* 
локация "put_screw"</p>
</segment>
<p><code>! очищаем окно дополнительного описания</code></p>
<p><code>clr</code></p>
<p><code>! выводим текст</code></p>
<p><code>pl "Вы выбросили отвёртку"</code></p>
<p><code>! удаляем предмет</code></p>
<p><code>delobj "Отвёртка"</code></p>


<segment>
<p>Теперь осталось только попробовать, как всё работает.</p>
</segment>

</section>
<section id="faq_04_02">
<title head-level="h2">
<p>4.2. Как сделать разные меню для двух и более предметов?</p>
</title>

<segment>
<p>В: Как сделать разные меню для двух и более предметов?</p>
<p>О:</p>
<p>На каждый предмет, для которого нужно меню, необходимо завести собственный массив.</p>
<p>Например, если у нас есть два предмета "Отвёртка" и "Апельсин":</p>
</segment>
<p><code>! заводим массив с пунктами меню для отвёртки</code></p>
<p><code>$меню_отвёртка[0]="Осмотреть:info_screw"</code></p>
<p><code>$меню_отвёртка[1]="Использовать:use_screw"</code></p>
<p><code>$меню_отвёртка[2]="Выбросить:put_screw"</code></p>
<p><code>! заводим массив с пунктами меню для апельсина</code></p>
<p><code>$меню_апельсин[0]="Осмотреть:info_orange"</code></p>
<p><code>$меню_апельсин[1]="Использовать:use_orange"</code></p>
<p><code>$меню_апельсин[2]="Выбросить:put_orange"</code></p>
<segment>
<p>Само собой необходимо создать локации для каждого из этих пунктов. И на каждой локации прописать нужный код (см. 
<a l:href="#faq_04_01">
"Как сделать меню предмета?"</a>.</p>
<p>Осталось только прописать вызов меню на локации-обработчике выделения предмета (название которой прописано в `$onobjsel`):</p>
</segment>
<p><code>if $selobj="Отвёртка":</code></p>
<p><code>! если выделен предмет "Отвёртка"</code></p>
<p><code>! вызываем меню отвёртки</code></p>
<p><code>menu "$меню_отвёртка"</code></p>
<p><code>end</code></p>
<p><code>if $selobj="Апельсин":</code></p>
<p><code>! если выделен предмет "Апельсин"</code></p>
<p><code>! вызываем меню апельсина</code></p>
<p><code>menu "$меню_апельсин"</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>! ...и так далее по каждому предмету</code></p>
<p><code></code></p>
<p><code>! не забываем снять выделение с предмета в конце</code></p>
<p><code>unselect</code></p>

</section>
<section id="faq_04_03">
<title head-level="h2">
<p>4.3. Как сделать меню в ссылках?</p>
</title>

<segment>
<p>В: Как сделать меню в ссылках?</p>
<p>О:</p>
<p>Меню можно вызвать в любом месте игры, если воспользоваться оператором `menu`.</p>
<p>Можно вызвать прямо из кода локации, можно вызвать при нажатии на действие, а значит можно вызвать и из гиперссылки.</p>
<p>Обычно гиперссылка выводится на экран так:</p>
</segment>
<p><code>*pl "На берёзе выросло несколько &lt;a href=''&gt;яблок&lt;/a&gt;."</code></p>
<segment>
<p>В атрибуте `href`, если бы мы имели дело с html-документом, обычно пишется url — адресс страницы в интернете. Однако в QSP мы можем размещать внутри этого атрибута строки кода. В том числе и строку типа:</p>
</segment>
<p><code>menu "$меню_яблоко"</code></p>
<segment>
<p>Само собой массив `$меню_яблоко[]` должен быть заполнен до вызова меню, например на самой первой локации в игре.</p>
<p>Чтобы плеер понял, что в атрибуте `href` находится не url, а какой-то код, мы должны указать перед этим кодом ключевое слово `EXEC`:</p>
</segment>
<p><code>*pl "На берёзе выросло несколько &lt;a href='exec: '&gt;яблок&lt;/a&gt;."</code></p>
<segment>
<p>Теперь нам нужно вставить после EXEC: нашу строку кода с вызовом меню. Однако, мы уже использовали кавычки ("") для указания границ строки, и апострофы ('') для указания границ атрибута `href`. А в нашей строке кода тоже есть кавычки. Как быть?</p>
<p>Мы можем экранировать кавычки кода от QSP с помощью дублирования:</p>
</segment>
<p><code>*pl "На берёзе выросло несколько &lt;a href='exec:menu ""$меню_яблоко""'&gt;яблок&lt;/a&gt;."</code></p>
<segment>
<p>Или, мы можем экранировать кавычки атрибута href от QSP с помощью того же дублирования:</p>
</segment>
<p><code>*pl "На берёзе выросло несколько &lt;a href=""exec:menu '$меню_яблоко'""&gt;яблок&lt;/a&gt;."</code></p>
<segment>
<p>Эти два варианта равнозначны, используйте тот, что удобнее.</p>
<p>Теперь, когда мы щёлкнем по слову "яблок", на экране появится меню.</p>
</segment>

</section>
<section id="faq_04_04">
<title head-level="h2">
<p>4.4. Как передавать локациям-пунктам меню аргументы?</p>
</title>

<segment>
<p>В: Как передавать локациям-пунктам меню аргументы?</p>
<p>О:</p>
<p>При выполнении кода локации, соответствующей пункту меню, непосредственно в массив args передаётся только номер пункта.</p>
<p>Если у вас фиксированные меню, то Вы можете получить номер пункта из нулевой ячейки массива args и таким образом выполнение любого пункта меню можно разместить на одной локации:</p>
</segment>
<p><code>$меню_отвёртка[0]='Осмотреть:screw_menu'</code></p>
<p><code>$меню_отвёртка[1]='Использовать:screw_menu'</code></p>
<p><code>$меню_отвёртка[2]='Выбросить:screw_menu'</code></p>
<p><code></code></p>
<p><code>! локация "screw_menu"</code></p>
<p><code>if args[0]=1:</code></p>
<p><code>! если передано число 1</code></p>
<p><code>! это пункт меню "Осмотреть"</code></p>
<p><code>clr</code></p>
<p><code>pl "Обыкновенная крестовая отвёртка. Подойдёт для регулирования громкости"</code></p>
<p><code>end</code></p>
<p><code>if args[0]=2:</code></p>
<p><code>! если передано число 2</code></p>
<p><code>! это пункт "Использовать"</code></p>
<p><code>громкость=громкость-50</code></p>
<p><code>*nl "Вы сунули отвёртку в ухо и звуки стали тише."</code></p>
<p><code>end</code></p>
<p><code>if args[0]=3:</code></p>
<p><code>! если передано число 3</code></p>
<p><code>! это пункт "Выбросить"</code></p>
<p><code>clr</code></p>
<p><code>pl "Вы выбросили отвёртку"</code></p>
<p><code>delobj "Отвёртка"</code></p>
<p><code>end</code></p>
<segment>
<p>Этот вариант не будет работать, если меню формируется динамически, т.е. пункты в него добавляются или удаляются по мере прохождения игры, или в зависимости от условий. Тем не менее вы можете узнать, какой именно пункт меню вызвал данную локацию, используя простое решение, предложенное `Werewolf`ом.</p>

<p>Так или иначе вам приходится помещать все пункты меню в массив
<a l:href="#faq_04_04_02">
*</a>:</p>
</segment>
<p><code>$menu_stone[]='Осмотреть:menu_stone'</code></p>
<p><code>$menu_stone[]='Укусить:menu_stone'</code></p>
<p><code>$menu_stone[]='Выбросить:menu_stone'</code></p>
<segment>
<p>Таким образом на локации-обработчике пункта меню, используя значение в `args[0]`, можно получить содержимое ячейки массива, относящейся к данному пункту меню:</p>
</segment>
<p><code>! получаем номер ячейки массива, соответствующей данному пункту меню</code></p>
<p><code>! пункты меню нумеруются с 1, поэтому номер ячейки вычисляем так:</code></p>
<p><code>local i=args[0]-1</code></p>
<p><code>! а дальше проделываем то же, что и для предыдущего варианта,</code></p>
<p><code>! но с небольшими отличиями</code></p>
<p><code></code></p>
<p><code>if $menu_stone[i]='Осмотреть:menu_stone':</code></p>
<p><code>! это пункт меню "Осмотреть"</code></p>
<p><code>clr</code></p>
<p><code>pl "Обыкновенный камень. Подойдёт для изготовления молний Индры."</code></p>
<p><code>end</code></p>
<p><code>if $menu_stone[i]='Укусить:menu_stone':</code></p>
<p><code>! это пункт "Укусить"</code></p>
<p><code>*nl "Вы вонзили зубы в твёрдую плоть камня. Камень оказался прочнее."</code></p>
<p><code>end</code></p>
<p><code>if $menu_stone[i]='Выбросить:menu_stone':</code></p>
<p><code>! это пункт "Выбросить"</code></p>
<p><code>clr</code></p>
<p><code>pl "Вы выбросили камень."</code></p>
<p><code>delobj "Камень"</code></p>
<p><code>end</code></p>
<segment>
<p>Лично я рекомендую заводить на каждый пункт меню отдельную локацию, просто делать сами пункты меню более универсальными:</p>
</segment>


<segment>
<p>* 
Формируем меню для предметов, например на самой первой локации в игре:</p>
</segment>
<p><code>$меню_предмет[]="Осмотреть:info"</code></p>
<p><code>$меню_предмет[]="Использовать:use"</code></p>
<p><code>$меню_предмет[]="Выбросить:put"</code></p>


<segment>
<p>* 
На локации-обработчике выделения предмета ($onobjsel) код может быть такой:</p>
</segment>
<p><code>! записываем название выделенного предмета в переменую</code></p>
<p><code>$object=$selobj</code></p>
<p><code>! сразу можно снять выделение</code></p>
<p><code>unselect</code></p>
<p><code>if $object="Отвёртка" or $object="Апельсин":</code></p>
<p><code>! если это нужный нам предмет</code></p>
<p><code>! вызываем меню</code></p>
<p><code>menu "$меню_предмет"</code></p>
<p><code>end</code></p>


<segment>
<p>* 
На локациях-пунктах меню предметов используем условия, и по значению переменной `$object` определяем, какой предмет был выделен:</p>
</segment>
<p><code>! для примера локация "info"</code></p>
<p><code>if $object="Отвёртка":</code></p>
<p><code>! если мы "запомнили" предмет "Отвёртка" после выделения</code></p>
<p><code>! выводим описание отвёртки</code></p>
<p><code>clr</code></p>
<p><code>pl "Обыкновенная крестовая отвёртка. Подойдёт для регулирования громкости"</code></p>
<p><code>end</code></p>
<p><code>if $object="Апельсин":</code></p>
<p><code>! если мы "запомнили" предмет "Апельсин" после выделения</code></p>
<p><code>! выводим описание апельсина</code></p>
<p><code>clr</code></p>
<p><code>pl "Рыжий сладкий апельсин. Много нас, а он один."</code></p>
<p><code>end</code></p>


<segment>
<p>Таким образом через глобальные переменные мы можем передавать некоторые данные локациям-пунктам меню.</p>
<p>---</p>

<p><a l:href="#faq_04_04_01">
↑</a>

 Запись `$меню_предмет
<a l:href="#faq_04_05">
]=` означает, что данные будут записаны в следующую ячейку после последней. Это аналог записи `$меню_предмет[arrsize('$меню_предмет')]=`. См. [Как сделать контекстное меню</a></p>
</segment>

</section>
<section id="faq_04_05">
<title head-level="h2">
<p>4.5. Как делать контекстное (динамическое) меню?</p>
</title>

<segment>
<p>В: Как делать контекстное (динамическое) меню?</p>
<p>О:</p>
<p>Контекстное меню делать не сложнее, чем обыкновенное. Единственная сложность в том, чтобы добавлять в меню новые пункты, не отслеживая номеров.</p>
<p>Любое меню записывается в массив, начиная с нулевой ячейки, и обычно мы это делаем так:</p>
</segment>
<p><code>$меню_отвёртка[0]="Осмотреть:info_screw"</code></p>
<p><code>$меню_отвёртка[1]="Использовать:use_screw"</code></p>
<p><code>$меню_отвёртка[2]="Выбросить:put_screw"</code></p>
<segment>
<p>Тем самым мы указываем плееру конкретные ячейки, в которые нужно прописать пункты меню. Однако мы можем писать и так:</p>
</segment>
<p><code>$меню_отвёртка[]="Осмотреть:info_screw"</code></p>
<p><code>$меню_отвёртка[]="Использовать:use_screw"</code></p>
<p><code>$меню_отвёртка[]="Выбросить:put_screw"</code></p>
<segment>
<p>Запись `$меню_отвёртка[]=` означает, что когда мы используем операцию присвоения, плеер создаст новую ячейку в массиве `$меню_отвёртка` с номером на 1 больше номера самой последней ячейки, и уже ей присвоит значение. Эта запись аналогична такой:</p>
</segment>
<p><code>$меню_отвёртка[arrsize('$меню_предмет')]="Осмотреть:info_screw"</code></p>
<p><code>$меню_отвёртка[arrsize('$меню_предмет')]="Использовать:use_screw"</code></p>
<p><code>$меню_отвёртка[arrsize('$меню_предмет')]="Выбросить:put_screw"</code></p>
<segment>
<p>Таким образом мы можем добавлять в массив меню новые пункты, не опасаясь, что одни пункты затрут другие.</p>
</segment>

</section>
<section id="faq_04_06">
<title head-level="h2">
<p>4.6. Как вставить разделитель в меню?</p>
</title>

<segment>
<p>В: Как вставить разделитель в меню?</p>
<p>О:</p>
<p>Вставить разделитель в меню очень просто. Нужно просто в один из пунктов прописать такую строку "-:-". Например:</p>
</segment>
<p><code>$меню_отвёртка[0]="Осмотреть:info_screw"</code></p>
<p><code>$меню_отвёртка[1]="-:-"</code></p>
<p><code>$меню_отвёртка[2]="Использовать:use_screw"</code></p>
<p><code>$меню_отвёртка[3]="Выбросить:put_screw"</code></p>
<segment>
<p>Между пунктами "Осмотреть" и "Использовать" будет отображаться линия-разделитель.</p>
<p>Разделитель нельзя кликнуть, однако поскольку он занимает одну позицию в массиве меню, номера всех остальных пунктов будут передаваться на локации-пункты меню в `args[0]` с учётом разделителя. То есть, если Вы кликнете пункт "Выбросить", в этом примере, на локации "put_screw" `args[0]` будет равно 4.</p>
</segment>

</section>
<section id="faq_04_07">
<title head-level="h2">
<p>4.7. Как вставить картинки в меню?</p>
</title>

<segment>
<p>В: Как вставить картинки в меню?</p>
<p>О:</p>
<p>Просто укажите путь к файлу картинки через двоеточие после названия локации-пункта меню.</p>
</segment>
<p><code>$меню_отвёртка[0]="Осмотреть:info_screw:img/screw.png"</code></p>
<segment>
<p>При этом название меню можно не писать, но оставить первое двоеточие, и пункт меню будет выводиться без надписи:</p>
</segment>
<p><code>$меню_отвёртка[0]=":info_screw:img/screw.png"</code></p>

</section>
</section>
<section id="faq_05">
<title anchor="faq_05" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\05_вопросы по onnewloc\00.txt-light">
<p>5. Вопросы по $ONNEWLOC</p>
</title>
<section id="faq_05_01">
<title head-level="h2">
<p>5.1. Как сделать так, чтобы не писать один и тот же код в каждой локации?</p>
</title>

<segment>
<p>В: Как сделать так, чтобы не писать один и тот же код в каждой локации?</p>
<p>О:</p>
<p>В QSP есть возможность использовать различные 
<a l:href="https://wiki.qsp.org/help:organizing">
служебные локации</a>, которые позволяют автоматизировать выполнение определённых задач. В том числе и выполнение одинакового кода при переходе с локации на локацию.</p>
<p>Допустим, нам нужно, чтобы при переходе на новую локацию в окне дополнительного описания выводилось её название. Чтобы сделать это, мы могли бы на каждой локации написать такой код:</p>
</segment>
<p><code>! очищаем окно дополнительного описания</code></p>
<p><code>clr</code></p>
<p><code>! выводим название текущей локации в окно доп.описания</code></p>
<p><code>pl $curloc</code></p>
<segment>
<p>Но мы воспользуемся локацией-обработчиком перехода на новую локацию. Для этого, в первую очередь, необходимо создать саму локацию-обработчик. Создаём локацию, и называем её, например, "при_переходе". Название может быть совершенно любым, выбирайте то, которое вам удобней.</p>
<p>Далее необходимо указать плееру, какую локацию он должен использовать как локацию-обработчик перехода на новую локацию. Для этого в системную переменную `$onnewloc` необходимо поместить название созданной нами локации. Пишем, например на самой первой локации в игре:</p>
</segment>
<p><code>$onnewloc="при_переходе"</code></p>
<segment>
<p>Теперь на локации "при_переходе" пишем наш код, и проверяем, как работает.</p>
<p>Обратите внимание. Сначала выполняется код локации, на которую был осуществлён переход, а затем только код локации-обработчика перехода.</p>
<p>Поэтому если в основной локации происходит вывод на экран значений, например так:</p>
</segment>
<p><code>*pl "Ваше здоровье &lt;&lt;health&gt;&gt;."</code></p>
<segment>
<p>А в локации-обработчике перехода на новую локацию стоит код, увеличивающий значение переменной `health`:</p>
</segment>
<p><code>if health&lt;100:</code></p>
<p><code>health=health+10</code></p>
<p><code>end</code></p>
<segment>
<p>На экране появится старое значение переменной `health`, хотя по факту оно будет уже новым.</p>
</segment>

</section>
<section id="faq_05_02">
<title head-level="h2">
<p>5.2. Как сделать кнопку "Назад", работающую на каждой локации?</p>
</title>

<segment>
<p>В: Как сделать кнопку "Назад", работающую на каждой локации?</p>
<p>О:</p>
<p>Чтобы иметь возможность с любой локации вернуться на предыдущую, нужно использовать локацию-обработчик перехода на новую локацию. Допустим, мы создали локацию "при_переходе" и на самой первой локации в игре прописали:</p>
</segment>
<p><code>$onnewloc="при_переходе"</code></p>
<segment>
<p>Таким образом каждый раз при переходе на любую локацию с помощью `goto`, `xgoto` плеер будет выполнять и код локации "при_переходе".</p>
<p>Теперь нам нужно прописать в локации "при_переходе" код, который будет запоминать последнюю локацию.</p>
<p>Если мы напишем просто:</p>
</segment>
<p><code>$current_loc=$curloc</code></p>
<segment>
<p>Эта строчка кода будет просто прописывать название текущей локации в переменную `$current_loc`. Например, если у нас есть две локации "комната" и "кухня", то при переходе в "комнату" в `$current_loc` запишется значение "комната", а при переходе из "комнаты" в "кухню" — значение "кухня".</p>
<p>Значит, перед тем, как записать в `$current_loc` название текущей локации, мы должны предварительно сохранить значение из `$current_loc` в другой переменной. Таким образом наш код будет выглядеть вот так:</p>
</segment>
<p><code>! сохраняем название локации, с которой ушли:</code></p>
<p><code>$back_loc=$current_loc</code></p>
<p><code>! сохраняем название локации, на которую пришли (текущая)</code></p>
<p><code>$current_loc=$curloc</code></p>
<segment>
<p>Теперь, когда мы зайдём в "комнату", в `$current_loc` запишется значение "комната". Если дальше мы перейдём в "кухню", значение "комната" из `$current_loc` пропишется в `$back_loc`, то есть в `$back_loc` окажется значение "комната", а в $current_loc запишется название текущей локации, т.е. значение "кухня".</p>
<p>Осталось только привязать команду перехода, например, к действию. На той же локации "при_переходе" пишем это действие:</p>
</segment>
<p><code>if $back_loc&lt;&gt;"":</code></p>
<p><code>! если переменная $back_loc не пуста</code></p>
<p><code>! создаём действие для возврата</code></p>
<p><code>act "Назад":</code></p>
<p><code>goto $back_loc</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>Данный код позволяет вернуться только на одну локацию назад. То есть, если мы перешли из "кухни" в "комнату", действие "Назад" вернёт нас из "комнаты" в "кухню", а из "кухни" снова в "комнату".</p>
<p>Если мы хотим "запомнить" весь путь, а затем с помощью кнопки "Назад" воспроизвести его в обратном порядке, нужно воспользоваться более сложным кодом:</p>
</segment>
<p><code>if $back_loc[]&lt;&gt;$curloc and back_act=0:</code></p>
<p><code>! если в последнем элементе массива нет названия текущей локации</code></p>
<p><code>! а так же если мы совершаем переход не по действию возврата</code></p>
<p><code>!записываем в последний элемент массива название текущей локации</code></p>
<p><code>$back_loc[]=$curloc</code></p>
<p><code>end</code></p>
<p><code>! обнуляем переменную back_act, чтобы разрешить запись в массив $back, если мы захотим перейти на новую локацию</code></p>
<p><code>back_act=0</code></p>
<p><code>! создаём действие возврата</code></p>
<p><code>! только если есть куда возвращаться</code></p>
<p><code>if arrsize('$back_loc')&gt;1:</code></p>
<p><code>act "шаг назад":</code></p>
<p><code>! выставляем переменной-маркеру back_act значение 1,</code></p>
<p><code>! чтобы запретить запись в массив $back при возврате на предыдущую локацию</code></p>
<p><code>back_act=1</code></p>
<p><code>! непосредственно переход</code></p>
<p><code>! записываем во временную переменную название предыдущей посещённой локации</code></p>
<p><code>local $backward = $back_loc[arrsize('$back_loc')-2]</code></p>
<p><code>! удаляем из массива текущую локацию</code></p>
<p><code>killvar '$back_loc',arrsize('$back_loc')-1</code></p>
<p><code>! переходим</code></p>
<p><code>goto $backward</code></p>
<p><code>end</code></p>
<p><code>end</code></p>

</section>
<section id="faq_05_03">
<title head-level="h2">
<p>5.3. Почему в `args[]` на локации-обработчике перехода на новую локацию уже есть данные?</p>
</title>

<segment>
<p>В: Почему в `args[]` на локации-обработчике перехода на новую локацию уже есть данные?</p>
<p>О:</p>
<p>Таково устройство QSP. Если Вы передаёте аргументы при переходе на локацию с помощью оператора `goto`, `xgoto`, значения этих аргументов становятся доступны не только на текущей локации, на которую Вы перешли, но и на локации-обработчике перехода на новую локацию.</p>
<p>Пример такой работы:</p>
</segment>
<p><code># начало</code></p>
<p><code>$onnewloc="onNewLoc"</code></p>
<p><code>act "В комнату":</code></p>
<p><code>GOTO "комната","Мы не ожидали, что ходить придётся так много."</code></p>
<p><code>end</code></p>
<p><code>--- начало ---------------------------------</code></p>
<p><code></code></p>
<p><code># комната</code></p>
<p><code>"Мы вошли в комнату."</code></p>
<p><code>--- комната ---------------------------------</code></p>
<p><code></code></p>
<p><code># onNewLoc</code></p>
<p><code>*pl $args[0]</code></p>
<p><code>--- onNewLoc ---------------------------------</code></p>
<segment>
<p>Однако, обратите внимание: хотя на локацию, на которую был совершён переход, и на локацию-обработчик перехода на новую локацию передаются одинаковые данные, на обеих локациях с ними можно работать совершенно произвольно. То есть изменение `args[0]` на локации "комната" не отразится на значении `args[0]` в локации "onNewLoc" и туда всё равно будет передано исходное значение аргумента.</p>
<p>Пример такого поведения:</p>
</segment>
<p><code># начало</code></p>
<p><code>$onnewloc="onNewLoc"</code></p>
<p><code>act "В комнату":</code></p>
<p><code>GOTO "комната","Мы не ожидали, что ходить придётся так много."</code></p>
<p><code>end</code></p>
<p><code>--- начало ---------------------------------</code></p>
<p><code></code></p>
<p><code># комната</code></p>
<p><code>"Мы вошли в комнату."</code></p>
<p><code>$args[0]="Мы изменили значение args[0]."</code></p>
<p><code>--- комната ---------------------------------</code></p>
<p><code></code></p>
<p><code># onNewLoc</code></p>
<p><code>*pl $args[0]</code></p>
<p><code>--- onNewLoc ---------------------------------</code></p>

</section>
</section>
<section id="faq_06">
<title anchor="faq_06" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\06_вопросы по звуковым файлам\00.txt-light">
<p>6. Вопросы по звуковым файлам в QSP</p>
</title>
<section id="faq_06_01">
<title head-level="h2">
<p>6.1. Как вставить музыку или звук в игру?</p>
</title>

<segment>
<p>В: Как вставить музыку или звук в игру?</p>
<p>О:</p>
<p>Всё довольно просто:</p>
</segment>


<p>* 
Скопируйте музыкальный файл в папку с вашей игрой, или во вложенную папку.</p>


<segment>
<p>* 
В том месте в вашей игре, где должна запускаться музыка, воспользуйтесь оператором `PLAY`:</p>
</segment>
<p><code>PLAY "путь к звуковому файлу/звук.mp3"</code></p>


<segment>
<p>Например, ваш файл называется "песня солнца.mp3" и вы скопировали его в папку с игрой. Чтобы музыка запустилась в какой-то локации, нужно в этой локации написать:</p>
</segment>
<p><code>PLAY "песня солнца.mp3"</code></p>
<segment>
<p>Другой пример. Вы создали в папке с вашей игрой ещё одну папку, и назвали "sound". В неё поместили звуковой файл "бадамс.wav". Вам нужно, чтобы этот файл проигрывался в момент нажатия действия. Делаем так:</p>
</segment>
<p><code>act "Взорвать бомбу":</code></p>
<p><code>PLAY "sound/бадамс.wav"</code></p>
<p><code>! какой-то другой код</code></p>
<p><code>end</code></p>
<segment>
<p>Не забывайте указывать расширения файлов (`.mp3`, `.wav`, `.ogg` и т.д.).</p>
</segment>

</section>
<section id="faq_06_02">
<title head-level="h2">
<p>6.2. Как запустить две звуковые дорожки?</p>
</title>

<segment>
<p>В: Как запустить две звуковые дорожки?</p>
<p>О:</p>
<p>QSP поддерживает одновременное воспроизведение до 32-х звуковых файлов. Это значит, что для запуска двух звуковых файлов достаточно просто написать по команде на каждый:</p>
</segment>
<p><code>PLAY "путь к файлу/один музыкальный файл.mp3"</code></p>
<p><code>PLAY "путь к файлу/другой музыкальный файл.mp3"</code></p>
<segment>
<p>Однако таким образом вы не сможете запустить две одинаковые звуковые дорожки. Повторный вызов оператора `PLAY` с тем же звуковым файлом, может лишь изменить громкость звучания:</p>
</segment>
<p><code>PLAY "путь к файлу/музыка.mp3" &amp; ! запустили со 100% громкости</code></p>
<p><code>wait 1000 &amp; ! подождали секунду</code></p>
<p><code>PLAY "путь к файлу/музыка.mp3",50 &amp; ! снизили громкость до 50%</code></p>

</section>
<section id="faq_06_03">
<title head-level="h2">
<p>6.3. Как при переходе на новую локацию прервать одну мелодию и запустить другую?</p>
</title>

<segment>
<p>В: Как при переходе на новую локацию прервать одну мелодию и запустить другую?</p>
<p>О:</p>
<p>В QSP есть две команды для прерывания проигрывания файлов:</p>
</segment>


<p>* 
`CLOSE ALL` — прерывает проигрывание всех звуков и музыки, которые были запущены в игре</p>
<p>* 
`CLOSE "путь к файлу музыки/звук.mp3"` - прерывает только выполнение указанного файла</p>


<segment>
<p>Например, на локации "комната" вы воспользовались командой:</p>
</segment>
<p><code>PLAY "music/relax.mp3"</code></p>
<segment>
<p>Из "комнаты" есть переход на локацию "коридор", и здесь должна запуститься другая мелодия:</p>
</segment>
<p><code>! закрываем мелодию "комнаты"</code></p>
<p><code>CLOSE "music/relax.mp3"</code></p>
<p><code>! запускаем мелодию коридора</code></p>
<p><code>PLAY "music/triangle.mp3"</code></p>

</section>
<section id="faq_06_04">
<title head-level="h2">
<p>6.4. Как перезапустить звуковую дорожку?</p>
</title>

<segment>
<p>В: Как перезапустить звуковую дорожку?</p>
<p>О:</p>
<p>Если вы воспользовались командой `PLAY` и запустили музыку, например так:</p>
</segment>
<p><code>PLAY "sound/relax.mp3"</code></p>
<segment>
<p>то, если мелодия уже воспроизводится, повторное использование команды `PLAY` не запустит её заново.</p>
<p>Чтобы перезапустить мелодию, нужно сначала закрыть её, а затем запустить снова:</p>
</segment>
<p><code>CLOSE "sound/relax.mp3"</code></p>
<p><code>PLAY "sound/relax.mp3"</code></p>

</section>
<section id="faq_06_05">
<title head-level="h2">
<p>6.5. Как приглушить музыку?</p>
</title>

<segment>
<p>В: Как приглушить музыку?</p>
<p>О:</p>
<p>QSP позволяет запускать музыку с заданной громкостью. Громкость указывается вторым аргументом:</p>
</segment>
<p><code>PLAY "путь к файлу/музыка.mp3",100</code></p>
<segment>
<p>Вместо числа 100 нужно подставить требуемый уровень (от 0 до 100 — означает проценты). Если число не указано, подразумевается, что мелодию нужно воспроизводить со 100% громкостью.</p>
<p>Если повторно воспользоваться командой `PLAY` для файла, который уже воспроизводится, то плеер не перезапустит воспроизведение файла, а просто изменит уровень громкости в соответствии с указанным значением:</p>
</segment>
<p><code>PLAY "путь к файлу/музыка.mp3",50</code></p>
<segment>
<p>Таким образом, чтобы приглушить мелодию, используйте команду `PLAY` к запущенному файлу с другим значением громкости.</p>
</segment>

</section>
<section id="faq_06_06">
<title head-level="h2">
<p>6.6. Как зациклить мелодию?</p>
</title>

<segment>
<p>В: Как зациклить мелодию?</p>
<p>О:</p>
<p>Зациклить одну мелодию во всей игре довольно просто.</p>
</segment>


<p>* 
Создаём локацию и называем её, например, "счётчик". Это будет наша локация-счётчик.</p>


<segment>
<p>* 
В самой первой локации в игре указываем плееру, какую локацию он должен использовать, как локацию-счётчик, прописывая вот такую команду:</p>
</segment>
<p><code>$counter="счётчик"</code></p>


<segment>
<p>* 
На локации "счётчик" пишем код вроде этого:</p>
</segment>
<p><code>if ISPLAY("путь к файлу/мелодия.wav")=0:</code></p>
<p><code>! если мелодия не воспроизводится (isplay возвращает 0)</code></p>
<p><code>! запускаем мелодию по-новой.</code></p>
<p><code>PLAY "путь к файлу/мелодия.wav"</code></p>
<p><code>end</code></p>


<segment>
<p>Чтобы зацикливать определённую мелодию в пределах одной локации, а на другой локации зациклить другую мелодию, в локации-счётчике потребуется прописать более сложный код:</p>
</segment>
<p><code>if $curloc="комната":</code></p>
<p><code>! если мы на локации "комната"</code></p>
<p><code>! запускаем воспроизведение мелодии, если она закончилась</code></p>
<p><code>if ISPLAY("путь к файлу/мелодия_комната.wav")=0:</code></p>
<p><code>PLAY "путь к файлу/мелодия_комната.wav"</code></p>
<p><code>end</code></p>
<p><code>else</code></p>
<p><code>! если мы не на локации комната,</code></p>
<p><code>! закрываем мелодию комнаты</code></p>
<p><code>CLOSE "путь к файлу/мелодия_комната.wav"</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>if $curloc="коридор":</code></p>
<p><code>! если мы на локации "коридор"</code></p>
<p><code>! запускаем воспроизведение мелодии, если она закончилась</code></p>
<p><code>if ISPLAY("путь к файлу/музыка_коридор.mp3")=0:</code></p>
<p><code>PLAY "путь к файлу/музыка_коридор.mp3"</code></p>
<p><code>end</code></p>
<p><code>else</code></p>
<p><code>! если мы не на локации "коридор",</code></p>
<p><code>! закрываем мелодию коридора</code></p>
<p><code>CLOSE "путь к файлу/музыка_коридор.mp3"</code></p>
<p><code>end</code></p>
<segment>
<p>и т.д.</p>
<p>Или воспользуйтесь уже готовым решением в виде гибкого плейлиста: 
<a l:href="https://qsp.org/index.php?option=com_content&amp;view=article&amp;id=79:-10&amp;catid=36:2009-02-19-06-11-21&amp;Itemid=76">
открыть страницу в браузере</a></p>
</segment>

</section>
<section id="faq_06_07">
<title head-level="h2">
<p>6.7. Как сделать плейлист?</p>
</title>

<section>

<p>Прежде, чем приступить к прочтению данной статьи, ознакомьтесь со статьёй 
<a l:href="#faq_06_06">
"Как зациклить мелодию?"</a>.</p>
<p>Если вы поняли, как зациклить одну мелодию, а то и как зациклить мелодию для проигрывания на отдельной локации, то смело переходите к следующим примерам и решениям.</p>
<p>Плейлист, как правило, представляет из себя список проигрываемых файлов в том порядке, в котором эти файлы должны проигрываться.</p>
<p>Мы рассмотрим случай, когда четыре файла должны проигрываться друг за другом в непрерывном порядке. И тут у нас есть несколько вариантов решения поставленной задачи.</p>

</section>

<section id="variant-pervyj-fajly-poimenovany-poocheriodno"><title>
<p>Вариант первый. Файлы поименованы поочерёдно</p>
</title>

<p>Имена файлов могут представлять собой числа, или включать в себя числа от одного до другого по порядку. В этом случае, нам не нужно сохранять полные имена файлов в памяти, достаточно лишь следить за порядковым номером. Например, у нас есть файлы с такимим именами:</p>
<p>`music_1.mp3`</p>
<p>`music_2.mp3`</p>
<p>`music_3.mp3`</p>
<p>`music_4.mp3`</p>
<p>Как видите в названиях этих файлов отличается только одно число, и все числа идут по порядку. Поэтому для организации плейлиста мы можем использовать всего две числовые переменные.</p>
<p>На самой первой локации в игре обозначаем номер первой проигрываемой композиции, общее число файлов, и в системную переменную `$counter` прописываем название локации-счётчика.</p>
<p><code>! # start</code></p>
<p><code>if filescount=0:</code></p>
<p><code>! если ни в одной из переменных не записано значение</code></p>
<p><code>filescount=4    &amp; ! общее число проигрываемых файлов 4</code></p>
<p><code>current_file=1    &amp; ! номер файла, с которого хотим начать, 1. т.е. это будет файл с именем music_1.mp3</code></p>
<p><code>play 'music_&lt;&lt;current_file&gt;&gt;.mp3'    &amp; ! запускаем проигрывание файла с указанным номером</code></p>
<p><code>$counter='Counter'    &amp; ! локация-счётчик так и будет называться Counter</code></p>
<p><code>end</code></p>
<p>Теперь на локации-счётчике пишем такой код:</p>
<p><code>! # Counter</code></p>
<p><code>if no isplay('music_&lt;&lt;current_file&gt;&gt;.mp3'):</code></p>
<p><code>! если текущий файл больше не проигрывается</code></p>
<p><code>current_file+=1    &amp; ! увеличиваем номер на единицу</code></p>
<p><code>if current_file&gt;filescount:</code></p>
<p><code>! если получившийся номер больше количества файлов</code></p>
<p><code>current_file=1    &amp; ! возвращаем номер самого первого файла</code></p>
<p><code>end</code></p>
<p><code>play 'music_&lt;&lt;current_file&gt;&gt;.mp3'    &amp; ! запускаем проигрывание файла с указанным номером</code></p>
<p><code>end</code></p>
<p>Вот и всё. Наш непрерывный плейлист готов.</p>
<p>При заранее поименованных файлах вам понадобится небольшое количество переменных и кода. Например, вы можете отдельно поименовать файлы, которые необходимо проигрывать на разных локациях, и тогда станет возможным запускать на разных локациях разные плейлисты, используя только одну дополнительную переменную.</p>
<p>Например, наши файлы называются так:</p>
<p>`комната_1.mp3`</p>
<p>`комната_2.mp3`</p>
<p>`комната_3.mp3`</p>
<p>`коридор_1.mp3`</p>
<p>`коридор_2.mp3`</p>
<p>`коридор_3.mp3`</p>
<p>`коридор_4.mp3`</p>
<p>Тогда код может выглядеть так:</p>
<p><code>! # Counter</code></p>
<p><code>if $curloc='комната' and $loc_theme&lt;&gt;'комната':</code></p>
<p><code>! если мы оказались на локации комната, но выставлена не тема комнаты</code></p>
<p><code>close '&lt;&lt;$loc_theme&gt;&gt;_&lt;&lt;current_file&gt;&gt;.mp3'    &amp; ! закрываем то, что сейчас проигрывается</code></p>
<p><code>$loc_theme='комната'    &amp; ! вносим в переменную $loc_theme слово комната</code></p>
<p><code>current_file=1    &amp; ! выставляем номер файла, с которого нужно стартовать</code></p>
<p><code>filescount=3    &amp; ! для комнаты в плелисте будет только три файла, поэтом указываем число файлов 3</code></p>
<p><code>end</code></p>
<p><code>if $curloc='коридор' and $loc_theme&lt;&gt;'коридор':</code></p>
<p><code>close '&lt;&lt;$loc_theme&gt;&gt;_&lt;&lt;current_file&gt;&gt;.mp3'</code></p>
<p><code>$loc_theme='коридор'</code></p>
<p><code>current_file=1</code></p>
<p><code>filescount=4</code></p>
<p><code>end</code></p>
<p><code>if no isplay('&lt;&lt;$loc_theme&gt;&gt;_&lt;&lt;current_file&gt;&gt;.mp3'):</code></p>
<p><code>! если текущий файл больше не проигрывается</code></p>
<p><code>current_file+=1    &amp; ! увеличиваем номер на единицу</code></p>
<p><code>if current_file&gt;filescount:</code></p>
<p><code>! если получившийся номер больше количества файлов</code></p>
<p><code>current_file=1    &amp; ! возвращаем номер самого первого файла</code></p>
<p><code>end</code></p>
<p><code>play '&lt;&lt;$loc_theme&gt;&gt;_&lt;&lt;current_file&gt;&gt;.mp3'    &amp; ! запускаем проигрывание файла с указанным номером</code></p>
<p><code>end</code></p>
<p>У такого подхода есть один недостаток. Мы не можем использовать произвольные имена файлов для организации плейлиста, а ведь нам может потребоваться такой вариант, если файлы разбросаны по нескольким папкам. В этом случае нам потребуется следующий вариант.</p>

</section>

<section id="variant-vtoroj-plejlist-s-proizvol_nymi-imenami-fajlov"><title>
<p>Вариант второй. Плейлист с произвольными именами файлов</p>
</title>

<p>Данный способ предусматривает использование лишь одной переменной, однако для его реализации потребуется написать гораздо больше кода. Например, у нас есть такие файлы:</p>
<p>`amb/zoo.mp3`</p>
<p>`amb/monkey.mp3`</p>
<p>`zoo/buss.mp3`</p>
<p>`texlab/drillmusic.mp3`</p>
<p>На локации-счётчике мы будем проверять, проигрывается ли мелодия, записанная в переменную `$music`, и если мелодия уже не проигрывается, то запускать следующую.</p>
<p>Поскольку на начало игры у нас не проигрывается ни одна мелодия, в первый раз нам нужно проверять не проигрывается ли последняя из списка, и тогда автоматически у нас запустится первая То есть на самой первой в игре локации мы записываем в переменную `$music` самую последнюю мелодию из списка, а так же в переменную `$counter` помещаем название локации-счётчика.</p>
<p><code>! # start</code></p>
<p><code>$music='texlab/drillmusic.mp3'    &amp; ! добавили в переменную music самую последнюю проигрываемую мелодию</code></p>
<p><code>$counter='Counter'    &amp; ! в системную переменную прописали название локации-счётчика Counter</code></p>
<p>Осталось на локации-счётчике прописать код нашего плейлиста.</p>
<p><code>! # Counter</code></p>
<p><code>if no isplay($music):</code></p>
<p><code>! если мелодия, записанная в music не проигрывается</code></p>
<p><code>! с помощью сложного условия переключаем мелодию на следующую</code></p>
<p><code>if $music='amb/zoo.mp':</code></p>
<p><code>$music='amb/monkey.mp3'</code></p>
<p><code>elseif $music='amb/monkey.mp3':</code></p>
<p><code>$music='zoo/buss.mp3'</code></p>
<p><code>elseif $music='zoo/buss.mp3':</code></p>
<p><code>$music='texlab/drillmusic.mp3'</code></p>
<p><code>elseif $music='texlab/drillmusic.mp3':</code></p>
<p><code>$music='amb/zoo.mp3'</code></p>
<p><code>end</code></p>
<p><code>play $music</code></p>
<p><code>end</code></p>
<p>По сравнению с первым вариантом кода стало вдвое больше, и соответственно в нём легче запутаться. Однако мы используем всего одну переменную и можем работать с произвольными именами файлов.</p>
<p>Разбирать вариант с разными плейлистами для разных локаций не будем. Код получится достаточно громоздким, и нам потребуется ещё одна переменная, чтобы отличать, какой плейлист сейчас проигрывается. Тем не менее такой вариант, если он вам удобен, вполне имеет право на существование.</p>

</section>

<section id="tretij-variant-plejlist-v-massive"><title>
<p>Третий вариант. Плейлист в массиве</p>
</title>

<p>Этот вариант по сути объединяет два предыдущих варианта. Здесь мы можем использовать произвольные имена файлов, как во втором варианте, но производить переключение на следующий трек, просто зная номер проигрываемого трека.</p>
<p>Единственным недостатком этого варианта можно посчитать то, что пути ко все проигрываемым файлам заносятся в массив и остаются в нём на протяжении всей игры, что нагружает память. Однако, этот недостаток сложно счесть недостатком, ведь чтобы забить даже 100 мегабайт оперативной памяти таким образом вам понадобятся либо ооочень длинные пути, либо оооочень много этих самых путей.</p>
<p>Итак, на самой первой локации в игре мы формируем массив с именами файлов для нашего плейлиста, выставляем номер трека, с которого хотим запустить воспроизведение, и не забываем про локацию-счётчик, название которой нам нужно прописать в переменную `$counter`:</p>
<p><code>! # start</code></p>
<p><code>if arrsize('$playlist')=0:</code></p>
<p><code>! если массив с путями к проигрываемым файлам ещё не создан</code></p>
<p><code>$playlist[0]='amb/zoo.mp3'</code></p>
<p><code>$playlist[1]='amb/monkey.mp3'</code></p>
<p><code>$playlist[2]='zoo/buss.mp3'</code></p>
<p><code>$playlist[3]='texlab/drillmusic.mp3'</code></p>
<p><code>! ячейки массива нумеруются по порядку, это очень удобно</code></p>
<p><code>current_file=0    &amp; ! в данную переменную вносим номер ячейки с названием того трека, который хотим запустить, и...</code></p>
<p><code>! ...запускаем трек:</code></p>
<p><code>play $playlist[current_file]</code></p>
<p><code>! системной переменной $counter присваиваем название локации-счётчика</code></p>
<p><code>$counter='Counter'</code></p>
<p><code>end</code></p>
<p>Нам осталось на локации-счётчике написать код, похожий на код из первого варианта:</p>
<p><code>! # Counter</code></p>
<p><code>if no isplay($playlist[current_file]):</code></p>
<p><code>! если мелодия больше не проигрывается</code></p>
<p><code>current_file+=1 &amp; ! увеличиваем номер трека на единицу</code></p>
<p><code>if current_file=arrsize('$playlist'):</code></p>
<p><code>! если полученый номер совпадает с размером массива</code></p>
<p><code>current_file=0 &amp; ! пора снова воспроизводить трек с номером 0</code></p>
<p><code>end</code></p>
<p><code>play $playlist[current_file]    &amp; ! воспроизводим указанный трек</code></p>
<p><code>end</code></p>
</section>

<section id="zakliuchenie"><title>
<p>Заключение</p>
</title>

<p>Как видите, последний вариант практически лишён недостатков первых двух вариантов. Использование массива в данном случае сильно упрощает как написание, так и чтение кода. Если развить этот вариант и дальше, чтобы добиться работы разных плейлистов на разных локациях, то можно прийти к решению, которое предложил `Werewolf` в своём 
<a l:href="https://qsp.org/index.php?option=com_content&amp;view=article&amp;id=79:-10&amp;catid=36:2009-02-19-06-11-21&amp;Itemid=76">
Гибком плейлисте</a>. Если решили разрабатывать собственную систему управления музыкой в игре, ознакомьтесь с наработками `Werewolf`а. Вполне возможно, все ваши задумки уже реализованы в удобной и лаконичной системе.</p>

</section>

</section>
</section>
<section id="faq_07">
<title anchor="faq_07" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\07_гиперссылки\00.txt-light">
<p>7. Вопросы о гиперссылках</p>
</title>
<section id="faq_07_01">
<title head-level="h2">
<p>7.1. Как делать гиперссылки, по нажатию на которые выполняется код?</p>
</title>

<segment>
<p>В:	Как делать гиперссылки, по нажатию на которые выполняется код?</p>
<p>Как делать кликабельный текст?</p>
<p>Как сделать, чтобы по нажатию на текст что-то происходило?</p>
<p>О:</p>
<p>Гиперссылки в QSP делаются точно так же, как и в HTML-документах, то есть с использованием тегов `&lt;a&gt;` и `&lt;/a&gt;`.</p>
<p>Например так:</p>
</segment>
<p><code>*pl "На берёзе созрело несколько &lt;a href=''&gt;яблок&lt;/a&gt;."</code></p>
<segment>
<p>В атрибуте `href`, если говорить об html-документе, обычно пишется url — адресс страницы в интернете. Однако в QSP мы можем разместить внутри этого атрибута строку кода. Например такую:</p>
</segment>
<p><code>яблоко=яблоко+1 &amp; addobj "Яблоко"</code></p>
<segment>
<p>Чтобы плеер понял, что в атрибуте `href` находится не url, а какой-то код, мы должны указать перед этим кодом ключевое слово `EXEC`:</p>
</segment>
<p><code>*pl "На берёзе созрело несколько &lt;a href='exec: '&gt;яблок&lt;/a&gt;."</code></p>
<segment>
<p>Теперь нам нужно вставить после EXEC: нашу строку кода. Однако, мы уже использовали кавычки ("") для указания границ строки, и апострофы ('') для указания границ атрибута `href`. А в нашей строке кода тоже есть кавычки. Как быть?</p>
<p>Мы можем использовать три различных варианта:</p>
<p>Можно экранировать кавычки кода от QSP с помощью дублирования:</p>
</segment>
<p><code>*pl "На берёзе созрело несколько &lt;a href='exec:яблоко=яблоко+1 &amp; addobj ""Яблоко""'&gt;яблок&lt;/a&gt;."</code></p>
<segment>
<p>Можно заменить кавычки кода на апострофы, и эти апострофы экранировать от HTML спомощью обратного слэша (данный способ не рекомендуется, так как может не работать в Quest Navigator, qSpider и других более новых версиях плеера):</p>
</segment>
<p><code>*pl "На берёзе созрело несколько &lt;a href='exec:яблоко=яблоко+1 &amp; addobj \'Яблоко\''&gt;яблок&lt;/a&gt;."</code></p>
<segment>
<p>Либо мы можем заменить апострофы атрибута `href` на кавычки и экранировать эти кавычки от кода QSP:</p>
</segment>
<p><code>*pl "На берёзе созрело несколько &lt;a href=""exec:яблоко=яблоко+1 &amp; addobj 'Яблоко'""&gt;яблок&lt;/a&gt;."</code></p>
<segment>
<p>Все три способа равнозначны. Используйте тот, что удобнее.</p>
</segment>

</section>
<section id="faq_07_02">
<title head-level="h2">
<p>7.2. Как менять цвет гиперссылки?</p>
</title>

<segment>
<p>В: Как менять цвет гиперссылки?</p>
<p>О:</p>
<p>В классическом плеере и qSpider цвет всех гиперссылок в игре можно изменить, задав значение системной переменной `lcolor`:</p>
</segment>
<p><code>! задаст тёмно-зелёный цвет гиперссылок</code></p>
<p><code>lcolor=rgb(0,120,0)</code></p>
<segment>
<p>`rgb` — функция, которая преобразует три составляющие цвета в формат понятный QSP. Значения составляющих прописываем аргументами функции в порядке: красный, зелёный, синий.</p>
<p>Если Вам нужно изменить цвет отдельной гиперссылки, не трогая цвета остальных, можно воспользоваться тегом `&lt;font&gt;`:</p>
</segment>
<p><code>*pl "&lt;a href='...'&gt;&lt;font color=#008888&gt;ссылка бирюзового цвета&lt;/font&gt;&lt;/a&gt;"</code></p>
<segment>
<p>Цвет указывается в формате шестнадцатеричного кода в атрибуте `color`. Те же значения составляющих: #RRGGBB (RR — красная составляющая, GG — зелёная, BB — синяя).</p>
<p>Вы можете использовать CSS в 
<strong>
qSpider</strong>, чтобы назначать гиперссылкам классы и соответственно изменять их отображение, просто меняя класс.</p>
</segment>

</section>
<section id="faq_07_03">
<title head-level="h2">
<p>7.3. Как помещать в гиперссылки сложный код?</p>
</title>

<segment>
<p>В: Как помещать в гиперссылки сложный код?</p>
<p>О:</p>
<p>Большой кусок кода в гиперссылке будет трудно читать, к тому же это грозит ошибками. Некоторые плееры, работающие с бразуерным html-рендером, могут криво обрабатывать многострочный код в гиперссылках. Поэтому лучше избегать больших объёмов кода непосредственно в самих гиперссылках. Однако есть два решения, которые позволяют выполнять сколь угодно сложный код при щелчке по ссылке.</p>
<p>Например, мы делаем покупку предметов через гиперссылки:</p>
</segment>
<p><code>*pl "&lt;a href='exec: '&gt;Купить кружку имбирного эля&lt;/a&gt;"</code></p>
<segment>
<p>И нам нужно, чтобы при щелчке по ссылке выполнялся такой вот код:</p>
</segment>
<p><code>if no деньги&lt;100:</code></p>
<p><code>addobj 'Кружка имбирного эля'</code></p>
<p><code>кружка_эля+=1</code></p>
<p><code>деньги-=100</code></p>
<p><code>*pl "Я приобрёл куржку имбирного эля."</code></p>
<p><code>else</code></p>
<p><code>*pl "Мне не хватает денег на эль."</code></p>
<p><code>end</code></p>


<segment>
<p>1. 
Чтобы не совать весь код в гиперссылку, мы можем создать отдельную локацию, назвав её, например "купить_эль", разместить код в этой локации, а затем просто вызывать локацию из гиперссылки по `gosub`:</p>
</segment>
<p><code>*pl "&lt;a href='exec:gosub ""купить_эль""'&gt;Купить кружку имбирного эля&lt;/a&gt;"</code></p>


<segment>
<p>2. 
Можно не создавать отдельную локацию под кусок кода, а выделить для него отдельную переменную. То есть, поместим наш код в текстовую переменную:</p>
</segment>
<p><code>$code={</code></p>
<p><code>if no деньги&lt;100:</code></p>
<p><code>addobj 'Кружка имбирного эля'</code></p>
<p><code>кружка_эля+=1</code></p>
<p><code>деньги-=100</code></p>
<p><code>*pl "Я приобрёл куржку имбирного эля."</code></p>
<p><code>else</code></p>
<p><code>*pl "Мне не хватает денег на эль."</code></p>
<p><code>end</code></p>
<p><code>}</code></p>


<segment>
<p>Теперь этот код можно будет выполнить в любой момент, используя оператор `dynamic`:</p>
</segment>
<p><code>*pl "&lt;a href='exec:dynamic $code'&gt;Купить кружку имбирного эля&lt;/a&gt;"</code></p>
<segment>
<p>Как видите, первый способ требует написания отдельной локации, а так же мы всё ещё можем неверно закрыть кавычки, прописывая команду для вызова этой локации. Во втором варианте этот риск минимален, однако нам приходится выделять для размещения кода переменную, которую нельзя уничтожать, пока игрок не щёлкнет по гиперссылке.</p>
</segment>

</section>
<section id="faq_07_04">
<title head-level="h2">
<p>7.4. Как сделать гиперссылки без подчёркивания?</p>
</title>

<segment>
<p>В: Как сделать гиперссылки без подчёркивания?</p>
<p>О:</p>
<p>В классическом плеере подчёркивание отключается присвоением гиперссылке класса "plain":</p>
</segment>
<p><code>*pl "На берёзе созрело несколько &lt;a href='exec:яблоко=яблоко+1 &amp; addobj ""Яблоко""' class='plain'&gt;яблок&lt;/a&gt;."</code></p>
<segment>
<p>В qSpider вы можете прописать собственные классы для ссылок, в т.ч. и сделать все ссылки без подчёркивания, с помощью подключаемых CSS-файлов.</p>
</segment>

</section>
</section>
<section id="faq_08">
<title anchor="faq_08" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\08_есть ли команда\00.txt-light">
<p>8. Есть ли команда...</p>
</title>
<section id="faq_08_01">
<title head-level="h2">
<p>8.1. Какой командой можно очистить окно дополнительного описания?</p>
</title>

<segment>
<p>В: Какой командой можно очистить окно дополнительного описания?</p>
<p>О:</p>
<p>Воспользуйтесь оператором CLR:</p>
</segment>
<p><code>CLR</code></p>

</section>
<section id="faq_08_02">
<title head-level="h2">
<p>8.2. Существует ли команда для того, чтобы получить название текущей локации?</p>
</title>

<segment>
<p>В: Существует ли команда для того, чтобы получить название текущей локации?</p>
<p>О:</p>
<p>Функция `$CURLOC` позволяет в любой момент получить название текущей локации, то есть локации, на которой в данный момент "находится" игрок. Значение можно записывать в какую-либо переменную по необходимости.</p>
</segment>
<p><code>$lockback=$CURLOC</code></p>

</section>
<section id="faq_08_03">
<title head-level="h2">
<p>8.3. Какой командой можно вывести текст в окно дополнительного описания?</p>
</title>

<segment>
<p>В: Какой командой можно вывести текст в окно дополнительного описания?</p>
<p>О:</p>
<p>Для вывода текста в окно дополнительного описания воспользуйтесь одним из трёх операторов:</p>
</segment>


<p>* 
`p` — просто выводит текст на экран в окне дополнительного описания</p>
<p>* 
`pl` — выводит текст на экран в окне дополнительного описания, а после переводит каретку на новую строку. Т.е. любой другой добавленный в окно дополнительного описания текст обязательно будет выведен с новой строки.</p>
<p>* 
`nl` — сначала переводит каретку на новую строку, затем выводит текст в окне дополнительного описания.</p>


<segment>
<p>Примеры:</p>
</segment>
<p><code>p "Кусочек текста"</code></p>
<p><code>pl "Строка текста, а затем переход на новую строку"</code></p>
<p><code>nl "Сначала переход на новую строку, а затем строка текста"</code></p>

</section>
<section id="faq_08_04">
<title head-level="h2">
<p>8.4. Есть ли команда, которая делает выход из игры?</p>
</title>

<segment>
<p>В: Есть ли команда, которая делает выход из игры?</p>
<p>О:</p>
<p>Нет, такой команды нет.</p>
<p>Этот вопрос задавался настолько часто, что его отметили в справке:</p>
</segment>
<cite>
<p>`В:` Как сделать действие выхода из игры? Т.е. нажал "Выход" и приложение закрылось?</p>
<p>`О:` Для выхода можно нажать крестик в самом верху... А в игре выход можно оформить по-другому. Например, титры сделать, после них пожелания и поздравления. Ну а в конце написать "THE END" без каких-либо действий. Будет очень даже приличный выход.</p>
</cite>

</section>
</section>
<section id="faq_09">
<title anchor="faq_09" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\09_изображения\00.txt-light">
<p>9. Вопросы о изображениях</p>
</title>
<section id="faq_09_01">
<title head-level="h2">
<p>9.1. Как вставить картинку в игру?</p>
</title>

<segment>
<p>В: Как вставить картинку в игру?</p>
<p>О:</p>
<p>Прежде всего изображение нужно скопировать в папку с игрой, или во вложенную папку. И далее воспользоваться одним из способов. Всего их 3.</p>
</segment>


<segment>
<p>1. 
Изображение можно использовать как фоновый рисунок в окне основного описания. Поверх этого рисунка будет отображаться весь текст и элементы html-разметки, которые мы выводим в это окно. Чтобы вставить изображение фоном в окно основного описания, необходимо прописать путь к этому изображению в переменную `$backimage`.</p>
<p>Например, файл вашей картинки называется "солнечный_день.jpg" и лежит в папке с игрой, тогда поставить её фоном можно так:</p>
</segment>
<p><code>$backimage="солнечный_день.jpg"</code></p>
<segment>
<p>Или же вы создали в папке с игрой ещё одну папку и назвали её "background", а уже в неё поместили файл изображения. Тогда поставить её фоном можно так:</p>
</segment>
<p><code>$backimage="background/солнечный_день.jpg"</code></p>
<segment>
<p>Чтобы заменить фон на другой, нужно в переменной `$backimage` прописать путь к другой картинке.</p>
<p>Чтобы совсем убрать фон, нужно переменной `$backimage` присвоить пустое значение:</p>
</segment>
<p><code>$backimage=""</code></p>


<segment>
<p>2. 
Изображение можно выводить в отдельном окне, которое называется "окно предпросмотра". Для этого нужно воспользоваться оператором `view`:</p>
</segment>
<p><code>view "путь к файлу картинки/картинка.jpg"</code></p>
<segment>
<p>Чтобы закрыть окно предпросмотра, нужно сообщить оператору `view` пустую строку:</p>
</segment>
<p><code>view ""</code></p>
<segment>
<p>Чтобы не закрывать окно предпросмотра, но убрать из него изображение, заведите изображение размером в один пиксель, полностью прозрачное; и выводите его с помощью оператора `view`, когда в окне предпросмотра должно быть пусто.</p>
</segment>


<segment>
<p>3. 
Третий способ позволяет вставлять изображение в окно основного описания, в окно дополнительного описания, в названия предметов и действий. Этот способ использует возможности html-разметки.</p>
<p>В первую очередь необходимо включить в плеере распознавание html. Для этого на самой первой локации в игре присваиваем переменной `usehtml` значение отличное от нуля:</p>
</segment>
<p><code>usehtml=1</code></p>
<segment>
<p>Изображения в html выводятся с помощью тега `&lt;img&gt;`. В атрибуте `src` этого тега прописывается путь к файлу картинки.</p>
<p>Например, мы хотим вывести изображение в окне основного описания:</p>
</segment>
<p><code>*pl "&lt;img src='путь к файлу картинки/картинка.jpg'&gt;"</code></p>
<segment>
<p>Или мы хотим вывести изображение в окне дополнительного описания:</p>
</segment>
<p><code>pl "&lt;img src='путь к файлу картинки/картинка.jpg'&gt;"</code></p>
<segment>
<p>Мы можем вывести изображение в названии действия:</p>
</segment>
<p><code>act "&lt;img src='images/open_door.png'&gt; открыть дверь":</code></p>
<p><code>goto "комната"</code></p>
<p><code>end</code></p>
<segment>
<p>Или в названии предмета:</p>
</segment>
<p><code>addobj "&lt;img src='images/screwdriver.gif'&gt; Отвёртка"</code></p>
<segment>
<p>Поверх выводимых таким образом изображений нельзя накладывать надписи и другие изображения.</p>
</segment>


<segment>
<p>Плеер qSpider имеет больше возможностей для работы с элементами оформления, в том числе и с изображениями.</p>
</segment>

</section>
<section id="faq_09_02">
<title head-level="h2">
<p>9.2. Можно ли вставить в игру gif-файл?</p>
</title>

<segment>
<p>В: Можно ли вставить в игру gif-файл?</p>
<p>О:</p>
<p>Да, можно. gif-файл вставляется в игру точно так же, как и любое другое изображение.</p>
<p>Для примера покажем вставку gif с помощью html:</p>
</segment>
<p><code>usehtml=1</code></p>
<p><code>*pl "&lt;img src='images/clouds.gif'&gt;"</code></p>
<segment>
<p>Если вместо изображения вы видите разбитый серый квадрат, возможно вы неверно указали путь или название файла.</p>
<p>Если изображение не отображается в указанном месте даже в виде разбитого квадрата, скорее всего плеер не поддерживает данный формат.</p>
<p>Если у вас проблемы с воспроизведением gif-анимации, посмотрите список тем в разделе источников: 
<a l:href="#link_09_02">
перейти к разделу</a></p>
</segment>

</section>
<section id="faq_09_03">
<title head-level="h2">
<p>9.3. Как вставить картинку в действие?</p>
</title>

<segment>
<p>В: Как вставить картинку в действие?</p>
<p>О:</p>
<p>С помощью html-разметки изображения можно вставлять в названия действий, в названия предметов, выводить в окна основного и дополнительного описаний.</p>
<p>Чтобы вставить картинку в название действия с помощью html-разметки, нужно включить в плеере распознавание html. Например, в самой первой локации в игре нужно написать такую команду:</p>
</segment>
<p><code>usehtml=1</code></p>
<segment>
<p>Теперь в названия действий можно вставлять изображения с помощью тега `&lt;img&gt;`. В атрибуте `src` этого тега прописывается путь к файлу картинки:</p>
</segment>
<p><code>act "&lt;img src='путь к файлу картинки/картинка.jpg'&gt; Выйти на улицу.":</code></p>
<p><code>goto "улица"</code></p>
<p><code>end</code></p>
<segment>
<p>Используя html, можно вставлять изображение как в начале названия действия, так и в конце:</p>
</segment>
<p><code>act "Выйти на улицу. &lt;img src='путь к файлу картинки/картинка.jpg'&gt;":</code></p>
<p><code>goto "улица"</code></p>
<p><code>end</code></p>
<segment>
<p>Так же QSP умеет выводить изображение перед названием действия без использования html. Для этого путь к файлу картинки указывается вторым аргументом к оператору `act` (через запятую после названия действия):</p>
</segment>
<p><code>act "Выйти на улицу","путь к файлу картинки/картинка.jpg":</code></p>
<p><code>goto "улица"</code></p>
<p><code>end</code></p>

</section>
<section id="faq_09_04">
<title head-level="h2">
<p>9.4. Как поставить картинку фоном?</p>
</title>

<segment>
<p>В: Как поставить картинку фоном?</p>
<p>О:</p>
<p>Чтобы поставить картинку фоном в окно основного описания, необходимо прописать путь к файлу картинки в переменную `$backimage`.</p>
<p>Например, файл вашей картинки называется "солнечный_день.jpg" и лежит в папке с игрой, тогда поставить её фоном можно так:</p>
</segment>
<p><code>$backimage="солнечный_день.jpg"</code></p>
<segment>
<p>Или же вы создали в паке с игрой ещё одну папку и назвали её "background", а уже в неё поместили файл изображения. Тогда поставить её фоном можно так:</p>
</segment>
<p><code>$backimage="background/солнечный_день.jpg"</code></p>
<segment>
<p>Чтобы заменить фон на другой, нужно в переменной `$backimage` прописать путь к другой картинке.</p>
<p>Чтобы совсем убрать фон, нужно переменной `$backimage` присвоить пустое значение:</p>
</segment>
<p><code>$backimage=""</code></p>

</section>
<section id="faq_09_05">
<title head-level="h2">
<p>9.5. Как выводить изображения послойно? Накладывать друг на друга?</p>
</title>

<segment>
<p>В: Как выводить изображения послойно? Накладывать друг на друга?</p>
<p>О:</p>
<p>Классический плеер не умеет накладывать изображения и любые другие элементы html друг на друга.</p>
<p>Чтобы использовать все возможности html и css в своей игре, в том числе и послойным выводом элементов, воспользуйтесь плеером qSpider. Там послойный вывод элементов работает, как в любом браузере.</p>
</segment>

</section>
<section id="faq_09_06">
<title head-level="h2">
<p>9.6. Как сделать кликабельное изображение?</p>
</title>

<segment>
<p>В: Как сделать кликабельное изображение?</p>
<p>В: Как сделать так, чтобы при щелчке по изображению выполнялись какие-то действия?</p>
<p>О:</p>
<p>Картинка должна выводиться с помощью html. То есть прежде всего необходимо включить распознавание html в игре. Для этого прописываем, например в самой первой локации, такую команду:</p>
</segment>
<p><code>usehtml=1</code></p>
<segment>
<p>Далее выводим картинку с помощью html-тега `&lt;img&gt;`. Путь к файлу картинки прописываем в атрибуте `src` этого тега:</p>
</segment>
<p><code>*pl "&lt;img src='images/picture.png'&gt;"</code></p>
<segment>
<p>Чтобы картинка стала кликабельна, необходимо "обернуть" её в теги гиперссылки:</p>
</segment>
<p><code>*pl "&lt;a href=''&gt;&lt;img src='images/picture.png'&gt;&lt;/a&gt;"</code></p>
<segment>
<p>В атрибуте `href` обычно прописывают url — адресс страницы в интернете. Однако в QSP мы можем размещать внутри этого атрибута строки кода. В том числе и строку типа:</p>
</segment>
<p><code>play "sound/opendoor.wav" &amp; goto "улица"</code></p>
<segment>
<p>Чтобы плеер понял, что в атрибуте `href` находится не url, а какой-то код, мы должны указать перед этим кодом ключевое слово `EXEC:`:</p>
</segment>
<p><code>*pl "&lt;a href='exec:'&gt;&lt;img src='images/picture.png'&gt;&lt;/a&gt;"</code></p>
<segment>
<p>После `EXEC:` нам нужно вписать нашу строку кода. Однако, мы уже использовали кавычки (`""`) для указания границ строки, и апострофы (`''`) для указания границ атрибута `href`. А в нашей строке кода тоже есть кавычки. Как быть?</p>
<p>Мы можем экранировать кавычки кода от QSP с помощью дублирования:</p>
</segment>
<p><code>*pl "&lt;a href='exec:play ""sound/opendoor.wav"" &amp; goto ""улица""'&gt;&lt;img src='images/picture.png'&gt;&lt;/a&gt;"</code></p>
<segment>
<p>Или, мы можем заключить в кавычки содержимое атрибута `href`, и экранировать от QSP эти кавычки:</p>
</segment>
<p><code>*pl "&lt;a href=""exec:play 'sound/opendoor.wav' &amp; goto 'улица'""&gt;&lt;img src='images/picture.png'&gt;&lt;/a&gt;"</code></p>
<segment>
<p>Эти два варианта равнозначны, используйте тот, что удобнее.</p>
<p>Теперь картинка будет представлять собой гиперссылку, и, когда мы запустим игру и щёлкнем по картинке, плеер выполнит код, который мы поместили в гиперссылку.</p>
</segment>

</section>
<section id="faq_09_07">
<title head-level="h2">
<p>9.7. Как сделать сменяемое изображение на локации?</p>
</title>

<segment>
<p>В: Как сделать сменяемое изображение на локации?</p>
<p>О:</p>
<p>Смена изображения на локации делается весьма просто.</p>
<p>В первую очередь необходимо подготовить два изображения и поместить их в папку с игрой, либо во вложенную папку. Например, у нас есть изображения "солнечный_день.jpg" и "пасмурный_вечер.png", мы создали в папке с игрой папку "фон", и поместили эти изображения туда.</p>
<p>Выводить изображения мы будем с помощью html-тега `&lt;img&gt;`, а сменять с помощью действия "Сменить изображение".</p>
<p>В поле "выполнить при посещении" локации, на которой мы хотим вывести изображения, нужно прописать код с условиями:</p>
</segment>
<p><code>if изображение=0:</code></p>
<p><code>! если значение переменной "изображение" равно нулю</code></p>
<p><code>! выводим картинку "солнечный_день.jpg"</code></p>
<p><code>*pl "&lt;img src='фон/солнечный_день.jpg'&gt;"</code></p>
<p><code>elseif изображение=1:</code></p>
<p><code>! иначе если значение переменной "изображение" равно единице</code></p>
<p><code>! выводим картинку "пасмурный_вечер.png"</code></p>
<p><code>*pl "&lt;img src='фон/пасмурный_вечер.png'&gt;"</code></p>
<p><code>end</code></p>
<segment>
<p>Здесь же создаём действие, которое будет "менять" картинку:</p>
</segment>
<p><code>act "Сменить пейзаж":</code></p>
<p><code>! на самом деле действие меняет значение переменной</code></p>
<p><code>if изображение=0:</code></p>
<p><code>изображение=1</code></p>
<p><code>elseif изображение=1:</code></p>
<p><code>изображение=0</code></p>
<p><code>end</code></p>
<p><code>! и заставляет плеер перезайти на текущую локацию</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<segment>
<p>Работает это следующим образом:</p>
</segment>


<p>* 
Если переменная "изображение" не была заранее задана, её значение в момент посещения локации будет равно нулю, поэтому сработает первое условие, а значит на экране мы увидим картинку "солнечный_день.jpg".</p>
<p>* 
Когда мы нажмём на действие, в действии так же произойдёт проверка условия, и так как значение переменной "изображение" в момент нажатия действия будет равно нулю, этой переменной присвоится значение 1, после чего плеер перезайдёт на текущую локацию.</p>
<p>* 
Когда плеер повторно зайдёт на текущую локацию, он очистит окно основного описания, затем начнёт выполнять код из области "выполнить при посещении", и согласно значению переменной "изображение" сработает второе условие, а значит на экран будет выведена картинка "пасмурный_вечер.png".</p>
<p>* 
И так далее.</p>


<segment>
<p>Если вам нужно сделать изображения, которые меняются при щелчке непосредственно по ним, нужно просто завернуть эти изображения в гиперссылки:</p>
</segment>
<p><code>if изображение=0:</code></p>
<p><code>! если значение переменной "изображение" равно нулю</code></p>
<p><code>! выводим картинку "солнечный_день.jpg"</code></p>
<p><code>*pl "&lt;a href='exec:изображение=1 &amp; goto $curloc'&gt;&lt;img src='фон/солнечный_день.jpg'&gt;&lt;/a&gt;"</code></p>
<p><code>elseif изображение=1:</code></p>
<p><code>! иначе если значение переменной "изображение" равно единице</code></p>
<p><code>! выводим картинку "пасмурный_вечер.png"</code></p>
<p><code>*pl "&lt;a href='exec:изображение=0 &amp; goto $curloc'&gt;&lt;img src='фон/пасмурный_вечер.png'&gt;&lt;/a&gt;"</code></p>
<p><code>end</code></p>

</section>
<section id="faq_09_08">
<title head-level="h2">
<p>9.8. Как сделать вывод рандомного изображения?</p>
</title>

<segment>
<p>В: Как сделать вывод рандомного изображения?</p>
<p>О:</p>
<p>Если у вас есть несколько изображений, имена которых различаются лишь порядковыми номерами, то вывод одного из них случайным образом довольно прост.</p>
<p>Например, изображения с названиями от "pic_1.jpg" до "pic_10.jpg" лежат в папке с игрой. Вывести на экран случайное можно так:</p>
</segment>
<p><code>*pl "&lt;img src='pic_&lt;&lt;rand(1,10)&gt;&gt;.jpg'&gt;"</code></p>
<segment>
<p>Плеер встретит данную команду, и в первую очередь раскроет подвыражение. В подвыражении стоит функция `rand(1,10)`, которая вернёт случайное число от 1 до 10. Это число будет подставленно вместо подвыражения, и таким образом в атрибуте `src` получится полное название файла изображения. Плееру останется только вывести его на экран.</p>
<p>Если же у вас есть изображения с названиями, которые различаются не только порядковыми номерами, или лежат в разных папках, вывести на экран одно случайное будет ненамного сложнее. Главное предварительно внести все пути изображений в массив:</p>
</segment>
<p><code>$pic_mass[0]="фон/солнечный_день.jpg"</code></p>
<p><code>$pic_mass[1]="фон/пасмурный_вечер.png"</code></p>
<p><code>$pic_mass[2]="image/opendoor.jpg"</code></p>
<p><code>$pic_mass[3]="personage/чукча.gif"</code></p>
<p><code>$pic_mass[4]="personage/жена чукчи.gif"</code></p>
<p><code>$pic_mass[5]="arrow.png"</code></p>
<segment>
<p>Затем уже выбранный случайный элемент массива подставляется в аттрибут `src`:</p>
</segment>
<p><code>*pl "&lt;img src='&lt;&lt;$pic_mass[rand(0,5)]&gt;&gt;'&gt;"</code></p>
<segment>
<p>Точно так же. Плеер попытается раскрыть подвыражение, в котором находится выражение `$pic_mass[rand(0,5)]` — то есть плееру нужно получить значение некой ячейки массива `$pic_mass`. Номер ячейки определяет функция `rand(0,5)` — то есть случайное число от 0 до 5 (таков номер последней заполненной ячейки массива). Плеер получит значение этой ячейки (а туда записан путь к изображению) и подставит вместо подвыражения. Таким образом в атрибуте `src` будет полный путь к изображению, плееру останется только вывести изображение на экран.</p>
</segment>

</section>
</section>
<section id="faq_10">
<title anchor="faq_10" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\10_интерфейс дизайн украшения\00.txt-light">
<p>10. Интерфейс, дизайн, украшения</p>
</title>
<section id="faq_10_01">
<title head-level="h2">
<p>10.1. Для чего нужен оператор `REFINT`, и как он работает?</p>
</title>

<segment>
<p>В: Для чего нужен оператор `REFINT`, и как он работает?</p>
<p>О:</p>
<p>О том, для чего нужен оператор `REFINT`, и как он работает, прямо написано в справке:</p>
</segment>
<cite>
<p>`REFINT` — обновление интерфейса (а также смена цветов, шрифта, назначенных с помощью системных переменных `BCOLOR`, `FCOLOR`, `LCOLOR`, `FSIZE`, `$FNAME`).</p>
</cite>
<segment>
<p>И ещё:</p>
</segment>
<cite>
<p>Обновление настроек интерфейса происходит 2 раза в секунду (автоматически, по умолчанию), либо с помощью оператора `REFINT`. Также см. оператор `SETTIMER`.</p>
</cite>
<segment>
<p>Таким образом, оператор `REFINT` нужен для принудительного обновления настроек интерфейса.</p>
<p>Есть ещё комментарий от разработчика:</p>
</segment>
<cite>
<p>`REFINT` принудительно выводит на экран текст, который находится в буфере вывода</p>
</cite>
<segment>
<p>Это говорит о том, что перед тем, как вывести на экран текст, плеер помещает его в буфер, и только потом (после выполнения кода локации) выводит на экран. `REFINT` позволяет не только обновить настройки интерфейса, но и вывести часть текста, уже помещённую в буфер, на экран.</p>
<p>Чтобы лучше понять, что делает `REFINT`, напишите игру с таким кодом, и покликайте на действия:</p>
</segment>
<p><code>showstat 0</code></p>
<p><code>showobjs 0</code></p>
<p><code>act "меняем настройки без refint":</code></p>
<p><code>showstat 1</code></p>
<p><code>bcolor=rgb(0,88,0)</code></p>
<p><code>loop local i=0 while i&lt;10000000 step i+=1:</code></p>
<p><code>! пустой цикл</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<p><code>act "меняем настройки c refint":</code></p>
<p><code>showobjs 1</code></p>
<p><code>bcolor=rgb(0,88,88)</code></p>
<p><code>refint</code></p>
<p><code>loop local i=0 while i&lt;10000000 step i+=1:</code></p>
<p><code>! пустой цикл</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>Не удивляйтесь подвисанию игры при клике по действию — цикл из десяти миллионов итераций выполняется долго.</p>
</segment>

</section>
<section id="faq_10_02">
<title head-level="h2">
<p>10.2. Как изменить цвет фона в игре?</p>
</title>

<segment>
<p>В: Как изменить цвет фона в игре?</p>
<p>О:</p>
<p>Чтобы изменить цвет фона в игре, необходимо изменить значение системной переменной `bcolor`.</p>
<p>В QSP используется формат записи цвета из трёх составляющих: красная, зелёная, синяя. Любой цвет закодирован обычным числом. Например:</p>
</segment>
<p><code>! чёрный цвет фона</code></p>
<p><code>bcolor=-16777216</code></p>
<p><code>! красный цвет фона</code></p>
<p><code>bcolor=-16776961</code></p>
<p><code>! белый цвет фона</code></p>
<p><code>bcolor=-1</code></p>
<segment>
<p>Для нас такая запись числа очень непонятна, поэтому в QSP предусмотрена функция, которая позволяет нам задавать цвет более понятным образом. Это функция `rgb`:</p>
</segment>
<p><code>bcolor=rgb(red,green,blue)</code></p>
<segment>
<p>Вместо `red`, `green` и `blue` необходимо указать значения составляющих для цвета числами от 0 до 255 (`red` — красная, `green` — зелёная, `blue` — синяя). Например:</p>
</segment>
<p><code>! фон чёрного цвета</code></p>
<p><code>bcolor=rgb(0,0,0)</code></p>
<p><code>! фон белого цвета</code></p>
<p><code>bcolor=rgb(255,255,255)</code></p>
<p><code>! фон красного цвета</code></p>
<p><code>bcolor=rgb(255,0,0)</code></p>
<p><code>! фон зелёного цвета</code></p>
<p><code>bcolor=rgb(0,255,0)</code></p>
<p><code>! фон синего цвета</code></p>
<p><code>bcolor=rgb(0,0,255)</code></p>
<p><code>! фон жёлтого цвета</code></p>
<p><code>bcolor=rgb(255,255,0)</code></p>
<p><code>! фон оранжевого цвета</code></p>
<p><code>bcolor=rgb(255,130,0)</code></p>
<p><code>! фон голубого цвета</code></p>
<p><code>bcolor=rgb(0,255,255)</code></p>
<p><code>! фон малинового цвета</code></p>
<p><code>bcolor=rgb(255,0,255)</code></p>
<segment>
<p>Чтобы сбросить цвет фона к значению по-умолчанию, необходимо присвоить переменной `bcolor` значение 0:</p>
</segment>
<p><code>! фон по-умолчанию</code></p>
<p><code>bcolor=0</code></p>

</section>
<section id="faq_10_03">
<title head-level="h2">
<p>10.3. Как изменить формат части текста? Размер, цвет, наклон и т.д.?</p>
</title>

<segment>
<p>В: Как изменить формат части текста? Размер, цвет, наклон и т.д.?</p>
<p>О:</p>
<p>Для этого необходимо использовать HTML-форматирование.</p>
<p>Чтобы включить распознавание HTML в плеере, необходимо системной переменной `usehtml` присвоить значение отличное от нуля. Например, в самой первой локации в игре, пишем:</p>
</segment>
<p><code>usehtml=1</code></p>
<segment>
<p>Далее, когда нужно изменить внешний вид части текста, пользуемся соответствующими HTML-тегами.</p>
</segment>
<p><code>! выводим часть текста курсивом</code></p>
<p><code>*pl "В этой строке несколько слов будут &lt;i&gt;написаны курсивом&lt;/i&gt;."</code></p>
<p><code>! выводим часть текста полужирным шрифтом</code></p>
<p><code>*pl "В этой строке несколько слов будут &lt;b&gt;написаны полужирным шрифтом&lt;/b&gt;."</code></p>
<segment>
<p>Чтобы изменить цвет, размер или непосредственно сам шрифт части текста, нужно использовать теги `&lt;font&gt;` и `&lt;/font&gt;` с соответствующими атрибутами:</p>
</segment>
<p><code>! выводим часть текста красным цветом</code></p>
<p><code>*pl "В этой строке несколько слов будут &lt;font color=#ff0000&gt;написаны красным цветом&lt;/font&gt;."</code></p>
<p><code>! выводим часть текста чуть большим шрифтом</code></p>
<p><code>*pl "В этой строке несколько слов &lt;font size=+2&gt;будут крупнее&lt;/font&gt;."</code></p>
<p><code>! выводим часть текста другим шрифтом</code></p>
<p><code>*pl "В этой строке несколько слов будут &lt;font face='Times New Roman'&gt;написаны шрифтом Times New Roman&lt;/font&gt;."</code></p>
<segment>
<p>Теги и атрибуты можно комбинировать:</p>
</segment>
<p><code>! выводим часть текста курсивом и полужирным</code></p>
<p><code>*pl "В этой строке несколько слов будут &lt;b&gt;&lt;i&gt;написаны курсивом и полужирным&lt;/i&gt;&lt;/b&gt;."</code></p>
<p><code>! выводим часть текста красным и большим</code></p>
<p><code>*pl "В этой строке несколько слов будут &lt;font color=#ff0000 size=+2&gt;написаны красным цветом и будут крупнее&lt;/font&gt;."</code></p>
<segment>
<p>Обратите внимание: теги нужно закрывать в последовательности обратной открыванию.</p>
<p>То есть, если сначала шёл открывающий тег `&lt;b&gt;`, а затем тег `&lt;i&gt;`, закрывающие теги должны идти в такой последовательности: сначала тег `&lt;/i&gt;`, затем `&lt;/b&gt;`.</p>
<p>В qSpider необходимо использовать теги более соответствующие текущим нормативам HTML. Вместо тегов &lt;b&gt; и &lt;i&gt; лучше использовать теги &lt;strong&gt; и &lt;em&gt;. Вместо тега &lt;font&gt; — тег &lt;span&gt; со стилизацией.</p>
</segment>

</section>
<section id="faq_10_04">
<title head-level="h2">
<p>10.4. Как сделать красивый фон в классическом плеере? Добавляю через $backimage — картинка выглядит несуразно.</p>
</title>

<segment>
<p>В: Как сделать красивый фон в классическом плеере? Добавляю через $backimage — картинка выглядит несуразно.</p>
<p>О:</p>
<p>К сожалению, в классическом плеере нет иной возможности поставить картинку на фон, кроме как задать путь к ней в `$backimage`. Однако вы можете изменить вид картинки так, чтобы она органично смотрелась в игре при любом разрешении экрана. Для этого выбирайте картинку с неявными границами и разными уровнями прозрачности. Отлично подойдёт формат PNG или GIF. Обратите внимание на такие игры, как "Цветохимия" или анонсированную `Svartberg`ом "Sanctuary", посмотрите, как фон сделан там.</p>
<p>В qSpider средствами CSS можно размещать на фоне различные изображения и даже накладывать их друг на друга.</p>
</segment>

</section>
<section id="faq_10_05">
<title head-level="h2">
<p>10.5. Хочу, чтоб в игре окна располагались определённым образом. Как это сделать?</p>
</title>

<segment>
<p>В: Хочу, чтоб в игре окна располагались определённым образом. Как это сделать?</p>
<p>О:</p>
<p>Проделайте следующее:</p>
</segment>


<p>* 
Запустите игру в плеере и вручную разместите окна и настройте их размеры так, как Вам нужно.</p>
<p>* 
Закройте плеер, и откройте папку, в которой он лежит.</p>
<p>* 
Из папки с плеером скопируйте файл `qspgui.cfg` в папку с вашей игрой.</p>


<segment>
<p>Таким образом Вы настроили окна в вашей игре. Чтобы "зафиксировать" размер и положение окон, необходимо поставить атрибут "только для чтения" на файле `qspgui.cfg`:</p>
</segment>


<p>* 
Щёлкните правой кнопкой мыши по файлу `qspgui.cfg`, выберите пункт меню "Свойста"</p>
<p>* 
Отметьте галочкой атрибут "только чтение" на вкладке "Общие"</p>
<p>* 
Можно нажать "Ок"</p>


<segment>
<p>Теперь даже если игрок изменит настройки окон в процессе игры, при следующем запуске будут восстановлены настройки, заданные Вами.</p>
</segment>

</section>
<section id="faq_10_06">
<title head-level="h2">
<p>10.6. Можно ли задавать размер окон из кода игры? Чтобы в одной локации были одни настройки, в другой — другие.</p>
</title>

<segment>
<p>В: Можно ли задавать размер окон из кода игры? Чтобы в одной локации были одни настройки, в другой — другие.</p>
<p>О:</p>
<p>Нет. В классическом плеере этого сделать нельзя.</p>
<p>Однако вы можете отказаться от всех окон, кроме окна основного описания, и манипулировать блоками уже непосредственно из кода игры. В классическом плеере это можно делать, верстая страницы с помощью таблиц (`&lt;table&gt;...&lt;/table&gt;`), а в qSpider — используя все возможности html.</p>
</segment>

</section>
<section id="faq_10_07">
<title head-level="h2">
<p>10.7. Настроил расположение окна предпросмотра, но когда выключаю его, другие окна смещаются, как это исправить?</p>
</title>

<segment>
<p>В: Настроил расположение окна предпросмотра, но когда выключаю его, другие окна смещаются, как это исправить?</p>
<p>О:</p>
<p>К сожалению, это не исправляется. Можно использовать костыль. Создать изображение размером в один пиксель — прозрачное — и, когда необходимо убрать изображение из окна предпросмотра, выводить это невидимое изображение.</p>
</segment>
<p><code>! space.png — прозрачная картинка размером в один пиксель</code></p>
<p><code>VIEW "space.png"</code></p>

</section>
<section id="faq_10_08">
<title head-level="h2">
<p>10.8. Как изменить цвет подсветки действий?</p>
</title>

<segment>
<p>В: Как изменить цвет подсветки действий?</p>
<p>О:</p>
<p>В классическом плеере сделать этого нельзя.</p>
<p>Вы можете изменить цвет подсветки действий по своему желанию в qSpider.</p>
</segment>

</section>
<section id="faq_10_09">
<title head-level="h2">
<p>10.9. Как изменить цвет фона для отдельного окна?</p>
</title>

<segment>
<p>В: Как изменить цвет фона для отдельного окна?</p>
<p>Например, я хочу изменить цвет фона окна действий, окна дополнительного описания, а цвет фона других окон оставить нетронутым.</p>
<p>О:</p>
<p>В классическом плеере сделать этого нельзя.</p>
<p>Вы можете более гибко настраивать дизайн интерфейса в qSpider.</p>
</segment>

</section>
<section id="faq_10_10">
<title head-level="h2">
<p>10.10. Как сделать плавное появление текста?</p>
</title>

<segment>
<p>В:	Как сделать плавное появление текста?</p>
<p>Как сделать плавное изменение цвета фона?</p>
<p>Как сделать плавное изменение цвета текста?</p>
<p>О:</p>
<p>Чтобы создать у игрока видимость плавного проявления текста, необходимо изначально задать одинаковый цвет и тексту и фону, а затем постепенно изменять значения цвета в сторону нужного.</p>
<p>Ниже, в качестве примера, приведён код проявления чёрного текста на белом фоне для локации-счётчика:</p>
</segment>
<p><code>! заданные изначально (например при переходе на локацию) составляющие</code></p>
<p><code>! font['red']=255 &amp; font['green']=255 &amp; font['blue']=255 &amp; ! составляющие цвета шрифта</code></p>
<p><code>! bg['red']=255 &amp; bg['green']=255 &amp; bg['blue']=255 &amp; ! составляющие цвета фона</code></p>
<p><code>! fcolor=rgb(font['red'],font['green'],font['blue'])</code></p>
<p><code>! bcolor=rgb(bg['red'],bg['green'],bg['blue'])</code></p>
<p><code>! Текст будет проявляться примерно за 600 мс, нужно выставить settimer</code></p>
<p><code>! settimer 20</code></p>
<p><code>! чтобы код не выполнялся даже когда текст полностью проявится, переменной count['font']</code></p>
<p><code>! будет присвоена единица. Чтобы запустить выполнение кода, нужно присвоить этой переменной ноль</code></p>
<p><code>! count['font']=0</code></p>
<p><code></code></p>
<p><code>! непосредственно код</code></p>
<p><code></code></p>
<p><code>if count['font']=0:</code></p>
<p><code>! если коду разрешено выполняться</code></p>
<p><code>! при каждом обращении к локации-счётчику вычитаем из значения составляющих цвета шрифта по 8</code></p>
<p><code>font['red']-=8</code></p>
<p><code>font['green']-=8</code></p>
<p><code>font['blue']-=8</code></p>
<p><code>! если значения достигли нуля, то они не могут опуститься ниже</code></p>
<p><code>if font['red']&lt;1: font['red']=0</code></p>
<p><code>if font['green']&lt;1: font['green']=0</code></p>
<p><code>if font['blue']&lt;1: font['blue']=0</code></p>
<p><code>! так же если значения достигли нуля, значит больше коду незачем выполняться</code></p>
<p><code>if font['red']&lt;1 and font['green']&lt;1 and font['blue']&lt;1: count['font']=1</code></p>
<p><code>! каждое обращение к локации-счётчику необходимо менять цвет шрифта</code></p>
<p><code>fcolor=rgb(font['red'],font['green'],font['blue'])</code></p>
<p><code>! обновляем настройки интерфейса</code></p>
<p><code>refint</code></p>
<p><code>! не забываем закрывать многострочные условия</code></p>
<p><code>end</code></p>
<segment>
<p>Чтобы изменять скорость проявляения текста, можно менять период обращения к локации-счётчику через `settimer`, или заменить восьмёрку в моменте вычитания числа из составляющих на более подходящее число.</p>
<p>Задачи по плавному изменению цвета фона, или текста решаются аналогичным образом.</p>
<p>Использовать подобный код непосредственно на любой другой локации или в действии, в сочетании с `wait`, не рекомендуется, поскольку это намертво подвешивает игру. Многих игроков подобные "повисания" раздражают.</p>
</segment>

</section>
<section id="faq_10_11">
<title head-level="h2">
<p>10.11. Как использовать в игре собственный шрифт?</p>
</title>

<segment>
<p>В: Как использовать в игре собственный шрифт?</p>
<p>О:</p>
<p>Классический плеер не позволяет подключать собственные шрифты к игре. Однако вы можете положить собственный шрифт в папку с игрой и попросить игрока его установить.</p>
<p>qSpider позволяет подключать к игре собственные файлы шрифтов с помощью CSS.</p>
</segment>

</section>
<section id="faq_10_12">
<title head-level="h2">
<p>10.12. С предметов можно снимать выделение, а можно ли снять выделение с действия?</p>
</title>

<segment>
<p>В: С предметов можно снимать выделение, а можно ли снять выделение с действия?</p>
<p>О:</p>
<p>В отличие от предметов действия выделяются не кликом, а наведением указателя мыши. Специальной команды для снятия выделения с действия нет. Однако можно использовать костыль:</p>
</segment>
<p><code>! фиксируем текущие действия в переменную</code></p>
<p><code>local $actlist=$curacts</code></p>
<p><code>! очищаем список действий</code></p>
<p><code>cla</code></p>
<p><code>! восстанавливаем список действий</code></p>
<p><code>dynamic $actlist</code></p>
<segment>
<p>Если указатель мыши будет наведён на окно действий, само собой одно из действий вновь будет выделено.</p>
</segment>

</section>
</section>
<section id="faq_11">
<title anchor="faq_11" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\11_условия\00.txt-light">
<p>11. Вопросы об условиях</p>
</title>
<section id="faq_11_01">
<title head-level="h2">
<p>11.1. При проверке условия записано просто число, без операции сравнения, но QSP не выдаёт ошибку. Почему?</p>
</title>

<segment>
<p>В: При проверке условия записано просто число, без операции сравнения, но QSP не выдаёт ошибку. Почему?</p>
<p>Пример:</p>
</segment>
<p><code>if ygrek:</code></p>
<p><code>! код</code></p>
<p><code>end</code></p>
<segment>
<p>О:</p>
<p>Дело в том, что как такового в QSP нет булевого типа данных. То есть операции сравнения возвращают не значения 'true' и 'false', а значения 1 (заменяет 'true') и 0 (заменяет 'false'). Это легко проверить:</p>
</segment>
<p><code>(3&gt;5) &amp; ! вернёт 0</code></p>
<p><code>(3&lt;5) &amp; ! вернёт 1</code></p>
<segment>
<p>Таким образом оператор if проверяет не булевое, а числовое значение. И для этого оператора есть два варианта:</p>
</segment>


<p>1. 
Если ему передаётся значение 0, значит условие не выполнено.</p>
<p>2. 
Если ему передаётся не 0, значит условие выполнено.</p>


<segment>
<p>Именно поэтому когда Вы передаёте оператору if просто числовое значение, он работает с ним правильно, как должен.</p>
</segment>
<p><code>ygrek=6</code></p>
<p><code>if ygrek:</code></p>
<p><code>"Условие верно"</code></p>
<p><code>end</code></p>
<p><code>if no ygrek:</code></p>
<p><code>"Условие всё равно верно"</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>ygrek=(3&gt;5)</code></p>
<p><code>if ygrek:</code></p>
<p><code>"Условие верно"</code></p>
<p><code>else</code></p>
<p><code>"Условие неверно"</code></p>
<p><code>end</code></p>

</section>
<section id="faq_11_02">
<title head-level="h2">
<p>11.2. Как сделать так, чтобы действие появлялось только при определённом условии?</p>
</title>

<segment>
<p>В: Как сделать так, чтобы действие появлялось только при определённом условии?</p>
<p>О:</p>
<p>Всё достаточно просто. Необходимо завести отдельную переменную, которая будет определять возможность выполнения действия. Самый простой пример — отслеживаем подъём предмета через переменную-маркер:</p>
</segment>
<p><code>! открываем условие</code></p>
<p><code>if ключ_взял=0:</code></p>
<p><code>! если ключ не взят — переменная маркер равна нулю</code></p>
<p><code>! можно вывести какой-то сопроводительный текст</code></p>
<p><code>*pl "На столе лежит ключ"</code></p>
<p><code>! добавляем действие</code></p>
<p><code>act "Взять ключ":</code></p>
<p><code>! код действия</code></p>
<p><code>! добавить предмет ключ</code></p>
<p><code>addobj "Ключ"</code></p>
<p><code>! переменной маркер присваиваем значение 1</code></p>
<p><code>ключ_взял=1</code></p>
<p><code>! перезаходим на локацию</code></p>
<p><code>goto $curloc</code></p>
<p><code>! закрыли действие</code></p>
<p><code>end</code></p>
<p><code>!закрыли условие</code></p>
<p><code>end</code></p>
<segment>
<p>Более сложный пример:</p>
</segment>
<p><code>if кувшин_полон=0:</code></p>
<p><code>! если кувшин пуст</code></p>
<p><code>act "Наполнить кувшин из фонтана":</code></p>
<p><code>кувшин_полон=1</code></p>
<p><code>! другой код</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<p><code>else</code></p>
<p><code>! иначе кувшин полон</code></p>
<p><code>act "Вылить воду из кувшина":</code></p>
<p><code>кувшин_полон=0</code></p>
<p><code>! другой код</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>Сложный пример с последовательностью действий:</p>
</segment>
<p><code>if хомяк=0:</code></p>
<p><code>! если хомяка в руках нет</code></p>
<p><code>! сопроводительный текст</code></p>
<p><code>*pl "На земле сидит хомяк"</code></p>
<p><code></code></p>
<p><code>act 'Поднять хомяка':</code></p>
<p><code>! начало действия поднять хомяка</code></p>
<p><code>! выставляем маркер, чтобы знать, что хомяк в руках</code></p>
<p><code>хомяк=1</code></p>
<p><code>! возвращаемся на текущую локацию</code></p>
<p><code>goto $curloc</code></p>
<p><code>! конец действия поднять хомяка</code></p>
<p><code>end</code></p>
<p><code>elseif хомяк=1:</code></p>
<p><code>! в противном случае, если хомяк в руках</code></p>
<p><code>! выводим сопроводительный текст в основное описание</code></p>
<p><code>*pl 'Вы взяли хомяка на руки, но он стал отчаянно вырываться.'</code></p>
<p><code>act 'Отпустить хомяка':</code></p>
<p><code>! начало действия отпустить хомяка</code></p>
<p><code>! выставляем маркер, чтобы знать, что хомяк отпущен</code></p>
<p><code>хомяк=2</code></p>
<p><code>! возвращаемся на текущую локацию</code></p>
<p><code>goto $curloc</code></p>
<p><code>! конец действия отпустить хомяка</code></p>
<p><code>end</code></p>
<p><code>elseif хомяк=2:</code></p>
<p><code>! в противном случае, если хомяк убежал</code></p>
<p><code>! выводим сопроводительный текст в основное описание</code></p>
<p><code>*pl 'Вы отпустили хомяка, и он тут же исчез в кустах.'</code></p>
<p><code>act 'Догнать хомяка':</code></p>
<p><code>! начало действия догнать хомяка</code></p>
<p><code>! выставляем маркер, чтобы знать, что хомяк полетел</code></p>
<p><code>хомяк=3</code></p>
<p><code>! возвращаемся на текущую локацию</code></p>
<p><code>goto $curloc</code></p>
<p><code>! конец действия поднять хомяка</code></p>
<p><code>end</code></p>
<p><code>elseif хомяк=3:</code></p>
<p><code>! в противном случае, если хомяк улетел</code></p>
<p><code>! выводим сопроводительный текст в основное описание</code></p>
<p><code>*pl 'Вы догнали хомяка и отвесили ему пендель. Хомяк расправил крылья и полетел.'</code></p>
<p><code>! конец многострочной конструкции условия</code></p>
<p><code>end</code></p>
<segment>
<p>Иногда можно обойтись без переменной-маркера. Например, в случае, если вам нужно проверить наличие предмета в инвентаре:</p>
</segment>
<p><code>if (obj "Пустой кувшин"):</code></p>
<p><code>act "Наполнить кувшин":</code></p>
<p><code>delobj "Пустой кувшин"</code></p>
<p><code>addobj "Полный кувшин"</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<p><code>elseif (obj "Полный кувшин"):</code></p>
<p><code>act "Опустошить кувшин":</code></p>
<p><code>addobj "Пустой кувшин"</code></p>
<p><code>delobj "Полный кувшин"</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<p><code>end</code></p>

</section>
<section id="faq_11_03">
<title head-level="h2">
<p>11.3. Видел в одной из игр, как после нажатия на действие, оно становится неактивным. Как это сделать?</p>
</title>

<segment>
<p>В: Видел в одной из игр, как после нажатия на действие, оно становится неактивным. Как это сделать?</p>
<p>О:</p>
<p>На самом деле это всего лишь частный случай реализации действия по условию.</p>
<p>Для того, чтобы название неактивного действия меняло свой цвет используются html-теги. Поэтому в первую очередь необходимо включить поддержку html. Для этого, например, на самой первой локации в игре пишем:</p>
</segment>
<p><code>usehtml=1</code></p>
<segment>
<p>Далее в нужном месте вставляем приблизительно такой код:</p>
</segment>
<p><code>if действие_не_активно=0:</code></p>
<p><code>! если значение переменной-маркера равно нулю (по-умолчанию)</code></p>
<p><code>! Выводим "активный" вариант действия</code></p>
<p><code>act "Выключить музыку":</code></p>
<p><code>! действие выключает звуки</code></p>
<p><code>close all</code></p>
<p><code>! меняем значение переменной-маркера</code></p>
<p><code>действие_не_активно=1</code></p>
<p><code>! перезаходим на локацию, чтобы увидеть эффект</code></p>
<p><code>goto $curloc</code></p>
<p><code>! закрываем "активный" вариант действия</code></p>
<p><code>end</code></p>
<p><code>else</code></p>
<p><code>! если значение переменной-маркера не равно нулю</code></p>
<p><code>! выводим "неактивный" вариант действия</code></p>
<p><code>act "&lt;font color=#888888&gt;Выключить музыку&lt;/font&gt;":</code></p>
<p><code>! никакой код в действие помещать не нужно</code></p>
<p><code>! закрываем "неактивный" вариант действия</code></p>
<p><code>end</code></p>
<p><code>! закрываем конструкцию условия</code></p>
<p><code>end</code></p>

</section>
<section id="faq_11_04">
<title head-level="h2">
<p>11.4. Как добавить текст, который будет выводиться только при выполнении определённого условия?</p>
</title>

<segment>
<p>В: Как добавить текст, который будет выводиться только при выполнении определённого условия?</p>
<p>О:</p>
<p>Всё просто. Вместо того, чтобы писать текст в поле "Базовое описание", нужно ввести конструкцию условия в поле "Выполнить при посещении" в Quest Generator. Например:</p>
</segment>
<p><code>! выводим текст, не зависящий от условия</code></p>
<p><code>*p "Ты посмотрел в зеркало и увидел, что одет в "</code></p>
<p><code>! далее следует конструкция условия</code></p>
<p><code>if кольчуга_надета=0:</code></p>
<p><code>! если кольчуга не надета</code></p>
<p><code>! выводим соответствующий текст</code></p>
<p><code>*pl "рваную грязную рубаху."</code></p>
<p><code>elseif кольчуга_надета=1:</code></p>
<p><code>! иначе если кольчуга надета</code></p>
<p><code>! выводим другой текст</code></p>
<p><code>*pl "новенькую блестящую кольчугу."</code></p>
<p><code>end</code></p>
<segment>
<p>Переменная "кольчуга_надета" в данном случае служит переменной-маркером.</p>
</segment>

</section>
<section id="faq_11_05">
<title head-level="h2">
<p>11.5. Как сделать, чтобы в диалоговом окне текст набирался в зависимости от условий?</p>
</title>

<segment>
<p>В: Как сделать, чтобы в диалоговом окне текст набирался в зависимости от условий? Чтобы при срабатывании одного или обоих условий текст в любом случае выводился?</p>
<p>О:</p>
<p>Если условий не много, можно воспользоваться таким способом:</p>
</segment>
<p><code>$message=""</code></p>
<p><code>if яблоко&gt;0: $messaga+='яблоки, '</code></p>
<p><code>if груша&gt;0: $messaga+='груши, '</code></p>
<p><code>if яблоко&gt;0 or груша&gt;0:</code></p>
<p><code>msg "У меня есть: "+$messaga+"— и всё."</code></p>
<p><code>else</code></p>
<p><code>msg "У меня ничего нет."</code></p>
<p><code>end</code></p>
<segment>
<p>Если условий много, то при срабатывании хотя бы одного условия необходимо выставлять какую-нибудь переменную-маркер. Таким образом, не зависимо от того, сколько условий сработает, если сработает хотя бы одно, текст будет набран:</p>
</segment>
<p><code>$message=""</code></p>
<p><code>if яблоко&gt;0: $messaga+='яблоки, ' &amp; markvar=1</code></p>
<p><code>if груша&gt;0: $messaga+='груши, ' &amp; markvar=1</code></p>
<p><code>if слива&gt;0: $messaga+='сливы, ' &amp; markvar=1</code></p>
<p><code>if дыня&gt;0: $messaga+='дыни, ' &amp; markvar=1</code></p>
<p><code>if апельсин&gt;0: $messaga+='апельсины, ' &amp; markvar=1</code></p>
<p><code>if банан&gt;0: $messaga+='бананы, ' &amp; markvar=1</code></p>
<p><code>if арбуз&gt;0: $messaga+='арбузы, ' &amp; markvar=1</code></p>
<p><code>if масло&gt;0: $messaga+='масло, ' &amp; markvar=1</code></p>
<p><code>if киви&gt;0: $messaga+='киви, ' &amp; markvar=1</code></p>
<p><code>if песок&gt;0: $messaga+='песок, ' &amp; markvar=1</code></p>
<p><code></code></p>
<p><code>if markvar=1:</code></p>
<p><code>msg "У меня есть: "+$messaga+"— и всё."</code></p>
<p><code>else</code></p>
<p><code>msg "У меня ничего нет."</code></p>
<p><code>end</code></p>

</section>
<section id="faq_11_06">
<title head-level="h2">
<p>11.6. Как упростить условие?</p>
</title>

<segment>
<p>В: Как упростить условие?</p>
<p>Например, мне нужно открыть доступ к четвёртой локации после посещения трёх других, не важно, в каком порядке они посещены. Условие получается громоздким:</p>
</segment>
<p><code>if посетил_лес=1 and посетил_пустыню=1 and посетил_ледник=1:</code></p>
<p><code>act "Выйти в море":</code></p>
<p><code>!...</code></p>
<segment>
<p>О:</p>
<p>На самом деле это самый простой способ, несмотря на то, что условие выглядит громоздко. Этот способ использует минимальное количество переменных, чтобы маркировать посещённые локации. Однако, если нам нужно маркировать действительно большое количество локаций, условие становится слишком большим. В основном это влияет на чтение кода, но мы можем столкнуться и с ограничением на число операций в QSP.</p>
<p>Это подводит нас к использованию ещё одной переменной, чтобы подсчитывать число посещённых локаций. Переменные-маркеры остаются, но они используются лишь чтобы отметить первое посещение локации:</p>
</segment>
<p><code># лес</code></p>
<p><code></code></p>
<p><code>if посетил_лес=0:</code></p>
<p><code>посетил_лес=1</code></p>
<p><code>счётчик_посещений+=1</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>--- лес ---</code></p>
<p><code></code></p>
<p><code># пустыня</code></p>
<p><code></code></p>
<p><code>if посетил_пустыню=0:</code></p>
<p><code>посетил_пустыню=1</code></p>
<p><code>счётчик_посещений+=1</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>--- пустыня ---</code></p>
<p><code></code></p>
<p><code># ледник</code></p>
<p><code></code></p>
<p><code>if посетил_ледник=0:</code></p>
<p><code>посетил_ледник=1</code></p>
<p><code>счётчик_посещений+=1</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>--- ледник ---</code></p>
<segment>
<p>Теперь на локации, где нам нужно проверять условие:</p>
</segment>
<p><code>if счётчик_посещения=3:</code></p>
<p><code>act "Выйти в море":</code></p>
<p><code>! ... код</code></p>

</section>
<section id="faq_11_07">
<title head-level="h2">
<p>11.7. Как упростить взаимоисключающие условия?</p>
</title>

<segment>
<p>В: Как упростить взаимоисключающие условия?</p>
<p>Подскажите аналог опреации `XOR`.</p>
<p>О:</p>
<p>Взаимоисключающие условия — это условия, выполнение одного из которых исключает выполнение всех остальных.</p>
<p>Например, значение переменной может быть либо равно нулю, либо не равно нулю. На основе этих взаимоисключающих состояний можно написать взаимоисключающие условия:</p>
</segment>
<p><code>if varname=0:</code></p>
<p><code>"Переменная равна нулю"</code></p>
<p><code>else</code></p>
<p><code>"Переменная не равна нулю"</code></p>
<p><code>end</code></p>
<segment>
<p>Иногда у нас возникает задача посложнее. Есть две переменные, и условие должно выполняться лишь в том случае, если одна переменная равна нулю, а вторая не равна. Тут кажется всё просто:</p>
</segment>
<p><code>if (varname1=0 and varname2&lt;&gt;0) or (varname1&lt;&gt;0 and varname2=0):</code></p>
<p><code>"Условие выполняется"</code></p>
<p><code>end</code></p>
<segment>
<p>Но несмотря на то, что всё вроде бы просто, мы уже усложнили условие до трёх операций. Если у нас будет три переменные, и лишь одна из них должна быть равна нулю, а две другие не равны, для выполнения условия, число логических операций возрастает до девяти. И т.д. Как упростить условие так, чтобы не пришлось городить такую кучу логических операций?</p>
<p>На самом деле всё не так уж сложно. Нам необходимо использовать переменную-маркер для фиксации числа выполненных условий. И если значение данной переменной будет отлично от единицы, наше взаимоисключающее условие так же можно считать не выполненным.</p>
</segment>
<p><code>marker=0</code></p>
<p><code>if varname1=0: marker+=1</code></p>
<p><code>if varname2=0: marker+=1</code></p>
<p><code>if varname3=0: marker+=1</code></p>
<p><code>if varname4=0: marker+=1</code></p>
<p><code>if varname5=0: marker+=1</code></p>
<p><code>if varname6=0: marker+=1</code></p>
<p><code>if varname7=0: marker+=1</code></p>
<p><code>if marker&lt;&gt;1:</code></p>
<p><code>"Условие не выполнено. Больше одной переменной не равно нулю, либо все они равны нулю"</code></p>
<p><code>else</code></p>
<p><code>"Условие выполнено. Лишь одна из всех этих переменных равна нулю"</code></p>
<p><code>end</code></p>

</section>
</section>
<section id="faq_12">
<title anchor="faq_12" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\12_dynamic\00.txt-light">
<p>12. Вопросы о DYNAMIC</p>
</title>
<section id="faq_12_01">
<title head-level="h2">
<p>12.1. Зачем нужен оператор `dynamic`?</p>
</title>

<segment>
<p>В: Зачем нужен оператор `dynamic`?</p>
<p>О:</p>
<p>Оператор `dynamic` предназначен для выполнения кода, записанного в виде текста.</p>
<p>Например, у нас есть код:</p>
</segment>
<p><code>if яблоко=1:</code></p>
<p><code>*pl "У меня одно яблоко."</code></p>
<p><code>elseif яблоко&gt;1:</code></p>
<p><code>*pl "У меня есть несколько яблок."</code></p>
<p><code>else</code></p>
<p><code>*pl "У меня нет яблок."</code></p>
<p><code>end</code></p>
<segment>
<p>Мы можем записать этот код в текстовом виде и передать оператору `dynamic` в качестве аргумента. Оператор `dynamic` выполнит код, записанный в виде текста, как обычный код:</p>
</segment>
<p><code>dynamic 'if яблоко=1:</code></p>
<p><code>*pl "У меня одно яблоко."</code></p>
<p><code>elseif яблоко&gt;1:</code></p>
<p><code>*pl "У меня есть несколько яблок."</code></p>
<p><code>else</code></p>
<p><code>*pl "У меня нет яблок."</code></p>
<p><code>end'</code></p>
<segment>
<p>Это удобно, если нам нужно поместить кусочек кода в переменную, а затем вызывать в нужных местах:</p>
</segment>
<p><code>$code='if яблоко=1:</code></p>
<p><code>*pl "У меня одно яблоко."</code></p>
<p><code>elseif яблоко&gt;1:</code></p>
<p><code>*pl "У меня есть несколько яблок."</code></p>
<p><code>else</code></p>
<p><code>*pl "У меня нет яблок."</code></p>
<p><code>end'</code></p>
<p><code></code></p>
<p><code>dynamic $code</code></p>
<segment>
<p>Например, этот способ подходит, когда нужно поместить большой объём кода в гиперссылку:</p>
</segment>
<p><code>*pl "Кажется в моём рюкзаке были &lt;a href='exec:dynamic $code'&gt;яблоки&lt;/a&gt;."</code></p>
<segment>
<p>Так же, поскольку `dynamic` выполняет код, записанный в виде текста, можно генерировать код на лету:</p>
</segment>
<p><code>! получаем набор значений (может быть сформирован задолго до прихода на локацию с dynamic)</code></p>
<p><code>яблоко=10</code></p>
<p><code>груша=5</code></p>
<p><code>if $var_word="":</code></p>
<p><code>$var_word='яблоко'</code></p>
<p><code>$text_word='яблок'</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>! действия, переключающие значения:</code></p>
<p><code>act "Сколько у меня яблок":</code></p>
<p><code>$var_word='яблоко'</code></p>
<p><code>$text_word='яблок'</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<p><code>act "Сколько у меня груш":</code></p>
<p><code>$var_word='груша'</code></p>
<p><code>$text_word='груш'</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<p><code>! генерируем код, основываясь на значении заданных переменных</code></p>
<p><code>$code='if &lt;&lt;$var_word&gt;&gt;=1:</code></p>
<p><code>*pl "У меня одно &lt;&lt;$var_word&gt;&gt;."</code></p>
<p><code>elseif (&lt;&lt;$var_word&gt;&gt;)&gt;1:</code></p>
<p><code>*pl "У меня есть несколько &lt;&lt;$text_word&gt;&gt;."</code></p>
<p><code>else</code></p>
<p><code>*pl "У меня нет &lt;&lt;$text_word&gt;&gt;."</code></p>
<p><code>end'</code></p>
<p><code>! выполняем сгенерированный код</code></p>
<p><code>dynamic code</code></p>
<segment>
<p>Работает это так. После того как в переменные забиты изначальные значения, будет выполнен код, выводящий действия, и команда, которая присвоит переменной `$code` некое текстовое значение. В текстовом значении присутствуют вложенные выражения (двойные угловые скобки). Плеер раскроет вложенные выражения, т.е. вместо них подставит значения тех выражений, которые вписаны в двойные угловые скобки. Это либо значение переменной `$var_word` либо переменной `$text_word`. Таким образом при первом посещении в переменную `$code` будет вписан текст:</p>
</segment>
<p><code>$code='if яблоко=1:</code></p>
<p><code>*pl "У меня одно яблоко."</code></p>
<p><code>elseif яблоко&gt;1:</code></p>
<p><code>*pl "У меня есть несколько яблок."</code></p>
<p><code>else</code></p>
<p><code>*pl "У меня нет яблок."</code></p>
<p><code>end'</code></p>
<segment>
<p>Далее `dynamic` просто выполнит получившийся код, записанный в переменную `$code`.</p>
<p>Когда мы нажмём на действие "Сколько у меня груш", в переменные `$var_word` и `$text_word` впишутся соответственно значения "груша" и "груш", затем плеер перезайдёт на текущую локацию (команда `goto $curloc`), снова выведет на экран оба действия, и выполнит команду, которая присваивает переменной `$code` значение. Плееру вновь потребуется раскрыть вложенные выражения, и он снова подставит значения переменных `$var_word` и `$text_word` вместо соответствующих подвыражений, таким образом переменной `$code` снова присвоится готовый текст:</p>
</segment>
<p><code>$code='if груша=1:</code></p>
<p><code>*pl "У меня одно груша."</code></p>
<p><code>elseif груша&gt;1:</code></p>
<p><code>*pl "У меня есть несколько груш."</code></p>
<p><code>else</code></p>
<p><code>*pl "У меня нет груш."</code></p>
<p><code>end'</code></p>
<segment>
<p>Далее `dynamic` просто выполнит получившийся код, записанный в переменную `$code`.</p>
</segment>

</section>
<section id="faq_12_02">
<title head-level="h2">
<p>12.2. Можно ли сделать переменную с рандомным (случайным) названием?</p>
</title>

<segment>
<p>В: Можно ли сделать переменную с рандомным (случайным) названием?</p>
<p>О:</p>
<p>Да конечно, можно. Используйте для этого оператор `dynamic`.</p>
<p>Например, можно забить в массив уже готовые названия, или части названия:</p>
</segment>
<p><code>$name_var[0]="blue"</code></p>
<p><code>$name_var[1]="violet"</code></p>
<p><code>$name_var[2]="red"</code></p>
<p><code>$name_var[3]="orange"</code></p>
<p><code>$name_var[4]="yello"</code></p>
<p><code>$name_var[5]="green"</code></p>
<p><code></code></p>
<p><code>dynamic "&lt;&lt;$name_var[rand(0,5)]&gt;&gt;_&lt;&lt;$name_var[rand(0,5)]&gt;&gt;=999"</code></p>
<segment>
<p>Или набрать название из случайных символов:</p>
</segment>
<p><code>$letter[0]="A"</code></p>
<p><code>$letter[1]="B"</code></p>
<p><code>$letter[2]="C"</code></p>
<p><code>$letter[3]="D"</code></p>
<p><code>$letter[4]="E"</code></p>
<p><code>$letter[5]="F"</code></p>
<p><code></code></p>
<p><code>loop local i=0 while i&lt;4 step i+=1:</code></p>
<p><code>$name_var+=$letter[rand(0,5)]</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>dynamic "&lt;&lt;$name_var&gt;&gt;=984</code></p>
<p><code>*pl 'Имя переменной: &lt;&lt;$name_var&gt;&gt;'</code></p>
<p><code>*pl 'Значение: '+&lt;&lt;$name_var&gt;&gt;"</code></p>

</section>
<section id="faq_12_03">
<title head-level="h2">
<p>12.3. Создаю действия с помощью цикла, но они работают неправильно. Что делать?</p>
</title>

<segment>
<p>В: Создаю действия с помощью цикла, но они работают неправильно. Что делать?</p>
<p>О:</p>
<p>Это классическая "грабля", с которой сталкиваются все новички из-за неполного понимания порядка работы кода.</p>
<p>Допустим мы создаём действие:</p>
</segment>
<p><code>i=1</code></p>
<p><code></code></p>
<p><code>act "Действие номер "+i:</code></p>
<p><code>*pl "Это действие номер "+i</code></p>
<p><code>end</code></p>
<segment>
<p>Что мы при этом увидим на экране? Перед созданием действия переменной `i` присвоено значение 1. Значит название действия будет склеено из текста "Действие номер " и значения переменной `i`, то есть будет выглядеть так: "Действие номер 1".</p>
<p>Однако код, который мы назначили действию, будет выполнен только в момент нажатия действия.</p>
<p>То есть, если мы нажмём на действие, когда переменная `i` равна 1, мы увидим на экране текст: "Это действие номер 1". Но если переменную `i` изменить уже после создания действия, то когда мы нажмём на действие, мы увидим другой текст. Например:</p>
</segment>
<p><code>i=1</code></p>
<p><code></code></p>
<p><code>act "Действие номер "+i:</code></p>
<p><code>*pl "Это действие номер "+i</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>i=2</code></p>
<segment>
<p>В этом случае мы увидим на экране действие с названием "Действие номер 1", а текст, который оно выведет на экран при нажатии, будет такой: "Это действие номер 2".</p>
<p>Теперь давайте посмотрим, что происходит при создании действий с помощью цикла:</p>
</segment>
<p><code>loop local i=1 while i&lt;6 step i+=1:</code></p>
<p><code>act "Действие номер "+i:</code></p>
<p><code>*pl "Это действие номер "+i</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>В конце цикла значение переменной `i` будет равно 6, тогда как цикл создаст нам пять действий с названиями:</p>
</segment>
<cite>
<p>Действие номер 1</p>
<p>Действие номер 2</p>
<p>Действие номер 3</p>
<p>Действие номер 4</p>
<p>Действие номер 5</p>
</cite>
<segment>
<p>При этом, какое бы действие мы не нажимали, поскольку значение переменной `i` будет равно 6, мы всегда при нажатии на действие будем видеть на экране строку текста: "Это действие номер 6".</p>
<p>Однако, мы можем формировать действия с конкретными значениями с помощью оператора `dynamic`:</p>
</segment>
<p><code>loop local i=1 while i&lt;6 step i+=1:</code></p>
<p><code>dynamic 'act "Действие номер "+&lt;&lt;i&gt;&gt;:</code></p>
<p><code>*pl "Это действие номер "+&lt;&lt;i&gt;&gt;</code></p>
<p><code>end'</code></p>
<p><code>end</code></p>
<segment>
<p>Теперь на каждом проходе цикла, когда плеер будет встречать оператор `dynamic`, этому оператору будет передаваться строка текста:</p>
</segment>
<p><code>'act "Действие номер "+&lt;&lt;i&gt;&gt;:</code></p>
<p><code>*pl "Это действие номер "+&lt;&lt;i&gt;&gt;</code></p>
<p><code>end'</code></p>
<segment>
<p>Перед выполнением оператора `dynamic` плеер будет раскрывать подвыражения, подставляя вместо них значение `i`, соответствующее проходу. На первом проходе оператору `dynamic` будет передан такой текст:</p>
</segment>
<p><code>dynamic 'act "Действие номер "+1:</code></p>
<p><code>*pl "Это действие номер "+1</code></p>
<p><code>end'</code></p>
<segment>
<p>На втором проходе такой:</p>
</segment>
<p><code>dynamic 'act "Действие номер "+2:</code></p>
<p><code>*pl "Это действие номер "+2</code></p>
<p><code>end'</code></p>
<segment>
<p>И так далее.</p>
<p>`dynamic` выполняет код записанный в виде текста, и поскольку мы передаём ему команды для создания действий, будут созданы пять действий с конкретными числами в коде действий.</p>
<p>Для лучшего понимания попробуйте запустить такой код, и объясните его работу:</p>
</segment>
<p><code>loop local i=1 while i&lt;6 step i+=1:</code></p>
<p><code>dynamic 'act "Действие номер "+&lt;&lt;i&gt;&gt;:</code></p>
<p><code>*pl "Это действие номер "+&lt;&lt;i&gt;&gt;</code></p>
<p><code>*pl "Значение переменной i: "+i</code></p>
<p><code>end'</code></p>
<p><code>end</code></p>

</section>
<section id="faq_12_04">
<title head-level="h2">
<p>12.4. Почему не работает `dynamic`?</p>
</title>

<segment>
<p>В:	Почему не работает `dynamic`?</p>
<p>Пишу код в переменной, а потом `dynamic "$var_name"`, но вместо того, чтобы выполнить код, плеер выводит этот код на экран. Почему?</p>
<p>О:</p>
<p>Для примера поместим некий код в переменную:</p>
</segment>
<p><code>$var_name="var_count=25"</code></p>
<segment>
<p>Теперь попробуем использовать `dynamic`, как в предложенном вопросе:</p>
</segment>
<p><code>dynamic "$var_name"</code></p>
<segment>
<p>Что при этом произойдёт?</p>
<p>`dynamic` должен выполнить код, переданный ему в виде строки текста.</p>
<p>Какую строку текста мы ему передаём?</p>
</segment>
<p><code>"$var_name"</code></p>
<segment>
<p>Какой код содержится в этой строке?</p>
</segment>
<p><code>$var_name</code></p>
<segment>
<p>Что делает этот код?</p>
<p>Выводит на экран содержимое переменной `$var_name`. А какое у этой переменной содержимое?</p>
</segment>
<p><code>"var_count=25"</code></p>
<segment>
<p>Эту строку мы и увидим на экране.</p>
<p>Чтобы `dynamic` выполнил код, записанный в переменную, нужно передать ему непосредственно значение переменной:</p>
</segment>
<p><code>dynamic $var_name</code></p>

</section>
</section>
<section id="faq_13">
<title anchor="faq_13" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\13_не работает\00.txt-light">
<p>13. Не работает...</p>
</title>
<section id="faq_13_01">
<title head-level="h2">
<p>13.1. Рисую таблицу и хочу зафиксировать высоту, но атрибут `height` не работает.</p>
</title>

<segment>
<p>В: Рисую таблицу и хочу зафиксировать высоту, но атрибут `height` не работает.</p>
<p>О:</p>
<p>Да, атрибут `height` для таблиц не работает в QSP. Он в принципе не работает для таблиц в HTML начиная с четвёртой редакции. Однако большинство браузеров его всё равно распознают и обрабатывают. Особенно, если указывать абсолютное значение.</p>
<p>В классическом плеере можно использовать костыль. Вставить в одну из ячеек прозрачное изображение в 1 пиксель, растянув до нужной высоты.</p>
</segment>
<p><code>*p '&lt;table&gt;'</code></p>
<p><code>*p '&lt;tr&gt;'</code></p>
<p><code>*p '&lt;td&gt;&lt;img src="костыль.png" width=1 height=350&gt;&lt;/td&gt;'</code></p>
<p><code>*p '&lt;td&gt;Содержимое таблицы&lt;/td&gt;'</code></p>
<p><code>*p '&lt;/tr&gt;'</code></p>
<p><code>*p '&lt;/table&gt;'</code></p>
<segment>
<p>Вообще, прежде чем использовать какой-либо атрибут, ознакомьтесь со справкой 
<a l:href="https://wiki.qsp.org/help:html">
https://wiki.qsp.org/help:html</a>, где перечислены все теги и атрибуты, которые поддерживаются в классической версии плеера.</p>
<p>Полная поддержка HTML присутствует в qSpider.</p>
</segment>

</section>
<section id="faq_13_02">
<title head-level="h2">
<p>13.2. Пытаюсь использовать разные HTML-теги в игре, но они не работают — просто не выводятся. Почему?</p>
</title>

<segment>
<p>В: Пытаюсь использовать разные HTML-теги в игре, но они не работают — просто не выводятся. Почему?</p>
<p>О:</p>
<p>Если вы используете классическую версию плеера, и поддержка HTML включена, то скорее всего дело в том, что вы пытаетесь использовать HTML-тег, который не поддерживается плеером.</p>
<p>В классическом плеере — собственный HTML-рендерер, который лишь отчасти соответствует браузерному. Даже не все синтаксические правила HTML работают. Например, запись "&lt;1&gt;" в браузерах не считается тегом и выводится как есть, тогда как рендерер классического плеера посчитает подобную запись тегом.</p>
<p>Если рендерер классического плеера встречает "правильный" тег, то есть тот, который входит в его список поддерживаемых тегов, он форматирует элемент или страницу, или добавляет к странице элемент, согласно значению найденного тега. Если же рендерер классического плеера встречает "неправильный" тег, то есть тот, который не входит в его список поодерживаемых тегов, он просто игнорирует этот тег. На экране тег мы попросту не увидим.</p>
<p>Поэтому, прежде чем использовать какой-либо тег, ознакомьтесь со справкой 
<a l:href="https://wiki.qsp.org/help:html_classic">
https://wiki.qsp.org/help:html_classic</a>, где перечислены все теги и атрибуты, которые поддерживаются в классической версии плеера.</p>
<p>Полная поддержка HTML присутствует в qSpider.</p>
</segment>

</section>
<section id="faq_13_03">
<title head-level="h2">
<p>13.3. Не работает `IIF`!</p>
</title>

<segment>
<p>В: Не работает `IIF`!</p>
<p>Пишу такой код:</p>
</segment>
<p><code>IIF(prprpr&gt;0, GOSUB '1', prprpr=1)</code></p>
<segment>
<p>Но плеер не выполняет команду GOSUB.</p>
<p>О:</p>
<p>`IIF` — это не оператор, это функция. Её преднаначение: ВОЗВРАЩАТЬ то или иное ЗНАЧЕНИЕ в зависимости от результата проверки условия.</p>
<p>Внимательно читайте справку, прежде чем использовать какую-либо функцию или оператор:</p>
</segment>
<cite>
<p>IIF([#выражение],[выражение_да],[выражение_нет]) - ВОЗВРАЩАЕТ ЗНАЧЕНИЕ выражения [выражение_да], если [#выражение] верно, иначе значение выражения [выражение_нет].</p>
</cite>
<segment>
<p>Функция позволяет существенно сократить запись некоторых условий.</p>
<p>Например, у нас есть число `number` и нам нужно получить модуль этого числа `abs_number`. Если бы мы делали это с помощью оператора условий, то запись выглядела бы так:</p>
</segment>
<p><code>if number&lt;0: abs_number=-number else abs_number=number</code></p>
<segment>
<p>При использовании функции IIF, запись сокращается:</p>
</segment>
<p><code>abs_number=IIF(number&lt;0,-number,number)</code></p>
<segment>
<p>Вообще, функция удобна там, где нам нужно получить один из двух вариантов значения.</p>
<p>Например, мы делаем в игре отображение времени, и нам нужно, чтобы на экран выводилось время в формате 00:00. Т.е. например, четверть третьего ночи должны выглядеть так:</p>
</segment>
<p><code>02:15</code></p>
<segment>
<p>А пять минут двенадцатого днём так:</p>
</segment>
<p><code>11:05</code></p>
<segment>
<p>При этом число минут мы считаем в переменной `minutes`, а число часов — в переменной `hours`:</p>
</segment>
<p><code>$IIF(hours&lt;10,"0&lt;&lt;hours&gt;&gt;","&lt;&lt;hours&gt;&gt;")+":"+$IIF(minutes&lt;10,"0&lt;&lt;minutes&gt;&gt;","&lt;&lt;minutes&gt;&gt;")</code></p>
<segment>
<p>Попробуйте записать это с помощью операторов условий.</p>
</segment>

</section>
<section id="faq_13_04">
<title head-level="h2">
<p>13.4. Пытаюсь сделать кликабельную картинку с помощью тегов `MAP` и `AREA`, но ничего не получается</p>
</title>

<segment>
<p>В: Пытаюсь сделать кликабельную картинку с помощью тегов `MAP` и `AREA`, но ничего не получается.</p>
<p>Не выводится картинка, не работает область клика, область клика смещена.</p>
<p>О:</p>
<p>Чтобы ответить на этот вопрос, пойдём по порядку.</p>
<p>Во-первых, в вашей игре должна быть включена поддержка HTML, иначе вместо картинки вы увидите много HTML-тегов. Поддержку HTML включаем, прописывая в нужном месте (например, на самой первой локации в игре) следующую команду:</p>
</segment>
<p><code>usehtml=1</code></p>
<segment>
<p>Во-вторых, все HTML-теги являются частью выводимого на экран текста, поэтому, чтобы выводить их на экран, нужно использовать те же самые операторы, что и для вывода всего остального текста. Таким образом и теги `&lt;MAP&gt;`, `&lt;AREA&gt;` и тег `&lt;img&gt;` нужно выводить с помощью операторов `*p` или `p`.</p>
<p>В-третьих, если вам удобнее записывать каждый тег отдельной строкой, нужно помнить, что QSP не игнорирует переводы строк между тегами, и это может привести к созданию артефактов. Все теги должны выводиться одной строкой, поэтому для записи команд, выводящих теги, используйте именно операторы `*p` и `p`.</p>
<p>Руководствуясь этими тремя правилами, создайте отдельный файл игры, и протестируйте в нём работу вашей картинки-карты.</p>
<p>Вот пример картинки, в центре которой будет создана кликабельная область.</p>
</segment>
<p><code>! включаем поддержку HTML</code></p>
<p><code>usehtml=1</code></p>
<p><code>! задаём разметку карты</code></p>
<p><code>*p '&lt;MAP name="KRUG"&gt;'</code></p>
<p><code>*p '&lt;AREA shape="circle" coords="200,200,175" href="exec:x=x+1 &amp; pl x"&gt;'</code></p>
<p><code>*p '&lt;/MAP&gt;'</code></p>
<p><code>! выводим изображение карты</code></p>
<p><code>*p '&lt;img src="путь к файлу изображения/изображение.png" usemap="#KRUG"&gt;'</code></p>
<segment>
<p>Обратите внимание, при наведении на кликабельную область в классическом плеере курсор не будет менять свой внешний вид.</p>
<p>Более подробно о том, как работать с тегами `MAP` и `AREA` вы можете прочитать в разделе 
<a l:href="#faq_16_10">
16.10. Как работать с тегами MAP и AREA?</a></p>
</segment>

</section>
<section id="faq_13_05">
<title head-level="h2">
<p>13.5. Не работает `*pl` в действии с `goto`</p>
</title>

<segment>
<p>В: Не работает `*pl` в действии с `goto`.</p>
<p>Ожидаю, что при нажатии на действие на экране появится текст, а действие исчезнет, но этого не происходит. Вот код в поле "выполнить при посещении" локации:</p>
</segment>
<p><code>if hide_act=0:</code></p>
<p><code>act 'Далее':</code></p>
<p><code>hide_act=1</code></p>
<p><code>*pl 'Действие скрылось.'</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>О:</p>
<p>Необходимо чётко представлять, как работает плеер в этом случае.</p>
<p>Сначала проверяется условие `hide_act=0`. Если условие верно, плеер выводит на экран действие "Далее". Этому действию соответствует набор команд:</p>
</segment>
<p><code>hide_act=1</code></p>
<p><code>*pl 'Действие скрылось.'</code></p>
<p><code>goto $curloc</code></p>
<segment>
<p>При нажатии на действие, команды выполняются по порядку:</p>
</segment>
<p><code>hide_act=1                    &amp; ! переменной hide_act присваивается значение 1</code></p>
<p><code>*pl 'Действие скрылось.'    &amp; ! на экран выводится строка текста</code></p>
<p><code>goto $curloc                &amp; ! плеер перезаходит на текущую локацию</code></p>
<segment>
<p>Итак, казалось бы всё правильно. Строка текста должна появиться на экране, а затем происходит повторный вход на текущую локацию. Однако при выполнении команды `goto` плеер очищает окно основного описания и окно действий. Именно поэтому действие при перезаходе на локацию "пропадёт". И именно поэтому мы не успеем увидеть, как надпись "Действие скрылось." будет выведена на экран.</p>
<p>Эту проблему можно решить следующим образом:</p>
</segment>
<p><code>if hide_act=0:</code></p>
<p><code>act 'Далее':</code></p>
<p><code>hide_act=1</code></p>
<p><code>*pl 'Действие скрылось.'</code></p>
<p><code>wait 1500</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>Так между выведением надписи на экран и переходом на текущую локацию будет задержка полторы секунды. Это не лучший способ, поскольку любая задержка, когда ничего нельзя сделать в игре, довольно сильно раздражает игрока. Намного правильнее выводить надпись, как и действие, по условию:</p>
</segment>
<p><code>if hide_act=1:</code></p>
<p><code>*pl 'Действие скрылось.'</code></p>
<p><code>end</code></p>
<p><code>if hide_act=0:</code></p>
<p><code>act 'Далее':</code></p>
<p><code>hide_act=1</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<p><code>end</code></p>

</section>
<section id="faq_13_08">
<title head-level="h2">
<p>13.8. Не работает оператор `JUMP` — не может найти метку</p>
</title>

<segment>
<p>В: Не работает оператор `JUMP` — не может найти метку.</p>
<p>У меня есть действие</p>
</segment>
<p><code>act "Прыгнуть":</code></p>
<p><code>jump 'loop'</code></p>
<p><code>end</code></p>
<segment>
<p>и метка "loop", расположенная в той же локации, что и действие, но плеер пишет, что указанная метка не найдена.</p>
<p>О:</p>
<p>Дело в том, что оператор `jump` может "прыгать" только по меткам, которые находятся в его области видимости. В данном случае область видимости оператора `jump` будет ограничена кодом действия, а значит "прыгнуть" он сможет только на метку, расположенную внутри действия.</p>
<p>Данный вариант работать не будет:</p>
</segment>
<p><code>:loop</code></p>
<p><code></code></p>
<p><code>!... какой-то код...</code></p>
<p><code></code></p>
<p><code>act "Прыгнуть":</code></p>
<p><code>jump 'loop'</code></p>
<p><code>end</code></p>
<segment>
<p>А вот этот сработает:</p>
</segment>
<p><code>act "Прыгнуть":</code></p>
<p><code>:loop</code></p>
<p><code></code></p>
<p><code>!... какой-то код...</code></p>
<p><code></code></p>
<p><code>jump 'loop'</code></p>
<p><code>end</code></p>
<segment>
<p>Сработает и этот вариант, поскольку код действия является частью кода локации, а значит входит в область видимости оператора `jump` (но действие при этом на экране не появится):</p>
</segment>
<p><code>jump 'loop'</code></p>
<p><code>act "Прыгнуть":</code></p>
<p><code>:loop</code></p>
<p><code>!... какой-то код...</code></p>
<p><code>end</code></p>
<segment>
<p>Аналогичным образом нельзя "выпрыгнуть" из кода гиперссылки и из кода, переданного оператору `dynamic` или фyнкции `dyneval`.</p>
</segment>

</section>
<section id="faq_13_09">
<title head-level="h2">
<p>13.9. Не работает многострочное условие. Как исправить?</p>
</title>

<segment>
<p>В: Не работает многострочный код. Как исправить?</p>
<p>Пишу такой код:</p>
</segment>
<p><code>if mark_var=1: 'Первый текст.'</code></p>
<p><code>'Второй текст.'</code></p>
<p><code>'Третий текст.'</code></p>
<p><code>end</code></p>
<segment>
<p>Но даже если `mark_var` равно нулю, второй и третий текст всё равно выводятся.</p>
<p>О:</p>
<p>Необходимо различать однострочную и многострочную формы записи конструкции условия.</p>
<p>Вот так выглядит однострочная форма:</p>
</segment>
<p><code>IF [#выражение]: [команды 1]</code></p>
<segment>
<p>Как видите, за ключевым словом `IF` следует выражение `[#выражение]`, и если это выражение верно, тогда выполняется набор команд `[команды 1]`, который записан после двоеточия в той же строке, что и `IF`. При этом команды перечисляются через амперсанд (`&amp;`).</p>
<p>Код из примера в однострочной форме должен будет выглядеть так:</p>
</segment>
<p><code>if mark_var=1: 'Первый текст.' &amp; 'Второй текст.' &amp; 'Третий текст.'</code></p>
<segment>
<p>Однострочную форму записи не требуется закрывать ключевым словом `END`, так как окончанием этой формы считается конец строки с `IF`.</p>
<p>А вот так выглядит многострочная форма записи конструкции условия:</p>
</segment>
<p><code>IF [#выражение]:</code></p>
<p><code>[команды 1]</code></p>
<p><code>END</code></p>
<segment>
<p>Здесь после двоеточия в той же строке, где находится и ключевое слово `IF`, ничего не пишется. Именно так плеер понимает, что имеет дело с многострочной формой записи. И в этом случае, если выражение `[#выражение]` верно, плеер ищет соответствующие верному условию команды (`[команды 1]`) в следующей строке после двоеточия.</p>
<p>Многострочная форма записи всегда закрывается ключевым словом `END`. Только так плеер может понять, что последующие команды уже не относятся к конструкции условия.</p>
<p>Код из примера в многострочной форме записи должен выглядеть так:</p>
</segment>
<p><code>if mark_var=1:</code></p>
<p><code>'Первый текст.'</code></p>
<p><code>'Второй текст.'</code></p>
<p><code>'Третий текст.'</code></p>
<p><code>end</code></p>
<segment>
<p>Или так:</p>
</segment>
<p><code>if mark_var=1:</code></p>
<p><code>'Первый текст.' &amp; 'Второй текст.' &amp; 'Третий текст.'</code></p>
<p><code>end</code></p>
<segment>
<p>Оба варианта являются многострочной формой записи конструкции условия.</p>
<p>Теперь нетрудно догадаться, почему даже когда `mark_var` равно нулю в исходном примере второй и ттретий тексты всё равно выводились.</p>
<p>Плеер встречает конструкцию:</p>
</segment>
<p><code>if mark_var=1: 'Первый текст.'</code></p>
<segment>
<p>и, поскольку за двоеточием в той же строке, где находится `IF`, идёт команда `'Первый текст.'`, плеер понимает, что это однострочная форма записи, а значит окончанием конструкции условия можно считать конец строки. Таким образом команды, расположенные в нижеследующих строках, для плеера попросту не относятся к конструкции условия, и он выполняет их в любом случае. `END` при этом игнорируется.</p>
</segment>

</section>
<section id="faq_13_10">
<title head-level="h2">
<p>13.10. Не работает многострочный код. Как исправить?</p>
</title>

<segment>
<p>В: Не работает многострочный код. Как исправить?</p>
<p>Пишу такой код:</p>
</segment>
<p><code>if яблоки_созрели=1:</code></p>
<p><code>"На берёзе созрело несколько яблок."</code></p>
<p><code>act "Сорвать яблоко":</code></p>
<p><code>яблоко=яблоко+1</code></p>
<p><code>"Я сорвал яблоко и положил в консервную банку."</code></p>
<p><code>else яблоко&gt;3:</code></p>
<p><code>"Мне больше не нужны яблоки"</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>Плеер выдаёт ошибку.</p>
<p>О:</p>
<p>Перепутаны назначения ключевых слов, очевидно от того, что вы не понимаете порядка работы оператора условия и оператора, создающего действие.</p>
<p>Многострочная форма записи конструкции условия имеет три вида.</p>
<p>Первый вид, это "простое" условие:</p>
</segment>
<p><code>IF [#выражение]:</code></p>
<p><code>[команда 1]</code></p>
<p><code>[команда 2]</code></p>
<p><code>[команда 3]</code></p>
<p><code>END</code></p>
<segment>
<p>За ключевым словом `IF` следует выражение `[#выражение]`, и если это выражение верно, плеер выполняет команды в последующих строках после двоеточия до ключевого слова `END`. Если выражение не верно, эти команды просто игнорируются плеером.</p>
<p>Второй вид, это "сложное" условие. Эта запись позволяет нам задать наборы команд на случай, если выражение верно, и на случай, если выражение неверно:</p>
</segment>
<p><code>IF [#выражение]:</code></p>
<p><code>[команда 1]</code></p>
<p><code>[команда 2]</code></p>
<p><code>[команда 3]</code></p>
<p><code>ELSE</code></p>
<p><code>[команда 4]</code></p>
<p><code>[команда 5]</code></p>
<p><code>[команда 6]</code></p>
<p><code>END</code></p>
<segment>
<p>В этом случае, если выражение `[#выражение]` верно, выполняются команды, записанные в последующих строках после двоеточия и до ключевого слова `ELSE`. Т.е. команды `[команда 1]`, `[команда 2]` и `[команда 3]`. А если выражение `[#выражение]` не верно, выполняются команды, записанные в последующих строках после ключевого слова `ELSE` и до ключевого слова `END`. Т.е. команды `[команда 4]`, `[команда 5]` и `[команда 6]`. При этом после `ELSE` не ставится двоеточие, и указать дополнительное условие проверки нельзя.</p>
<p>Чтобы указать дополнительное условие, предусмотрен третий вид, это "расширенное" условие, и выглядит он так:</p>
</segment>
<p><code>IF [#выражение 1]:</code></p>
<p><code>[команда 1]</code></p>
<p><code>[команда 2]</code></p>
<p><code>[команда 3]</code></p>
<p><code>ELSEIF [#выражение 2]:</code></p>
<p><code>[команда 4]</code></p>
<p><code>[команда 5]</code></p>
<p><code>[команда 6]</code></p>
<p><code>ELSE</code></p>
<p><code>[команда 7]</code></p>
<p><code>[команда 8]</code></p>
<p><code>[команда 9]</code></p>
<p><code>END</code></p>
<segment>
<p>Теперь мы можем в одну конструкцию уместить несколько условий и для каждого написать свой набор команд. Если верно выражение `[#выражение 1]`, плеер выполнит команды в последующих строках после двоеточия и до первого `ELSEIF`, т.е. команды `[команда 1]`, `[команда 2]` и `[команда 3]`. Все остальные команды в конструкции условия будет проигнорированы.</p>
<p>Однако, если выражение `[#выражение 1]` неверно, тогда проверяется выражение `[#выражение 2]`, и если оно верно, то выполняются команды в последующих строках до `ELSE`, т.е. комнады `[команда 4]`, `[команда 5]` и `[команда 6]`. И так далее.</p>
<p>Как видно, когда мы пишем ключевое слово `ELSEIF`, к нему нужно указать и выражение, истинность которого следует проверить, и после выражения поставить двоеточие.</p>
<p>Так выглядят три вида многострочной формы записи конструкции условий, но для многострочной записи действия предусмотрен только один вид.</p>
</segment>
<p><code>ACT "Название действия":</code></p>
<p><code>[команда 1]</code></p>
<p><code>[команда 2]</code></p>
<p><code>END</code></p>
<segment>
<p>В многострочной форме записи действия нельзя использовать ключевое слово `ELSE`, или `ELSEIF`. Они относятся только к конструкциям условий.</p>
<p>Тем не менее можно комбинировать различные конструкции, чтобы добиться правильной работы данного кода:</p>
</segment>
<p><code>! открываем общее условие</code></p>
<p><code>if яблоки_созрели=1:</code></p>
<p><code>! если значение переменной яблоки_созрели равно 1</code></p>
<p><code>! выводим на экран текст</code></p>
<p><code>"На берёзе созрело несколько яблок."</code></p>
<p><code>! выводим на экран соответствующее действие</code></p>
<p><code>act "Сорвать яблоко":</code></p>
<p><code>! далее следует код действия</code></p>
<p><code>! открываем внутри действия условие,</code></p>
<p><code>! проверяющее, сколько мы сорвали яблок</code></p>
<p><code>if яблоко&gt;3:</code></p>
<p><code>! если мы сорвали больше трёх яблок</code></p>
<p><code>! выводим текст, что нам больше не нужны яблоки</code></p>
<p><code>"Мне больше не нужны яблоки"</code></p>
<p><code>else</code></p>
<p><code>! иначе, если мы сорвали три или меньше яблок</code></p>
<p><code>! увеличиваем число сорванных яблок</code></p>
<p><code>яблоко=яблоко+1</code></p>
<p><code>! выводим текст, что сорвали ещё яблоко</code></p>
<p><code>"Я сорвал яблоко и положил в консервную банку."</code></p>
<p><code>! закрываем условие внутри действия</code></p>
<p><code>end</code></p>
<p><code>! закрываем действие</code></p>
<p><code>end</code></p>
<p><code>! закрываем общее условие</code></p>
<p><code>end</code></p>
<segment>
<p>От себя могу порекомендовать комментировать каждую строчку кода, если вы только начали изучать язык QSP. Это поможет более чётко и ясно понимать, как и что работает. Если вы не можете объяснить назначение той или иной строчки кода, то с ней следует разобраться. Она может быть банально лишней, а может вам ещё недостаёт знаний, чтобы правильно её применить.</p>
</segment>

</section>
<section id="faq_13_11">
<title head-level="h2">
<p>13.11. Сколько END'ов нужно добавить?</p>
</title>

<segment>
<p>В: Сколько `END`ов нужно добавить?</p>
<p>Пишу такой код:</p>
</segment>
<p><code>if силы&gt;0:</code></p>
<p><code>if энергия&gt;9:</code></p>
<p><code>act "Носить воду с колодца":</code></p>
<p><code>ведро=ведро+2</code></p>
<p><code>энергия=энергия-10</code></p>
<p><code>"Я принёс воды с колодца."</code></p>
<p><code>elseif энергия&gt;3:</code></p>
<p><code>act "Уныло лежать и ждать, когда восстановятся силы":</code></p>
<p><code>энергия=энергия+1</code></p>
<p><code>"Я немного полежал. Голова уже не кружится"</code></p>
<p><code>end</code></p>
<p><code>END</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>Плеер говорит, что в многострочной форме оператора остуствует `END`. Но сколько бы `END`ов я ни добавлял, ошибка не пропадает.</p>
<p>О:</p>
<p>Если понимаешь, зачем нужны `END`ы, то становится проще. `END`ом закрывается многострочная форма оператора.</p>
<p>Так выглядит многострочная форма действия:</p>
</segment>
<p><code>! ОТКРЫВАЕМ ДЕЙСТВИЕ</code></p>
<p><code>act 'действие':</code></p>
<p><code>! команда 1</code></p>
<p><code>! команда 2</code></p>
<p><code>! ...</code></p>
<p><code>! команда N</code></p>
<p><code>! ЗАКРЫВАЕМ ДЕЙСТВИЕ</code></p>
<p><code>end</code></p>
<segment>
<p>Так может выглядеть многострочная форма условия:</p>
</segment>
<p><code>! ОТКРЫВАЕМ УСЛОВИЕ</code></p>
<p><code>if условие=1:</code></p>
<p><code>! если условие 1 сработало</code></p>
<p><code>! команда 1</code></p>
<p><code>! команда 2</code></p>
<p><code>! ...</code></p>
<p><code>elseif условие=2:</code></p>
<p><code>! если условия 1 не сработало, но сработало условие 2</code></p>
<p><code>! команда 15</code></p>
<p><code>! команда 16</code></p>
<p><code>! ...</code></p>
<p><code>else</code></p>
<p><code>! иначе, если ни одно условие не сработало</code></p>
<p><code>! команда 49</code></p>
<p><code>! команда 50</code></p>
<p><code>! ...</code></p>
<p><code>! ЗАКРЫВАЕМ УСЛОВИЕ</code></p>
<p><code>end</code></p>
<segment>
<p>Если действие лежит внутри условия, то и закрываться оно должно внутри условия:</p>
</segment>
<p><code>! ОТКРЫВАЕМ УСЛОВИЕ</code></p>
<p><code>if условие=1:</code></p>
<p><code>! если условие 1 сработало</code></p>
<p><code>! ОТКРЫВАЕМ ДЕЙСТВИЕ</code></p>
<p><code>act 'действие':</code></p>
<p><code>! команда 102</code></p>
<p><code>! команда 103</code></p>
<p><code>! ...</code></p>
<p><code>! ЗАКРЫВАЕМ ДЕЙСТВИЕ</code></p>
<p><code>end</code></p>
<p><code>! команда 1</code></p>
<p><code>! команда 2</code></p>
<p><code>! ...</code></p>
<p><code>elseif условие=2:</code></p>
<p><code>! если условия 1 не сработало, но сработало условие 2</code></p>
<p><code>! команда 15</code></p>
<p><code>! команда 16</code></p>
<p><code>! ...</code></p>
<p><code>else</code></p>
<p><code>! иначе, если ни одно условие не сработало</code></p>
<p><code>! команда 49</code></p>
<p><code>! команда 50</code></p>
<p><code>! ...</code></p>
<p><code>! ЗАКРЫВАЕМ УСЛОВИЕ</code></p>
<p><code>end</code></p>
<segment>
<p>Таким образом исходный пример можно исправить так:</p>
</segment>
<p><code>! открываем общее условие</code></p>
<p><code>if сила&gt;0:</code></p>
<p><code>! открываем вложенное условие</code></p>
<p><code>if энергия&gt;9:</code></p>
<p><code>! открываем действие</code></p>
<p><code>act "Носить воду с колодца":</code></p>
<p><code>ведро=ведро+2</code></p>
<p><code>энергия=энергия-10</code></p>
<p><code>"Я принёс воды с колодца."</code></p>
<p><code>! закрываем действие</code></p>
<p><code>end</code></p>
<p><code>! если первое условие не сработало</code></p>
<p><code>elseif энергия&gt;3:</code></p>
<p><code>! открываем действие</code></p>
<p><code>act "Уныло лежать и ждать, когда восстановятся силы":</code></p>
<p><code>энергия=энергия+1</code></p>
<p><code>"Я немного полежал. Голова уже не кружится"</code></p>
<p><code>! закрываем действие</code></p>
<p><code>end</code></p>
<p><code>! закрываем вложенное условие</code></p>
<p><code>end</code></p>
<p><code>! закрываем общее условие</code></p>
<p><code>end</code></p>

</section>
<section id="faq_13_12">
<title head-level="h2">
<p>13.12. Не работает условие. Как исправить?</p>
</title>

<segment>
<p>В: Не работает условие. Как исправить?</p>
<p>Пишу такой код:</p>
</segment>
<p><code>if skrom&gt;10 and &lt;15:</code></p>
<p><code>! какой-то код</code></p>
<p><code>! ...</code></p>
<p><code>end</code></p>
<segment>
<p>Но плеер выдаёт ошибку.</p>
<p>О:</p>
<p>Дело в том, что в этом условии не полностью задана одна часть выражения.</p>
<p>Плеер проверяет `skrom` больше 10. Затем идёт `AND`, и плееру предлагается что-то сравнить с числом пятнадцать, но не указано что.</p>
<p>Правильно написать так:</p>
</segment>
<p><code>if skrom&gt;10 and skrom&lt;15:</code></p>
<p><code>! какой-то код</code></p>
<p><code>! ...</code></p>
<p><code>end</code></p>

</section>
<section id="faq_13_13">
<title head-level="h2">
<p>13.13. Не работают десятичные дроби, дробные числа, числа с запятыми!</p>
</title>

<segment>
<p>В: Не работают десятичные дроби, дробные числа, числа с запятыми!</p>
<p>О:</p>
<p>Да, всё верно. Об этом написано в справке:</p>
</segment>
<cite>
<p>QSP не поддерживает дробные числа, можно использовать только целые.</p>
</cite>
<segment>
<p>Однако, если очень уж хочется использовать дробные числа, есть выход.</p>
<p>Во-первых, все значения можно увеличить во столько раз, какая погрешность требуется.</p>
<p>Например, мне нужно считать с точностью до сотых долей. Я увеличиваю значение в 100 раз.</p>
<p>Было</p>
</segment>
<p><code>здоровье=100</code></p>
<segment>
<p>, теперь</p>
</segment>
<p><code>здоровье=10000</code></p>
<segment>
<p>Таким образом, если мне нужно вычесть пять сотых от этого значения, я просто вычитаю 5:</p>
</segment>
<p><code>здоровье=здоровье-5</code></p>
<segment>
<p>Однако, если мы попробуем вывести значение на экран как есть, это всё равно будет целое число, поэтому нам нужно "привести" его к требуемому виду. Это делается просто.</p>
<p>Целую часть получаем делением числа на 100:</p>
</segment>
<p><code>здоровье/100</code></p>
<segment>
<p>Дробную часть вычисляем, как остаток от деления на 100:</p>
</segment>
<p><code>здоровье mod 100</code></p>
<segment>
<p>Осталось показать на экране:</p>
</segment>
<p><code>*p "Здоровье: &lt;&lt;здоровье/100&gt;&gt;."+$iif((здоровье mod 100&lt;10),"0&lt;&lt;здоровье mod 100&gt;&gt;",$str(здоровье mod 100))+"/100"</code></p>
<segment>
<p>Во-вторых, если вам лень увеличивать числа и приводить их к нужной погрешности, воспользуйтесь уже готовой библиотечкой 
<a l:href="http://aleksversus.narod.ru/index/easy_math_qsp/0-56">
easy.math</a>. Она научит QSP работать с дробными числами. Правда это повысит нагрузку на игру, и в случае больших вычислений игра будет притормаживать.</p>
</segment>

</section>
</section>
<section id="faq_14">
<title anchor="faq_14" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\14_предметы\00.txt-light">
<p>14. Вопросы о предметах</p>
</title>
<section id="faq_14_01">
<title head-level="h2">
<p>14.1. Как добавить предмет в окно предметов?</p>
</title>

<segment>
<p>В: Как добавить предмет в окно предметов?</p>
<p>О:</p>
<p>Всё очень просто. Для этого используется оператор `addobj`. В качестве аргумента оператору передаётся название предмета:</p>
</segment>
<p><code>addobj "Отвёртка"</code></p>
<segment>
<p>Если нужно добавить предмет с картинкой, то вторым аргументом указывается путь к файлу картинки.</p>
<p>Например, файл картинки нашего предмета называется "screw.png" и лежит в папке "img", вложенной в папку с игрой, тогда предмет с картинкой можно добавить так:</p>
</segment>
<p><code>addobj "Отвёртка","img/screw.png"</code></p>
<segment>
<p>Ещё картинку можно вставлять прямо в название предмета, используя html. Для этого включаем поддержку html в плеере, прописав, например на самой первой локации в игре, команду:</p>
</segment>
<p><code>usehtml=1</code></p>
<segment>
<p>Далее добавляем предмет с картинкой, используя тег `&lt;img&gt;`. В атрибуте `src` этого тега указываем путь к файлу картинки:</p>
</segment>
<p><code>addobj "&lt;img scr='img/screw.png'&gt; Отвёртка"</code></p>
<segment>
<p>Обратите внимание. Хотя при этом на экране мы будем видеть картинку и слово "Отвёртка", названием предмета будет вся строка "&lt;img scr='img/screw.png'&gt; Отвёртка".</p>
</segment>

</section>
<section id="faq_14_02">
<title head-level="h2">
<p>14.2. Как удалить предмет из окна предметов?</p>
</title>

<segment>
<p>В: Как удалить предмет из окна предметов?</p>
<p>О:</p>
<p>Для того, чтобы удалить предмет из окна предметов, необходимо воспользоваться оператором `delobj`. Оператор `delobj` удаляет предмет по названию предмета, то есть в качестве аргумента этому оператору указываем название предмета:</p>
</segment>
<p><code>delobj "Отвёртка"</code></p>
<segment>
<p>Если вы выводили картинку в названии предмета с помощью html, то частью названия предмета является и html-тег `&lt;img&gt;`, а значит удалять предмет нужно точно так же, полностью указывая название:</p>
</segment>
<p><code>delobj "&lt;img scr='img/screw.png'&gt; Отвёртка"</code></p>
<segment>
<p>Существует оператор, который удаляет предмет по индексу. Это оператор `killobj`. В качестве аргумента указываем номер предмета в списке:</p>
</segment>
<p><code>killobj 3</code></p>
<segment>
<p>Если не указывать аргумент оператору `killobj`, он удалит все предметы в списке:</p>
</segment>
<p><code>killobj</code></p>

</section>
<section id="faq_14_03">
<title head-level="h2">
<p>14.3. Как удалить все предметы?</p>
</title>

<segment>
<p>В: Как удалить все предметы?</p>
<p>О:</p>
<p>Используйте для этого оператор `killobj`:</p>
</segment>
<p><code>killobj</code></p>
<segment>
<p>Если указать оператору `killobj` аргументом какой-то номер, он удалит только предмет в позиции, соответствующей этому номеру:</p>
</segment>
<p><code>killobj 3</code></p>

</section>
<section id="faq_14_04">
<title head-level="h2">
<p>14.4. Как добавить предмет в определённую позицию в окне предметов?</p>
</title>

<segment>
<p>В: Как добавить предмет в определённую позицию в окне предметов?</p>
<p>О:</p>
<p>Вы можете указать номер позиции, в которую хотите добавить предмет, третим аргументом оператору `addobj`:</p>
</segment>
<p><code>addobj "Название предмета","Путь к файлу картинки/картинка.jpg",3</code></p>
<segment>
<p>Можно добавлять предметы только в уже существующие позиции, либо в позицию сразу за последним предметом. Если вы укажете большее число, предмет не добавится:</p>
</segment>
<p><code>! исходный список предметов</code></p>
<p><code>addobj "Отвёртка"</code></p>
<p><code>addobj "Гаечный ключ"</code></p>
<p><code>addobj "Радиоактивный пепел"</code></p>
<p><code>! добавляем предмет без картинки в седьмую позицию, которой ещё нет</code></p>
<p><code>addobj "Апельсин","",7</code></p>
<segment>
<p>Обратите внимание, если вы добавляете предмет в уже существующую позицию, предмет, стоявший в этой позиции, а так же следующие за ним, будут смещены на позицию вниз. Т.е. замена предметов при добавлении в уже существующую позицию не происходит:</p>
</segment>
<p><code>! предмет в первой позиции</code></p>
<p><code>addobj "Отвёртка"</code></p>
<p><code>! предмет во второй позиции</code></p>
<p><code>addobj "Гаечный ключ"</code></p>
<p><code>! предмет в третьей позиции</code></p>
<p><code>addobj "Радиоактивный пепел"</code></p>
<p><code>! добавляем предмет во вторую позицию, при этом</code></p>
<p><code>! гаечный ключ и радиоактивный пепел сместятся</code></p>
<p><code>! на позицию вниз</code></p>
<p><code>addobj "Апельсин","",2</code></p>

</section>
<section id="faq_14_05">
<title head-level="h2">
<p>14.5. Как заменить один предмет на другой?</p>
</title>

<segment>
<p>В: Как заменить один предмет на другой?</p>
<p>О:</p>
<p>Чтобы заменить один предмет на другой, нужно удалить старый предмет, а в позицию, которую он занимал, вписать новый предмет.</p>
<p>Если вы знаете позицию предмета, который собираетесь удалить, то код довольно простой:</p>
</segment>
<p><code>! светящийся шар был помещён в третью позицию</code></p>
<p><code></code></p>
<p><code>! удаляем светящийся шар</code></p>
<p><code>delobj "Светящийся шар"</code></p>
<p><code>! добавляем "Тёмный шар" в третью позицию</code></p>
<p><code>addobj "Тёмный шар","",3</code></p>
<segment>
<p>Если вы не знаете заранее, в какой позиции окажется тот или иной предмет, придётся написать алгоритм, который будет находить позицию нужного предмета перед удалением:</p>
</segment>
<p><code>!ищем позицию предмета по имени</code></p>
<p><code>loop local i=1 while no i &gt; countobj step i+=1 :</code></p>
<p><code>if $getobj(i)="Светящийся шар":</code></p>
<p><code>objnumber = i</code></p>
<p><code>jump 'end_cycle'</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<p><code>:end_cycle</code></p>
<p><code>! удаляем предмет по индексу</code></p>
<p><code>killobj objnumber</code></p>
<p><code>! вставляем на его место новый предмет</code></p>
<p><code>addobj "Тёмный шар","",objnumber</code></p>
<segment>
<p>Функция `countobj` возвращает число предметов в инвентаре. Функция `$getobj` возвращает название предмета по его номеру.</p>
<p>То есть, данный алгоритм сравнивает названия всех предметов в инвентаре по очереди, и если встречает такое же название, как мы указали, записывает номер в переменную `objnumber`.</p>
</segment>

</section>
<section id="faq_14_06">
<title head-level="h2">
<p>14.6. Как делать динамические/считаемые предметы?</p>
</title>

<segment>
<p>В: Как делать динамические/считаемые предметы?</p>
<p>В: Как делать стакающиеся предметы?</p>
<p>В: Как делать предметы, рядом с названиями которых выводится их количество?</p>
<p>О:</p>
<p>Допустим, на разных локациях мы можем подбирать одинаковые предметы с названием "Грибочек". Если мы просто пропишем везде команду:</p>
</segment>
<p><code>addobj "Грибочек"</code></p>
<segment>
<p>, то наш инвентарь окажется захламлён множеством одинаковых "Грибочков". Чтобы избежать этого, обычно заводят переменную, которая ведёт подсчёт числа предметов, и тогда код каждого подъёма грибочков слегка усложняется:</p>
</segment>
<p><code>if грибочек=0:</code></p>
<p><code>! если мы ещё не собрали ни одного грибочка</code></p>
<p><code>! добавляем предмет</code></p>
<p><code>addobj "Грибочек"</code></p>
<p><code>end</code></p>
<p><code>! увеличиваем число собранных грибочков на 1</code></p>
<p><code>грибочек=грибочек+1</code></p>
<segment>
<p>Затем можно выводить число грибочков на экран при щелчке по предмету "Грибочек".</p>
<p>Но как же сделать, чтобы в окне инвентаря отображалась актуальная информация о числе "Грибочков", и нам не приходилось щёлкать по предмету?</p>
<p>Мы можем добавить в окно инвентаря предмет, указав его количество прямо в названии:</p>
</segment>
<p><code>! увеличиваем число грибочков</code></p>
<p><code>грибочек=грибочек+1</code></p>
<p><code>! добавляем предмет с указанным количеством</code></p>
<p><code>addobj "Грибочек (&lt;&lt;грибочек&gt;&gt; шт.)"</code></p>
<segment>
<p>А чтобы с экрана пропадал предмет со старым названием, необходимо его предварительно удалить с помощью оператора `delobj`:</p>
</segment>
<p><code>! удаляем старый предмет</code></p>
<p><code>delobj "Грибочек (&lt;&lt;грибочек&gt;&gt; шт.)"</code></p>
<p><code>! увеличиваем число грибочков</code></p>
<p><code>грибочек=грибочек+1</code></p>
<p><code>! добавляем предмет с новым количеством</code></p>
<p><code>addobj "Грибочек (&lt;&lt;грибочек&gt;&gt; шт.)"</code></p>
<segment>
<p>Иными словами, всякий раз, как мы изменяем количество, предмет со старым названием удаляется из инвентаря, а предмет с новым, актуальным названием добавляется в инвентарь.</p>
<p>При этом у вас могут возникнуть сложности со взаимодействием с этим предметом, например, в локации-обработчике выделения предмета, поскольку теперь нельзя будет точно предсказать, в какой момент игры, какое будет у предмета название. Условие:</p>
</segment>
<p><code>if $selobj="Грибочек":</code></p>
<segment>
<p>не сработает. В этом случае нужно проверять только часть названия, например с помощью функции `instr`:</p>
</segment>
<p><code>if instr($selobj,"Грибочек")&lt;&gt;0:</code></p>

</section>
<section id="faq_14_07">
<title head-level="h2">
<p>14.7. Как добавить предмет с картинкой но без названия?</p>
</title>

<segment>
<p>В: Как добавить предмет с картинкой но без названия?</p>
<p>О:</p>
<p>Первое, что приходит на ум, это поставить вместо названия пробел, а вторым аргументом указать путь к названию картинки:</p>
</segment>
<p><code>addobj " ","img/screw.png"</code></p>
<segment>
<p>Однако этот способ не подходит, если необходимо как-то взаимодействовать с предметами, а их у вас несколько. В этом случае, нужно воспользоваться возможностями html. Для этого, например, в самой первой локации в игре включаем режим распознавания html командой:</p>
</segment>
<p><code>usehtml=1</code></p>
<segment>
<p>И добавляем предметы, названия которых целиком представляют собой тег `&lt;img&gt;` со ссылкой на картинку в атрибуте `src`:</p>
</segment>
<p><code>addobj '&lt;img src="img/screw.png"&gt;'</code></p>
<segment>
<p>Если по какой-либо причине вы не хотите в названии использовать тег `&lt;img&gt;`, а картинку добавляете с помощью второго аргумента к `addobj`, при включенном html можно заворачивать название предмета в угловые скобки:</p>
</segment>
<p><code>addobj "&lt;Отвёртка&gt;","img/screw.png"</code></p>
<segment>
<p>Этот способ не подходит для AeroQSP. Аэро очень не любит несуществующие теги, поэтому здесь код для добавления предмета может быть таким:</p>
</segment>
<p><code>addobj "&lt;a title='Отвёртка'&gt;&lt;/a&gt;","img/screw.png"</code></p>
<segment>
<p>Хотя проще вставить картинку тегом `&lt;img&gt;` прямо в название.</p>
</segment>

</section>
<section id="faq_14_08">
<title head-level="h2">
<p>14.8. Как сделать, чтоб при щелчке по предмету выполнялся какой-либо код?</p>
</title>

<segment>
<p>В: Как сделать, чтоб при щелчке по предмету выполнялся какой-либо код?</p>
<p>О:</p>
<p>Для начала нужно завести локацию-обработчик выделения предмета. Для этого:</p>
</segment>


<p>* 
создаём локацию и называем, например, "если_предмет_выбран". Название может быть любым.</p>


<segment>
<p>* 
в самой первой локации в игре указываем плееру, какую локацию он должен использовать, как обработчик выделения предмета. Для этого в системную переменную `$onobjsel` вносим имя нашей новой локации:</p>
</segment>
<p><code>$onobjsel="если_предмет_выбран"</code></p>


<segment>
<p>Теперь код локации будет выполняться всякий раз, когда мы выделяем новый предмет.</p>
<p>Функция `$selobj` возвращает нам название выделенного предмета, поэтому на локации-обработчике мы можем проверять, какой предмет выделен, и выполнять соответствующий код.</p>
<p>Например, можно выводить описание предмета в окно дополнительного описания при щелчке по предмету:</p>
</segment>
<p><code>if $selobj="Отвёртка":</code></p>
<p><code>! если выделен предмет Отвёртка</code></p>
<p><code>! очищаем окно доп описания</code></p>
<p><code>clr</code></p>
<p><code>! выводим описание предмета</code></p>
<p><code>pl "Прекрасная крестовая отвёртка. Отлично подойдёт для регулирования уровня громкости"</code></p>
<p><code>end</code></p>
<segment>
<p>Или совершать переход на локацию:</p>
</segment>
<p><code>if $selobj="Камень телепортации":</code></p>
<p><code>! если выделен предмет Камень телепортации</code></p>
<p><code>! переходим на локацию</code></p>
<p><code>goto "Эверест"</code></p>
<p><code>end</code></p>
<segment>
<p>В конце локации-обработчика не забывайте ставить команду `unselect`, чтобы снять выделение и дать игроку возможность повторно воспользоваться предметом.</p>
</segment>

</section>
<section id="faq_14_09">
<title head-level="h2">
<p>14.9. Как снять выделение предмета?</p>
</title>

<segment>
<p>В: Как снять выделение предмета?</p>
<p>В: Как сделать, чтобы выбранный предмет можно было кликнуть ещё раз?</p>
<p>О:</p>
<p>Выделение с предмета снимается с помощью команды `unselect`. Обычно её прописывают в конце локации-обработчика выделения предмета:</p>
</segment>
<p><code>unselect</code></p>
<segment>
<p>Однако эта команда не успеет выполниться, если при щелчке по предмету происходит переход с помощью оператора `goto`/`xgoto`. В этом случае можно воспользоваться таким решением:</p>
</segment>
<p><code>! запоминаем название выделенного предмета</code></p>
<p><code>$object=$selobj</code></p>
<p><code>! снимаем выделение</code></p>
<p><code>unselect</code></p>
<p><code></code></p>
<p><code>! далее работаем с сохранённым названием выделенного предмета</code></p>
<p><code>if $object="Камень телепортации":</code></p>
<p><code>! если был выделен Камень телепортации</code></p>
<p><code>! переходим на локацию Эверест</code></p>
<p><code>goto "Эверест"</code></p>
<p><code>end</code></p>

</section>
<section id="faq_14_10">
<title head-level="h2">
<p>14.10. Как сделать два списка предметов?</p>
</title>

<segment>
<p>В: Как сделать два списка предметов? Например для игры за разных персонажей.</p>
<p>О:</p>
<p>Списки предметов можно хранить в разных массивах. Например:</p>
</segment>
<p><code>! список предметов персонажа Вася</code></p>
<p><code>$вася_предметы[0]="Отвёртка"</code></p>
<p><code>$вася_предметы[1]="Гаечный ключ"</code></p>
<p><code>$вася_предметы[2]="Ножовка"</code></p>
<p><code>! список предметов персонажа Петя</code></p>
<p><code>$петя_предметы[0]="Радиоактивный пепел"</code></p>
<p><code>$петя_предметы[1]="Хрустальный шар"</code></p>
<p><code>$петя_предметы[2]="Апельсин"</code></p>
<segment>
<p>Допустим, мы играем за персонаж Петя. Тогда добавление предметов должно выглядеть так:</p>
</segment>
<p><code>! добавляем предмет в окно предметов</code></p>
<p><code>addobj "Бутылка кетчупа"</code></p>
<p><code>! запоминаем название предмета в массиве</code></p>
<p><code>$петя_предметы[]="Бутылка кетчупа"</code></p>
<segment>
<p>Пустые квадратные скобки после названия массива означают, что нужно записать значение в ячейку следующую за последней (в новую).</p>
<p>Удаление предмета соответственно будет выглядеть так:</p>
</segment>
<p><code>! удаляем предмет из окна предметов</code></p>
<p><code>delobj "Бутылка кетчупа"</code></p>
<p><code>! удаляем запись о предмете из массива</code></p>
<p><code>killvar "$петя_предметы",arrpos("$петя_предметы","Бутылка кетчупа")</code></p>
<segment>
<p>Когда нам нужно сменить персонаж, мы делаем следующее:</p>
</segment>
<p><code>! очищаем список предметов в окне предметов</code></p>
<p><code>killobj</code></p>
<p><code>! выводим все предметы из списка другого персонажа</code></p>
<p><code>! с помощью цикла</code></p>
<p><code>i=0</code></p>
<p><code>loop local i=0 while i&lt;arrsize("$вася_предметы") step i+=1:</code></p>
<p><code>! пока счётчик не превысил номер последней ячейки массива</code></p>
<p><code>! выводим в окно предметов предмет, записанный в массив</code></p>
<p><code>addobj $вася_предметы[i]</code></p>
<p><code>end</code></p>
<segment>
<p>Можно написать универсальные локации для каждого из этих алгоритмов и использовать их, когда нужно. Для подробностей см. 
<a l:href="#faq_80_02_gosub">
оператор `gosub`</a>.</p>
<p>Если вам нужно более двух списков предметов, то заводить отдельный массив на каждый неразумно. Проще завести два массива:</p>
</segment>


<p>* 
в одном массиве прописывать сам предмет: `$предмет_название[0]="Бутылка кетчупа"`</p>
<p>* 
во втором массиве прописывать, кому принадлежит предмет (или где лежит): `$предмет_расположение[0]="Петя"`</p>


<segment>
<p>Добавление предмета немного усложнится:</p>
</segment>
<p><code>! добавляем предмет в окно предметов</code></p>
<p><code>addobj "Бутылка кетчупа"</code></p>
<p><code>! добавляем название в список и указываем, кому принадлежит</code></p>
<p><code>$предмет_название[]="Бутылка кетчупа"</code></p>
<p><code>$предмет_расположение[]="Петя"</code></p>
<segment>
<p>Важно, чтобы предмет и его расположение прописывались в массивы под одним индексом. Тогда удаление:</p>
</segment>
<p><code>! удаляем предмет из окна предметов</code></p>
<p><code>delobj "Бутылка кетчупа"</code></p>
<p><code>! удаляем и название предмета из списка и его расположение</code></p>
<p><code>i=arrpos("$предмет_название","Бутылка кетчупа")</code></p>
<p><code>killvar "$предмет_название",i</code></p>
<p><code>killvar "$предмет_расположение",i</code></p>
<segment>
<p>Вывести все предметы текущего персонажа можно так:</p>
</segment>
<p><code>! где-то ранее мы написали имя персонажа в переменную</code></p>
<p><code>$персонаж_имя="Петя"</code></p>
<p><code></code></p>
<p><code>! очищаем окно предметов от предметов другого персонажа</code></p>
<p><code>killobj</code></p>
<p><code>! выводим предметы пети в окно предметов</code></p>
<p><code>loop local i=0 while i&lt;arrsize("$предмет_название") step i+=1:</code></p>
<p><code>! пока счётчик не превысил номер последней ячейки массива</code></p>
<p><code>if $предмет_расположение[i]=$персонаж_имя:</code></p>
<p><code>! если предмет находится у пети</code></p>
<p><code>! выводим в окно предметов предмет, записанный в массив</code></p>
<p><code>addobj $предмет_название[i]</code></p>
<p><code>end</code></p>
<p><code>end</code></p>

</section>
<section id="faq_14_11">
<title head-level="h2">
<p>14.11. Как сделать, чтобы плеер выполнял определённый код при добавлении любого предмета?</p>
</title>

<segment>
<p>В: Как сделать, чтобы плеер выполнял определённый код при добавлении любого предмета?</p>
<p>О:</p>
<p>Для этого используйте локацию-обработчик события "добавление предмета". Чтобы сделать это, нужно:</p>
</segment>


<p>* 
создать локацию, например с названием "предмет_добавлен" (название может быть любым),</p>


<segment>
<p>* 
указать плееру, какую локацию он должен использовать, как локацию-обработчик события "добавление предмета":</p>
</segment>
<p><code>$onobjadd="предмет_добавлен"</code></p>


<segment>
<p>Теперь на локации "предмет_добавлен" можно прописать нужный вам код.</p>
<p>Локации-обработчику события "добавление предмета" передаются два значения, которые вы можете получить из массива `args`:</p>
</segment>


<p>* 
`$args[0]` — название добавляемого предмета</p>
<p>* 
`$args[1]` — путь к файлу картинки добавляемого предмета</p>


<segment>
<p>Код локации-обработчика события "добавление предмета" выполняется уже после того, как предмет добавлен в окно предметов. Учитывайте это, например, при использовании функции `countobj`.</p>
</segment>

</section>
<section id="faq_14_12">
<title head-level="h2">
<p>14.12. Как сделать два разных предмета с одинаковыми названиями?</p>
</title>

<segment>
<p>В: Как сделать два разных предмета с одинаковыми названиями?</p>
<p>Например, есть два старых меча. Но у одного параметр атаки `+3`, а у другого `+5`. Нужно, чтобы в окне предметов выводились одинаковые названия "Старый меч", но когда щёлкаешь по одному, выводились его параметры, а по другому — другие параметры.</p>
<p>О:</p>
<p>К сожалению, сделать два "разных" предмета с одинаковыми названиями не получится. В QSP можно получать только название выделенного предмета (с помощью функции `$selobj`).</p>
<p>Однако, мы можем прописать в названии некие отличительные данные предмета и скрыть эти данные от игрока. Для этого:</p>
</segment>


<segment>
<p>* 
включаем распознавание html, прописав, например, на самой первой локации в игре команду:</p>
</segment>
<p><code>usehtml=1</code></p>


<segment>
<p>* 
в названиях предметов прописываем их отличительные особенности, используя несуществующие html-теги:</p>
</segment>
<p><code>addobj "Старый меч&lt;atack:+3&gt;"</code></p>
<p><code>addobj "Старый меч&lt;atack:+5&gt;"</code></p>


<segment>
<p>На экране игрок увидит одинаковые названия "Старый меч", однако плеер будет работать с их полными названиями. Для примера, код локации-обработчика выделения предмета:</p>
</segment>
<p><code>if $selobj="Старый меч&lt;atack:+3&gt;":</code></p>
<p><code>clr</code></p>
<p><code>pl "Старый меч"</code></p>
<p><code>pl "Сила атаки: +3"</code></p>
<p><code>end</code></p>
<p><code>if $selobj="Старый меч&lt;atack:+5&gt;":</code></p>
<p><code>clr</code></p>
<p><code>pl "Старый меч (с зазубринами)"</code></p>
<p><code>pl "Сила атаки: +5"</code></p>
<p><code>end</code></p>

</section>
<section id="faq_14_13">
<title head-level="h2">
<p>14.13. Как сделать многоуровневый рюкзак?</p>
</title>

<segment>
<p>В: Как сделать многоуровневый рюкзак?</p>
<p>В: Как сделать предметы в предметах?</p>
<p>Например, щёлкаешь по предмету "Рюкзак", и в окне инвентаря появляется список предметов в рюкзаке.</p>
<p>О:</p>
<p>Списки предметов можно хранить в разных массивах. Например:</p>
</segment>
<p><code>! верхний уровень предметов</code></p>
<p><code>$ур0_предметы[0]="Дневник заданий"</code></p>
<p><code>$ур0_предметы[1]="Рюкзак"</code></p>
<p><code>$ур0_предметы[2]="Книга заклинаний"</code></p>
<p><code>$ур0_предметы[3]="Кошелёк"</code></p>
<p><code>! предметы в рюкзаке</code></p>
<p><code>$ур1_предметы[0]="Отвёртка"</code></p>
<p><code>$ур1_предметы[1]="Хрустальный шар"</code></p>
<p><code>$ур1_предметы[2]="Агар-Агар"</code></p>
<segment>
<p>С помощью цикла любой из этих списков можно вывести на экран.</p>
<p>На локации-обработчике выделения предмета можно прописать примерно такой код:</p>
</segment>
<p><code>if $selobj="Рюкзак":</code></p>
<p><code>! если кликнули по предмету рюкзак</code></p>
<p><code>! удаляем список предметов верхнего уровня</code></p>
<p><code>killobj</code></p>
<p><code>! выводим предмет, позволяющий вернуться обратно</code></p>
<p><code>! к списку предметов верхнего уровня</code></p>
<p><code>addobj "...Назад..."</code></p>
<p><code>! выводим предметы в рюкзаке</code></p>
<p><code>loop local i=0 while i&lt;arrsize('$ур1_предметы') step i+=1:</code></p>
<p><code>addobj $ур1_предметы[i]</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>if $selobj="...Назад...":</code></p>
<p><code>! если кликнули по предмету Назад</code></p>
<p><code>! удаляем старый список с экрана</code></p>
<p><code>killobj</code></p>
<p><code>! выводим новый (предметы верхнего уровня)</code></p>
<p><code>loop local i=0 while i&lt;arrsize('$ур0_предметы') step i+=1:</code></p>
<p><code>addobj $ур0_предметы[i]</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>Если вам нужно более двух списков предметов, то заводить отдельный массив на каждый неразумно. Проще завести два массива:</p>
</segment>


<p>* 
в одном массиве прописывать сам предмет: `$предмет_название[0]="Бутылка кетчупа"`</p>
<p>* 
во втором массиве прописывать, где этот предмет находится: `$предмет_расположение[0]="Рюкзак"`</p>


<segment>
<p>Важно, чтобы индексы и предмета, и его расположения, в каждом массиве совпадали.</p>
<p>Вывести все предметы текущего уровня можно так:</p>
</segment>
<p><code>! где-то ранее мы написали, предметы какого уровня нам нужно вывести</code></p>
<p><code>$уровень_вложений="Рюкзак"</code></p>
<p><code>! очищаем окно предметов от предметов другого уровня</code></p>
<p><code>killobj</code></p>
<p><code>! выводим предметы текущего уровня в окно предметов</code></p>
<p><code>loop local i=0 while i&lt;arrsize("$предмет_название") step i+=1:</code></p>
<p><code>! пока счётчик не превысил номер последней ячейки массива</code></p>
<p><code>if $предмет_расположение[i]=$уровень_вложений:</code></p>
<p><code>! если предмет находится на текущем уровне</code></p>
<p><code>! выводим в окно предметов предмет, записанный в массив</code></p>
<p><code>addobj $предмет_название[i]</code></p>
<p><code>end</code></p>
<p><code>end</code></p>

</section>
<section id="faq_14_14">
<title head-level="h2">
<p>14.14. Можно ли выводить предметы не в окне предметов?</p>
</title>

<segment>
<p>В: Можно ли выводить предметы не в окне предметов?</p>
<p>О:</p>
<p>Да, конечно можно. Названия предметов можно записывать в отдельный массив, а выводить в окно основного описания в виде гиперссылок:</p>
</segment>
<p><code>! предметы в массиве</code></p>
<p><code>$предметы[0]="Отвёртка"</code></p>
<p><code>$предметы[1]="Гаечный ключ"</code></p>
<p><code>$предметы[2]="Ножовка"</code></p>
<p><code>$предметы[3]="Радиоактивный пепел"</code></p>
<p><code>$предметы[4]="Хрустальный шар"</code></p>
<p><code>$предметы[5]="Апельсин"</code></p>
<p><code></code></p>
<p><code>! вывод списка предметов на экран:</code></p>
<p><code>loop local i=0 while i&lt;arrsize('$предметы') step i+=1:</code></p>
<p><code>! пока счётчик меньше размера массива</code></p>
<p><code>! выводим предмет в виде гиперссылки</code></p>
<p><code>*pl "&lt;a href=""EXEC:gosub 'objClick','&lt;&lt;$предметы[i]&gt;&gt;'""&gt;&lt;&lt;$предметы[i]&gt;&gt;&lt;/a&gt;"</code></p>
<p><code>end</code></p>
<segment>
<p>Как видите, из гиперссылки идёт обращение к некоей локации "objClick". Эта локация будет заменять нам локацию-обработчик выделения предмета. И так же вы можете видеть, что название предмета на эту локацию передаётся в качестве аргумента. То есть искать его нужно в `$args[0]`:</p>
</segment>
<p><code>! код локации objClick</code></p>
<p><code>! мало чем отличается от подобного кода в локации-обработчике выделения предмета</code></p>
<p><code>if $args[0]="Отвёртка":</code></p>
<p><code>! если щёлкнули по предмету "Отвёртка"</code></p>
<p><code>! очищаем окно доп описания</code></p>
<p><code>clr</code></p>
<p><code>! выводим описание предмета</code></p>
<p><code>pl "Прекрасная крестовая отвёртка. Отлично подойдёт для регулирования уровня громкости"</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>! и так далее для других предметов</code></p>

</section>
</section>
<section id="faq_15">
<title anchor="faq_15" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\15_строка ввода\00.txt-light">
<p>15. Вопросы о строке ввода</p>
</title>
<section id="faq_15_01">
<title head-level="h2">
<p>15.1. Зачем вообще нужна строка ввода (поле ввода)?</p>
</title>

<segment>
<p>В: Зачем вообще нужна строка ввода (поле ввода)?</p>
<p>О:</p>
<p>Строка ввода — это наследие так называемых парсерных игр, то есть игр, где управление производится с помощью ввода текста игроком. Игрок вводит в поле ввода текст вроде "войти в здание" или "взять апельсин", а игра реагирует на введённый текст. Есть даже специальные платформы, ориентированные на парсерные игры.</p>
<p>Quest Soft Player — платформа ориентированная на "менюшные" игры. То есть игры, управление в которых осуществляется с помощью нажатия на кнопки, ссылки, пункты меню и т.д. В QSP нет собственного синтаксического анализатора — важнейшего механизма, который позволяет игре воспринимать и понимать текст, введённый игроком. Тем не менее парсерные игры на QSP писать можно:</p>
</segment>


<p>* 
<a l:href="https://ifwiki.ru/Великая_Пустота_9">
Великая Пустота 9</a></p>
<p>* 
<a l:href="https://ifwiki.ru/Волшебный_экзамен">
Волшебный экзамен</a></p>


<segment>
<p>Так же строку ввода можно использовать при организации собственного отладчика, или для расширения возможностей игрока внутри игры.</p>
<p>Для ввода различных данных в процессе игры, например паролей от сейфов, ответов на вопросы, и — прочего, лучше использовать диалоговое окно, вызываемое функцией `$input`.</p>
</segment>

</section>
<section id="faq_15_02">
<title head-level="h2">
<p>15.2. Как задействовать строку ввода в игре?</p>
</title>

<segment>
<p>В: Как задействовать строку ввода в игре?</p>
<p>О:</p>
<p>Начать следует с того, что любой текст, введённый игроком, можно получить в любой момент с помощью функции `$user_text`.</p>
<p>Для примера попробуйте сделать следующее:</p>
</segment>


<segment>
<p>1. 
Включите строку ввода:</p>
</segment>
<p><code>showinput 1</code></p>


<segment>
<p>2. 
Создайте действие:</p>
</segment>
<p><code>act "Вывести текст из строки ввода":</code></p>
<p><code>*pl $user_text</code></p>
<p><code>end</code></p>
<p>3. 
Теперь запустите игру, пробуйте вводить текст в поле ввода, а затем нажимать на действие. Текст из поля ввода будет появляться на экране.</p>


<segment>
<p>Далее обратимся к локации-обработчику строки ввода. Несмотря на то, что предназначение локации "обработчик строки ввода", сама по себе эта локация строку ввода не обрабатывает. Код этой системной локации выполняется, если установить курсор в поле ввода, а затем нажать клавишу "Enter".</p>
<p>Для того, чтобы это проверить, проделайте следующее:</p>
</segment>


<p>1. 
Создайте новую локацию. Имя может быть любым, но для примера назовём её "обработчик_ввода".</p>


<segment>
<p>2. 
Чтобы плеер понял, какую локацию он должен использовать, как обработчик строки ввода, необходимо прописать название этой локации в переменной `$usercom`. Например, на самой первой локации в игре пишем:</p>
</segment>
<p><code>$usercom="обработчик_ввода"</code></p>


<segment>
<p>3. 
На локации-обработчике строки ввода пишем такой код:</p>
</segment>
<p><code>! увеличиваем значение переменной на единицу</code></p>
<p><code>enter=enter+1</code></p>
<p><code>! выводим на экран</code></p>
<p><code>*pl enter</code></p>
<p>4. 
Теперь, когда вы запустите игру и установите курсор в поле ввода, а затем нажмёте клавишу "Enter", вы увидите, что на экране появится число. С каждым нажатием клавиши "Enter" на экране будет появляться новое число.</p>


<segment>
<p>Объединив две эти возможности, можно задействовать строку ввода. Т.е. по нажатию клавиши "Enter", прямо на локации-обработчике строки ввода с помощью функции `$user_text` получаем текст, введённый игроком, и производим действия, в зависимости от того, что нам нужно:</p>
</segment>
<p><code>! локация "обработчик_ввода" (usercom)</code></p>
<p><code>if $user_text="войти в комнату":</code></p>
<p><code>! если введён текст "войти в комнату"</code></p>
<p><code>! отправляем игрока на локацию "комната"</code></p>
<p><code>goto "комната"</code></p>
<p><code>! закрываем условие</code></p>
<p><code>end</code></p>

</section>
</section>
<section id="faq_16">
<title anchor="faq_16" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\16_вёрстка\00.txt-light">
<p>16. Вопросы по вёрстке</p>
</title>
<section id="faq_16_01">
<title head-level="h2">
<p>16.01. Можно ли писать текст поверх вставленной картинки (не бэкграунда)?</p>
</title>

<segment>
<p>В: Можно ли писать текст поверх вставленной картинки (не бэкграунда)?</p>
<p>О:</p>
<p>Классический плеер не поддерживает работу со слоями, поэтому в нём нельзя накладывать картинку на картинку, или текст на картинку.</p>
<p>Однако работу со слоями поддерживает qSpider. Воспользуйтесь им, если вам нужны все возможности HTML.</p>
</segment>

</section>
<section id="faq_16_02">
<title head-level="h2">
<p>16.02. Возможно ли сделать плавный переход между локациями?</p>
</title>

<segment>
<p>В: Возможно ли сделать плавный переход между локациями?</p>
<p>О:</p>
<p>В классическом плеере можно реализовать плавное появление и затухание текста, однако, чтобы проделать такое с изображениями придётся создавать для каждого изображения несколько копий с разной прозрачностью, либо подготовить заранее gif-изображения.</p>
<p>В любом случае реализация подобного достаточно сложна на классическом плеере.</p>
<p>Чуть проще сделать плавные переходы на qSpider. Однако это потребует знания CSS и Java Script.</p>
</segment>

</section>
<section id="faq_16_03">
<title head-level="h2">
<p>16.03. Как расположить картинку справа, а текст слева?</p>
</title>

<segment>
<p>В: Как расположить картинку справа, а текст слева?</p>
<p>О:</p>
<p>В классическом плеере используйте таблицы для вёрстки страниц:</p>
</segment>
<p><code>! открываем таблицу</code></p>
<p><code>*p '&lt;table width=100%&gt;'</code></p>
<p><code>! открываем строку</code></p>
<p><code>*p '&lt;tr&gt;'</code></p>
<p><code>! открываем ячейку для текста</code></p>
<p><code>*p '&lt;td width=50%&gt;'</code></p>
<p><code>! помещаем в ячейку текст</code></p>
<p><code>*p 'Текст, расположенный слева.'</code></p>
<p><code>! закрываем ячейку для текста</code></p>
<p><code>*p '&lt;/td&gt;'</code></p>
<p><code>! открываем ячейку с изображением</code></p>
<p><code>*p '&lt;td width=50%&gt;'</code></p>
<p><code>! помещаем в ячейку изображение</code></p>
<p><code>*p '&lt;img src="pic/kartinka.jpg"&gt;'</code></p>
<p><code>*p '&lt;/td&gt;'</code></p>
<p><code>! закрываем строку</code></p>
<p><code>*p '&lt;/tr&gt;'</code></p>
<p><code>! закрываем таблицу</code></p>
<p><code>*p '&lt;/table&gt;'</code></p>
<segment>
<p>В qSpider можно использовать блоки `&lt;div&gt;`, послойный вывод, флексы, гриды и прочее.</p>
</segment>

</section>
<section id="faq_16_04">
<title head-level="h2">
<p>16.04. Как ограничить размер выводимого изображения?</p>
</title>

<segment>
<p>В: Как ограничить размер выводимого изображения?</p>
<p>О:</p>
<p>Для того, чтобы ограничить размер изображения, используйте атрибуты `width` и `height` для тега `&lt;img&gt;`:</p>
</segment>
<p><code>! выводит картинку шириной и высотой в 100 пикселей</code></p>
<p><code>*p '&lt;img src="pic/cartinca.jpg" width="100" height="100"&gt;'</code></p>
<segment>
<p>Поддерживаются относительные размеры:</p>
</segment>
<p><code>! выводит картинку в половину ширины от родительского элемента</code></p>
<p><code>*p '&lt;img src="pic/cartinca.jpg" width="50%"&gt;'</code></p>
<segment>
<p>Если указывать только ширину, или только высоту картинки, то второй размер вычисляется пропорционально.</p>
<p>В классическом плеере высоту изображения можно указывать только в абсолютном размере, то есть только в пикселях.</p>
</segment>

</section>
<section id="faq_16_05">
<title head-level="h2">
<p>16.05. Как сделать рамку окна основного описания?</p>
</title>

<segment>
<p>В: Как сделать рамку окна основного описания?</p>
<p>Как сделать, чтобы картинки шли по контуру основного окна?</p>
<p>О:</p>
<p>Пользуясь табличной вёрсткой в классическом плеере, можно добиться подобного эффекта. Для этого необходимо создать таблицу с шириной в 100% окна и в крайние левые, правые и верхние ячейки поместить нужные изображения. Можно так же поместить изображение в крайнюю нижнюю ячейку, но оно не будет "пристыковано" к нижнему краю основного окна, а окажется в пределах содержимого. Ещё крайние левые и крайние правые изображения нельзя растянуть по высоте на 100%, а значит добиться их поведения именно как границ рамки будет невозможно (они не будут растягиваться и сжиматься в зависимости от содержимого).</p>
<p>Более гибкие и простые настройки оформления есть в qSpider. Там можно добиться гораздо более изящного внешнего вида окна основного описания.</p>
</segment>

</section>
<section id="faq_16_06">
<title head-level="h2">
<p>16.06. Как сделать вывод предметов магазина не длинным списком, а в виде таблицы?</p>
</title>

<segment>
<p>В: Как сделать вывод предметов магазина не длинным списком, а в виде таблицы?</p>
<p>О:</p>
<p>Собственно, в вопросе уже заключён ответ. Необходимо использовать табличную вёрстку. Например, список предметов хранится в массиве `$object`, а мы хотим, чтобы они выводились на экран по четыре предмета в строке:</p>
</segment>
<p><code>! вычисляем число необходимых строк, для этого</code></p>
<p><code>! получаем количество предметов, оно равно размеру массива $object</code></p>
<p><code>kolvo=arrsize('$object')</code></p>
<p><code>! задаём число предметов в строке</code></p>
<p><code>number_obj=4</code></p>
<p><code>! вычисляем остаток от деления на number_obj</code></p>
<p><code>! таким образом мы поймём, будет ли у нас неполная строка</code></p>
<p><code>! и сколько предметов в ней окажется</code></p>
<p><code>number_half=kolvo mod number_obj</code></p>
<p><code>if number_half&gt;0:</code></p>
<p><code>! если число предметов не разделилось на строки поровну,</code></p>
<p><code>! значит у нас получится неполная строка</code></p>
<p><code>! вычисляем число строк так</code></p>
<p><code>count_string=kolvo/number_obj+1</code></p>
<p><code>else</code></p>
<p><code>! в противном случае</code></p>
<p><code>!число строк ровно укладывается в число предметов</code></p>
<p><code>count_string=kolvo/number_obj</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>! теперь, когда подсчёты готовы, выводим предметы в таблице с помощью цикла</code></p>
<p><code>! в переменной i будем вести номера выводимых предметов</code></p>
<p><code>! открываем таблицу</code></p>
<p><code>*p '&lt;table border=1&gt;'</code></p>
<p><code>! цикл строк. Счётчиком служит count_string</code></p>
<p><code>loop while count_string&gt;0 step count_string-=1:</code></p>
<p><code>! пока счётчик выше нуля</code></p>
<p><code>! открываем строку</code></p>
<p><code>*p '&lt;tr&gt;'</code></p>
<p><code>! цикл ячеек. Счётчиком служит count_obj</code></p>
<p><code>count_obj=0</code></p>
<p><code>loop local count_obj, i = 0, 0 while count_obj&lt;number_obj step count_obj+=1 &amp; i+=1:</code></p>
<p><code>! пока счётчик меньше предельного числа ячеек в строке</code></p>
<p><code>! (счётчик идёт от нуля, поэтому используем "строго меньше")</code></p>
<p><code>! открываем ячейку</code></p>
<p><code>*p '&lt;td&gt;'</code></p>
<p><code>! проверяем не достиг ли номер предмета размера массива</code></p>
<p><code>if i&lt;kolvo:</code></p>
<p><code>! если не достиг</code></p>
<p><code>! выводим предмет в ячейке</code></p>
<p><code>*p $object[i]</code></p>
<p><code>else</code></p>
<p><code>! в противном случае</code></p>
<p><code>! выводим в ячейке пробел</code></p>
<p><code>! (пустая ячейка)</code></p>
<p><code>*p '&amp;nbsp;'</code></p>
<p><code>end</code></p>
<p><code>! закрываем ячейку</code></p>
<p><code>*p '&lt;/td&gt;'</code></p>
<p><code>end</code></p>
<p><code>! закрываем строку</code></p>
<p><code>*p '&lt;/tr&gt;'</code></p>
<p><code>end</code></p>
<p><code>! закрываем таблицу</code></p>
<p><code>*p '&lt;/table&gt;'</code></p>
<segment>
<p>В qSpider то же самое можно сделать, используя блоки `&lt;div&gt;`.</p>
</segment>

</section>
<section id="faq_16_07">
<title head-level="h2">
<p>16.7. Можно ли зеркально отразить картинку методами плеера?</p>
</title>

<segment>
<p>В:	Можно ли зеркально отразить картинку методами плеера?</p>
<p>Можно ли задать максимальную или минимальную ширину элементу?</p>
<p>Можно ли вычислить доступное место в основном окне?</p>
<p>О:</p>
<p>В классическом плеере таких возможностей нет. Используйте возможности qSpider.</p>
<p>Пример, как отразить картинку:</p>
</segment>
<p><code>! отражаем картинку зеркально</code></p>
<p><code>*p "&lt;img src='mygreatpic.png' /&gt; "</code></p>
<p><code>*p "&lt;img src='mygreatpic.png' style='transform: scaleX(-1);' /&gt;"</code></p>

</section>
<section id="faq_16_08">
<title head-level="h2">
<p>16.8. Вывожу в окно табличку, а потом текст, но между текстом и табличкой возникают пустые строки. Что это и как этого избежать?</p>
</title>

<segment>
<p>В: Вывожу в окно табличку, а потом текст, но между текстом и табличкой возникают пустые строки. Что это и как этого избежать?</p>
<p>О:</p>
<p>Скорее всего вы столкнулись с особенностью плеера QSP. Например, вы вывели табличку вот так:</p>
</segment>
<p><code>*p "&lt;table width=50% border=1&gt;</code></p>
<p><code>&lt;tr&gt;</code></p>
<p><code>&lt;td&gt;первая ячейка первой строки&lt;/td&gt;</code></p>
<p><code>&lt;td&gt; вторая ячейка первой строки&lt;/td&gt;</code></p>
<p><code>&lt;/tr&gt;</code></p>
<p><code>&lt;tr&gt;</code></p>
<p><code>&lt;td&gt;первая ячейка второй строки&lt;/td&gt;</code></p>
<p><code>&lt;td&gt; вторая ячейка второй строки&lt;/td&gt;</code></p>
<p><code>&lt;/tr&gt;</code></p>
<p><code>&lt;/table&gt;"</code></p>
<segment>
<p>Дело в том, что плеер не игнорирует переводы строк между тегами таблицы, как HTML-браузер, и отрисовав табличку, воспроизводит эти пустые строки уже после неё. Поэтому между табличкой и последующим текстом возникают пустые строки.</p>
<p>Везде, где используете HTML, будьте аккуратны с переводами строк. В данном случае проблема решается так:</p>
</segment>
<p><code>*p "&lt;table width=50% border=1&gt;"</code></p>
<p><code>*p "&lt;tr&gt;"</code></p>
<p><code>*p "&lt;td&gt;первая ячейка первой строки&lt;/td&gt;"</code></p>
<p><code>*p "&lt;td&gt; вторая ячейка первой строки&lt;/td&gt;"</code></p>
<p><code>*p "&lt;/tr&gt;"</code></p>
<p><code>*p "&lt;tr&gt;"</code></p>
<p><code>*p "&lt;td&gt;первая ячейка второй строки&lt;/td&gt;"</code></p>
<p><code>*p "&lt;td&gt; вторая ячейка второй строки&lt;/td&gt;"</code></p>
<p><code>*p "&lt;/tr&gt;"</code></p>
<p><code>*p "&lt;/table&gt;"</code></p>
<segment>
<p>В редких случаях, когда HTML выводится одной строкой, но в самой таблице или после неё наблюдаются "артефакты", необходимо проверить правильно ли закрыты HTML-теги.</p>
</segment>

</section>
<section id="faq_16_09">
<title head-level="h2">
<p>16.9. Можно как-нибудь вывести текст в два столбца в классике?</p>
</title>

<segment>
<p>В: Можно как-нибудь вывести текст в два столбца в классике? К примеру характеристики персонажей.</p>
<p>О:</p>
<p>Да, можно. Используйте табличную вёрстку. Более того, с помощью таблиц в классике можно довольно гибко располагать элементы в окнах:</p>
</segment>
<p><code>*p "&lt;table width=100%&gt;"</code></p>
<p><code>*p "&lt;tr&gt;"</code></p>
<p><code>*p "&lt;td align=left&gt;&lt;img src='путь к файлу картинки'&gt;&lt;/td&gt;"</code></p>
<p><code>*p "&lt;td align=right&gt;"</code></p>
<p><code>*p "&lt;table width=640&gt;"</code></p>
<p><code>*p "&lt;tr&gt;&lt;td width=75%&gt;Сила&lt;/td&gt;&lt;td&gt;23&lt;/td&gt;&lt;/tr&gt;"</code></p>
<p><code>*p "&lt;tr&gt;&lt;td width=75%&gt;Здоровье&lt;/td&gt;&lt;td&gt;300&lt;/td&gt;&lt;/tr&gt;"</code></p>
<p><code>*p "&lt;tr&gt;&lt;td width=75%&gt;Ловкость&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;"</code></p>
<p><code>*p "&lt;/table&gt;"</code></p>
<p><code>*p "&lt;/td&gt;"</code></p>
<p><code>*p "&lt;/tr&gt;"</code></p>
<p><code>*p "&lt;/table&gt;"</code></p>

</section>
<section id="faq_16_10">
<title head-level="h2">
<p>16.10. Как работать с тегами MAP и AREA?</p>
</title>

<segment>
<p>В:	 Как разметить картинку на кликабельные зоны?</p>
<p>О:</p>
<p>Чтобы выводить на экран изображение (тег `&lt;img&gt;`) и его разметку (теги `&lt;map&gt;` и `&lt;area&gt;`), необходимо в первую очередь включить распознавание HTML:</p>
</segment>
<p><code>usehtml=1</code></p>
<segment>
<p>Далее с помощью тега `&lt;img&gt;` выводим на экран изображение:</p>
</segment>
<p><code>*p "&lt;img src='путь к файлу изображения/картинка.jpg' usemap='#groundit'&gt;"</code></p>
<segment>
<p>В атрибуте `src` тега указываем путь к файлу изображения, а в атрибуте `usemap` прописываем символ `#` (решётка) и значение, вписанное в атрибут `name` тега `&lt;map&gt;`, о котором далее. Атрибут `usemap` — это своего рода ссылка на соответствующий тег `&lt;map&gt;`. Таким образом вы можете разметить несколько изображений, ссылаясь из тегов `&lt;img&gt;` на соответстующие контейнеры `&lt;map&gt;` с помощью атрибута `usemap`.</p>
<p>Теги `&lt;map&gt;` и `&lt;area&gt;` используются для разметки кликабельных областей на изображении. Тег `&lt;map&gt;` является контейнером, объединяющим кликабельные области, каждая из которых описывается отдельным тегом `&lt;area&gt;`.</p>
</segment>
<p><code>! открываем контейнер MAP, не забывая указать значение атрибуту name</code></p>
<p><code>*p "&lt;map name='groundit'&gt;"</code></p>
<p><code>! перечисляем кликабельные области в тегах AREA</code></p>
<p><code></code></p>
<p><code>! размечаем прямоугольную область:</code></p>
<p><code>*p "&lt;area shape='rect' coords='50,50,350,200' href='EXEC:pl ""Вы кликнули по прямоугольнику.""'&gt;"</code></p>
<p><code>! размечаем круглую область:</code></p>
<p><code>*p "&lt;area shape='circle' coords='475,325,75' href='EXEC:pl ""Вы кликнули по круглой области.""'&gt;"</code></p>
<p><code>! размечаем область в форме звезды</code></p>
<p><code>*p "&lt;area shape='poly' coords='100,420,139,333,80,285,160,285,180,240,197,285,260,285,211,327,245,420,171,360' href='EXEC:pl ""Вы кликнули по полигону в форму звезды.""'&gt;"</code></p>
<p><code>! размечаем область в форме стрелки</code></p>
<p><code>*p "&lt;area shape='poly' coords='401,84,506,84,506,52,611,117,506,181,506,149,401,149' href='EXEC:pl ""Вы кликнули по полигону в форму стрелки.""'&gt;"</code></p>
<p><code>! закрываем контейнер MAP</code></p>
<p><code>*p "&lt;/map&gt;"</code></p>
<segment>
<p>Итак, каждый тег `&lt;area&gt;` используется, чтобы описать отдельную кликабельную область изображения. Здесь мы используем следующие атрибуты:</p>
</segment>


<segment>
<p>* 
`shape` — в этом атрибуте указываем форму кликабельной области. Можно указать такие значения:</p>
</segment>


<segment>
<p>* 
`rect` — задаём прямоугольную кликабельную область. При выборе такого значения для `shape`, в атрибуте `coords` перечисляются координаты левого верхнего угла прямоугольника (X1,Y1) и координаты нижнего правого угла (X2,Y2):</p>
</segment>
<p><code>coords='X1,Y1,X2,Y2'</code></p>


<segment>
<p>* 
`circle` — задаём круглую кликабельную область. При выборе этого значения, в атрибуте `coords` перечисляются значения: X1,Y1 — координаты центра круга; R1 — радиус в пикселях:</p>
</segment>
<p><code>coords='X1,Y1,R1'</code></p>


<segment>
<p>* 
`poly` — задаём полигональную кликабельную область, то есть многоугольник. При выборе этого значения, в атрибуте `coords` можно прописывать довольно много значений точек, которые являются вершинами углов многоугольника, указывая координаты: X1, Y1, X2, Y2 и т.д.:</p>
</segment>
<p><code>coords="X1,Y1,X2,Y2,X3,Y3,...,XN,YN"</code></p>
<p>* 
`coords` — в этом атрибуте перечисляются координаты областей. Выше подробно описано, какие значения, для каких форм областей следует указывать. Координаты высчитываются в пикселях от верхнего левого угла изображения (0,0). Ось X — это горизонтальная ось координат (абсцисса), ось Y — вертикальная ось координат (ордината).</p>


<segment>
<p>* 
`href` — в данном атрибуте в обыкновенном HTML-документе как правило прописывается адрес страницы в интернете (url), однако в QSP мы можем поместить сюда строку кода, который будет выполнен при клике на области. Для этого вписываем в начале значения атрибута ключевое слово `EXEC:` (двоеточие обязательно), а после двоеточия пишем строку кода:</p>
</segment>
<p><code>href="EXEC:*pl 'Выводим текст при клике по области.' &amp; ! строка кода"</code></p>


<segment>
<p>Если кликабельные области пересекаются, накладываются друг на друга, реагировать на клик будет та область, которая находится выше в HTML-коде.</p>
<p>Обратите внимание, что в классическом QSP при наведении на кликабельную область курсор не будет менять свой вид.</p>
</segment>

</section>
</section>
<section id="faq_17">
<title anchor="faq_17" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\17_сохранения\00.txt-light">
<p>17. Вопросы о сохранениях</p>
</title>
<section id="faq_17_01">
<title head-level="h2">
<p>17.1. Как запретить игроку самостоятельно сохранять игру?</p>
</title>

<segment>
<p>В: Как запретить игроку самостоятельно сохранять игру?</p>
<p>О:</p>
<p>За это отвечает системная переменная `nosave`.</p>
<p>Если значение этой переменной отлично от нуля, игрок не может самостоятельно сохранять игру. Данный пункт в меню плеера будет не активен:</p>
</segment>
<p><code>nosave=1</code></p>
<segment>
<p>При этом продолжают работать операторы `savegame` и `opengame`. Вы можете повесить данные операторы на отдельные предметы или действия внутри игры, или использовать их в ключевых точках (чекпоинты), и т.д.</p>
<p>Если вновь присвоить переменной `nosave` значение 0, для игрока опять станет доступен пункт меню плеера "сохранить состояние игры":</p>
</segment>
<p><code>nosave=0</code></p>

</section>
<section id="faq_17_02">
<title head-level="h2">
<p>17.2.  Во время теста игры делал сохранения, затем внёс в игру несколько правок, но сохранения перестали загружаться. Почему так происходит, и что теперь делать?</p>
</title>

<section>

<p>В: Во время теста игры делал сохранения, затем внёс в игру несколько правок, но сохранения перестали загружаться. Почему так происходит, и что теперь делать?</p>
<p>О:</p>
<p>Поскольку для всех игр QSP файлы сохранений создаются одинаковым образом, нельзя допустить, чтобы игроки могли загружать сохранения от одной игры в другой игре. Игрок может легко запутаться, если играет в несколько игр.</p>
<p>Чтобы не допустить загрузки "неправильного" файла сохранения, в QSP предусмотрен простой механизм.</p>
<p>Каждый раз при сохранении игры, в файл сохранения записывается хэш-сумма игры, а когда игрок пытается загрузить файл сохранения, хэш-сумма, записанная в файл, сравнивается с хэш-суммой текущей игры. Если они не совпадают, плеер указывает игроку, что он загружает неправильное сохранение.</p>
<p>Чтобы плеер не сравнивал хэш-суммы текущей игры и записанную в файле сохранения, в QSP предусмотрен специальный режим. Этот режим включается изменением значения переменной `debug` на значение, отличное от нуля:</p>
<p><code>debug=1</code></p>
<p>В момент, когда значение переменной `debug` отлично от нуля, можно загружать в свою игру любое сохранение от любой игры.</p>
<p>Таким образом, когда Вы занимаетесь отладкой игры, в ней обязательно нужно прописывать `debug=1`, если Вы хотите загружать сохранения, сделанные до момента правки.</p>
<p>Однако, если Вы сделали сохранение до того, как внесли в код строку `debug=1`, при дальнейшей загрузке этого сохранения значение переменной `debug` вновь будет сбрасываться на ноль, и Вы не сможете вновь загрузить даже то же самое сохранение. Заранее пропишите строку `debug=1` в своей игре уже в самом начале разработки.</p>

</section>

<section id="launcher"><title>
<p>Лаунчер</p>
</title>

<p>При `debug=1` есть опасность того, что вы сами загрузите сохранение от другой игры, это сохранение покажет вам неправильные данные, вы решите, что допустили в коде ошибку, и много времени потратите на поиск несуществующей ошибки (у меня такое бывало). Хорошо бы иметь возможность проверять игру, изменяя её файлы, и при этом не допускать загрузки сохранений от других игр.</p>
<p>Такая возможность есть.</p>
<p>Необходимо написать игру-лаунчер — небольшой файл qsp, из которого подключаются остальные компоненты игры, в том числе и основной файл игры.</p>
<p>Теоретически лаунчер - это отдельная игра и хэш высчитывается только на его основе без учёта подключаемых модулей. Поэтому мы спокойно можем править модули, и сэйвы игры всё-равно будут загружаться. А вот сэйвы чужих игр - нет.</p>

</section>

</section>
<section id="faq_17_03">
<title head-level="h2">
<p>17.3. Как сделать чекпойнты в игре?</p>
</title>

<segment>
<p>В: Как сделать чекпойнты в игре?</p>
<p>Как сделать так, чтобы игру можно было начинать с последнего сохранения?</p>
<p>О:</p>
<p>Прежде всего "последнее" сохранение мы всегда будем записывать в файл "autosave.sav". Делается это просто. Там, где нужно сохраниться пишем такую команду:</p>
</segment>
<p><code>savegame "autosave.sav"</code></p>
<segment>
<p>Вот и всё. Теперь у нас есть файл сохранения, к которому можно обратиться в самом начале игры, чтобы загрузить последнюю сохранённую точку. Для этого на самой первой локации в игре (например, она называется "начало") создаём действие:</p>
</segment>
<p><code>act "Продолжить игру":</code></p>
<p><code>opengame "autosave.sav"</code></p>
<p><code>end</code></p>
<segment>
<p>Да, но мы хотим, чтобы данное действие появлялось лишь тогда, когда файл "autosave.sav" создан. То есть если игрок уже добрался до одной из контрольных точек. В противном случае, если игрок первый раз открыл игру, такое действие появляться не должно.</p>
<p>Что ж, нам нужна некая переменная, которая будет означать наличие сохранения. Назовём эту переменную `savetrue` и обернём действие в условие:</p>
</segment>
<p><code>if savetrue=1:</code></p>
<p><code>act "Продолжить игру":</code></p>
<p><code>opengame "autosave.sav"</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>Значение этой переменной на момент начала игры будет равно нулю, и должно измениться на 1 в момент сохранения. Но мы не можем загрузить сохранение, если не можем получить значение переменной, такое условие мы прописали. Что же делать?</p>
<p>Ввести ещё один файл сохранения, назовём его "system.sav". Таким образом в момент сохранения игры мы будем писать два файла:</p>
</segment>
<p><code>! выставляем значение переменной-маркера на единицу</code></p>
<p><code>savetrue=1</code></p>
<p><code>! сохраняем игру в системный файл сохранения</code></p>
<p><code>savegame "system.sav"</code></p>
<p><code>! выставляем значение переменной-маркера на ноль</code></p>
<p><code>savetrue=0</code></p>
<p><code>! сохраняем состояние чекпоинта</code></p>
<p><code>savegame "autosave.sav"</code></p>
<segment>
<p>Таким образом в момент сохранения игры мы создаём два файла сохранения: системный и непосредственно файл для продолжения игры с чекпоинта. Лучше оформить этот код на отдельной локации, назвать её например "checkpoint", а затем в нужном месте просто вызывать, используя `gosub`:</p>
</segment>
<p><code>gosub "checkpoint"</code></p>
<segment>
<p>Теперь мы можем загрузить сохранение "system.sav" и при этом получим значение переменной-маркера, равное единице, но так же при этом игрок окажется на той локации, где это сохранение было сделано, а нам нужно вернуть его к стартовой локации. Как сделать это?</p>
<p>Нужно завести локацию-обработчик события "загрузка состояния игры". Создаём новую локацию и называем её, например, "при_загрузке". Далее указываем плееру, какую именно локацию ему нужно использовать, как локацию-обработчик загрузки состояния игры. Для этого в системную переменную `$ongload` вносим название нашей вновь созданной локации (пишем на самой первой локации в игре):</p>
</segment>
<p><code>$ongload="при_загрузке"</code></p>
<segment>
<p>На локации "при_загрузке" пишем такой код:</p>
</segment>
<p><code>! если значение переменной-маркера равно единице</code></p>
<p><code>if savetrue=1:</code></p>
<p><code>! выставляем ещё одну переменную маркер</code></p>
<p><code>lock_resave=1</code></p>
<p><code>! возвращаемся на стартовую локацию</code></p>
<p><code>goto "начало"</code></p>
<p><code>end</code></p>
<segment>
<p>А код на локации "начало" (самой первой локации в игре, стартовой локации) правим так:</p>
</segment>
<p><code>! если значение переменной проверки сохранения равно 1</code></p>
<p><code>if savetrue=1:</code></p>
<p><code>! сохранение есть, выводим действие</code></p>
<p><code>act "Продолжить игру":</code></p>
<p><code>opengame "autosave.sav"</code></p>
<p><code>end</code></p>
<p><code>elseif lock_resave=0:</code></p>
<p><code>! иначе если проверка сохранения не заблокирована</code></p>
<p><code>! пытаемся открыть системное сохранение</code></p>
<p><code>opengame "system.sav"</code></p>
<p><code>end</code></p>
<segment>
<p>Итак, что будет происходить при этом. Когда игрок первый раз запустит игру, обе переменные-маркеры будут равны нулю. Плеер попытается загрузить состояние "system.sav", но поскольку этот файл ещё не создан, плеер просто проигнорирует команду:</p>
</segment>
<p><code>opengame "system.sav"</code></p>
<segment>
<p>По мере прохождения, игрок будет посещать "контрольные точки", где игра будет сохранять состояние автоматически, используя написанную нами процедуру "checkpoint". При этом перед сохранением состояния в условно-системный файл "system.sav" переменной-маркеру `savetrue` будет присваиваться значение `1`, а перед сохранением состояния, которое мы будем использовать для загрузки "контрольной точки" ("autosave.sav"), этой переменной будет присваиваться значение `0`.</p>
<p>Теперь, если игрок повторно откроет игру, обе переменные-маркеры будут равны нулю. Плеер попытается загрузить состояние "system.sav", и поскольку оно теперь создано, загрузит его. Переменной-маркеру `savetrue` будет присвоено значение `1`, так как это значение ей было присвоено перед сохранением "system.sav". Далее произойдёт автоматическое посещение локации-обработчика "при_загрузке".</p>
<p>На этой локации произойдёт проверка условия, правда ли переменной `savetrue` присвоена единица, и это окажется правдой. Переменной-маркеру `lock_resave` будет так же присвоена единица и команда `goto` отправит игрока на стартовую локацию.</p>
<p>Теперь сработает условие, проверяющее, правда ли переменной `savetrue` присвоена единица, и игрок увидит на экране действие "Продолжить игру".</p>
<p>А когда игрок выберет это действие, произойдёт загрузка состояния "autosave.sav", но поскольку в этом состоянии переменной-маркеру `savetrue` присвоен ноль, при обращении к локации "при_загрузке" условие не сработает и перезаход на стартовую локацию повторно не произойдёт.</p>
<p>Используя условно-системный файл сохранения, Вы можете не только организовать систему чекпоинтов, но и упростить для игрока различные вступительные части игры и кат-сцены при повторном входе, восстанавливать различные параметры игры частично, а не полностью, и т.д.</p>
</segment>

</section>
<section id="faq_17_04">
<title head-level="h2">
<p>17.4. Как написать действие, которое при каждом клике сохраняло бы игру в файлы "1.sav" и "2.sav" поочерёдно?</p>
</title>

<segment>
<p>В:	Как написать действие, которое при каждом клике сохраняло бы игру в файлы "1.sav" и "2.sav" поочерёдно?</p>
<p>О:</p>
<p>Это решается довольно просто, с помощью переменной-счётчика:</p>
</segment>
<p><code>! где-то заранее устанавливаем переменную счётчик</code></p>
<p><code>savecount=1</code></p>
<p><code></code></p>
<p><code>! в нужном месте пишем действие</code></p>
<p><code>act "Сохранить":</code></p>
<p><code>if savecount=1:</code></p>
<p><code>savecount=2</code></p>
<p><code>savegame "1.sav"</code></p>
<p><code>else</code></p>
<p><code>savecount=1</code></p>
<p><code>savegame "2.sav"</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>В данном случае в файле сохранения "1.sav" значение переменной-счётчика будет равно 2, а в файле "2.sav" — 1. Это позволит при загрузке игры из одного файла нажатием действия "Сохранить" записать сохранение в следующий файл.</p>
<p>Например, мы нажали действие "Сохранить" и сохранили игру в файл "1.sav", после чего нажатие на действие "Сохранить" должно записывать состояние в файл "2.sav". Не важно, нажмём мы действие ещё раз, или нет, при загрузке состояния из файла "1.sav" мы снова получим ситуацию, когда действие "Сохранить" должно будет записать очередное состояние в файл "2.sav".</p>
<p>Чтобы загружать игру из последнего сохранения, нам нужно такое действие:</p>
</segment>
<p><code>act "Загрузить последнее":</code></p>
<p><code>if savecount=1:</code></p>
<p><code>opengame "2.sav"</code></p>
<p><code>else</code></p>
<p><code>opengame "1.sav"</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>В этом случае, если мы сохранили состояние в файл "1.sav", то даже если мы загрузим состояние из этого файла, в следующий раз при выборе "Загрузить последнее" мы вновь загрузим состояние из "1.sav".</p>
<p>Однако если нам нужно загружать состояния из предыдущего файла, нужно создать такое действие:</p>
</segment>
<p><code>act "Загрузить предыдущее":</code></p>
<p><code>opengame "&lt;&lt;savecount&gt;&gt;.save"</code></p>
<p><code>end</code></p>

</section>
</section>
<section id="faq_18">
<title anchor="faq_18" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\18_файлы и модули\00.txt-light">
<p>18. Вопросы о файлах и модулях</p>
</title>
<section id="faq_18_01">
<title head-level="h2">
<p>18.1. Чем отличаются команды `inclib` и `openqst`?</p>
</title>

<segment>
<p>В: Чем отличаются команды `inclib` и `openqst`?</p>
<p>О:</p>
<p>Итак. У нас есть основная игра "start.qsp" и есть дополнительная игра (модуль) "mod.qsp".</p>
<p>Если в основной игре мы напишем:</p>
</segment>
<p><code>openqst "mod.qsp"</code></p>
<segment>
<p>То при выполнении этой команды произойдёт следующее:</p>
</segment>


<p>1. 
Значения всех переменных не изменятся</p>
<p>2. 
Если проигрываются звуковые файлы, они продолжат проигрываться</p>
<p>3. 
Все предметы в окне предметов останутся.</p>
<p>4. 
Текст в окне дополнительного описания останется</p>


<segment>
<p>Но, плеер будет работать уже с новой игрой. Т.е. все локации "start.qsp" будут удалены, а все локации "mod.qsp" буду добавлены к текущему списку локаций в плеере. Мы действительно фактически закрываем одну игру, а открываем другую, и переходим на самую первую локацию этой новой открытой игры.</p>
<p>Зачем это может понадобиться. Например, для разработки дополнительных миниигр в виде независимых игр. Либо, если у нас очень большая игра со множеством локаций (типа масштабной RPG), можно разбить её на части по областям, и это облегчит нам разработку, поскольку гораздо легче ориентироваться в коротком списке локаций.</p>
<p>Если же в основной игре мы напишем:</p>
</segment>
<p><code>inclib "mod.qsp"</code></p>
<segment>
<p>То при выполнении этой команды мы останемся в той же самой игре "start.qsp", и значения переменных не изменятся, и воспроизведение звуковых файлов продолжится, останутся и текущие действия и основное описание и так далее, и мы даже останемся на той же самой локации, из которой вызывали эту команду. Единственное, что произойдёт, это все локации из игры "mod.qsp" добавятся к списку локаций игры "start.qsp". Если же в списке локаций игры "mod.qsp" есть локации с названиями как у локаций игры "start.qsp", локации игры "mod.qsp" с идентичными названиями попросту не добавятся.</p>
</segment>

</section>
<section id="faq_18_02">
<title head-level="h2">
<p>18.2. Как сделать лаунчер?</p>
</title>

<segment>
<p>В: Как сделать лаунчер?</p>
<p>Мне нужно, чтобы у игрока был выбор загрузить одну из двух игр, и когда он выбирает игру, она загружалась. Как это сделать?</p>
<p>О:</p>
<p>Наиболее простым и очевидным решением является написание игры-лаунчера, то есть модуля, который будет отвечать исключительно за отображение вступительной части, и предложит игроку на выбор одну из игр.</p>
<p>Пишем лаунчер с одной единственной локацией:</p>
</segment>
<p><code># launcher</code></p>
<p><code>*pl "Выберите игру:"</code></p>
<p><code>act "Выбрать игру №1":</code></p>
<p><code>openqst 'game_1.qsp'</code></p>
<p><code>end</code></p>
<p><code>act "Выбрать игру №2":</code></p>
<p><code>openqst 'game_2.qsp'</code></p>
<p><code>end</code></p>
<p><code>-- launcher</code></p>
<segment>
<p>Обратите внимание, несмотря на то, что при использовании оператора openqst не происходит удаления переменных, удаления предметов инвентаря, очистки дополнительного описания и строки ввода, а также остановки проигрываемых файлов, он открывает именно новую игру. То есть ни одна из локаций лаунчера во вновь открытой игре использоваться не будет.</p>
<p>Если вам нужно именно подключить игру к уже текущей (к лаунчеру), используйте оператор `inclib`:</p>
</segment>
<p><code># launcher</code></p>
<p><code>*pl "Выберите игру:"</code></p>
<p><code>act "Выбрать игру №1":</code></p>
<p><code>inclib 'game_1.qsp'</code></p>
<p><code>goto 'start_1'</code></p>
<p><code>end</code></p>
<p><code>act "Выбрать игру №2":</code></p>
<p><code>inclib 'game_2.qsp'</code></p>
<p><code>goto 'start_2'</code></p>
<p><code>end</code></p>
<p><code>-- launcher</code></p>
<segment>
<p>Если вы аботаете с Quest Navigator, то вместо `inclib` нужно использовать оператор `inclib`.</p>
</segment>

</section>
<section id="faq_18_03">
<title head-level="h2">
<p>18.3. Мне нужно узнать, есть ли в папке файл (картинка, музыка и т.д.). Как это сделать?</p>
</title>

<segment>
<p>В: Мне нужно узнать, есть ли в папке файл (картинка, музыка и т.д.). Как это сделать?</p>
<p>О:</p>
<p>К сожалению, в QSP нет специальной функции, позволяющей проверять наличие файлов в папках. Если файл отсутствует, плеер, в зависимости от типа файла, либо проигнорирует его отсутствие, либо покажет на экране ошибку.</p>
<p>Например, если плеер не найдёт файл музыки, он просто проигнорирует команду `play`. Если плеер не найдёт файл изображения, на экран будет выведена "битая картинка". Если плеер не найдёт файл модуля, он выведет ошибку 104: "указанный файл недоступен или не найден!".</p>
<p>Определённо можно проверить наличие звукового файла, если сразу после запуска мелодии воспользоваться функцией `isplay`:</p>
</segment>
<p><code>play 'audio/coolmusic.mp3'</code></p>
<p><code>if isplay('audio/coolmusic.mp3')=-1:</code></p>
<p><code>'Файл существует'</code></p>
<p><code>else</code></p>
<p><code>'Файл не существует'</code></p>
<p><code>end</code></p>
<segment>
<p>Поскольку воспроизведение отсутствующих звуковых файлов не вызывает ошибки, а команда попросту игнорируется плеером, мы можем использовать этот способ для определения наличия других файлов. Да, это будет костыль, но если вы боитесь забыть, скинули вы в папку нужный файл или нет, способ вам подойдёт.</p>
<p>Смысл в чём.</p>
<p>Параллельно определённому файлу храним звуковой файл без звука длительностью 1 секунда хотя бы. Этот файл у нас имеет точно то же название, что и файл, наличие которого мы хотим проверить. Сама проверка выглядит следующим образом: запускаем звуковой файл и проверяем его воспроизведение через `isplay`. Если файл отсутствует, то он просто не будет воспроизводиться и `isplay` выдаст 0. Из чего мы твёрдо делаем вывод, что и нужного нам файла нет.</p>
</segment>
<p><code>usehtml=1</code></p>
<p><code>play 'img/picture_000345.MP3'</code></p>
<p><code>if isplay('img/picture_000345.MP3')=-1:</code></p>
<p><code>'&lt;img src="img/picture_000345.PNG"&gt;'</code></p>
<p><code>else</code></p>
<p><code>'Художник забыл нарисовать картинку.'</code></p>
<p><code>end</code></p>
<segment>
<p><a l:href="https://mega.nz/file/2W5wgbJL#E1rCFrBpwVonlTlWHIC7xVdBWoFUoF5SFOpWcz2J2Xo">
Пример можно скачать отсюда</a></p>
<p>Так же вы можете организовать генерацию модуля со списком файлов в указанной папке. Вот метод, предложенный `evp`:</p>
</segment>
<cite>
<segment>
<p>Некий исполняемый файл (это может быть даже bat-файл):</p>
</segment>


<p>* 
составляет список файлов в указанной папке/папках;</p>
<p>* 
сохраняет результаты своей работы в текстовый документ, используя синтаксис txt2gam для формирования нужных переменных или массивов;</p>
<p>* 
конвертирует этот файл в .qsp, используя txt2gam.exe;</p>
<p>* 
запускает игру.</p>


<segment>
<p>В самой игре используется функция `INCLIB` для присоединения получившегося модуля.</p>
</segment>
</cite>
<segment>
<p>Если вы используете 
<a l:href="https://github.com/AleksVersus/JAD_for_QSP">
JAD_QBST</a>, у вас есть возможность прописать в файле проекта специальный параметр "scans", и тогда локация для проверки существования файла будет генерироваться автоматически на основе содержимого указанной папки.</p>
</segment>

</section>
<section id="faq_18_04">
<title head-level="h2">
<p>18.4. Перенёс файл игры из одной папки в другую. В Quest Generator пропали все папки. Почему так происходит, и как этого избежать?</p>
</title>

<segment>
<p>В: Перенёс файл игры из одной папки в другую. В Quest Generator пропали все папки. Почему так происходит, и как этого избежать?</p>
<p>О:</p>
<p>Если вы завели папки в проекте своей игры, то рядом с файлом игры появляется ещё один файл — файл проекта (расширение ".qproj"). Именно в нём отмечаются папки, и какие локации в каких папках расположены. Оба файла должны лежать рядом, и называться одинаково, только тогда Quest Generator покажет папки вашего проекта:</p>
</segment>


<p>* 
`avs.game.qproj`</p>
<p>* 
`avs.game.qsp`</p>


<segment>
<p>При релизе файл проекта можно не включать в архив с игрой, игра будет работать точно так же.</p>
</segment>

</section>
<section id="faq_18_05">
<title head-level="h2">
<p>18.5. В папке с игрой стали появляться файлы с расширением `.tmp`. Что это за файлы, нужны они, и как избавиться от их появления?</p>
</title>

<segment>
<p>В: В папке с игрой стали появляться файлы с расширением `.tmp`. Что это за файлы, нужны они, и как избавиться от их появления?</p>
<p>О:</p>
<p>Данные файлы появляются, если в папке с игрой присутствует файл "qspgui.cfg", на котором установлен атрибут "только чтение". Это файлы, которые создаются под временные нужды. Чтобы избежать размножения этих файлов, нужно снять атрибут "только чтение" с файла "qspgui.cfg".</p>
<p>Так же, есть мнение, что можно избежать появления этих файлов, если установить данный атрибут на всю папку с плеером.</p>
</segment>

</section>
</section>
<section id="faq_19">
<title anchor="faq_19" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\19_изыски\00.txt-light">
<p>19. Изыски</p>
</title>
<section id="faq_19_01">
<title head-level="h2">
<p>19.1. Как использовать ASCII-графику в QSP?</p>
</title>

<segment>
<p>В: Как использовать ASCII-графику в QSP?</p>
<p>О:</p>
<p>Вывод ASCII-графики задача довольно простая. Нужно включить любой моноширинный шрифт, и ASCII графика будет выводиться правильно. Пример:</p>
</segment>
<p><code>$fname="Courier New"</code></p>
<p><code>*pl "</code></p>
<p><code>..</code></p>
<p><code>.':'':..</code></p>
<p><code>.''  :    '':..</code></p>
<p><code>.'     :        '':..</code></p>
<p><code>.'       :            '':..</code></p>
<p><code>..'         :                '':..</code></p>
<p><code>.'            :                    '':.</code></p>
<p><code>:''.....       :              ....'''' :</code></p>
<p><code>:       '''''..:..    ....''''         :</code></p>
<p><code>:              :  '':'                 :</code></p>
<p><code>:              :    :                  :</code></p>
<p><code>:              :    :                  :</code></p>
<p><code>:              :    :                  :</code></p>
<p><code>:              :    :                  :</code></p>
<p><code>:              :    :                  :</code></p>
<p><code>:              :    :                  :</code></p>
<p><code>:              :    :                  :</code></p>
<p><code>:              :    :                  :</code></p>
<p><code>:              :  ..:.                 :</code></p>
<p><code>:       .....'':''    ''''....         :</code></p>
<p><code>:..'''''       :              ''''.... :</code></p>
<p><code>'.            :                     .:'</code></p>
<p><code>''.         :                 ..''</code></p>
<p><code>'.       :             ..''</code></p>
<p><code>'.     :         ..''</code></p>
<p><code>'..  :     ..''</code></p>
<p><code>'.: ..''</code></p>
<p><code>''</code></p>
<p><code>"</code></p>

</section>
<section id="faq_19_02">
<title head-level="h2">
<p>19.2. Как вставить в игру видео?</p>
</title>

<segment>
<p>В: Как вставить в игру видео?</p>
<p>О:</p>
<p>В классическом плеере воспроизведение видео не поддерживается, поэтому единственное, что вы можете сделать — это вставить GIF-анимацию.</p>
<p>Видео воспроизводятся в qSpider, для этого пользуемся специальным тегом:</p>
</segment>
<p><code>*pl '&lt;video loop src="video/clip.WebM" width="800" height="400" autoplay /&gt;'</code></p>
<segment>
<p>Так же есть плеер с поддержкой webm от Sonnix`а.</p>
</segment>

</section>
<section id="faq_19_03">
<title head-level="h2">
<p>19.3. Как сделать так, чтобы текст появлялся на экране постепенно? По буквам?</p>
</title>

<segment>
<p>В: Как сделать так, чтобы текст появлялся на экране постепенно? По буквам?</p>
<p>О:</p>
<p>В самом простом виде это можно реализовать через цикл с задержкой:</p>
</segment>
<p><code>! вносим текст в переменную</code></p>
<p><code>$stroka='А можно ли сделать так, чтобы текст появлялся постепенно?'</code></p>
<p><code>! выставляем счётчик</code></p>
<p><code>i=1</code></p>
<p><code>loop local i=1 while i&lt;len($stroka)+1 step i+=1:</code></p>
<p><code>! пока значение счётчика не превысило длину строки</code></p>
<p><code>! задержка 250 мс</code></p>
<p><code>wait 250</code></p>
<p><code>! выводим следущую букву из нашей строки</code></p>
<p><code>*p $mid($stroka,i,1)</code></p>
<p><code>end</code></p>
<segment>
<p>Однако оператор `wait` "подвешивает" игру на время задержки, в результате чего игрок не может ничего сделать, пока текст не будет выведен полностью. Если нужно вывести текст побуквенно, но при этом сохранить для игрока возможность взаимодействовать с игрой, необходимо использовать локацию-счётчик.</p>
<p>Для начала нужно создать локацию-счётчик (если ещё не создана):</p>
</segment>


<p>* 
создаём локацию, название может быть любым, например "реалтайм".</p>


<segment>
<p>* 
указываем плееру, какую локацию ему нужно использовать, как локацию-счётчик. Пишем, например, на самой первой локации в игре:</p>
</segment>
<p><code>$counter="реалтайм"</code></p>


<segment>
<p>На локации-счётчик можно написать вот такой код:</p>
</segment>
<p><code>if $stroka&lt;&gt;'':</code></p>
<p><code>! если в переменной строка есть какое либо значение</code></p>
<p><code>! выставляем контрольную переменную (она же значение таймера)</code></p>
<p><code>control=50</code></p>
<p><code>! выставляем период обращения к локации-счётчику</code></p>
<p><code>settimer control</code></p>
<p><code>! выводим первую букву из оставшейся строки</code></p>
<p><code>*p $mid($stroka,1,1)</code></p>
<p><code>! если длина строки больше 1</code></p>
<p><code>if len($stroka)&gt;1:</code></p>
<p><code>! вырезаем из неё все буквы, начиная со второй</code></p>
<p><code>! и присваиваем той же переменной</code></p>
<p><code>$stroka=$mid($stroka,2)</code></p>
<p><code>else</code></p>
<p><code>! иначе</code></p>
<p><code>! выводим перевод строки</code></p>
<p><code>*pl</code></p>
<p><code>! присваиваем пустое значение</code></p>
<p><code>$stroka=''</code></p>
<p><code>end</code></p>
<p><code>elseif control=50:</code></p>
<p><code>! иначе если в контрольной переменной стоит значение 50</code></p>
<p><code>! меняем значение контрольной переменной</code></p>
<p><code>control=500</code></p>
<p><code>! выставляем период обращения к локации-счётчику</code></p>
<p><code>settimer control</code></p>
<p><code>end</code></p>
<segment>
<p>Теперь, чтобы строка вывелась побуквенно, достаточно присвоить текст переменной `$stroka` на любой локации:</p>
</segment>
<p><code>$stroka="А можно ли сделать так, чтобы текст появлялся постепенно, но игрок продолжал взаимодействовать с игрой?"</code></p>

</section>
<section id="faq_19_04">
<title head-level="h2">
<p>19.4. Как защитить игру от чита?</p>
</title>

<segment>
<p>В: Как защитить игру от чита?</p>
<p>О:</p>
<p>Файлы игр QSP — это обычные текстовые файлы, символы в которых просто особым образом зашифрованы. Шифр этот довольно простой, поэтому легко ломается любой пароль, какой бы вы ни повесили на игру.</p>
<p>Есть более тонкий способ защитить игру от открытия Quest Generator`ом. Его применял в своих модулях Olegus. Но и этот метод неэффективен, и при наличии мозгов в голове читера игра легко ломается.</p>
<p>Невозможно защитить игру от недобросовестного игрока. Единственное, что вы можете, — это написать максимально интересную игру без багов и рутины. Лезть в код такой игры, чтобы взломать или облегчить себе прохождение, не захочется.</p>
<p>К тому же, если игрок лезет в код Вашей игры, это его проблемы, а не Ваши. Он сам себе спойлерит и лишает себя впечатлений.</p>
</segment>

</section>
<section id="faq_19_05">
<title head-level="h2">
<p>19.5. Как задействовать клавиатуру в игре?</p>
</title>

<segment>
<p>В: Как задействовать клавиатуру в игре?</p>
<p>О:</p>
<p>Первые девять действий привязываются к кнопкам на цифровой клавиатуре. То есть нажать любое из этих действий по факту можно, нажав по одному из чисел на цифровой клавиатуре.</p>
<p>Таким образом, например, в игре "Серафим" от `Mioirel` организовано перемещение по карте. Перемещение на Север, Юг, Запад, Восток привязано соответственно к клавишам "8", "2", "4", "6".</p>
<p>В qSpider вы можете привязывать 
<a l:href="wiki.qsp.org/help:qspider_gamecfg#naznachenie_gorjachix_klavish_gamehotkeys">
к действиям вообще любые клавиши</a>

 на клавиатуре. В классическом плеере подобное тоже можно реализовать, но через костыль:</p>
</segment>


<p>1. 
Игрок должен будет установить курсор в поле ввода</p>
<p>2. 
При нажатии игроком клавиши с буквой, на локации-счётчик будет возвращаться значение из строки ввода с помощью функции `$user_text`. По этому значению выполняется некий код.</p>
<p>3. 
Далее прямо с локации счётчик поле ввода очищается командой cmdclear, и игрок снова может вводить букву.</p>


<segment>
<p>Естественно у этого метода есть масса недостатков и применять его можно в случае крайней нужды.</p>
</segment>

</section>
<section id="faq_19_06">
<title head-level="h2">
<p>19.6. Как пропустить прохождение нескольких глав, чтобы протестировать вновь написанную главу и только её?</p>
</title>

<segment>
<p>В: Как пропустить прохождение нескольких глав, чтобы протестировать вновь написанную главу и только её?</p>
<p>О:</p>
<p>Проще всего написать в самом начале игры действие с переходом к нужной главе:</p>
</segment>
<p><code>act "Тест 15 главы":</code></p>
<p><code>goto "глава 15"</code></p>
<p><code>end</code></p>
<segment>
<p>Естественно, если в этой главе необходимы какие-то конкретные значения конкретных переменных, нужно в том же действии прописать значения всех этих переменных.</p>
<p>Другой, более универсальный вариант: создать отладчик, или воспользоваться готовым решением. См. вопрос "Как из под плеера выполнить произвольную строку кода".</p>
</segment>

</section>
<section id="faq_19_07">
<title head-level="h2">
<p>19.7. Как из под плеера выполнить произвольную строку кода?</p>
</title>

<segment>
<p>В: Как из под плеера выполнить произвольную строку кода?</p>
<p>О:</p>
<p>В этом плане самое удобное — использовать строку ввода. Поскольку в неё можно ввести любой текст, соответственно и любой код можно будет выполнить из под неё. Для этого нам потребуется простейший отладчик.</p>
<p>Простейший отладчик можно сделать самому. Для этого в самой первой локации игры делаем следующее:</p>
</segment>
<p><code>! включаем отображение строки ввода:</code></p>
<p><code>showinput 1</code></p>
<p><code>! задаём локацию-обработчик строки ввода:</code></p>
<p><code>$usercom = "userCom"</code></p>
<segment>
<p>Название локации, которую используем в качестве локации-обработчика строки ввода, может быть любым, но его необходимо обязательно присвоить переменной `$usercom`, чтобы игра поняла, какую именно локацию использовать в качестве локации-обработчика строки ввода.</p>
<p>Создаём локацию с именем "userCom" (либо с тем именем, что вы указали в `$usercom`), где пишем следующее:</p>
</segment>
<p><code>dynamic $user_text</code></p>
<segment>
<p>Вот и всё. Теперь любая команда, введённая в строку ввода, будет выполнена, как обычный код. Например, если вам потребуется увидеть значение переменной, вы просто вводите название этой переменной в строку ввода и нажимаете "enter". Если необходимо срочно попасть на другую локацию во время теста игры, просто вводите в строку ввода</p>
</segment>
<p><code>goto "название_локации_на_которую_хотите_попасть"</code></p>
<segment>
<p>и нажимаете клавишу "enter".</p>
<p>Если вы хотите самостоятельно написать отладчик с более широкими возможностями, ознакомьтесь с видеоуроком от Aleks Versus 
<a l:href="https://www.youtube.com/watch?v=dVtRAlhLY2E&amp;t=1967s">
"Отладчик"</a>.</p>
<p>Так же можете воспользоваться уже готовым решением и скачать 
<a l:href="https://qsp.org/index.php?option=com_content&amp;id=71&amp;Itemid=56">
отладчик от WEREWOLF</a></p>
</segment>

</section>
<section id="faq_19_08">
<title head-level="h2">
<p>19.8. Как узнать, на каком устройстве запущена игра? Телефон, компьютер, планшет?</p>
</title>

<segment>
<p>В: Как узнать, на каком устройстве запущена игра? Телефон, компьютер, планшет?</p>
<p>О:</p>
<p>В классической версии плеера это сделать невозможно. Существует только функция проверки номера базовой версии плеера `$QSPVER`.</p>
</segment>

</section>
<section id="faq_19_09">
<title head-level="h2">
<p>19.9. Как обновлять переменные на экране?</p>
</title>

<segment>
<p>В: Как обновлять переменные на экране?</p>
<p>О:</p>
<p>Очень частый вопрос, который происходит от непонимания того, в каком порядке плеер выполняет код.</p>
<p>Например, автор пишет вывод здоровья в окне дополнительного описания так:</p>
</segment>
<p><code>pl "Ваше здоровье &lt;&lt;health&gt;&gt;/100"</code></p>
<segment>
<p>Переменная `health` в данном случае показывает уровень здоровья главного героя. Далее автор меняет значение переменной</p>
</segment>
<p><code>health=health+20</code></p>
<segment>
<p>И ожидает, что и на экране значение изменится, но в окне дополнительного описания изменения не происходят.</p>
<p>А всё дело в том, что плеер выполняет команды последовательно, а кроме выполнения команд ничего иного делать не умеет.</p>
<p>Когда плеер выполняет команду</p>
</segment>
<p><code>pl "Ваше здоровье &lt;&lt;health&gt;&gt;/100"</code></p>
<segment>
<p>Происходит следующее:</p>
</segment>


<p>1. 
Плеер видит оператор `pl` и понимает, что ему нужно вывести некий текст в окно дополнительного описания. Данный текст плееру передан в виде конкретного значения, однако в этом значении присутствует подвыражение "&lt;&lt;health&gt;&gt;" (так же оно называется вложенным выражением).</p>


<segment>
<p>2. 
Плеер "раскрывает" подвыражение. То есть вычисляет его значение и подставляет это значение вместо подвыражения в строку. Например, если значение переменной `health` в этот момент было равно 50, плеер подставит число 50 вместо подвыражения, и теперь команда будет для него выглядеть так:</p>
</segment>
<p><code>pl "Ваше здоровье 50/100"</code></p>
<p>3. 
Строка передаётся оператору `pl`, и оператор `pl` выводит строку в окно дополнительного описания, что собственно и видит игрок.</p>


<segment>
<p>Что же происходит, когда выполняется команда</p>
</segment>
<p><code>health=health+20</code></p>
<segment>
<p>А вот что. Плеер вычисляет значение выражения `health+20`, подставляя значение переменной `health` (равно 50), и получает конкретное значение (50+20 равно 70), и уже это конкретное значение возвращает переменной `health` (теперь в переменной `health` значение 70). И всё. Здесь нет указания плееру "обновить" значение на экране. Только вычислить.</p>
<p>Чтобы значение в окне дополнительного описания "обновилось", нужно:</p>
</segment>


<p>1. 
Стереть старое значение в окне дополнительного описания</p>
<p>2. 
Вывести новое значение в окне дополнительного описания</p>


<segment>
<p>Простой код для этого:</p>
</segment>
<p><code>! меняем значение переменной</code></p>
<p><code>health=health+20</code></p>
<p><code>! стираем весь текст из окна доп.описания</code></p>
<p><code>clr</code></p>
<p><code>! выводим новый текст на экран</code></p>
<p><code>pl "Ваше здоровье &lt;&lt;health&gt;&gt;/100"</code></p>
<segment>
<p>Таким образом всякий раз, изменив значение переменной, вам нужно повторно вывести его на экран, чтобы игрок увидел "обновление" этого значения.</p>
</segment>

</section>
<section id="faq_19_10">
<title head-level="h2">
<p>19.10. Как сделать, чтобы текст выводился снизу вверх?</p>
</title>

<segment>
<p>В: Как сделать, чтобы текст выводился снизу вверх? Пробовал решить через выравнивание внутри ячейки таблицы, но ничего не получается.</p>
<p>О:</p>
<p>В классическом плеере нет поддержки атрибута вертикального выравнивания `valign` для ячеек таблиц. Поэтому такой метод не сработает. К тому же атрибут `height` в классическом плеере так же не работает, и невозможно стилизовать ячейку, не говоря о блоке `&lt;div&gt;`. Поэтому в классическом плеере приходится использовать костыль: добивать пустые строки перед строкой, которая должна выводиться снизу.</p>
</segment>

</section>
</section>
<section id="faq_20">
<title anchor="faq_20" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\20_конкретные задачи\00.txt-light">
<p>20. Конкретные задачи</p>
</title>
<section id="faq_20_01">
<title head-level="h2">
<p>20.1. Как сделать возврат на предыдущую локацию?</p>
</title>

<segment>
<p>В: Как сделать возврат на предыдущую локацию?</p>
<p>О:</p>
<p>В общем виде это делается так:</p>
</segment>


<p>* 
"Запоминаем" название текущей локации в какой-нибудь переменной.</p>
<p>* 
При переходе на новую локацию создаём действие, гиперссылку или предмет, по нажатию на которые произойдёт переход на предыдущую локацию (которую мы "запомнили").</p>


<segment>
<p>Для примера рассмотрим пару частных случаев.</p>
<p>Сделаем действие, которое будет появляться в каждой локации, и по нажатию на которое можно будет вернуться на предыдущую посещённую локацию.</p>
<p>Для начала создадим локацию-обработчик перехода на новую локацию. Назвать её можно как угодно, например "при_переходе".</p>
<p>Теперь нужно указать плееру, какую локацию он должен использовать как локацию-обработчик перехода на новую локацию. Для этого в переменную `$onnewloc` помещаем название нашей новой созданной локации. Пишем, например, на самой первой локации в игре:</p>
</segment>
<p><code>$onnewloc="при_переходе"</code></p>
<segment>
<p>Теперь всякий раз при переходе на локацию по `goto` или `xgoto` автоматически будет выполняться код локации "при_переходе". Вот на ней мы и пишем следующий код:</p>
</segment>
<p><code>!#при_переходе</code></p>
<p><code>! сохраняем название предыдущей посещённой локации</code></p>
<p><code>$back_loc=$now_loc</code></p>
<p><code>! запоминаем название текущей локации</code></p>
<p><code>$now_loc=$curloc</code></p>
<p><code></code></p>
<p><code>! теперь если нам есть куда вернуться</code></p>
<p><code>if $back_loc&lt;&gt;"":</code></p>
<p><code>! создаём действие возврата</code></p>
<p><code>act "Вернуться":</code></p>
<p><code>goto $back_loc</code></p>
<p><code>! закрываем действие</code></p>
<p><code>end</code></p>
<p><code>! закрываем условие</code></p>
<p><code>end</code></p>
<segment>
<p>Вот такой короткий код позволит нам возвращаться на предыдущую локацию.</p>
<p>К примеру, если игрок посетил сначала локацию "коридор", в `$now_loc` записалось название "коридор". Затем он перешёл на локацию "спальня", в `$back_loc` записалось значение из `$now_loc`, то есть "коридор", а в `$now_loc` — "спальня". Если нажать действие "Вернуться", игрок вернётся на локацию "коридор".</p>
<p>У этого кода есть ряд недостатков. Например, здесь не учтён случай, когда игрок совершает переход на текущую локацию. Так же, если игрок уже вернулся на локацию "коридор", то при нажатии действия "Вернуться", он вновь попадёт на локацию "спальня", и так это действие будет перекидывать его между двумя локациями.</p>
<p>Если есть необходимость "пролистывать" локации в порядке обратном прохождению, можно немного модифицировать код:</p>
</segment>
<p><code>!#при_переходе</code></p>
<p><code>if $back_loc[]&lt;&gt;$curloc:</code></p>
<p><code>! если в последней ячейке массива</code></p>
<p><code>! ещё не записано название текущей локации</code></p>
<p><code>! вписываем</code></p>
<p><code>$back_loc[]=$curloc</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>! создаём действие возврата</code></p>
<p><code>act "Вернуться":</code></p>
<p><code>! получаем размер массива</code></p>
<p><code>local array_size=arrsize('$back_loc')</code></p>
<p><code>! удаляем последнюю ячейку</code></p>
<p><code>killvar '$back_loc',array_size-1</code></p>
<p><code>! переходим на предыдущую локацию</code></p>
<p><code>goto $back_loc[]</code></p>
<p><code>! закрываем действие возврата</code></p>
<p><code>end</code></p>
<segment>
<p>Данный код лишён недостатков предыдущего и удобен там, где может потребоваться возвращаться на несколько локаций назад. Например, в книгах-играх.</p>
<p>Если нам нужен предмет, который будет работать, как действие "Вернуться", снова изменим код.</p>
<p>Во-первых, нам понадобится ещё одна служебная локация — локация-обработчик выделения предмета. Опять же, название может быть любым, например, "предмет_выделен". И как и с локацией-обработчиком перехода на новую локацию, необходимо указать плееру, какую локацию ему следует использовать как локацию-обработчик выделения предмета. Пишем, например на самой первой локации в игре:</p>
</segment>
<p><code>$onobjsel="предмет_выделен"</code></p>
<segment>
<p>И добавляем в окно предметов предмет для возврата. Можно так же на самой первой локации:</p>
</segment>
<p><code>addobj "Вернуться"</code></p>
<segment>
<p>На локации "при_переходе" оставляем только эту часть:</p>
</segment>
<p><code>!#при_переходе</code></p>
<p><code>if $back_loc[]&lt;&gt;$curloc:</code></p>
<p><code>$back_loc[]=$curloc</code></p>
<p><code>end</code></p>
<segment>
<p>На локации "предмет_выделен" пишем следующее:</p>
</segment>
<p><code>if $selobj="Вернуться":</code></p>
<p><code>! если выделен предмет "Вернуться"</code></p>
<p><code>local array_size=arrsize('$back_loc')</code></p>
<p><code>killvar '$back_loc',array_size-1</code></p>
<p><code>goto $back_loc[]</code></p>
<p><code>end</code></p>
<segment>
<p>Модифицируя и комбинируя эти способы, вы можете добиться нужного поведения кнопок для возврата на предыдущие локации.</p>
<p>Так же почитайте тему "Как сделать?", там не раз задавлись подобные вопросы, наверняка вы найдёте подходящий вариант для себя.</p>
</segment>

</section>
<section id="faq_20_02">
<title head-level="h2">
<p>20.2. Как проверить число на чётность?</p>
</title>

<segment>
<p>В: Как проверить число на чётность?</p>
<p>О:</p>
<p>Задача довольно простая. В QSP есть функция, которая позволяет получить остаток от деления любого числа на любое.</p>
<p>Чётные числа делятся на 2 нацело, это значит, что остаток от деления таких чисел на 2 равен 0. Поэтому код проверки чётности можно записать так:</p>
</segment>
<p><code>if m mod 2 = 0:</code></p>
<p><code>! если число делится на 2 без остатка, оно чётное</code></p>
<p><code>"Чётное число"</code></p>
<p><code>else</code></p>
<p><code>! если число не делится на 2 без остатка, оно нечётное</code></p>
<p><code>"Нечётное число"</code></p>
<p><code>end</code></p>
<segment>
<p>Можно и покороче:</p>
</segment>
<p><code>$iif((m mod 2)=0,"Чётное число","Нечётное число")</code></p>
<segment>
<p>Таким образом можно проверять делимость любого числа на любое. Например, проверить, делится ли число на 3:</p>
</segment>
<p><code>$iif((m mod 3)=0,"Делимое на 3","Неделимое на 3")</code></p>

</section>
<section id="faq_20_03">
<title head-level="h2">
<p>20.3. Как сделать шанс на выпадение определённой вещи?</p>
</title>

<segment>
<p>В: Как сделать шанс на выпадение определённой вещи? Например 25 процентный шанс на то, что в сундуке окажется золотая чаша?</p>
<p>О:</p>
<p>В самом простом виде, когда мы имеем дело с одним конкретным предметом и приблизительно знаем шансы его выпадения, можно сделать весьма простой алгоритм:</p>
</segment>
<p><code>! задаём шанс выпадения предмета (якобы в процентах) — предел от 1 до ...</code></p>
<p><code>chance=25</code></p>
<p><code>! теперь выбрасываем случайное число от 1 до 100</code></p>
<p><code>bones=rand(1,100)</code></p>
<p><code>! проверяем попало ли выпавшее число в заданный нами предел</code></p>
<p><code>if bones&lt;=chance:</code></p>
<p><code>! если выпавшее число меньше либо равно заданному</code></p>
<p><code>! получаем предмет</code></p>
<p><code>addobj "Золотая чаша"</code></p>
<p><code>"Вы нашли в сундуке золотую чашу."</code></p>
<p><code>else</code></p>
<p><code>! в противном случае ничего не получаем</code></p>
<p><code>"Вы ничего не нашли в сундуке."</code></p>
<p><code>end</code></p>
<segment>
<p>Чуть более сложной задачей становится выбор из нескольких вариантов предметов. Эта задача осложняется тем, что начинающие авторы продолжают применять подход с процентным значением шансов к большому набору предметов:</p>
</segment>
<p><code>Золотая чаша - 25%</code></p>
<p><code>Кувшин - 25%</code></p>
<p><code>Вострый меч — 50%</code></p>
<p><code>Убольшающее зелье — 25%</code></p>
<segment>
<p>Если сложить все процентные значения в этом случае, мы получаем 125% на все предметы, но такого не может быть.</p>
<p>На самом деле данная запись означает вот что: золотая чаша, кувшин и убольшающее зелье имеют равные шансы для выпадения, но по сравнению с любым из них вострый меч должен выпадать чаще (приблизительно в два раза). Однако шанс выпадения вострого меча в этом случае на треть меньше, чем шанс выпадения золотой чаши, либо кувшина, либо убольшающего зелья.</p>
<p>Всё это говорит нам о том, что мы имеем дело уже не с процентными соотношениями, а с коэффициентами соотношений. Начнём разбор этой ситуации с двух предметов:</p>
</segment>
<p><code>Вострый меч — 50</code></p>
<p><code>Убольшающее зелье — 25</code></p>
<segment>
<p>Теперь мы знаем, что это не проценты, а коэффициенты соотношений шанса выпадения. Делим 50 на 25, и понимаем, что Вострый меч должен выпадать вдвое чаще, чем Убольшающее зелье. При условии, что хоть один предмет должен выпасть обязательно, составляем следующий алгоритм:</p>
</segment>
<p><code>! максимальное значение случайного числа (складывается из коэффициентов)</code></p>
<p><code>bones_max=50+25</code></p>
<p><code>! определяем отрезок для меча (от 1 до 50)</code></p>
<p><code>chance_sword=50</code></p>
<p><code>! определяем отрезок для зелья (от 51 до 75)</code></p>
<p><code>chance_potion=75</code></p>
<p><code>! выбрасываем случайное число от 1 до bones_max</code></p>
<p><code>bones=rand(1,bones_max)</code></p>
<p><code>! теперь используя сложное условие проверяем отрезки</code></p>
<p><code>if bones&lt;=chance_sword:</code></p>
<p><code>! если мы уложились в отрезок для меча</code></p>
<p><code>! получаем меч</code></p>
<p><code>addobj "Вострый меч"</code></p>
<p><code>elseif bones&lt;=chance_potion:</code></p>
<p><code>! иначе если мы уложились в отрезок для зелья</code></p>
<p><code>! получаем зелье</code></p>
<p><code>addobj "Убольшающее зелье"</code></p>
<p><code>end</code></p>
<segment>
<p>Теперь можно составить алгоритм для случая с четырьмя предметами. Он не будет сильно отличаться от предыдущего:</p>
</segment>
<p><code>! максимальное значение числа</code></p>
<p><code>bones_max=50+25+25+25</code></p>
<p><code>! отрезок меча (1-50)</code></p>
<p><code>chance_sword=50</code></p>
<p><code>! отрезок зелья (51-75)</code></p>
<p><code>chance_potion=75</code></p>
<p><code>! отрезок кувшина (76-100)</code></p>
<p><code>chance_jug=100</code></p>
<p><code>! отрезок чаши (101-125)</code></p>
<p><code>chance_cup=125</code></p>
<p><code>! выбрасываем число</code></p>
<p><code>bones=rand(1,bones_max)</code></p>
<p><code>! получаем выпавший предмет</code></p>
<p><code>if bones&lt;=chance_sword:</code></p>
<p><code>addobj "Вострый меч"</code></p>
<p><code>elseif bones&lt;=chance_potion:</code></p>
<p><code>addobj "Убольшающее зелье"</code></p>
<p><code>elseif bones&lt;=chance_jug:</code></p>
<p><code>addobj "Кувшин"</code></p>
<p><code>elseif bones&lt;=chance_cup:</code></p>
<p><code>addobj "Золотая чаша"</code></p>
<p><code>end</code></p>
<segment>
<p>Что если мы хотим, чтобы в принципе предмет мог выпасть с 50% вероятностью, но между собой они делили шансы выпадения по-прежнему? Просто увеличиваем максимальное значение числа вдвое:</p>
</segment>
<p><code>! максимальное значение числа</code></p>
<p><code>bones_max=(50+25+25+25)*2</code></p>
<p><code>! отрезок меча (1-50)</code></p>
<p><code>chance_sword=50</code></p>
<p><code>! отрезок зелья (51-75)</code></p>
<p><code>chance_potion=75</code></p>
<p><code>! отрезок кувшина (76-100)</code></p>
<p><code>chance_jug=100</code></p>
<p><code>! отрезок чаши (101-125)</code></p>
<p><code>chance_cup=125</code></p>
<p><code>! выбрасываем число</code></p>
<p><code>bones=rand(1,bones_max)</code></p>
<p><code>! получаем выпавший предмет</code></p>
<p><code>if bones&lt;=chance_sword:</code></p>
<p><code>addobj "Вострый меч"</code></p>
<p><code>elseif bones&lt;=chance_potion:</code></p>
<p><code>addobj "Убольшающее зелье"</code></p>
<p><code>elseif bones&lt;=chance_jug:</code></p>
<p><code>addobj "Кувшин"</code></p>
<p><code>elseif bones&lt;=chance_cup:</code></p>
<p><code>addobj "Золотая чаша"</code></p>
<p><code>else</code></p>
<p><code>! или ничего не получаем</code></p>
<p><code>"Вы ничего не нашли"</code></p>
<p><code>end</code></p>
<segment>
<p>Конечно же данное решение не является универсальным, и для более универсального решения рамок обычного F.A.Q не хватит, но в большинстве случаев для написания сносной системы случайного выпадения предметов хватает и данного решения. Главное помнить, что выбирая между разными предметами мы уже работаем не с чистой вероятностью выпадения, а с тем, насколько чаще один предмет выпадает по отношению к другим предметам.</p>
</segment>

</section>
<section id="faq_20_04">
<title head-level="h2">
<p>20.4. Как сделать, чтобы текст выводился не внизу окна основного описания, а сверху?</p>
</title>

<segment>
<p>В: Как сделать, чтобы текст выводился не внизу окна основного описания, а сверху?</p>
<p>О:</p>
<p>Проще всего написать отдельную локацию, и потом вызывать её всякий раз, когда понадобится добавить текст вверху окна основного описания. Локация будет называться "p.top":</p>
</segment>
<p><code>!#p.top</code></p>
<p><code>local $top_text = $args[0] &amp; ! текст, который надо вывести сверху</code></p>
<p><code>!запоминаем текст в окне основного описания</code></p>
<p><code>local $main_txt = $maintxt</code></p>
<p><code>! очищаем окно основного описания</code></p>
<p><code>*clr</code></p>
<p><code>! выводим строку</code></p>
<p><code>*pl $top_text</code></p>
<p><code>! выводим текст, который был ранее</code></p>
<p><code>*p $main_txt</code></p>
<segment>
<p>Теперь, чтобы добавить текст сверху, в нужном месте:</p>
</segment>
<p><code>gs 'p.top','Строка, которая выведется над основным описанием!'</code></p>
<segment>
<p>Этот пример можно развить:</p>
</segment>
<p><code>local $top_text = $args[0] &amp; ! текст, выводимый сверху</code></p>
<p><code>local $command = $iif($args[1]&lt;&gt;"", $args[1], "*pl") &amp; ! команда, с помощью которой нужно вывести текст</code></p>
<p><code>local $screen = $mid($args[1],1,1) &amp; ! получаем первый символ из команды</code></p>
<p><code>local $text = ""</code></p>
<p><code>if $screen="*":</code></p>
<p><code>! если первый символ команды выведения текста *</code></p>
<p><code>! значит нам нужен текст из окна основного описания</code></p>
<p><code>$text=$maintxt</code></p>
<p><code>else</code></p>
<p><code>! в противном случае</code></p>
<p><code>! нам нужен текст из окна дополнительного описания</code></p>
<p><code>$text=$stattxt</code></p>
<p><code>end</code></p>
<p><code>! теперь с помощью dynamic повторяем действия из предыдущего примера:</code></p>
<p><code>dynamic "</code></p>
<p><code>&lt;&lt;$screen&gt;&gt;clr</code></p>
<p><code>&lt;&lt;$command&gt;&gt; $args[0]</code></p>
<p><code>&lt;&lt;$screen&gt;&gt;p $args[1]</code></p>
<p><code>",$top_text,$text</code></p>
<segment>
<p>Теперь можно выводить текст в окне основного и дополнительного описаний сверху разными способами:</p>
</segment>
<p><code>gs 'p.top','Строка плюс переход на новую строку в окне основного описания'</code></p>
<p><code>gs 'p.top','Строка плюс переход на новую строку в окне дополнительного описания','pl'</code></p>
<p><code>gs 'p.top','Переход на новую строку плюс строка в окне доп описания','nl'</code></p>

</section>
<section id="faq_20_05">
<title head-level="h2">
<p>20.5. Как можно удалить часть текста из описания?</p>
</title>

<segment>
<p>В: Как можно удалить часть текста из описания?</p>
<p>О:</p>
<p>Если вы точно знаете, какую часть описания вам нужно удалить, и она не повторяется несколько раз, можно использовать простой алгоритм:</p>
</segment>
<p><code>! запоминаем описание</code></p>
<p><code>local $description=$maintxt</code></p>
<p><code>! С помощью функции $replace заменяем полученное значение на значение с удалённой строкой</code></p>
<p><code>$description=$replace($description,"строка, которую хотим удалить")</code></p>
<p><code>! стираем основное описание</code></p>
<p><code>*clr</code></p>
<p><code>! выводим новое</code></p>
<p><code>*p $description</code></p>
<segment>
<p>Возможно вам понадобится удалить часть описания, которая несколько раз повторяется в тексте. Тогда придётся воспользоваться более сложным алгоритмом:</p>
</segment>
<p><code>! строка,которую хотим удалить</code></p>
<p><code>$killstr="#F92672"</code></p>
<p><code>! запоминаем описание</code></p>
<p><code>$description=$maintxt</code></p>
<p><code>! с помощью цикла и функции instr, определяем, с какого символа начинается вхождение</code></p>
<p><code>local iNum=3 &amp; ! номер вхождения, которое хотим удалить</code></p>
<p><code>local i=0 &amp; ! счётчик</code></p>
<p><code>local fromPos=0 &amp; ! с какого символа начинать поиск вхождения</code></p>
<p><code>local in_str=0 &amp; ! с какого символа начинается вхождение</code></p>
<p><code>loop while 1 step i+=1:</code></p>
<p><code>in_str=instr($description,$killstr,fromPos+1)</code></p>
<p><code>if i&lt;iNum and in_str&lt;&gt;fromPos:</code></p>
<p><code>fromPos=in_str</code></p>
<p><code>else</code></p>
<p><code>! вырезаем первую часть до вхождения</code></p>
<p><code>$part_1=$mid($description,1,fromPos-1)</code></p>
<p><code>! вырезаем часть после вхождения</code></p>
<p><code>$part_2=$mid($description,fromPos+len($killstr))</code></p>
<p><code>! собираем новое описание</code></p>
<p><code>$description=$part_1+$part_2</code></p>
<p><code>jump 'end_cycle' &amp; ! прерываем цикл</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<p><code>:end_cycle</code></p>
<p><code>! стираем основное описание</code></p>
<p><code>*clr</code></p>
<p><code>! выводим новое</code></p>
<p><code>*p $description</code></p>

</section>
<section id="faq_20_06">
<title head-level="h2">
<p>20.6. Как вывести на экран HTML-разметку, не отключая режим распознавания HTML? То есть при `usehtml=1`</p>
</title>

<segment>
<p>В: Как вывести на экран HTML-разметку, не отключая режим распознавания HTML? То есть при `usehtml=1`.</p>
<p>О:</p>
<p>На самом деле сделать это довольно просто. Достаточно заменить в исходном тексте угловые скобки на соответствующие коды спец-символов HTML.</p>
<p>Для примера, выведем размеченный с помощью HTML текст из окна основного описания в окно дополнительного описания:</p>
</segment>
<p><code>! фиксируем содержимое окна основного описания в переменной</code></p>
<p><code>$description=$maintxt</code></p>
<p><code>! с помощью функции replace заменяем левую угловую скобку на код &lt;</code></p>
<p><code>$description=$replace($description,'&lt;','&lt;')</code></p>
<p><code>! с помощью функции replace заменяем правую угловую скобку на код &gt;</code></p>
<p><code>$description=$replace($description,'&gt;','&gt;')</code></p>
<p><code>! выводим получившийся результат в окно доп.описания</code></p>
<p><code>p $description</code></p>

</section>
<section id="faq_20_07">
<title head-level="h2">
<p>20.7. Есть несколько переменных с разными значениями. Как получить имя переменной, в которой находится наибольшее значение?</p>
</title>

<segment>
<p>В: Есть несколько переменных с разными значениями. Как получить имя переменной, в которой находится наибольшее значение?</p>
<p>О:</p>
<p>Для примера возьмём несколько переменных и значений:</p>
</segment>
<p><code>VariableA=1</code></p>
<p><code>VariableB=2</code></p>
<p><code>VariableC=3</code></p>
<p><code>VariableD=4</code></p>


<segment>
<p>1. 
Вносим названия этих переменных и их значения в два разных массива под одним индексом:</p>
</segment>
<p><code>$varname[0]="VariableA" &amp; varvalue[0]=VariableA</code></p>
<p><code>$varname[1]="VariableB" &amp; varvalue[1]=VariableB</code></p>
<p><code>$varname[2]="VariableC" &amp; varvalue[2]=VariableC</code></p>
<p><code>$varname[3]="VariableD" &amp; varvalue[3]=VariableВ</code></p>


<segment>
<p>2. 
Теперь определяем максимальное значение в массиве varvalue:</p>
</segment>
<p><code>varmax=max('varvalue')</code></p>


<segment>
<p>3. 
Осталось определить индекс элемента с этим значением:</p>
</segment>
<p><code>indexMax=arrpos('varvalue',varmax)</code></p>


<segment>
<p>4. 
Имя переменной получить уже несложно:</p>
</segment>
<p><code>*pl "Максимальное значение в переменной "+$varname[indexMax]</code></p>


<segment>
<p>Можно написать функцию, которая будет возвращать название переменной с максимальным значением:</p>
</segment>
<p><code>!#maxVar</code></p>
<p><code>! $args[0] — $args[8] — названия переменных</code></p>
<p><code>! массивы для временного хранения названий переменных и их значений:</code></p>
<p><code>local $varname, varvalue</code></p>
<p><code>! 1</code></p>
<p><code>loop local i=0 while $args[i]&lt;&gt;'' step i+=1:</code></p>
<p><code>dynamic "$varname[]='&lt;&lt;$args[i]&gt;&gt;' &amp; varvalue[]=&lt;&lt;$args[i]&gt;&gt;"</code></p>
<p><code>end</code></p>
<p><code>! 2</code></p>
<p><code>local max_=max('varvalue')</code></p>
<p><code>! 3</code></p>
<p><code>local index_=arrpos('varvalue',max_)</code></p>
<p><code>! 4</code></p>
<p><code>$result=$varname[index_]</code></p>
<segment>
<p>Вызов функции:</p>
</segment>
<p><code>@maxVar('VariableA','VariableB','VariableC','VariableD')</code></p>
<segment>
<p>Поскольку для работы данной функции в любом случае требуется цикл, можно несколько изменить алгоритм:</p>
</segment>
<p><code>!#varMax</code></p>
<p><code>local $max_='args[19]'</code></p>
<p><code>loop local i=0 while $args[i]&lt;&gt;'' step i+=1:</code></p>
<p><code>$max_=$dyneval("if &lt;&lt;$args[i]&gt;&gt; &gt; &lt;&lt;$max_&gt;&gt;:</code></p>
<p><code>$result='&lt;&lt;$args[i]&gt;&gt;'</code></p>
<p><code>else</code></p>
<p><code>$result='&lt;&lt;$max_&gt;&gt;'</code></p>
<p><code>end")</code></p>
<p><code>end</code></p>
<p><code>$result=$max_</code></p>

</section>
<section id="faq_20_08">
<title head-level="h2">
<p>20.8. Как в QSP сравнить два массива?</p>
</title>

<segment>
<p>В: Как в QSP сравнить два массива?</p>
<p>О:</p>
<p>На первый взгляд вопрос кажется довольно простым, однако сравнение сравнению рознь. И если мы зададим вопрос: как именно мы хотим сравнить два массива? — возникают совершенно разные решения для различных вариантов сравнения.</p>
<p>Мы можем сравнить массивы по числу элементов:</p>
</segment>
<p><code>if arrsize('mass_1')=arrsize('mass_2'):</code></p>
<p><code>*pl 'Число элементов в массивах одинаковое.'</code></p>
<p><code>else</code></p>
<p><code>*pl 'Число элементов в массивах разное.'</code></p>
<p><code>end</code></p>
<segment>
<p>Довольно простая задача.</p>
<p>Возьмём задачу посложнее: проверить массивы на идентичность. То есть значение каждого элемента одного массива должно совпадать со значением элемента другого массива под тем же индексом:</p>
</segment>
<p><code>loop local i, size = 0, arrsize('mass_1') while i&lt;size and $text='' step i+=1:</code></p>
<p><code>if mass_1[i]&lt;&gt;mass_2[i]:</code></p>
<p><code>$text='Массивы не идентичны'</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<p><code>if $text='': $text='Массивы идентичны'</code></p>
<segment>
<p>Само собой проверять на идентичность массивы разного размера нет смысла.</p>
<p>Третья задача ещё сложнее. Нужно проверить, присутствуют ли в массивах одни и те же значения, но при этом не важно, совпадают ли индексы элементов с этими значениями.</p>
<p>Кажется, что она решается относительно просто:</p>
</segment>
<p><code>loop local i,size = 0,arrsize('mass_1') while i&lt;size and $text='' step i+=1:</code></p>
<p><code>if arrpos('mass_2',mass_1[i])=-1:</code></p>
<p><code>$text='Массивы разнятся по содержимому'</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<p><code>if $text='': $text='Массивы состоят из одинаковых элементов'</code></p>
<segment>
<p>Это решение может сработать, если в массивах, например, вот такое содержимое:</p>
</segment>
<p><code>mass_1[0]=1 &amp; mass_2[0]=4</code></p>
<p><code>mass_1[1]=2 &amp; mass_2[1]=3</code></p>
<p><code>mass_1[2]=3 &amp; mass_2[2]=2</code></p>
<p><code>mass_1[3]=4 &amp; mass_2[3]=1</code></p>
<segment>
<p>Но как быть, если в массивах вот такое содержимое</p>
</segment>
<p><code>mass_1[0]=1 &amp; mass_2[0]=4</code></p>
<p><code>mass_1[1]=1 &amp; mass_2[1]=4</code></p>
<p><code>mass_1[2]=1 &amp; mass_2[2]=1</code></p>
<p><code>mass_1[3]=4 &amp; mass_2[3]=1</code></p>
<segment>
<p>Да, в них содержатся одинаковые значения, но встречаются они разное количество раз. А если при сравнении нам нужно учесть и количество?</p>
<p>Задача становится чуть более сложной. И теперь её решение будет включать в себя несколько этапов:</p>
</segment>


<p>1. 
Сравнение массивов по размеру. Если размеры разные, то массивы в любом случае не равны.</p>
<p>2. 
Копирование массивов во временные.</p>
<p>3. 
Сортировка значений во временных массивах</p>
<p>4. 
Сравнение временных массивов на идентичность</p>


<segment>
<p>Сортировка значений в массивах — это отдельный вопрос, и он представлен в смежном разделе (см. 20.10).</p>
<p>Готовое решение для сравнения массивов на идентичность, на подобие (значения одинаковы но расположены в разном порядке), на совпадение хотя бы одного элемента есть в библиотеке 
<a l:href="https://github.com/AleksVersus/easy.math">
easy.math</a>, см. функцию 
<a l:href="http://aleksversus.narod.ru/index/operacii_nad_massivami/0-72#arraysimp">
#array.simp#</a>.</p>
</segment>

</section>
<section id="faq_20_09">
<title head-level="h2">
<p>20.9. Как сделать вытягивание случайных карт из колоды?</p>
</title>

<segment>
<p>В: Как сделать вытягивание случайных карт из колоды? Карты вытягиваются несколько раз, но они не должны повторяться.</p>
<p>О:</p>
<p>В общем виде эта задача решается так:</p>
</segment>


<p>1. 
Записываем данные в массив</p>
<p>2. 
Тем или иным способом (например, случайным образом) получаем номер ячейки этого массива</p>
<p>3. 
Используем данные из этой ячейки (например, выводим на экран, или помещаем в другой массив/переменную)</p>
<p>4. 
Уничтожаем ячейку, чтобы больше не получать из неё данные</p>
<p>5. 
При необходимости повторяем.</p>


<segment>
<p>На основе этого общего алгоритма составим алгоритм под конкретную задачу. Будем вытягивать по шесть карт из колоды, пока карты не кончатся.</p>
<p>Поскольку все карты в колоде разные, можно присвоить каждой из них номер, и записать эти номера в массив:</p>
</segment>
<p><code>deck[0]=1</code></p>
<p><code>deck[1]=2</code></p>
<p><code>deck[2]=3</code></p>
<p><code>!...</code></p>
<p><code>deck[51]=52</code></p>
<p><code>deck[52]=53</code></p>
<p><code>deck[53]=54</code></p>
<segment>
<p>Можно описать каждую карту строкой текста:</p>
</segment>
<p><code>$deck[0]='двойка треф'</code></p>
<p><code>$deck[1]='тройка треф'</code></p>
<p><code>$deck[2]='четвёрка треф'</code></p>
<p><code>!...</code></p>
<p><code>$deck[51]="туз бубей"</code></p>
<p><code>$deck[52]="джокер красный"</code></p>
<p><code>$deck[53]="джокер чёрный"</code></p>
<segment>
<p>Выбирайте способ, который вам будет удобен.</p>
<p>Алгоритм, который мы будем использовать далее, необходимо изменить под ваши конкретные нужды. В данном случае мы напишем действие, которое будет сдавать по шесть карт:</p>
</segment>
<p><code>! открываем действие</code></p>
<p><code>act "Сдать шесть карт":</code></p>
<p><code>! Если колоду ещё не разобрали (условие 1)</code></p>
<p><code>if arrsize('deck')&gt;0:</code></p>
<p><code>! организуем цикл</code></p>
<p><code>loop local i=0 while i&lt;6 step i+=1:</code></p>
<p><code>! пока счётчик не достиг 6</code></p>
<p><code>! выбираем случайное число от 0</code></p>
<p><code>! до индекса последнего элемента массива deck</code></p>
<p><code>index=rand(0,arrsize('deck')-1)</code></p>
<p><code>! запоминаем карту в очередном элементе массива hand</code></p>
<p><code>hand[]=deck[index]</code></p>
<p><code>! можем вывести на экран</code></p>
<p><code>*p $str(deck[index])+','</code></p>
<p><code>! удаляем карту из колоды</code></p>
<p><code>! (элемент из массива)</code></p>
<p><code>killvar 'deck',index</code></p>
<p><code>end</code></p>
<p><code>! добавляем перевод строки</code></p>
<p><code>*pl</code></p>
<p><code>else</code></p>
<p><code>! если колоду уже разобрали</code></p>
<p><code>*pl "Колода разобрана"</code></p>
<p><code>! закрываем условие 1</code></p>
<p><code>end</code></p>
<p><code>! закрываем действие</code></p>
<p><code>end</code></p>
<segment>
<p>Данное решение можно применять для других задач. Например, в массиве есть несколько чисел, и их необходимо вывести в порядке от большего к меньшему:</p>
</segment>
<p><code>! массив</code></p>
<p><code>deck[0]=4</code></p>
<p><code>deck[1]=3</code></p>
<p><code>deck[2]=2</code></p>
<p><code>deck[3]=3</code></p>
<p><code>deck[4]=1</code></p>
<p><code>deck[5]=4</code></p>
<p><code>! чтобы не затирать исходный массив,</code></p>
<p><code>! копируем значения в другой, временный, массив</code></p>
<p><code>copyarr 'deck_temp','deck'</code></p>
<p><code>! вновь организуем цикл</code></p>
<p><code>loop while arrsize('deck_temp')&gt;0:</code></p>
<p><code>! если размер временного массива больше нуля</code></p>
<p><code>! получаем максимальное значение</code></p>
<p><code>maxVar=max('deck_temp')</code></p>
<p><code>! определяем, в какой ячейке находится это значение</code></p>
<p><code>index=arrpos('deck_temp',maxVar)</code></p>
<p><code>! можно вывести на экран</code></p>
<p><code>*pl deck_temp[index]</code></p>
<p><code>! теперь удаляем элемент из массива</code></p>
<p><code>killvar 'deck_temp',index</code></p>
<p><code>! закрываем цикла</code></p>
<p><code>end</code></p>
<segment>
<p>В упрощённом виде алгоритм, выбрасывающий случайные карты из колоды (с первой по последнюю) можно записать так:</p>
</segment>
<p><code>!$deck[0]='двойка треф'</code></p>
<p><code>!$deck[1]='тройка треф'</code></p>
<p><code>!$deck[2]='четвёрка треф'</code></p>
<p><code>loop local i=0 while arrsize('$deck')&gt;0:</code></p>
<p><code>i=rand(0,arrsize('$deck')-1)</code></p>
<p><code>*pl $deck[i]</code></p>
<p><code>killvar '$deck',i</code></p>
<p><code>end</code></p>
<segment>
<p>Посмотрите так же предложенные решения по 
<a l:href="#link_20_09">
ссылкам</a>.</p>
</segment>

</section>
<section id="faq_20_10">
<title head-level="h2">
<p>20.10. Как отсортировать данные?</p>
</title>

<segment>
<p>В: Как отсортировать данные? Например, список персонажей по алфавиту, или набор чисел от меньшего к большему.</p>
<p>О:</p>
<p>Прежде всего такие данные должны лежать в одном массиве. Например:</p>
</segment>
<p><code>$personage[0]='Петя'</code></p>
<p><code>$personage[1]='Ваня'</code></p>
<p><code>$personage[2]='Сева'</code></p>
<p><code>$personage[3]='Саша'</code></p>
<p><code>$personage[4]='Лёня'</code></p>
<segment>
<p>Или:</p>
</segment>
<p><code>number[0]=345</code></p>
<p><code>number[1]=798</code></p>
<p><code>number[2]=930</code></p>
<p><code>number[3]=121</code></p>
<p><code>number[4]=474</code></p>
<segment>
<p>Далее можно воспользоваться простым алгоритмом:</p>
</segment>
<p><code>! объявляем локальные переменные</code></p>
<p><code>local $varMax, index, $personage_temp</code></p>
<p><code>! копируем данные во временный массив,</code></p>
<p><code>! чтоб не затереть исходный</code></p>
<p><code>copyarr '$personage_temp','$personage'</code></p>
<p><code>! с помощью цикла выбираем элементы по одному</code></p>
<p><code>! из временного массива, имеющие минимальное значение</code></p>
<p><code>loop while arrsize('$personage_temp')&gt;0:</code></p>
<p><code>! цикл будет работать, пока размер временного массива</code></p>
<p><code>! больше нуля</code></p>
<p><code>! получаем минимальное значение</code></p>
<p><code>$varMax=$min('$personage_temp')</code></p>
<p><code>! определяем, в каком элементе лежит это значение</code></p>
<p><code>index=arrpos('$personage_temp',$varMax)</code></p>
<p><code>! выводим на экран</code></p>
<p><code>*pl $varMax</code></p>
<p><code>! или запоминаем в другом массиве</code></p>
<p><code>$personage_sort[]=$varMax</code></p>
<p><code>! удаляем элемент из временного массива</code></p>
<p><code>killvar '$personage_temp',index</code></p>
<p><code>end</code></p>
<segment>
<p>Обратите внимание, при работе с текстовыми значениями меньшим считается то, которое идёт раньше согласно алфавитного порядка.</p>
<p>Сортировка чисел ничем практически не отличается:</p>
</segment>
<p><code>local varMax, index, number_temp</code></p>
<p><code>copyarr 'number_temp','number'</code></p>
<p><code>loop while arrsize('number_temp')&gt;0:</code></p>
<p><code>varMax=max('number_temp')</code></p>
<p><code>index=arrpos('number_temp',varMax)</code></p>
<p><code>*pl varMax</code></p>
<p><code>number_sort[]=varMax</code></p>
<p><code>killvar 'number_temp',index</code></p>
<p><code>end</code></p>
<segment>
<p>Этот алгоритм достаточно быстр и прост для решения большинства задач. Он требует нескольких переменных и дополнительный массив для временного хранения данных. Если необходимо отсортировать данные сразу внутри массива, не прибегая к помощи дополнительного массива, можно воспользоваться методом сортировки "пузырьком":</p>
</segment>
<p><code>проходы=0</code></p>
<p><code>loop local проходы=0 while проходы&lt;arrsize("сортируемый_массив") step проходы+=1:</code></p>
<p><code>loop local всплытия=проходы while всплытия&lt;arrsize("сортируемый_массив") step всплытия+=1:</code></p>
<p><code>if сортируемый_массив[проходы] &lt; сортируемый_массив[всплытия]:</code></p>
<p><code>! или, если нужен другой порядок:</code></p>
<p><code>!if сортируемый_массив[проходы] &gt; сортируемый_массив[всплытия]:</code></p>
<p><code>запоминальная_переменная = сортируемый_массив[проходы]</code></p>
<p><code>сортируемый_массив[проходы] = сортируемый_массив[всплытия]</code></p>
<p><code>сортируемый_массив[всплытия] = запоминальная_переменная</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>Операции сравнения прекрасно работают с текстовыми значениями по тому же принципу, что и функции `$max` и `$min`.</p>
<p>Готовое решение по методу сортировки пузырьком есть в библиотеке "easy.math" с различными дополнительными возможностями. Смотрите функцию 
<a l:href="https://github.com/AleksVersus/easy.math.3">
em.arr.sort</a>.</p>
</segment>

</section>
<section id="faq_20_11">
<title head-level="h2">
<p>20.11. Как сделать проценты?</p>
</title>

<segment>
<p>В: Как сделать проценты?</p>
<p>О:</p>
<p>Как таковые процентные вычисления в QSP не поддерживаются, равно как не поддерживаются дробные числа, однако выход из данной ситуации есть.</p>
<p>Поскольку процент является сотой частью от исходного числа, можно составлять простые формулы для различных вычислений:</p>
</segment>
<p><code>! двадцать процентов от числа</code></p>
<p><code>percent=N*20/100</code></p>
<segment>
<p>Обратите внимание, сначала производим операцию умножения, а лишь затем — деления. Это сделано потому, что QSP не поддерживает дробные числа. И если мы, например, захотим вычислить двадцать процентов от числа 80, то деление 80 на 100 даст в результате ноль, а значит и при умножении результата на 20 получится ноль. Но в нашем случае мы сначала умножаем 80 на 20, и получаем 1600, а затем делим на 100 и получаем 16. Число 16 — это 20 процентов от числа 80.</p>
<p>Уменьшаем число на 25%:</p>
</segment>
<p><code>N=N-N*25/100</code></p>
<segment>
<p>Увеличиваем число на 37%</p>
</segment>
<p><code>N=N+N*37/100</code></p>
<segment>
<p>Естественно при делении на 100 число теряет дробную часть и данное решение не даст нужной точности для маленьких чисел:</p>
</segment>
<p><code>N=25</code></p>
<p><code>N=N-N*50/100</code></p>
<p><code>*pl N</code></p>
<segment>
<p>Для больших чисел неточность будет скрадываться.</p>
</segment>
<p><code>N=2500</code></p>
<p><code>N=N-N*37/100</code></p>
<p><code>*pl N</code></p>

</section>
<section id="faq_20_12">
<title head-level="h2">
<p>20.12. Как решить задачу по поиску случайного набора слагаемых?</p>
</title>

<segment>
<p>В: Как решить задачу по поиску случайного набора слагаемых?</p>
<p>Например, есть набор чисел 2,3,5 и 9, и нужно случайным образом выбрать из них несколько чисел (можно одинаковых), которые в сумме составляют 9. Как это реализовать?</p>
<p>О:</p>
<p>Для начала разберём алгоритм для этого конкретного случая, а затем попытаемся написать более универсальную процедуру.</p>
</segment>
<p><code>! заполняем массив числами (они определены) - исходный массив</code></p>
<p><code>mass[0]=2</code></p>
<p><code>mass[1]=3</code></p>
<p><code>mass[2]=5</code></p>
<p><code>mass[3]=9</code></p>
<p><code>! задаём "сумму" выброшенных чисел = 9</code></p>
<p><code>summ = 9</code></p>
<p><code></code></p>
<p><code>! далее начинается цикл.</code></p>
<p><code>loop while 1:</code></p>
<p><code>! выкидываем число</code></p>
<p><code>! получаем индекс</code></p>
<p><code>index = rand(0,arrsize('mass')-1)</code></p>
<p><code>! фиксируем число</code></p>
<p><code>number=mass[index]</code></p>
<p><code>! проверяем, возможно ли вычитание</code></p>
<p><code>if summ - number = 0:</code></p>
<p><code>! если при вычитании числа из summ получается 0, значит мы нашли последнее число</code></p>
<p><code>! записываем его</code></p>
<p><code>search[]=number</code></p>
<p><code>jump 'cycle_end' &amp; ! прерываем цикл</code></p>
<p><code>elseif summ - number &lt; min('mass'):</code></p>
<p><code>! если разность summ и числа - меньше минимального значения в массиве, значит</code></p>
<p><code>! число, которое мы вытянули, нам не подходит</code></p>
<p><code>! и не подойдёт, его можно убрать из исходного массива</code></p>
<p><code>killvar 'mass',index</code></p>
<p><code>! записывать его не нужно</code></p>
<p><code>else</code></p>
<p><code>! во всех остальных случаях число нам подходит:</code></p>
<p><code>! запоминаем его в конечный массив</code></p>
<p><code>search[]=number</code></p>
<p><code>! уменьшаем summ на это число</code></p>
<p><code>summ -= number</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<p><code>:cycle_end</code></p>
<segment>
<p>Как видим, алгоритм генерации случайного набора слагаемых довольно прост. Однако он предполагает, что нам изначально известны слагаемые, на которые может быть разложена исходная сумма.</p>
<p>Можно написать универсальную процедуру для подобных случаев (назовём её "summ.break"):</p>
</segment>
<p><code>!#summ.break</code></p>
<p><code>local summ = args[0] &amp; ! Сумма, для которой мы получаем набор слагаемых</code></p>
<p><code>local $addiction = $args[1]+',' &amp; ! набор слагаемых через запятую</code></p>
<p><code>local mass &amp; ! локальный массив, в который мы будем помещать слагаемые</code></p>
<p><code>! предварительно вытаскиваем в массив mass[] наши слагаемые</code></p>
<p><code>loop while len($addiction)&gt;0:</code></p>
<p><code>! запоминаем число</code></p>
<p><code>mass[]=val($mid($addiction,1,instr($addiction,",")-1))</code></p>
<p><code>! удаляем его из строки</code></p>
<p><code>if instr($addiction,",")&lt;&gt;len($addiction):</code></p>
<p><code>$addiction=$mid($addiction,instr($addiction,",")+1)</code></p>
<p><code>else</code></p>
<p><code>$addiction=''</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>! Теперь выполняем тот же алгоритм, что мы уже писали,</code></p>
<p><code>! только исключая лишние глобальные переменные</code></p>
<p><code>local index_, number_</code></p>
<p><code>! начинается цикл.</code></p>
<p><code>loop while 1:</code></p>
<p><code>! получаем число (слагаемое) из массива</code></p>
<p><code>! получаем индекс</code></p>
<p><code>index_ = rand(0,arrsize('mass')-1)</code></p>
<p><code>! фиксируем число</code></p>
<p><code>number_=mass[index_]</code></p>
<p><code></code></p>
<p><code>! проверяем, возможно ли вычитание</code></p>
<p><code>if summ - number_ = 0:</code></p>
<p><code>! если при вычитании числа из summ получается 0, значит мы нашли последнее число</code></p>
<p><code>! записываем его</code></p>
<p><code>search[]=number_</code></p>
<p><code>jump 'endandexit'</code></p>
<p><code>elseif summ - number_ &lt; min('mass'):</code></p>
<p><code>! если разность summ и числа - меньше минимального значения в массиве, значит</code></p>
<p><code>! число, которое мы вытянули, нам не подходит</code></p>
<p><code>! и не подойдёт, его можно убрать из исходного массива</code></p>
<p><code>killvar 'mass',index_</code></p>
<p><code>! записывать его не нужно</code></p>
<p><code>elseif arrsize('mass')&lt;1:</code></p>
<p><code>! защита от дурака. Если размер массива mass упал до нуля, значит мы перебрали все</code></p>
<p><code>! возможные варианты и значит изначальное условие задано неверно или</code></p>
<p><code>! решение, которое начал подбирать алгоритм изначально неверно подбиралось</code></p>
<p><code>! *pl 'неверное решение'</code></p>
<p><code>! $result = 'false'</code></p>
<p><code>jump 'endandexit'</code></p>
<p><code>else</code></p>
<p><code>! во всех остальных случаях число нам подходит:</code></p>
<p><code>! запоминаем его в конечный массив</code></p>
<p><code>search[]=number_</code></p>
<p><code>! уменьшаем summ на это число</code></p>
<p><code>summ -= number_</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<p><code>! результат прописывается в массив search</code></p>
<p><code>! массив mass удаляем, он был временным</code></p>
<p><code>:endandexit</code></p>
<segment>
<p>Вариант вызова для исходной задачи:</p>
</segment>
<p><code>@summ.break(9,'2,3,5,9')</code></p>
<segment>
<p>Данный алгоритм не включает в себя защиту от некоторых ошибок. Две очевидные:</p>
</segment>


<p>* 
Вы не знаете изначально можно ли получить для данного числа хоть один набор слагаемых из тех, что даны.</p>
<p>* 
Перечень слагаемых включает числа, из которых можно получить набор слагаемых, но не во всех случаях.</p>


<segment>
<p>Обе эти ошибки не должны приводить к зацикливанию, но их всё равно стоит избегать.</p>
<p>См. так же: 
<a l:href="#faq_20_09">
тянем карту из колоды</a>, 
<a l:href="#faq_20_10">
сортировка данных</a>.</p>
</segment>

</section>
<section id="faq_20_13">
<title head-level="h2">
<p>20.13. Как разредить текст пробелами?</p>
</title>

<segment>
<p>В: Как разредить текст пробелами?</p>
<p>Например, сделать разрежение текста через каждые три символа.</p>
<p>О:</p>
<p>Для того, чтобы сделать подобное, понадобятся функции для работы с текстом и цикл.</p>
<p>Простой алгоритм для разрежения текста (отсчёт начинается от первого символа в строке)</p>
</segment>
<p><code>!$text - здесь лежит текст</code></p>
<p><code>loop while len($text)&gt;0:</code></p>
<p><code>!вырезаем первые три символа</code></p>
<p><code>$t=$mid($text,1,3)</code></p>
<p><code>!убираем первые три символа из строки</code></p>
<p><code>$text=$mid($text,4)</code></p>
<p><code>! составляем новую строку</code></p>
<p><code>$print_text=$print_text+$t+' '</code></p>
<p><code>end</code></p>
<segment>
<p>Если разрежение необходимо производить через каждые три символа, начиная с последнего, немного меняем алгоритм:</p>
</segment>
<p><code>loop while len($text)&gt;0:</code></p>
<p><code>!вырезаем последние три символа</code></p>
<p><code>$t=$mid($text,len($text)-2)</code></p>
<p><code>!убираем последние три символа из строки</code></p>
<p><code>$text=$mid($text,1,len($text)-3)</code></p>
<p><code>! составляем новую строку</code></p>
<p><code>$print_text=' '+$t+$print_text</code></p>
<p><code>end</code></p>
<segment>
<p>Легко заметить, что данные алгоритмы будут добавлять лишний символ пробела в конце или в начале строки. Но этот недостаток так же легко исправить:</p>
</segment>
<p><code>loop while len($text)&gt;0:</code></p>
<p><code>$t=$mid($text,1,3)</code></p>
<p><code>$text=$mid($text,4)</code></p>
<p><code>if len($text)&gt;0:</code></p>
<p><code>$print_text=$print_text+$t+' '</code></p>
<p><code>else</code></p>
<p><code>$print_text=$print_text+$t</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>В библиотеке "easy.math" присутствует готовая функция, разрежающая текст, с дополнительными возможностями и различными настройками. См. функцию 
<a l:href="https://github.com/AleksVersus/easy.math.3">
em.str.thin</a>.</p>
</segment>

</section>
<section id="faq_20_14">
<title head-level="h2">
<p>20.14. Как сделать записную книжку в игре?</p>
</title>

<segment>
<p>В: Как сделать записную книжку в игре?</p>
<p>То есть чтобы игрок мог делать записи, а когда нужно, мог их просматривать.</p>
<p>О:</p>
<p>Хранить записи для записной книжки можно в массиве, саму же записную книжку можно сделать в виде предмета:</p>
</segment>
<p><code>addobj "Записная книжка"</code></p>
<segment>
<p>Работу с предметом "Записная книжка" удобнее всего орагнизовать через всплывающее меню. Для всплывающего меню создаём две локации. Назовём их, например, "note.add" и "note.read". Первая будет служить для добавления записи в записную книжку, вторая — для воспроизведения записей из записной книжки.</p>
<p>Код локации "note.add" достаточно прост:</p>
</segment>
<p><code>! предлагаем пользователю добавить запись</code></p>
<p><code>$new_note=$input('Введите текст записи.')</code></p>
<p><code>! если введён какой-либо текст, добавляем его в очередную ячейку массива note[]</code></p>
<p><code>if $new_note&lt;&gt;'':</code></p>
<p><code>$note[]=$new_note</code></p>
<p><code>end</code></p>
<p><code>! для верности удаляем пременную</code></p>
<p><code>killvar 'new_note'</code></p>
<segment>
<p>Код локации "note.read":</p>
</segment>
<p><code>! очищаем окно доп описания</code></p>
<p><code>clr</code></p>
<p><code>! счётчик</code></p>
<p><code>i=0</code></p>
<p><code>loop local i=0 while i&lt;arrsize('$note') step i+=1:</code></p>
<p><code>! пока счётчик не достиг размера массива note</code></p>
<p><code>! выводим запись</code></p>
<p><code>pl $note[i]</code></p>
<p><code>end</code></p>
<segment>
<p>Непосредственно при добавлении предмета, либо где-то ранее, прописываем пункты меню для записной книжки в массив:</p>
</segment>
<p><code>$меню_записная_книжка[0]="Добавить запись:note.add"</code></p>
<p><code>$меню_записная_книжка[1]="Прочитать записи:note.read"</code></p>
<segment>
<p>На локации-обработчике выделения предмета добавляем такой код:</p>
</segment>
<p><code>! если выделен предмет "Записная книжка"</code></p>
<p><code>if $selobj='Записная книжка':</code></p>
<p><code>! вызываем меню</code></p>
<p><code>menu '$меню_записная_книжка'</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>! не забываем снять выделение в конце локации</code></p>
<p><code>unselect</code></p>
<segment>
<p>Вот и всё. Теперь у нас есть предмет "Записная книжка", щелчок по которому вызовет всплывающее меню с двумя пунктами "Добавить запись" и "Прочитать записи".</p>
</segment>

</section>
<section id="faq_20_15">
<title head-level="h2">
<p>20.15. Как сделать так, чтобы на локацию можно было зайти только один раз?</p>
</title>

<segment>
<p>В: Как сделать так, чтобы на локацию можно было зайти только один раз?</p>
<p>О:</p>
<p>Наиболее очевидный вариант: отмечать посещение локации в какой-нибудь переменной, а в действиях, которые ведут на эту локацию, проверять была ли эта локация посещена.</p>
<p>Например, у нас есть две локации "Древний храм" и "Джунгли":</p>
</segment>
<p><code># Джунгли</code></p>
<p><code>"Я стою посреди диких джунглей, а передо мной в гуще зарослей высится древний храм."</code></p>
<p><code>! действие входа в храм</code></p>
<p><code>act "Войти в древний храм":</code></p>
<p><code>if храм_посещён=1:</code></p>
<p><code>"Вход в храм завален камнями."</code></p>
<p><code>else</code></p>
<p><code>goto "Древний храм"</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<p><code>- Джунгли</code></p>
<p><code></code></p>
<p><code># Древний храм</code></p>
<p><code>"Я вхожу под своды древнего храма. Заросшая паутиной зала встречает глухой тишиной. Что-то щёлкает под ногами, и храм начинает рушиться"</code></p>
<p><code>! отмечаем в переменной, что храм посещён</code></p>
<p><code>храм_посещён=1</code></p>
<p><code>! действие выхода из храма</code></p>
<p><code>act "Сбежать из разрушающегося храма":</code></p>
<p><code>goto "Джунгли"</code></p>
<p><code>end</code></p>
<p><code>- Древний храм</code></p>

</section>
<section id="faq_20_16">
<title head-level="h2">
<p>20.16. Как заставить действия выводиться в нужном мне порядке?</p>
</title>

<segment>
<p>В: Как заставить действия выводиться в нужном мне порядке?</p>
<p>О:</p>
<p>Чтобы действия появлялись в нужном порядке, необходимо чётко понимать, как именно выводятся действия в QSP.</p>
<p>В первую очередь выводятся базовые действия локации. Это те действия, которые мы добавляем при помощи специального окна в Quest Generator. Они выводятся в том порядке, в котором прописаны в этом окне.</p>
<p>Во вторую очередь выводятся действия, прописанные в поле "выполнить при посещении" в Quest Generator с помощью оператора `act`. Точно так же они выводятся в том порядке, в каком вы их прописываете, то есть в порядке чтения кода плеером.</p>
<p>Таким образом, чтобы действия выводились в нужном вам порядке, необходимо прямо в окне базовых действий и поле "выполнить при посещении" расположить их так, как вы хотите, чтобы они выводились.</p>
<p>Например:</p>
</segment>
<p><code>act "Первое действие":</code></p>
<p><code>*pl "Действие вверху списка"</code></p>
<p><code>end</code></p>
<p><code>act "Второе действие":</code></p>
<p><code>*pl "Действие в середине списка"</code></p>
<p><code>end</code></p>
<p><code>act "Третье действие":</code></p>
<p><code>*pl "Действие внизу списка"</code></p>
<p><code>end</code></p>
<segment>
<p>Если же вам нужно, чтобы порядок действий менялся динамически, например, выбранное игроком действие добавлялось в конец списка, то действия можно поместить в виде текстовых значений в переменные, или массив.</p>
<p>Пример:</p>
</segment>
<p><code>usehtml=1</code></p>
<p><code>! записываем действия в массив</code></p>
<p><code>if arrsize('$act_array')=0:</code></p>
<p><code>! непосредственно действие</code></p>
<p><code>$act_array[0]={</code></p>
<p><code>act "Первое действие":</code></p>
<p><code>$text+="Теперь порядок действий меняется.&lt;br&gt;"</code></p>
<p><code>! в самом действии есть код замены</code></p>
<p><code>i=arrpos('$id_array',"первое")</code></p>
<p><code>$act_array[]=$act_array[i]</code></p>
<p><code>$id_array[]=$id_array[i]</code></p>
<p><code>killvar '$act_array',i</code></p>
<p><code>killvar '$id_array',i</code></p>
<p><code>! чтобы список обновился на экране</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<p><code>}</code></p>
<p><code>! а здесь лежит идентификатор действия</code></p>
<p><code>$id_array[0]="первое"</code></p>
<p><code>$act_array[1]={</code></p>
<p><code>act "Второе действие":</code></p>
<p><code>$text+="Раньше это действие было в середине списка.&lt;br&gt;"</code></p>
<p><code>i=arrpos('$id_array',"второе")</code></p>
<p><code>$act_array[]=$act_array[i]</code></p>
<p><code>$id_array[]=$id_array[i]</code></p>
<p><code>killvar '$act_array',i</code></p>
<p><code>killvar '$id_array',i</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<p><code>}</code></p>
<p><code>$id_array[1]="второе"</code></p>
<p><code>$act_array[2]={</code></p>
<p><code>act "Третье действие":</code></p>
<p><code>$text+="Теперь действия меняются местами.&lt;br&gt;"</code></p>
<p><code>i=arrpos('$id_array',"третье")</code></p>
<p><code>$act_array[]=$act_array[i]</code></p>
<p><code>$id_array[]=$id_array[i]</code></p>
<p><code>killvar '$act_array',i</code></p>
<p><code>killvar '$id_array',i</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<p><code>}</code></p>
<p><code>$id_array[2]="третье"</code></p>
<p><code>end</code></p>
<p><code>! выводим действия</code></p>
<p><code>loop local i=0 while i&lt;arrsize('$act_array') step i+=1:</code></p>
<p><code>dynamic $act_array[i]</code></p>
<p><code>end</code></p>
<p><code>*pl $text</code></p>
<segment>
<p>Работает всё очень просто. Сами действия в виде кода вписаны в массив, и воспроизводятся циклом через `dynamic`. Параллельно с каждым действием в массив `$id_array` вписывается идентификатор действия. Именно по нему мы узнаём, в какой ячейке массива `$act_array` лежит действие.</p>
<p>Например, второе действие вписано в ячейку `[1]` массива `$act_array`, идентификатор "второе" вписан в ячейку `[1]` массива `$id_array`. Когда мы щёлкаем по действию, выполняется код действия:</p>
</segment>


<segment>
<p>1. 
Добавляем очередную строку к переменной для вывода на экран</p>
</segment>
<p><code>$text+="Раньше это действие было в середине списка.&lt;br&gt;"</code></p>


<segment>
<p>2. 
Вычисляем, в какую ячейку вписан идентификатор данного действия:</p>
</segment>
<p><code>i=arrpos('$id_array',"второе")</code></p>


<segment>
<p>3. 
Поскольку идентификатор вписан в ячейку `[1]` массива `$id_array`, значит и действие вписано в ячейку `[1]` массива `$act_array`. Это значит, что теперь мы можем скопировать и действие и идентификатор в ячейки `[3]` массивов `$act_arry` и `$id_array` соответственно:</p>
</segment>
<p><code>$act_array[]=$act_array[i]</code></p>
<p><code>$id_array[]=$id_array[i]</code></p>


<segment>
<p>4. 
Остаётся удалить ячейки `[1]` из обоих массивов, чтоб действий не получилось `4`:</p>
</segment>
<p><code>killvar '$act_array',i</code></p>
<p><code>killvar '$id_array',i</code></p>


<segment>
<p>5. 
Ну и чтобы список обновился, а текст обновился на экране, перезаходим на локацию:</p>
</segment>
<p><code>goto $curloc</code></p>



</section>
<section id="faq_20_17">
<title head-level="h2">
<p>20.17. Как сделать в игре книгу? Чтобы её можно было взять и потом прочитать?</p>
</title>

<segment>
<p>В: Как сделать в игре книгу? Чтобы её можно было взять и потом прочитать?</p>
<p>О:</p>
<p>На самом деле это частный случай работы с предметами в игре.</p>
<p>Подъём любого предмета пишется с помощью действий. Например:</p>
</segment>
<p><code>if книгу_поднял=0:</code></p>
<p><code>act "Взять книгу":</code></p>
<p><code>addobj "Старая книга"</code></p>
<p><code>книгу_поднял=1</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>Теперь, чтобы игрок имел возможность читать эту книгу, нужно завести локацию-обработчик выделения предмета, если у вас её ещё нет. Название может быть любым, но для примера я назову эту локацию "если_предмет_выделен".</p>
<p>Чтобы плеер понял, какую локацию ему нужно использовать, как локацию-обработчик выделения предмета, необходимо прописать название этой локации в системную переменную $onobjsel, например на самой первой локации в игре:</p>
</segment>
<p><code>$onobjsel="если_предмет_выделен"</code></p>
<segment>
<p>На самой вновь созданной локации пишем код для книги:</p>
</segment>
<p><code>! если выбран предмет "Старая книга"</code></p>
<p><code>if $selobj="Старая книга":</code></p>
<p><code>! очищаем окно дополнительного описания</code></p>
<p><code>clr</code></p>
<p><code>! выводим текст книги в окно дополнительного описания</code></p>
<p><code>pl "Жил на юге человек, еще задолго до того времени, когда Тангбранд сын Вильбальдуса стал проповедовать Христа в Исландии. Звали этого человека Эйрик Светлоокий, сын Торгримура, и в те дни не было человека, равного ему по силе, красоте и смелости, во всем он был первый. Там же, на юге, жили две женщины, неподалеку от того места, где западные острова всплыли над морем. Одну звали Гудруда Прекрасная, другую — Сванхильда, прозванная Незнающей Отца. Они были сводные сестры, и не было равных им женщин в те дни: они были прекраснее всех. Однако между ними не было ничего общего, кроме крови и ненависти."</code></p>
<p><code>end</code></p>
<p><code>! снимаем выделение предмета</code></p>
<p><code>unselect</code></p>
<segment>
<p>Так же посмотрите раздел вопросов о создании меню, если хотите добавить больше действий с книгой для игрока.</p>
</segment>

</section>
<section id="faq_20_18">
<title head-level="h2">
<p>20.18. Как сделать склад, сундук, тайник, место, в котором можно выкладывать и хранить предметы?</p>
</title>

<segment>
<p>В: Как сделать склад, сундук, тайник, место, в котором можно выкладывать и хранить предметы?</p>
<p>О:</p>
<p>Решение данного вопроса состоит из двух частей.</p>
<p>Первая часть — это непосредственно создание тайника. Тайник можно реализовать на отдельной локации.</p>
<p>Создаём новую локацию и называем её "тайник". Затем, на локации, где мы располагаем тайник, нужно добавить действие или гиперссылку, которая ведёт на локацию тайник:</p>
</segment>
<p><code>act "Открыть сейф":</code></p>
<p><code>goto "тайник"</code></p>
<p><code>end</code></p>
<segment>
<p>Само собой на локации "тайник" необходимо создать гиперссылку или действие, ведущие на предыдущую локацию.</p>
<p>На этом первая часть решения нашего вопроса окончена. Переходим ко второй части. Непосредственно сброс предметов на локации.</p>
<p>Для того, чтобы игрок мог взаимодействовать с предметами, необходимо завести локацию-обработчик выделения предмета (более подробно об этом прочитайте в разделе "Предметы") и на этой локации прописать код взаимодействия. Тут тоже есть варианты. Вы можете организовать меню предметов, одним из пунктов которого может быть пункт "Выбросить", можете добавить в окно действий действие "Выбросить" на каждый предмет (если их не много), либо (если на локации "тайник" можно только сбрасывать предметы) воспользоваться нижеследующим решением, которое позволяет сбрасывать предметы по клику на них.</p>
<p>Для того, чтобы каждый предмет на локации "тайник" сбрасывался по клику, на локации-обработчике выделения предмета необходимо прописать следующий код:</p>
</segment>
<p><code>if $curloc="тайник":</code></p>
<p><code>! если текущая локация — "тайник"</code></p>
<p><code>! записываем текущий предмет в новую ячейку массива $secretbox</code></p>
<p><code>$secretbox[]=$selobj</code></p>
<p><code>! удаляем предмет из списка</code></p>
<p><code>delobj $selobj</code></p>
<p><code>! перезаходим на локацию тайник</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<segment>
<p>Чтобы сброшенные предметы воспроизводились на локации "тайник" в виде действий, нужно на локации "тайник" прописать такой код:</p>
</segment>
<p><code>loop local i=0 while i&lt;arrsize('$secretbox') step i+=1:</code></p>
<p><code>! пока значение счётчика не превысило номер последней ячейки массива</code></p>
<p><code>! с помощью команды dynamic генерируем действие</code></p>
<p><code>dynamic "</code></p>
<p><code>act 'Поднять &lt;&lt;$secretbox[i]&gt;&gt;:</code></p>
<p><code>addobj '&lt;&lt;$secretbox[i]&gt;&gt;'</code></p>
<p><code>killvar '$secretbox',&lt;&lt;i&gt;&gt;</code></p>
<p><code>goto $curloc</code></p>
<p><code>end'</code></p>
<p><code>"</code></p>
<p><code>end</code></p>
<segment>
<p>Это универсальный код, позволяющий сбрасывать и поднимать любые предметы, если не требуется учитывать их количество.</p>
</segment>

</section>
<section id="faq_20_19">
<title head-level="h2">
<p>20.19. Как сделать выпадение случайного действия на локации?</p>
</title>

<segment>
<p>В: Как сделать выпадение случайного действия на локации?</p>
<p>О:</p>
<p>Нужно воспользоваться "действием по условию", но включить в код и функцию `rand`. В самом простом виде это делается так:</p>
</segment>
<p><code>! выбрасываем случайное число от одного до пяти</code></p>
<p><code>i=rand(1,5)</code></p>
<p><code>! в зависимости от того, какое число выпало, выводим действие</code></p>
<p><code>if i=1:</code></p>
<p><code>act "Сплясать Джигу":</code></p>
<p><code>*pl "Ноги сами пустились в пляс, голова завертелась волчком. Джигадрыгай и в профиль и в фас. Всё пучком!"</code></p>
<p><code>end</code></p>
<p><code>elseif i=2:</code></p>
<p><code>act "Вальсировать":</code></p>
<p><code>*pl "Раз, два, три... Раз, два, три..."</code></p>
<p><code>end</code></p>
<p><code>elseif i=3:</code></p>
<p><code>act "Твист":</code></p>
<p><code>*pl "Первый окурок давим правым ботинком, второй окурок давим левым ботинком. А теперь оба окурка давим вместе."</code></p>
<p><code>end</code></p>
<p><code>elseif i=4:</code></p>
<p><code>act "Танцевать Пого":</code></p>
<p><code>"Пели песни до утра, пого танцевали..."</code></p>
<p><code>end</code></p>
<p><code>elseif i=5:</code></p>
<p><code>act "Капуэйро":</code></p>
<p><code>"Вжух-вжух!.."</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>Есть другой способ:</p>
</segment>
<p><code>! вносим действия в массив</code></p>
<p><code>$i_act[0]={</code></p>
<p><code>act "Сплясать Джигу":</code></p>
<p><code>*pl "Ноги сами пустились в пляс, голова завертелась волчком. Джигадрыгай и в профиль и в фас. Всё пучком!"</code></p>
<p><code>end</code></p>
<p><code>}</code></p>
<p><code>$i_act[1]={</code></p>
<p><code>act "Вальсировать":</code></p>
<p><code>*pl "Раз, два, три... Раз, два, три..."</code></p>
<p><code>end</code></p>
<p><code>}</code></p>
<p><code>$i_act[2]={</code></p>
<p><code>act "Твист":</code></p>
<p><code>*pl "Первый окурок давим правым ботинком, второй окурок давим левым ботинком. А теперь оба окурка давим вместе."</code></p>
<p><code>end</code></p>
<p><code>}</code></p>
<p><code>$i_act[3]={</code></p>
<p><code>act "Танцевать Пого":</code></p>
<p><code>"Пели песни до утра, пого танцевали..."</code></p>
<p><code>end</code></p>
<p><code>}</code></p>
<p><code>$i_act[4]={</code></p>
<p><code>act "Капуэйро":</code></p>
<p><code>"Вжух-вжух!.."</code></p>
<p><code>end</code></p>
<p><code>}</code></p>
<p><code>! выбрасываем случайное</code></p>
<p><code>dynamic $i_act[rand(0,4)]</code></p>

</section>
<section id="faq_20_20">
<title head-level="h2">
<p>20.20. Как сделать перемещение на случайную локацию?</p>
</title>

<segment>
<p>В: Как сделать перемещение на случайную локацию?</p>
<p>Например, чтобы портал переносил случайным образом на одну из локаций.</p>
<p>О:</p>
<p>Можно прописать выбор из случайного варианта прямо в действии:</p>
</segment>
<p><code>act "Войти в портал":</code></p>
<p><code>i=rand(1,5)</code></p>
<p><code>if i=1:</code></p>
<p><code>goto "Мир вечного полдня"</code></p>
<p><code>elseif i=2:</code></p>
<p><code>goto "Плоский мир"</code></p>
<p><code>elseif i=3:</code></p>
<p><code>goto "Земля-616"</code></p>
<p><code>elseif i=4:</code></p>
<p><code>goto "Трансметрополитен"</code></p>
<p><code>elseif i=5:</code></p>
<p><code>goto "Атлантида"</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>Можно заранее внести названия локаций в массив (создаём список):</p>
</segment>
<p><code>$portal[0]="Мир вечного полдня"</code></p>
<p><code>$portal[1]="Плоский мир"</code></p>
<p><code>$portal[2]="Земля-616"</code></p>
<p><code>$portal[3]="Трансметрополитен"</code></p>
<p><code>$portal[4]="Атлантида"</code></p>
<p><code></code></p>
<p><code>act "Войти в портал":</code></p>
<p><code>goto $portal[rand(0,4)]</code></p>
<p><code>end</code></p>
<segment>
<p>Последний вариант удобен тем, что посещённые места можно убирать из массива, и таким образом игрок не сможет посетить одно место дважды, но всё равно будет посещать их в случайном порядке:</p>
</segment>
<p><code>! если значение переменной-флага равно нулю</code></p>
<p><code>if portal_flag=0:</code></p>
<p><code>! вписываем названия локаций в массив (создаём список)</code></p>
<p><code>$portal[0]="Мир вечного полдня"</code></p>
<p><code>$portal[1]="Плоский мир"</code></p>
<p><code>$portal[2]="Земля-616"</code></p>
<p><code>$portal[3]="Трансметрополитен"</code></p>
<p><code>$portal[4]="Атлантида"</code></p>
<p><code>! выставляем переменной-флагу значение 1</code></p>
<p><code>portal_flag=1</code></p>
<p><code>end</code></p>
<p><code>! действие</code></p>
<p><code>act "Войти в портал":</code></p>
<p><code>! получаем текущий размер массива</code></p>
<p><code>local size=arrsize('$portal')</code></p>
<p><code>! если размер массива больше нуля</code></p>
<p><code>if size&gt;0:</code></p>
<p><code>! выбрасываем случайное число от нуля до номера последней ячейки массива</code></p>
<p><code>local i=rand(0,size-1)</code></p>
<p><code>! запоминаем текущее название выбранной локации</code></p>
<p><code>local $i_act=$portal[i]</code></p>
<p><code>! убираем это название из списка</code></p>
<p><code>killvar '$portal',i</code></p>
<p><code>! переходим на эту локацию</code></p>
<p><code>goto $i_act</code></p>
<p><code>else</code></p>
<p><code>! если размер массива 0</code></p>
<p><code>! портал не работает</code></p>
<p><code>*pl "Портал больше не работает."</code></p>
<p><code>end</code></p>
<p><code>end</code></p>

</section>
<section id="faq_20_21">
<title head-level="h2">
<p>20.21. Как сделать случайный предмет?</p>
</title>

<segment>
<p>В: Как сделать случайный предмет?</p>
<p>О:</p>
<p>Если вам нужно, чтобы на локации случайным образом появлялся какой-либо предмет, необходимо использовать "действие по условию" и функцию `rand`.</p>
<p>В самом простом виде можно сделать так:</p>
</segment>
<p><code>i=rand(1,5)</code></p>
<p><code>if i=1:</code></p>
<p><code>act "Взять отвёртку":</code></p>
<p><code>addobj "Отвёртка"</code></p>
<p><code>! другой код</code></p>
<p><code>end</code></p>
<p><code>elseif i=2:</code></p>
<p><code>act "Взять кость":</code></p>
<p><code>addobj "Кость"</code></p>
<p><code>! другой код</code></p>
<p><code>end</code></p>
<p><code>elseif i=3:</code></p>
<p><code>act "Взять ржавую монету":</code></p>
<p><code>addobj "Ржавая монета"</code></p>
<p><code>! другой код</code></p>
<p><code>end</code></p>
<p><code>elseif i=4:</code></p>
<p><code>act "Взять шкуру тролля":</code></p>
<p><code>addobj "Шкура Тролля"</code></p>
<p><code>! другой код</code></p>
<p><code>end</code></p>
<p><code>elseif i=5:</code></p>
<p><code>act "Взять пачку масла":</code></p>
<p><code>addobj "Пачка масла"</code></p>
<p><code>! другой код</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<segment>
<p>Так же можно внести список возможных предметов в массив, а затем выбросить случайный:</p>
</segment>
<p><code>$objects[0]='Отвёртка'</code></p>
<p><code>$objects[1]='Кость'</code></p>
<p><code>$objects[2]='Гаечный ключ'</code></p>
<p><code>$objects[3]='Человеческий череп'</code></p>
<p><code>$objects[4]='Перфоратор'</code></p>
<p><code>$objects[5]='Шкура тролля'</code></p>
<p><code>$objects[6]='Пачка масла'</code></p>
<p><code>$objects[7]='Яблоко'</code></p>
<p><code>$objects[8]='Ржавая монета'</code></p>
<p><code>$objects[9]='Упавшая звезда'</code></p>
<p><code>$object_rand = $objects[rand(0,9)]</code></p>
<p><code>dynamic "</code></p>
<p><code>act 'Взять предмет &lt;&lt;$object_rand&gt;&gt;':</code></p>
<p><code>addobj '&lt;&lt;$object_rand&gt;&gt;'</code></p>
<p><code>! ... другой код ...</code></p>
<p><code>end</code></p>
<p><code>"</code></p>

</section>
<section id="faq_20_22">
<title head-level="h2">
<p>20.22. Как узнать, какие переменные есть в игре? Может для этого есть специальная команда?</p>
</title>

<segment>
<p>В:</p>
<p>О:</p>
<p>Специальной команды для этого нет. Названия всех явно заданных переменных можно просмотреть, если воспользоваться специальным Анализатором кода QSP.</p>
<p><a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=365&amp;Itemid=57">
Страница анализатора кода на qsp.su</a></p>
<p>Для того, чтобы получить список переменных, нужно сначала сконвертировать игру в формат TXT2GAM. TXT2GAM — это обычные текстовые файлы, в которых код игры прописан в незашифрованном виде по особым правилам. Пример можно посмотреть 
<a l:href="https://wiki.qsp.org/help:txt2gam">
в справке</a>, а научиться писать игры в формате TXT2GAM можно, используя вот эти уроки: 
<a l:href="https://qsp.org/index.php?option=com_content&amp;view=article&amp;id=91&amp;Itemid=56">
страница на qsp.su</a>.</p>
<p>Чтобы сконвертировать игру в формат TXT2GAM необходимо открыть её в редакторе Quest Generator и выбрать в меню "Игра" пункты "Экспорт — Текстовый файл формата TXT2GAM...".</p>
<p>Затем нужно открыть Анализатор, в специальном поле указать путь к полученному файлу (можно воспользоваться кнопкой "..."), и нажать кнопку "Перечитать".</p>
<p>На вкладке "Анализ" есть кнопка "Переменные", нажав на которую вы увидите список всех явно заданных в игре переменных.</p>
<p>К сожалению, это не позволит вам просмотреть список переменных, которые должны генерироваться в процессе игры, например, с помощью оператора `dynamic`.</p>
</segment>

</section>
<section id="faq_20_23">
<title head-level="h2">
<p>20.23. Как убрать преформатирование из разметки HTML?</p>
</title>

<segment>
<p>В:</p>
<p>При работе с HTML-разметкой приходится выводить теги отдельными командами `*p`, чтобы разметка выводилась в одну строку, но это очень неудобно. Нет ли способа упростить работу с HTML-кодом?</p>
<p>О:</p>
<p>На самом деле у вас в руках уже есть инструмент, позволяющий как угодно упрощать работу с любыми текстовыми данными. В том числе и с HTML-кодом.</p>
<p>Удобнее всего было бы писать HTML-код в том виде, в каком мы его обычно пишем для браузера, т.е. преформатируя, а выводить на экран все HTML-теги в одну строку, чтобы HTML-рендер плеера QSP правильно этот HTML-код интерпретировал.</p>
<p>Решение тут весьма и весьма простое: нужно написать функцию, которая будет обрабатывать наш текст с HTML-разметкой и убирать оттуда символы преформатирования. Наша функция будет называться `delPref`, и мы оформим её на отдельной локации:</p>
</segment>
<p><code>!@ delPref</code></p>
<p><code>local $html=$args[0]    &amp; ! помещаем переданный в функцию текст в локальную переменную</code></p>
<p><code>local $prevtag, $aftertag    &amp; ! задаём дополнительные локальные переменные для удобства</code></p>
<p><code>loop local run=1 while run:</code></p>
<p><code>! цикл будет выполняться, пока переменной run присвоена единица</code></p>
<p><code>$prevtag=$strfind($html,'[\s\r\n]+&lt;')    &amp; ! получаем символы преформатирования до начала тега и левую угловую скобку</code></p>
<p><code>$aftertag=$strfind($html,'&gt;[\s\r\n]+')    &amp; ! получаем правую угловую скобку и символы преформатирования после тега</code></p>
<p><code>if $prevtag&lt;&gt;'':</code></p>
<p><code>! если символы до тега получены</code></p>
<p><code>$html=$replace($html,$prevtag,'&lt;')</code></p>
<p><code>elseif $aftertag&lt;&gt;'':</code></p>
<p><code>! если получены символы после тега</code></p>
<p><code>$html=$replace($html,$aftertag,'&gt;')</code></p>
<p><code>else</code></p>
<p><code>! если символы преформатирования около тега не найдены</code></p>
<p><code>run=0</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<p><code>$result=$trim($html)</code></p>
<segment>
<p>Теперь, когда нам нужно вывести на экран HTML, мы просто прогоняем его через функцию:</p>
</segment>
<p><code>$html={&lt;qhtml&gt;</code></p>
<p><code>&lt;table border=1&gt;</code></p>
<p><code>&lt;tr&gt;</code></p>
<p><code>&lt;td width=25% bgcolor=#ffffee&gt;</code></p>
<p><code>Некий текст</code></p>
<p><code>&lt;/td&gt;</code></p>
<p><code>&lt;td&gt;Ещё текст&lt;/td&gt;</code></p>
<p><code>&lt;/tr&gt;</code></p>
<p><code>&lt;tr&gt;</code></p>
<p><code>&lt;td width=25% bgcolor=#ffffee&gt;</code></p>
<p><code>Вторая строка</code></p>
<p><code>&lt;/td&gt;</code></p>
<p><code>&lt;td&gt;12345677 &lt; &gt;&lt;/td&gt;</code></p>
<p><code>&lt;/tr&gt;</code></p>
<p><code>&lt;/table&gt;</code></p>
<p><code>&lt;/qhtml&gt;}</code></p>
<p><code></code></p>
<p><code>@delPref($html)</code></p>

</section>
<section id="faq_20_24">
<title head-level="h2">
<p>20.24. Как проще заполнять массив?</p>
</title>

<segment>
<p>В:</p>
<p>Нет ли способа упростить внесение первоначальных данных в массив? Чтобы не писать</p>
</segment>
<p><code>mass[0]=123</code></p>
<p><code>mass[1]=234</code></p>
<p><code>mass[2]=345</code></p>
<p><code>! и т.д.</code></p>
<segment>
<p>а вместо этого написать что-то типа</p>
</segment>
<p><code>mass = [123, 234, 345]</code></p>
<segment>
<p>О:</p>
<p>QSP предоставляет возможность самостоятельно писать любые функции, которые вам необходимы, в том числе и такие, которые будут упрощать ввод данных.</p>
<p>В данном случае мы можем написать функцию, которая будет принимать в качестве аргумента имя массива и кортеж значений, которые мы в этот массив хотим поместить, и с помощью цикла внутри функции извлечь из кортежа все значения в подряд идущие ячейки массива.</p>
<p>Вот как может выглядеть такая функция:</p>
</segment>
<p><code>!# full_array</code></p>
<p><code>$args[0] = $args[0] &amp; ! название массива</code></p>
<p><code>$args[1] = $args[1]+"" &amp; ! переданный кортеж (см. примечание)</code></p>
<p><code>if instr($args[0],'$')=1: $args[0]=$mid($args[0],2) &amp; ! убираем из имени массива символ $</code></p>
<p><code>local instring, $cut &amp; ! объявляем локальные переменные</code></p>
<p><code>loop while len($args[1])&gt;0:</code></p>
<p><code>! циклом перебираем строку значений (кортеж)</code></p>
<p><code>instring=instr($args[1],"")</code></p>
<p><code>$cut=$mid($args[1],1,instring-1)</code></p>
<p><code>$args[1]=$mid($args[1],instring+1)</code></p>
<p><code>! dynamic "$&lt;&lt;$args[0]&gt;&gt;[]=$args[0]",$cut &amp; ! так мы будем помещать в массив строковые значения</code></p>
<p><code>dynamic "&lt;&lt;$args[0]&gt;&gt;[]=args[0]",val($cut) &amp; ! а так числовые</code></p>
<p><code>end</code></p>
<segment>
<p>Теперь, когда нам нужно быстро записать в массив много значений, не расписывая на множество строчек присвоение каждой ячейке, мы просто вызываем функцию "full_array":</p>
</segment>
<p><code>! вносим в массив значения</code></p>
<p><code>@full_array('mass',(123,234,345))</code></p>
<p><code></code></p>
<p><code>! для проверки внесённых значений используем цикл</code></p>
<p><code>loop local i=0 while i&lt;arrsize('mass') step i+=1:</code></p>
<p><code>*pl mass[i]</code></p>
<p><code>end</code></p>
<segment>
<p>Примечание: чтобы понимать, каким образом мы вытаскиваем данные из кортежа, нужно понимать, в каком виде в QSP представлен кортеж. Кортеж — это строка значений. Фактически это обычная строка, в которой все значения разделяются символом "``". Этот символ имеет код 0x1f. Именно эту особенность хранения данных мы и используем, чтобы извлечь значения из кортежа. Мы определяем, в какой позиции находится разделяющий символ, затем вырезаем строку до этого символа и помещаем в новую ячейку массива. Дальше работаем уже с оставшейся строкой.</p>
<p>Данная функция была реализована в 
<a l:href="https://github.com/AleksVersus/easy.math.3/blob/main/%5Bsource%5D/07_операции%20с%20массивами/99_em.arr.fill.qsps">
easy.math версии 3.0</a>.</p>
</segment>

</section>
</section>
<section id="faq_21">
<title anchor="faq_21" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\21_quest generator\00.txt-light">
<p>21. Вопросы о Quest Generator (v.4.0.0 beta)</p>
</title>
<section id="faq_21_01">
<title head-level="h2">
<p>21.1. Мне часто приходится вставлять одинаковые или почти одинаковые кусочки кода. Как автоматизировать этот процесс?</p>
</title>

<segment>
<p>В: Мне часто приходится вставлять одинаковые или почти одинаковые кусочки кода. Как автоматизировать этот процесс?</p>
<p>О:</p>
<p>Можно забить кусочки кода на комбинации клавиш. Для этого:</p>
</segment>


<p>1. 
В меню "Утилиты" выберите пункт "Настройки..."</p>
<p>2. 
Откройте вкладку "Комбинации клавиш" и нажмите кнопку "Добавить".</p>
<p>3. 
Введите комбинацию клавиш в поле "Комбинация клавиш"</p>
<p>4. 
Введите кусочек кода в поле "Текст"</p>
<p>5. 
Нажмите "Ок", и в предыдущем диалоговом окне тоже.</p>


<segment>
<p>Теперь при нажатии указанного сочетания клавиш в код будет вставляться привязанный фрагмент кода.</p>
</segment>

</section>
<section id="faq_21_02">
<title head-level="h2">
<p>21.2. Делаю преформатирование пробелами, чтобы появлялась вертикальная полоска, так нагляднее. Нет ли какой-то комбинации клавиш, чтобы не тыкать пробел по пять раз?</p>
</title>

<segment>
<p>В: Делаю преформатирование пробелами, чтобы появлялась вертикальная полоска, так нагляднее. Нет ли какой-то комбинации клавиш, чтобы не тыкать пробел по пять раз?</p>
<p>О:</p>
<p>Можно нажимать, например, один раз клавишу "Tab", один раз пробел.</p>
<p>А ещё можно забить кусочки кода на комбинации клавиш. Для этого в меню "Утилиты" выберите пункт "Настройки...", откройте вкладку "Комбинации клавиш" и нажмите кнопку "Добавить". Остаётся только ввести комбинацию клавиш и кусочек кода, который будет вставляться при нажатии на эту комбинацию, например указать сочетание "Alt+5", а как кусочек кода прописать пять пробелов. Тогда при нажатии "Alt+5" у вас будет вставляться пять пробелов.</p>
</segment>

</section>
<section id="faq_21_03">
<title head-level="h2">
<p>21.3. Как свернуть кусочек кода, написанный под комментарием?</p>
</title>

<segment>
<p>В: Как свернуть кусочек кода, написанный под комментарием? В идеале, чтоб остался один только комментарий.</p>
<p>Пример:</p>
</segment>
<p><code>! комментарий, до которого нужно свернуть код</code></p>
<p><code>"Строчка кода"</code></p>
<p><code>"Ещё строчка кода"</code></p>
<p><code>a=b</code></p>
<segment>
<p>О:</p>
<p>К сожалению Quest Generator не учитывает комментарии, когда высчитывает сворачиваемые участки кода, поэтому нельзя свернуть код до комментария. Можно использовать подобный костыль:</p>
</segment>
<p><code>$args['свернём код до этой переменной']=$args['свернём код до этой переменной']</code></p>
<p><code>! комментарий</code></p>
<p><code>"Строчка кода"</code></p>
<p><code>"Ещё строчка кода"</code></p>
<p><code>a=b</code></p>
<p><code>$args['свернём код до этой переменной']=$args['свернём код до этой переменной']</code></p>
<p><code></code></p>
<p><code>com=com &amp; ! комментарий, до которого сворачиваем блок кода</code></p>
<p><code>! комментарий</code></p>
<p><code>"Строчка кода"</code></p>
<p><code>"Ещё строчка кода"</code></p>
<p><code>a=b</code></p>
<p><code>com=com &amp; ! комментарий, до которого сворачиваем блок кода</code></p>
<p><code></code></p>
<p><code>local com &amp; ! комментарий, до которого сворачиваем блок кода</code></p>
<p><code>! комментарий</code></p>
<p><code>"Строчка кода"</code></p>
<p><code>"Ещё строчка кода"</code></p>
<p><code>a=b</code></p>
<p><code>local com &amp; ! комментарий, до которого сворачиваем блок кода</code></p>

</section>
</section>
<section id="faq_23">
<title anchor="faq_23" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\23_ограничения\00.txt-light">
<p>23. Ограничения</p>
</title>
<section id="faq_23_01">
<title head-level="h2">
<p>23.1. Видел в справке ограничение на 100 подключаемых файлов. Это что, я не смогу использовать более ста файлов картинок и музыки?</p>
</title>

<segment>
<p>В: Видел в справке ограничение на 100 подключаемых файлов. Это что, я не смогу использовать более ста файлов картинок и музыки?</p>
<p>О:</p>
<p>Нет, в данном случае имеется ввиду совсем не это. Вы можете использовать в игре сколь угодно большое количество звуков и картинок, всё ограничено лишь мощностями компьютера и объёмом выделяемых для плеера ресурсов.</p>
<p>Под сотней подключаемых файлов имеются ввиду модули в виде файлов ".qsp", которые вы подключаете с помощью оператора `inclib`.</p>
</segment>
<p><code>inclib "easy.math.qsp"</code></p>
<segment>
<p>Таких файлов можно одновременно подключать не более ста.</p>
</segment>

</section>
<section id="faq_23_02">
<title head-level="h2">
<p>23.2. Хочу разместить на локации около 100 действий. Это вообще возможно?</p>
</title>

<segment>
<p>В: Хочу разместить на локации около 100 действий. Это вообще возможно?</p>
<p>О:</p>
<p>Нет. QSP поддерживает одновременный вывод только 50 действий. Однако, если у тебя на локации получается так много действий, то скорее всего ты неправильно подходишь к дизайну своей игры. Игроку будет тяжело ориентироваться одновременно более чем в десяти-пятнадцати действиях на локации. Лучше распределить такой объём действий по блокам.</p>
<p>Например, если действия служат для обозначения предметов, лежащих на складе, можно выводить предметы наборами по типам, по весу, или другим характеристикам.</p>
</segment>

</section>
<section id="faq_23_03">
<title head-level="h2">
<p>23.3. Генерирую переменные с помощью оператора dynamic, и вдруг выходит ошибка 123. Что это, и как с этим бороться?</p>
</title>

<segment>
<p>В: Генерирую переменные с помощью оператора dynamic, и вдруг выходит ошибка 123. Что это, и как с этим бороться?</p>
<p>О:</p>
<p>Бороться с этим нельзя, можно только стараться не использовать такое большое количество переменных. QSP не позволяет работать более, чем с пятью десятками переменных с одинаковым хэшем имени. При этом массив считается за одну переменную. Всего можно использовать 12800 различных переменных в игре. Поэтому, когда вы превышаете это число, плеер ругается.</p>
</segment>

</section>
</section>
<section id="faq_24">
<title anchor="faq_24" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\01_Основной раздел\24_вопросы по работе с плеерами\00.txt-light">
<p>24. Вопросы по работе с плеерами</p>
</title>
</section>
</section>
<section id="faq_80">
<title anchor="faq_80" head-level="h1" path="D:\my\projects\howdo_faq\[source]\ответы\80_зарезервированные слова\00.txt-light">
<p>Зарезервированные слова, системные переменные и спецсимволы</p>
</title>
<section id="faq_80_01">
<title head-level="h2">
<p>Операции</p>
</title>

<section>

<p>[:faq_80_01_00]Список операций для плеера версии 5.7.0 в порядке возрастания приоритета:</p>
<p>`&amp;`</p>
<p>`OR`</p>
<p>`AND`</p>
<p>`OBJ`, `LOC`, `NO`</p>
<p>`=`, `&lt;`, `&gt;`, `!`, `&lt;&gt;`, `&lt;=`, `&gt;=`, `=&lt;`, `=&gt;`</p>
<p>`+`, `-`</p>
<p>`MOD`</p>
<p>`*`, `/`</p>
<p>`+`, `-` (унарные)</p>
<p>Операции записанные на одной строке имеют одинаковый приоритет и выполняются по порядку слева направо, если присутствуют на одном уровне в выражении.</p>
<p>Операции в скобках имеют приоритет перед другими операциями.</p>
<p>Вычисение значений функций имеет приоритет перед всеми операциями.</p>
<p>Верным считается числовое выражение, значение которого отлично от 0. При значении 0 выражение считается ложным. Для значения "верно" настоятельно рекомендуется использовать -1, т.к. только в этом случае будут адекватно работать побитовые операторы в роли логических.</p>
<p>В более новых версиях плеера приоритет некоторых операций изменён.</p>

</section>

<section id="faq_80_01_multi"><title>
<p>* (умножение)</p>
</title>

<p>`*` — арифметическая операция "УМНОЖЕНИЕ". Перемножает два числа. Общая запись:</p>
<p><code>[#выражение 1]*[#выражение 2]</code></p>
<p>, где `[#выражение 1]` и `[#выражение 2]` — два любых числовых значения, или выражения. Результатом работы операции является произведение двух чисел.</p>
<p>Примеры:</p>
<p><code>2*2 &amp; ! вернёт 4</code></p>
<p><code>4*2 &amp; ! вернёт 8</code></p>
<p><code>17*5 &amp; ! вернёт 85</code></p>
<p><code>37*100 &amp; ! вернёт 3700</code></p>
</section>

<section id="faq_80_01_multiaprop"><title>
<p>*= (умножение-присвоение)</p>
</title>

<p>`*=` — операция "УМНОЖЕНИЕ-ПРИСВОЕНИЕ". Сочетает в себе операции присвоения и умножения. Умножает значение указанной переменной на определённое число и возвращает результат той же переменной. Общая запись:</p>
<p><code>ИМЯ_МАССИВА*=[#выражение 1]</code></p>
<p>, где `ИМЯ_МАССИВА` — это название переменной (без кавычек), или название массива с указанием ячейки, а `[#выражение 1]` — любое числовое значение или выражение.</p>
<p>Аналогично конструкции:</p>
<p><code>ИМЯ_МАССИВА=ИМЯ_МАССИВА*[#выражение 1]</code></p>
<p>Пример:</p>
<p><code>! мы заменяем две операции: присвоения и умножение</code></p>
<p><code>warrior=warrior*2</code></p>
<p><code>! на умножение-присвоение (действие аналогично)</code></p>
<p><code>warrior*=2</code></p>
</section>

<section id="faq_80_01_add"><title>
<p>+ (сложение)</p>
</title>

<p>`+` — арифметическая операция "СЛОЖЕНИЕ". Суммирует два числа. Общая запись:</p>
<p><code>[выражение 1]+[выражение 2]</code></p>
<p>, где `[выражение 1]` и `[выражение 2]` — два любых значения, или выражения. Результатом работы операции является сумма двух значений.</p>
<p>Примеры:</p>
<p><code>2+2 &amp; ! вернёт 4</code></p>
<p><code>4+2 &amp; ! вернёт 6</code></p>
<p><code>17+5 &amp; ! вернёт 22</code></p>
<p><code>37+100 &amp; ! вернёт 137</code></p>
<p>Можно "суммировать" и текстовые значения. В этом случае операция работает как 
<a l:href="#faq_80_01_concatenation">
конкатенация</a>:</p>
<p><code>! на экран будет выведена строка "2627"</code></p>
<p><code>"26"+"27"</code></p>
</section>

<section id="faq_80_01_incr"><title>
<p>+= (сложение-присвоение)</p>
</title>

<p>`+= (инкремент)` — операция "ИНКРЕМЕНТ", сочетающая в себе операции присвоения и сложения. Прибавляет к текущему значению переменной указанное значение. Общая запись:</p>
<p><code>ИМЯ_МАССИВА+=[выражение 1]</code></p>
<p>, где `ИМЯ_МАССИВА` — это название переменной (без кавычек), или название массива с указанием ячейки, а `[выражение 1]` — любое значение или выражение.</p>
<p>Аналогично конструкции:</p>
<p><code>ИМЯ_МАССИВА=ИМЯ_МАССИВА+[выражение 1]</code></p>
<p>Пример:</p>
<p><code>! мы заменяем две операции: присвоения и сложения</code></p>
<p><code>warrior=warrior+15</code></p>
<p><code>! на инкремент (действие аналогично)</code></p>
<p><code>warrior+=15</code></p>
<p>Возможно так же проводить инкремент со строковыми значениями, работает как 
<a l:href="#faq_80_01_concatenation">
конкатенация</a>:</p>
<p><code>$text+=" (может быть тут что-то написано)"</code></p>
<p>P.S.: Инкремент — во многих языках программирования это операция, которая выполняет увеличение переменной. Чаще всего под инкрементом подразумевается увеличение переменной на 1 единицу.</p>

</section>

<section id="faq_80_01_subt"><title>
<p>- (вычитание)</p>
</title>

<p>`-` — арифметическая операция "ВЫЧИТАНИЕ". Вычитает одно число из другого. Общая запись:</p>
<p><code>[выражение 1]-[выражение 2]</code></p>
<p>, где `[выражение 1]` и `[выражение 2]` — два любых значения, или выражения. Результатом работы операции является разность двух значений.</p>
<p>Примеры:</p>
<p><code>2-2 &amp; ! вернёт 0</code></p>
<p><code>4-2 &amp; ! вернёт 2</code></p>
<p><code>17-5 &amp; ! вернёт 12</code></p>
<p><code>37-100 &amp; ! вернёт -63</code></p>
</section>

<section id="faq_80_01_decr"><title>
<p>-= (вычитание-присвоение)</p>
</title>

<p>`-= (декремент)` — операция "ДЕКРЕМЕНТ", сочетающая в себе операции присвоения и вычитания. Вычитает из текущего значения переменной указанное значение. Общая запись:</p>
<p><code>ИМЯ_МАССИВА-=[#выражение 1]</code></p>
<p>, где `ИМЯ_МАССИВА` — это название переменной (без кавычек), или название массива с указанием ячейки, а `[#выражение 1]` — любое числовое значение или выражение.</p>
<p>Аналогично конструкции:</p>
<p><code>ИМЯ_МАССИВА=ИМЯ_МАССИВА-[#выражение 1]</code></p>
<p>Пример:</p>
<p><code>! мы заменяем две операции: присвоения и вычитания</code></p>
<p><code>warrior=warrior-15</code></p>
<p><code>! на декремент (действие аналогично)</code></p>
<p><code>warrior-=15</code></p>
<p>P.S.: Декремент — во многих языках программирования это операция, которая выполняет уменьшение переменной. Чаще всего под декрементом подразумевается уменьшение переменной на 1 единицу.</p>

</section>

<section id="faq_80_01_unar"><title>
<p>- и + (унарные)</p>
</title>

<p>`унарные + и -` — унарные операции. Общая запись:</p>
<p><code>+[#выражение]</code></p>
<p><code>-[#выражение]</code></p>
<p>, где `[#выражение]` — любое числовое значение или выражение. Результатом работы этих операций является то же самое значение, только в случае с унарным минусом — с противоположным знаком.</p>
<p>Примеры:</p>
<p><code>-2 &amp; ! вернёт -2</code></p>
<p><code>-(3+6) &amp; ! вернёт -9</code></p>
<p><code>+2 &amp; ! вернёт 2</code></p>
<p><code>+(3+6) &amp; ! вернёт 9</code></p>
<p><code>-(-27) &amp; ! вернёт 27</code></p>
</section>

<section id="faq_80_01_div"><title>
<p>/ (деление)</p>
</title>

<p>`/` — арифметическая операция "ДЕЛЕНИЕ". Общая запись:</p>
<p><code>[#выражение 1]/[#выражение 2]</code></p>
<p>, где `[#выражение 1]` и `[#выражение 2]` — два любых числовых значения, или выражения. Значение `[#выражение 2]` не должно быть равным нулю. Результатом работы операции является частное от деления двух чисел.</p>
<p>Поскольку QSP поддерживает только целочисленные значения, деление производится так же нацело, без округления, с отсечением дробной части.</p>
<p>Примеры:</p>
<p><code>2/2 &amp; ! вернёт 1</code></p>
<p><code>4/2 &amp; ! вернёт 2</code></p>
<p><code>17*5 &amp; ! вернёт 3</code></p>
<p><code>37*100 &amp; ! вернёт 0</code></p>
</section>

<section id="faq_80_01_divaprop"><title>
<p>/= (деление-присвоение)</p>
</title>

<p>`/=` — операция "ДЕЛЕНИЕ-ПРИСВОЕНИЕ". Сочетает в себе операции присвоения и деления. Делит значение указанной переменной на определённое число и возвращает результат той же переменной. Общая запись:</p>
<p><code>ИМЯ_МАССИВА/=[#выражение 1]</code></p>
<p>, где `ИМЯ_МАССИВА` — это название переменной (без кавычек), или название массива с указанием ячейки, а `[#выражение 1]` — любое числовое значение или выражение.</p>
<p>Аналогично конструкции:</p>
<p><code>ИМЯ_МАССИВА=ИМЯ_МАССИВА/[#выражение 1]</code></p>
<p>Пример:</p>
<p><code>! мы заменяем две операции: присвоения и деления</code></p>
<p><code>warrior=warrior/2</code></p>
<p><code>! на деление-присвоение (действие аналогично)</code></p>
<p><code>warrior/=2</code></p>
</section>

<section id="faq_80_01_smal"><title>
<p>&lt; (меньше)</p>
</title>

<p>`&lt;` — операция сравнения "МЕНЬШЕ".  Общая запись:</p>
<p><code>[выражение_1]&lt;[выражение_2]</code></p>
<p>Если значение выражения `[выражение_1]` меньше значения выражения `[выражение_2]` операция вернёт -1, в противном случае вернёт 0. Иными словами: верно, если первое меньше второго.</p>
<p>Примеры:</p>
<p><code>! 2 меньше 4 — вернёт -1</code></p>
<p><code>2&lt;4</code></p>
<p><code>! 5 не меньше 5 — вернёт 0</code></p>
<p><code>5&lt;5</code></p>
<p><code>! 7 не меньше 3 — вернёт 0</code></p>
<p><code>7&lt;3</code></p>
<p>Сравнивать можно и текстовые значения, при этом символы сравниваются поочерёдно, и большим считается символ, стоящий ближе к концу алфавита.</p>
<p><code>"a"&lt;"z"         &amp; ! верно</code></p>
<p><code>"z"&lt;"zz"     &amp; ! верно</code></p>
<p><code>"aaaaaa"&lt;"z" &amp; ! верно</code></p>
</section>

<section id="faq_80_01_smaleq"><title>
<p>&lt;= (меньше либо равно)</p>
</title>

<p>`&lt;=` — операция сравнения "МЕНЬШЕ ЛИБО РАВНО".  Общая запись:</p>
<p><code>[выражение_1]&lt;=[выражение_2]</code></p>
<p>Если значение выражения `[выражение_1]` меньше либо равно значению выражения `[выражение_2]` операция вернёт -1, в противном случае вернёт 0. Иными словами: верно, если первое меньше второго, либо равно ему.</p>
<p>Примеры:</p>
<p><code>! 2 меньше 4 — вернёт -1</code></p>
<p><code>2&lt;=4</code></p>
<p><code>! 5 равно 5 — вернёт -1</code></p>
<p><code>5&lt;=5</code></p>
<p><code>! 7 не меньше трёх и не равно ему</code></p>
<p><code>7&lt;=3 &amp; ! вернёт 0</code></p>
<p>Аналогично "=&lt;" и конструкциям:</p>
<p><code>([выражение_1]&lt;[выражение_2]) or ([выражение_1]=[выражение_2])</code></p>
<p><code>no [выражение_1]&gt;[выражение_2]</code></p>
<p>Сравнивать можно и текстовые значения, при этом символы сравниваются поочерёдно, и большим считается символ, стоящий ближе к концу алфавита.</p>
<p><code>"a"&lt;="z"    &amp; ! верно</code></p>
<p><code>"z"&lt;="zz"    &amp; ! верно</code></p>
<p><code>"aaaaaa"&lt;="z" &amp; ! верно</code></p>
<p><code>"z"&lt;="z" &amp; ! верно</code></p>
</section>

<section id="faq_80_01_smalmore"><title>
<p>&lt;&gt; (не равно)</p>
</title>

<p>`&lt;&gt;` — операция сравнения "НЕ РАВНО". Общая запись:</p>
<p><code>[выражение_1]&lt;&gt;[выражение_2]</code></p>
<p>Если значение выражения `[выражение_1]` не равно значению выражения `[выражение_2]` операция вернёт -1, в противном случае вернёт 0. Иными словами: верно, если выражения не равны.</p>
<p>Аналогично "!", или конструкции:</p>
<p><code>no [выражение_1]=[выражение_2]</code></p>
<p>Примеры:</p>
<p><code>! 2 не равно 4 — вернёт -1</code></p>
<p><code>2&lt;&gt;4</code></p>
<p><code>! 5 равно 5 — вернёт 0</code></p>
<p><code>5&lt;&gt;5</code></p>
<p>Можно сравнивать и строковые значения:</p>
<p><code>"abc"&lt;&gt;"def" &amp; ! вернёт -1</code></p>
<p><code>"abc"&lt;&gt;"abc" &amp; ! вернёт 0</code></p>
</section>

<section id="faq_80_01_eq"><title>
<p>= (равно)</p>
</title>

<p>`=` —  операция сравнения "РАВНО". Общая запись:</p>
<p><code>[выражение_1]=[выражение_2]</code></p>
<p>Если значение выражения `[выражение_1]` равно значению выражения `[выражение_2]` операция вернёт -1, в противном случае вернёт 0. Иными словами: верно, если выражения равны.</p>
<p>Аналогично конструкции:</p>
<p><code>no [выражение_1]&lt;&gt;[выражение_2]</code></p>
<p>Примеры:</p>
<p><code>! 2 не равно 4 — вернёт 0</code></p>
<p><code>(2=4)</code></p>
<p><code>! 5 равно 5 — вернёт -1</code></p>
<p><code>(5=5)</code></p>
<p>Можно сравнивать и строковые значения:</p>
<p><code>("abc"="def") &amp; ! вернёт 0</code></p>
<p><code>("abc"="abc") &amp; ! вернёт -1</code></p>
<p>Не путать с операцией присвоения.</p>

</section>

<section id="faq_80_01_aprop"><title>
<p>= (присвоение)</p>
</title>

<p>`=` — операция присвоения. Общая запись:</p>
<p><code>ИМЯ_МАССИВА=[значение]</code></p>
<p>, где `ИМЯ_МАССИВА` — название переменной (не в кавычках), или название массива с указанием ячейки (не в кавычках), `[значение]` — любое значение или выражение.</p>
<p>Примеры:</p>
<p><code>! переменной BOX присваиваем значение 13</code></p>
<p><code>BOX=13</code></p>
<p><code>! переменной $text присваиваем значение "Строка текста"</code></p>
<p><code>$text="Строка текста"</code></p>
<p><code>! нулевой ячейке массива day присваивается значение 365</code></p>
<p><code>day[0]=365</code></p>
<p>Имена строковых переменных/массивов должны начинаться с символа `$`.</p>
<p>Внимание! Операцию присвоения не следует путать с операцией сравнения "РАВНО", хотя они очень похожи:</p>
<p><code>! операция присвоения</code></p>
<p><code>alukard=1000</code></p>
<p><code>! операция сравнения</code></p>
<p><code>(alukard=1000)</code></p>
<p>В этом случае плеер понимает, что внутри скобок находится операция сравнения, потому что скобки используются только для записи выражений. Запись:</p>
<p><code>"abc"="abc"</code></p>
<p>синтаксически ошибочна. Плеер выдаст ошибку: недопустимое название переменной/массива. Так как в этом случае он не понимает, что это операция сравнения.</p>
<p>Если перед операцией сравнения стоит оператор, скобки можно не писать:</p>
<p><code>if alukard=150: *pl "Не хватает сил"</code></p>
</section>

<section id="faq_80_01_eqsmal"><title>
<p>=&lt; (равно либо меньше)</p>
</title>

<p>`=&lt;` — операция сравнения "РАВНО ЛИБО МЕНЬШЕ".  Общая запись:</p>
<p><code>[выражение_1]=&lt;[выражение_2]</code></p>
<p>Если значение выражения `[выражение_1]` меньше либо равно значению выражения `[выражение_2]` операция вернёт -1, в противном случае вернёт 0. Иными словами: верно, если первое меньше второго, либо равно ему.</p>
<p>Примеры:</p>
<p><code>! 2 меньше 4 — вернёт -1</code></p>
<p><code>2=&lt;4</code></p>
<p><code>! 5 равно 5 — вернёт -1</code></p>
<p><code>5=&lt;5</code></p>
<p><code>! 7 не меньше трёх и не равно ему</code></p>
<p><code>7=&lt;3 &amp; ! вернёт 0</code></p>
<p>Аналогично "&lt;=" и конструкциям:</p>
<p><code>([выражение_1]&lt;[выражение_2]) or ([выражение_1]=[выражение_2])</code></p>
<p><code>no [выражение_1]&gt;[выражение_2]</code></p>
<p>Сравнивать можно и текстовые значения, при этом символы сравниваются поочерёдно, и большим считается символ, стоящий ближе к концу алфавита.</p>
<p><code>"a"=&lt;"z"    &amp; ! верно</code></p>
<p><code>"z"=&lt;"zz"    &amp; ! верно</code></p>
<p><code>"aaaaaa"=&lt;"z" &amp; ! верно</code></p>
<p><code>"z"=&lt;"z" &amp; ! верно</code></p>
<p>Данная запись, хотя и допустима в QSP, к использованию не рекомендуется. Используйте "&lt;= (меньше либо равно)" вместо этого.</p>

</section>

<section id="faq_80_01_eqmore"><title>
<p>=&gt; (равно или больше)</p>
</title>

<p>`=&gt;` — операция сравнения "РАВНО ИЛИ БОЛЬШЕ".  Общая запись:</p>
<p><code>[выражение_1]=&gt;[выражение_2]</code></p>
<p>Если значение выражения `[выражение_1]` больше либо равно значению выражения `[выражение_2]` операция вернёт -1, в противном случае вернёт 0. Иными словами: верно, если первое больше второго, либо равно ему.</p>
<p>Примеры:</p>
<p><code>! 2 не меньше и не равно 4 — вернёт 0</code></p>
<p><code>2=&gt;4</code></p>
<p><code>! 5 равно 5 — вернёт -1</code></p>
<p><code>5=&gt;5</code></p>
<p><code>! 7 больше 3</code></p>
<p><code>7=&gt;3 &amp; ! вернёт -1</code></p>
<p>Аналогично "&gt;=" и конструкциям:</p>
<p><code>([выражение_1]&gt;[выражение_2]) or ([выражение_1]=[выражение_2])</code></p>
<p><code>no [выражение_1]&lt;[выражение_2]</code></p>
<p>Сравнивать можно и текстовые значения, при этом символы сравниваются поочерёдно, и большим считается символ, стоящий ближе к концу алфавита.</p>
<p><code>"z"=&gt;"a"    &amp; ! верно</code></p>
<p><code>"zz"=&gt;"z"    &amp; ! верно</code></p>
<p><code>"z"=&gt;"aaaaaa" &amp; ! верно</code></p>
<p><code>"z"=&gt;"z" &amp; ! верно</code></p>
<p>Данная запись, хотя и допустима в QSP, к использованию не рекомендуется. Используйте "&gt;= (больше либо равно)" вместо этого.</p>

</section>

<section id="faq_80_01_more"><title>
<p>&gt; (больше)</p>
</title>

<p>`&gt;` — операция сравнения "БОЛЬШЕ".  Общая запись:</p>
<p><code>[выражение_1]&gt;[выражение_2]</code></p>
<p>Если значение выражения `[выражение_1]` больше значения выражения `[выражение_2]` операция вернёт -1, в противном случае вернёт 0. Иными словами: верно, если первое больше второго.</p>
<p>Примеры:</p>
<p><code>! 2 не больше 4 — вернёт 0</code></p>
<p><code>2&gt;4</code></p>
<p><code>! 5 не больше 5 — вернёт 0</code></p>
<p><code>5&gt;5</code></p>
<p><code>! 7 больше 3 — вернёт -1</code></p>
<p><code>7&gt;3</code></p>
<p>Сравнивать можно и текстовые значения, при этом символы сравниваются поочерёдно, и большим считается символ, стоящий ближе к концу алфавита.</p>
<p><code>"z"&gt;"a"         &amp; ! верно</code></p>
<p><code>"zz"&gt;"z"     &amp; ! верно</code></p>
<p><code>"z"&gt;"aaaaaa" &amp; ! верно</code></p>
</section>

<section id="faq_80_01_moreeq"><title>
<p>&gt; (больше либо равно)</p>
</title>

<p>`&gt;=` — операция сравнения "БОЛЬШЕ ЛИБО РАВНО".  Общая запись:</p>
<p><code>[выражение_1]&gt;=[выражение_2]</code></p>
<p>Если значение выражения `[выражение_1]` больше либо равно значению выражения `[выражение_2]` операция вернёт -1, в противном случае вернёт 0. Иными словами: верно, если первое больше второго, либо равно ему.</p>
<p>Примеры:</p>
<p><code>! 2 не меньше и не равно 4 — вернёт 0</code></p>
<p><code>2&gt;=4</code></p>
<p><code>! 5 равно 5 — вернёт -1</code></p>
<p><code>5&gt;=5</code></p>
<p><code>! 7 больше 3</code></p>
<p><code>7&gt;=3 &amp; ! вернёт -1</code></p>
<p>Аналогично "=&gt;" и конструкциям:</p>
<p><code>([выражение_1]&gt;[выражение_2]) or ([выражение_1]=[выражение_2])</code></p>
<p><code>no [выражение_1]&lt;[выражение_2]</code></p>
<p>Сравнивать можно и текстовые значения, при этом символы сравниваются поочерёдно, и большим считается символ, стоящий ближе к концу алфавита.</p>
<p><code>"z"&gt;="a"    &amp; ! верно</code></p>
<p><code>"zz"&gt;="z"    &amp; ! верно</code></p>
<p><code>"z"&gt;="aaaaaa" &amp; ! верно</code></p>
<p><code>"z"&gt;="z" &amp; ! верно</code></p>
</section>

<section id="faq_80_01_noeq"><title>
<p>! (не равно)</p>
</title>

<p>`!` — операция сравнения "НЕ РАВНО". Общая запись:</p>
<p><code>[выражение_1]![выражение_2]</code></p>
<p>Если значение выражения `[выражение_1]` не равно значению выражения `[выражение_2]` операция вернёт -1, в противном случае вернёт 0. Иными словами: верно, если выражения не равны.</p>
<p>Аналогично "&lt;&gt;", или конструкции:</p>
<p><code>no [выражение_1]=[выражение_2]</code></p>
<p>Не путать с оператором комментария.</p>
<p>Для лучшей читаемости кода лучше использовать `&lt;&gt;`.</p>
<p>Примеры:</p>
<p><code>! 2 не равно 4 — вернёт -1</code></p>
<p><code>2!4</code></p>
<p><code>! 5 равно 5 — вернёт 0</code></p>
<p><code>5!5</code></p>
</section>

<section id="faq_80_01_concatenation"><title>
<p>&amp; (конкатенация)</p>
</title>

<p>`&amp;` — конкатенация, операция объединения строковых выражений. Общая запись:</p>
<p><code>[$выражение 1] &amp; [$выражение 2]</code></p>
<p>Не путайте с символом перечисления команд:</p>
<p><code>! в данном случае на экран будут последовательно выведены строки "26" и "27"</code></p>
<p><code>"26" &amp; "27"</code></p>
<p><code>! в данном случае на экран будет выведена строка "2627"</code></p>
<p><code>("26" &amp; "27")</code></p>
<p>Не рекомендуется использовать данную операцию для объединения строк, поскольку строки можно объединять через 
<a l:href="#faq_80_01_add">
`+`</a>:</p>
<p><code>! на экран будет выведена строка "2627"</code></p>
<p><code>"26"+"27"</code></p>
<p>Такая запись создаёт меньше путаницы и работает аналогичным образом.</p>

</section>

<section id="faq_80_01_and"><title>
<p>AND</p>
</title>

<p>`AND` — логическое "И" (побитовое "И"). Общая запись:</p>
<p><code>[#выражение 1] AND [#выражение 2]</code></p>
<p>Всё данное выражение будет верным, если верны выражения `[#выражение 1]` и `[#выражение 2]`.</p>
<p>Примеры:</p>
<p><code>! обе части выражения верны, значит и всё выражение верно</code></p>
<p><code>(2=2) and (3!2) &amp; ! выражение вернёт -1 (правда)</code></p>
<p><code>! одна часть выражения не верна, значит всё выражение неверно</code></p>
<p><code>(2!2) and (3!2) &amp; ! выражение вернёт 0 (ложь)</code></p>
<p><code>! обе части выражения не верны, значит и всё выражение не верно</code></p>
<p><code>(2!2) and (3=2) &amp; ! выражение вернёт 0 (ложь)</code></p>
</section>

<section id="faq_80_01_loc"><title>
<p>LOC</p>
</title>

<p>`LOC` — операция проверяет наличие локации и возвращает -1, если локация есть, и — 0, если локации нет. Общая запись:</p>
<p><code>LOC [$локация]</code></p>
<p>, где `[$локация]` — название локации, наличие которой необходимо проверить в игре. Выражение верно, если локация существует в игре.</p>
<p>Примеры:</p>
<p><code>! проверяет, есть ли в игре локация "начало"</code></p>
<p><code>loc "начало" &amp; ! если локация есть, возвращает -1</code></p>
<p><code></code></p>
<p><code>! если локация "улица" не добавлена в игру</code></p>
<p><code>if (loc "улица")=0:</code></p>
<p><code>act "Выйти на улицу": *pl "Я не могу выйти на улицу, дверь не отпирается."</code></p>
<p><code>end</code></p>
</section>

<section id="faq_80_01_mod"><title>
<p>MOD</p>
</title>

<p>`MOD` — операция вычисляет остаток от деления двух чисел. Общая запись:</p>
<p><code>[#выражение 1] MOD [#выражение 2]</code></p>
<p>, где `[#выражение 1]` — делимое, `[#выражение 2]` — делитель.</p>
<p>Примеры:</p>
<p><code>! 4 делится на 2 нацело</code></p>
<p><code>4 mod 2 &amp; ! возвращает 0</code></p>
<p><code>! 5 не делится на 2 нацело</code></p>
<p><code>5 mod 2 &amp; ! возвращает 1</code></p>
<p><code>! 13 делится на 10 нацело</code></p>
<p><code>13 mod 10 &amp; ! возвращает 3</code></p>
<p>Остаток от деления отрицательного числа будет отрицательным числом.</p>

</section>

<section id="faq_80_01_no"><title>
<p>NO</p>
</title>

<p>`NO` — операция отрицания. Общая запись:</p>
<p><code>NO [#выражение]</code></p>
<p>Если `[#выражение]` верно, то всё выражение неверно, и наоборот.</p>
<p>Пример:</p>
<p><code>! 4 равно 4 это верно, значит всё выражение неверно</code></p>
<p><code>no 4=4 &amp; ! вернёт 0 (ложь)</code></p>
<p><code>! можно читать как вопрос: четыре не равно четырём? Нет — ложь.</code></p>
<p><code></code></p>
<p><code>! то, что 5 равно 3, — неверно, значит всё выражение верно</code></p>
<p><code>no 5=3 &amp; ! вернёт -1 (правда)</code></p>
<p><code>! можно читать как вопрос: пять не равно трём? Да — правда.</code></p>
</section>

<section id="faq_80_01_obj"><title>
<p>OBJ</p>
</title>

<p>`OBJ` — операция проверяет наличие предмета в инвентаре и возвращает -1, если предмет есть, и — 0, если предмета нет. Общая запись:</p>
<p><code>OBJ [$название]</code></p>
<p>, где `[$название]` — название предмета, наличие которого необходимо проверить в окне предметов. Выражение верно, если предмет добавлен в окно предметов.</p>
<p>Примеры:</p>
<p><code>! проверяет, добавлен ли в окно предметов предмет "Отвёртка"</code></p>
<p><code>obj "Отвёртка" &amp; ! если предмет есть, возвращает -1</code></p>
<p><code></code></p>
<p><code>! в зависимости от наличия того или иного предмета</code></p>
<p><code>! выводится то или иное действие</code></p>
<p><code>if (obj "Полный кувшин")=-1:</code></p>
<p><code>act "Опустошить кувшин":</code></p>
<p><code>delobj "Полный кувшин"</code></p>
<p><code>addobj "Пустой квушин"</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<p><code>elseif (obj "Пустой кувшин")=-1:</code></p>
<p><code>act "Наполнить кувшин":</code></p>
<p><code>addobj "Полный кувшин"</code></p>
<p><code>delobj "Пустой квушин"</code></p>
<p><code>goto $curloc</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
</section>

<section id="faq_80_01_or"><title>
<p>OR</p>
</title>

<p>`OR` — логическое "ИЛИ" (побитовое "ИЛИ"). Общая запись:</p>
<p><code>[#выражение 1] OR [#выражение 2]</code></p>
<p>Всё данное выражение будет верным, если хотя бы одно из выражений `[#выражение 1]` и `[#выражение 2]` верно.</p>
<p>Примеры:</p>
<p><code>! обе части выражения верны, значит и всё выражение верно</code></p>
<p><code>(2=2) or (3!2) &amp; ! выражение вернёт -1 (правда)</code></p>
<p><code>! одна часть выражения верна, значит всё выражение верно</code></p>
<p><code>(2!2) or (3!2) &amp; ! выражение вернёт -1 (правда)</code></p>
<p><code>! обе части выражения не верны, значит и всё выражение не верно</code></p>
<p><code>(2!2) or (3=2) &amp; ! выражение вернёт 0 (ложь)</code></p>
</section>

</section>
<section id="faq_80_02">
<title head-level="h2">
<p>Операторы</p>
</title>

<section>
</section>

<section id="faq_80_02_impicit"><title>
<p>Неявный оператор</p>
</title>

<p>Неявный оператор — это оператор, который не прописывается в коде QSP, но производит вывод значений на экран. Неявный оператор подразумевается везде, где в команде присутствует выражение без оператора. Неявный оператор выводит в `Окно основного описания` значения таким же образом, как если бы вы использовали явное указание оператора `*pl`, то есть выводит значение и совершает переход на новую строку. Примеры:</p>
<p><code>$AAA+'989'</code></p>
<p><code>'Вы находитесь в парке'</code></p>
<p><code>'Преформатированная</code></p>
<p><code></code></p>
<p><code>строка'</code></p>
<p><code>$curloc &amp; ! выведет на экран название локации</code></p>
<p>В отличие от оператора `*pl` неявный оператор не выводит на экран пустую строку с переходом на новую строку, если ему не передаётся никакое значение. Это означает, что если функция не возвращает никакого значения, неявный оператор просто игнорируется. Пример:</p>
<p><code># start</code></p>
<p><code>! это код локации, вызывающей локацию-функцию</code></p>
<p><code>$curloc</code></p>
<p><code>$func('foo')</code></p>
<p><code>$func('foo')</code></p>
<p><code>$curloc</code></p>
<p><code>- start</code></p>
<p><code></code></p>
<p><code># foo</code></p>
<p><code>! это код локации-функции</code></p>
<p><code>local i=0</code></p>
<p><code>- foo</code></p>
<p>В данном случае локация-функция `foo` ничего не возвращает, поэтому на экране мы увидим две строки со словом "start", между которыми не будет пустых строк, так как неявный оператор в строках с `$func` на локации `start` будет просто проигнорирован. Сравните с:</p>
<p><code># start</code></p>
<p><code>! это код локации, вызывающей локацию-функцию</code></p>
<p><code>*pl $curloc</code></p>
<p><code>*pl $func('foo')</code></p>
<p><code>*pl $func('foo')</code></p>
<p><code>*pl $curloc</code></p>
<p><code>- start</code></p>
<p><code></code></p>
<p><code># foo</code></p>
<p><code>! это код локации-функции</code></p>
<p><code>local i=0</code></p>
<p><code>- foo</code></p>
</section>

<section id="faq_80_02_comments"><title>
<p>! (комментарий)</p>
</title>

<p>`!` — оператор комментария. То, что находится в строке после оператора комментария, и до конца строки игнорируется интерпретатором. Оператор комментария позволяет "закомментировать" (выключить) ненужный временно оператор / функцию во время отладки игры. Кроме того, написание комментариев к коду программы является одним из признаков хорошего стиля программирования.</p>
<p>Необходимо чётко понимать, что это именно оператор, поэтому если вы комментируете некую строку кода, то `!` должен стоять после `&amp;`:</p>
<p><code>*pl "Hello, world!" &amp; ! комментарий</code></p>
<p>Комментарии могут быть однострочными, то есть заканчиваться в той же строке, где стоит оператор комментария:</p>
<p><code>! однострочный комментарий</code></p>
<p><code>*pl "строка текста" &amp; ! тоже однострочный комментарий</code></p>
<p>Комментарии могут быть многострочными. Для этого после оператора комментария нужно записать кавычки, апострофы, или фигурные скобки. Например так:</p>
<p><code>! "это первая строка коммантария</code></p>
<p><code>это вторая строка комментария</code></p>
<p><code>это третья строка комментария</code></p>
<p><code>"</code></p>
<p>Многострочные комментарии могут принимать самые разнообразные формы:</p>
<p><code>! строка до  кавычек " текст внутри кавычек</code></p>
<p><code>может переходить на другие строки " а так же {</code></p>
<p><code>можно использовать другие группы символов, чтобы</code></p>
<p><code>продолжать многострочный комментарий</code></p>
<p><code>} и комментарий не кончится, пока не кончится строка</code></p>
</section>

<section id="faq_80_02_sclr"><title>
<p><emphasis>
CLEAR (</emphasis>

CLR)</p>
</title>

<p><code>*CLEAR</code>

 — очищает окно основного описания. Имеет краткую форму 
<code>*clr</code>.</p>

</section>

<section id="faq_80_02_snl"><title>
<p>*NL</p>
</title>

<p><code>*NL</code>

 — переход на новую строку, затем вывод текста в окне основного описания. Общая запись:</p>
<p><code>*NL [$текст]</code></p>
<p>, где `[$текст]` — любая строка текста, число, или выражение любого типа. Если `[$текст]` отсутствует, происходит просто переход на новую строку. Пример:</p>
<p><code>*p "Текст без перехода на новую строку."</code></p>
<p><code>*nl "Переход на новую строку + выведение текста."</code></p>
<p><code>*p "Текст без перехода на новую строку."</code></p>
</section>

<section id="faq_80_02_sp"><title>
<p>*P</p>
</title>

<p><code>*P</code>

 — вывод текста в окно основного описания без перехода на новую строку. Вывод текста любым другим оператором сразу после 
<code>*p</code>

 добавит новый текст сразу после текущего. Общая запись:</p>
<p><code>*P [$текст]</code></p>
<p>, где `[$текст]` — любая строка текста, число, или выражение любого типа. `[$текст]` может быть пустой строкой `''`, но не должен отсутствовать. Пример:</p>
<p><code>*p "Текст без перехода на новую строку."</code></p>
<p><code>*p "Текст без перехода на новую строку."</code></p>
<p><code>*p ""</code></p>
<p><code>*p "Текст без перехода на новую строку."</code></p>
</section>

<section id="faq_80_02_spl"><title>
<p>*PL</p>
</title>

<p><code>*PL</code>

 — вывод текста в окно основного описания, затем переход на новую строку. Общая запись:</p>
<p><code>*PL [$текст]</code></p>
<p>где `[$текст]` — любая строка текста, число, или выражение любого типа. `[$текст]` может отсутствовать, тогда просто переход на новую строку. Пример:</p>
<p><code>*pl "Вывод текста, затем переход на новую строку."</code></p>
<p><code>*pl "Вывод текста, затем переход на новую строку."</code></p>
<p><code>*p "Текст без перехода на новую строку."</code></p>
<p><code>*pl "Вывод текста, затем переход на новую строку."</code></p>
<p>Аналогичным образом можно вывести текст, просто написав нужное выражение вместо данного оператора. Например, строки:</p>
<p><code>*pl $AAA+'989'</code></p>
<p><code>*pl 'Вы находитесь в парке'</code></p>
<p><code>*pl 'Преформатированная</code></p>
<p><code></code></p>
<p><code>строка'</code></p>
<p>и:</p>
<p><code>$AAA+'989'</code></p>
<p><code>'Вы находитесь в парке'</code></p>
<p><code>'Преформатированная</code></p>
<p><code></code></p>
<p><code>строка'</code></p>
<p>сработают одинаково.</p>

</section>

<section id="faq_80_02_act"><title>
<p>ACT</p>
</title>

<p>`ACT` — создаёт и выводит в окно действий новое действие.</p>
<p>Общая запись в однострочной форме:</p>
<p><code>ACT [$название], [$путь к файлу изображения]: [оператор] &amp; [оператор] &amp; [оператор]</code></p>
<p>Общая запись в многострочной форме:</p>
<p><code>ACT [$название], [$путь к файлу изображения]:</code></p>
<p><code>[оператор]</code></p>
<p><code>[оператор]</code></p>
<p><code>[оператор]</code></p>
<p><code>END</code></p>
<p>К списку действий в окне действий добавляется новое с названием `[$название]` и изображением, которое лежит по пути `[$путь к файлу изображения]`. При нажатии на действие выполняются заданные операторы.</p>
<p>Параметр `[$путь к файлу изображения]` может отсутствовать, при этом действие добавится без изображения.</p>
<p>Примеры:</p>
<p><code>! действие в однострочной форме записи</code></p>
<p><code>act "Сорвать с берёзы яблоко": яблоко+=1 &amp; *pl "Вы сорвали яблоко, спелое белое."</code></p>
<p><code></code></p>
<p><code>! действие в многострочной форме записи, с изображением</code></p>
<p><code>act "Сорвать арбуз с куста","img/watermelon.png":</code></p>
<p><code>арбуз+=1</code></p>
<p><code>*pl "Вы сорвали арбуз с куста"</code></p>
<p><code>end</code></p>
<p>Если в списке действий уже есть действие с указанным названием, то новое действие не создаётся, и не заменяет собой уже существующее, плеер просто игнорирует команду `act`. Таким образом нельзя вывести действия с одинаковыми названиями. Пример:</p>
<p><code>act "Действие 1": *pl "Старое действие."</code></p>
<p><code>act "Действие 1": *pl "Новое действие."</code></p>
<p>Однако, вы можете сымитировать действия с одинаковыми названиями в режиме распознавания HTML, добавив в названия действий несуществующий HTML-тег:</p>
<p><code>usehtml=1</code></p>
<p><code>act "Действие 1&lt;uid-old&gt;": *pl "Старое действие."</code></p>
<p><code>act "Действие 1&lt;uid-new&gt;": *pl "Новое действие."</code></p>
</section>

<section id="faq_80_02_addobj"><title>
<p>ADDOBJ</p>
</title>

<p>`ADDOBJ` — добавление нового предмета в окно предметов. Общая запись:</p>
<p><code>ADDOBJ [$название],[$путь к файлу изображения],[#позиция]</code></p>
<p>, где `[$название]` — это название предмета, `[$путь к файлу изображения]` — это путь к файлу изображения предмета (отображается рядом с названием предмета), а `[#позиция]` — на какое место в инвентаре добавляется предмет. Параметр `[#позиция]` может отсутствовать. По умолчанию предметы добавляются в конец списка. Нумерация предметов в инвентаре ведётся с 1. Параметр `[$путь к файлу изображения]` может отсутствовать, значение по умолчанию - `''`, при этом предмет добавляется без изображения.</p>
<p>Допускается, но не рекомендуется, запись:</p>
<p><code>ADD OBJ [$название],[$путь к файлу изображения],[#индекс]</code></p>
<p>Можно добавлять предметы с одинаковым названием, однако если вы планируете добавлять много одинаковых предметов, то лучше использовать дополнительную переменную для подсчёта этих предметов, а в окно предметов добавить один предмет, чтобы не загромождать инвентарь списком из 137 предметов Рубль / Патрон:</p>
<p><code>if obj 'Патроны':</code></p>
<p><code>! если предмет "Патроны" уже добавлен, просто увеличиваем их число</code></p>
<p><code>патроны=патроны+10</code></p>
<p><code>else</code></p>
<p><code>! если предмет "Патроны" ещё не добавлен, добавляем, и увеличиваем число</code></p>
<p><code>addobj 'Патроны'</code></p>
<p><code>патроны=патроны+10</code></p>
<p><code>end</code></p>
<p>Для хранения числа предметов можно использовать массивы, индексируемые через строки:</p>
<p><code>objects['деньги'] = 12</code></p>
<p><code>objects['патроны'] = 137</code></p>
<p><code>'Количество: &lt;&lt;objects[$getobj(countobj)]&gt;&gt;'</code></p>
<p>Пример добавления предмета в самый верх списка (при этом все остальные предметы сместятся вниз):</p>
<p><code>addobj "Отвёртка","",1</code></p>
</section>

<section id="faq_80_02_cla"><title>
<p>CLA</p>
</title>

<p>`CLA` - очистка списка текущих действий (удаление всех действий из окна действий).</p>

</section>

<section id="faq_80_02_clear"><title>
<p>CLEAR (CLR)</p>
</title>

<p>`CLEAR` — очищает окно дополнительного описания. Имеет краткую форму `clr`.</p>

</section>

<section id="faq_80_02_close"><title>
<p>CLOSE</p>
</title>

<p>`CLOSE` — останавливает проигрывание указанного звукового файла. Общая запись:</p>
<p><code>CLOSE [$путь к звуковому файлу]</code></p>
<p>, где `[$путь к звуковому файлу]` — путь к звуковому файлу относительно файла игры. Если параметр `[$путь к звуковому файлу]` не указан, происходит остановка воспроизведения всех звуковых файлов.</p>

</section>

<section id="faq_80_02_closeall"><title>
<p>CLOSE ALL</p>
</title>

<p>`CLOSE ALL` — остановка проигрывания всех активных звуковых файлов. Имеет краткую форму `close`.</p>

</section>

<section id="faq_80_02_cls"><title>
<p>CLS</p>
</title>

<p>`CLS` — очищает все окна кроме списка предметов. Эквивалентно конструкции:</p>
<p><code>clear &amp; *clear &amp; cla &amp; cmdclear</code></p>
</section>

<section id="faq_80_02_cmdclear"><title>
<p>CMDCLEAR (CMDCLR)</p>
</title>

<p>`CMDCLEAR` — очистка строки ввода. Имеет краткую форму `cmdclr`.</p>

</section>

<section id="faq_80_02_copyarr"><title>
<p>COPYARR</p>
</title>

<p>`COPYARR` — копирование содержимого одного массива в другой. Общая запись:</p>
<p><code>COPYARR [$приёмник],[$источник],[#начало],[#количество]</code></p>
<p>, где: `[$приёмник]` — это массив, в который производится копирование, размер и наполнение значения не имеют; `[$источник]` — это массив, из которого производится копирование; `[#начало]` — номер элемента, с которого нужно начинать копирование; `[#количество]` — сколько элементов нужно скопировать. Параметр `[#количество]` является необязательным; по умолчанию — до конца массива-источника. Параметр `[#начало]` является необязательным; по умолчанию — 0.</p>
<p>Примеры:</p>
<p><code>! копируем все элементы массива '$b' в массив '$a'</code></p>
<p><code>copyarr '$a','$b'</code></p>
<p><code>! при этом так же были скопированны все элементы массива 'b' в массив 'a'</code></p>
<p><code></code></p>
<p><code>! копируем в массив 'c' элементы массива 'd', начиная с шестого</code></p>
<p><code>copyarr 'c','d',6</code></p>
<p><code></code></p>
<p><code>! копируем шесть первых элементов массива 'd' в массив 'c'</code></p>
<p><code>copyarr 'c','d',0,6</code></p>
<p>В силу особенностей плеера при копировании, например, числового массива `mass1` в `mass2` копируется также текстовый массив `$mass1` в `$mass2`.</p>
<p>Другие примеры:</p>
<p><code>copyarr $arrname1,$arrname2,10,5</code></p>
<p><code>copyarr 'a&lt;&lt;$arrname1&gt;&gt;','a&lt;&lt;$arrname2&gt;&gt;'</code></p>
</section>

<section id="faq_80_02_delact"><title>
<p>DELACT</p>
</title>

<p>`DELACT` — удаляет действие из списка действий (если такое действие существует). Общая запись:</p>
<p><code>DELACT [$название]</code></p>
<p>, где `[$название]` — название действия, которое хотим удалить.</p>
<p>Примеры:</p>
<p><code>! удаляем действие с конкретным названием</code></p>
<p><code>delact 'Идти вперед'</code></p>
<p><code>! удаляем выделенное действие</code></p>
<p><code>delact $selact</code></p>
<p>Допустима, но не одобряется, устаревшая форма записи:</p>
<p><code>DEL ACT [$название]</code></p>
</section>

<section id="faq_80_02_delobj"><title>
<p>DELOBJ</p>
</title>

<p>`DELOBJ` — удаление предмета из инвентаря по названию (если такой предмет существует). Общая запись:</p>
<p><code>DELOBJ [$название]</code></p>
<p>, где `[$название]` — название предмета, который хотим удалить.</p>
<p>Если в инвентаре присутствуют одинаковые предметы, команда удалит самый верхний с указанным индексом.</p>
<p>Примеры:</p>
<p><code>! удаляем предмет с конкретным названием</code></p>
<p><code>delobj "Отвёртка"</code></p>
<p><code>! удаляем выделенный предмет</code></p>
<p><code>delobj $selobj</code></p>
<p>Допустима, но не одобряется, форма записи:</p>
<p><code>DEL OBJ [$название]</code></p>
</section>

<section id="faq_80_02_dynamic"><title>
<p>DYNAMIC</p>
</title>

<p>`DYNAMIC` — выполняет код, переданный в виде строки текста. Общая запись:</p>
<p><code>DYNAMIC([$код],[аргумент 0],[аргумент 1], ... ,[аргумент 8])</code></p>
<p>, где `[$код]` — это обычный код QSP, записанный в виде текста. Выполнение такого кода аналогично выполнению кода оператора `GOSUB`. Аргументы `[аргумент 0]`, `[аргумент 1]` и т.д. могут использоваться внутри `[$код]`, их значения автоматически помещаются в переменные `args[0]`, `args[1]`, и т.д. соответственно. После выполнения старые параметры `args` восстанавливаются, затем продолжается выполнение кода со следующей команды после `dynamic`.</p>
<p>Примеры:</p>
<p><code>dynamic '$a="string&lt;&lt;$b&gt;&gt;"'</code></p>
<p><code>dynamic '$a'</code></p>
<p><code>dynamic 'if $a="string":''text!'''</code></p>
<p><code>dynamic "</code></p>
<p><code>$args[0]</code></p>
<p><code>addobj $args[1]</code></p>
<p><code>",'Текст','Вилка'</code></p>
<p>Нижеследующая информация справедлива и для функции `dyneval` (см. 
<a l:href="#faq_80_03_dyneval">
соответствующий раздел</a>).</p>
<p>Важно! Если код задан с помощью одинарных (`''`) или двойных (`""`) кавычек, в тексте вычисляются подвыражения:</p>
<p><code>$args[0]='qwerty'</code></p>
<p><code>$code = '</code></p>
<p><code>*pl "&lt;&lt;$args[0]&gt;&gt;"</code></p>
<p><code>*pl $args[0]</code></p>
<p><code>'</code></p>
<p><code></code></p>
<p><code>dynamic $code,'asdfg'</code></p>
<p>В этом случае при задании переменной `$code` будет вычислено подвыражение, поэтому первой строкой выведется 'qwerty', второй строкой выведется 'asdfg'.</p>
<p>Фигурные скобки - третий вид кавычек используемый специально для написания динамического кода. Здесь поддерживается вложенность скобок, а перед выполнением кода не вычисляются подвыражения:</p>
<p><code>$args[0]='qwerty'</code></p>
<p><code>$code = {</code></p>
<p><code>*pl "&lt;&lt;$args[0]&gt;&gt;"</code></p>
<p><code>*pl $args[0]</code></p>
<p><code>}</code></p>
<p><code></code></p>
<p><code>dynamic $code,'asdfg'</code></p>
<p>В этом случае будут выведены две строки 'asdfg'.</p>

</section>

<section id="faq_80_02_exit"><title>
<p>EXIT</p>
</title>

<p>`EXIT` — завершение выполнения текущего блока кода (преждевременный выход из подпрограммы, функции, обработчика какого-либо события, и т.д.).</p>
<p>В качестве блока кода может выступать локация, действие, код, переданный `dynamic`у или `dyneval`у, или код в гиперссылке.</p>
<p>Пример:</p>
<p><code>if args[1] = 0:</code></p>
<p><code>exit</code></p>
<p><code>else</code></p>
<p><code>if args[0] mod args[1]=0:</code></p>
<p><code>result=-1</code></p>
<p><code>else</code></p>
<p><code>result=0</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<p>Внимание!!! В более новых версиях плеера (5.8.0 и выше) есть оператор цикла `loop`, и тело цикла так же считается отдельным блоком кода, однако оператор `exit` прерывает не только сам цикл, но и блок кода, в котором находится цикл.</p>

</section>

<section id="faq_80_02_gosub"><title>
<p>GOSUB (GS)</p>
</title>

<p>`GOSUB` — выполнение кода указанной локации без непосредственного перехода на неё.</p>
<p>Общая запись:</p>
<p><code>GOSUB [$локация],[аргумент 0],[аргумент 1], ... ,[аргумент 8]</code></p>
<p>, где `[$локация]` — это название локации, код которой мы хотим выполнить без непосредственного перехода на неё. Аргументы `[аргумент 0]`, `[аргумент 1]` и т.д. могут использоваться на этой локации, их значения автоматически помещаются в переменные `args[0]`, `args[1]`, и т.д. соответственно. После обработки локации предыдущие значения `args` восстанавливаются. Использование аргументов не обязательно.</p>
<p>При обращении к локации по `gosub` базовое описание локации добавляется к текущему описанию, базовые действия добавляются к текущим действиям, и происходит выполнение операторов в поле "Выполнить при посещении", затем возврат на исходную строку (продолжение выполнения кода после `gosub`).</p>
<p>Примеры вызова локаций по `gosub`:</p>
<p><code>!обработка локации "ход". Массив args[] пуст.</code></p>
<p><code>gosub 'ход'</code></p>
<p><code></code></p>
<p><code>!обработка локации с названием из переменной $loc</code></p>
<p><code>!Передаётся один параметр - args[0] равен 1.</code></p>
<p><code>gosub $location,1</code></p>
<p><code></code></p>
<p><code>!обработка локации "ход" с передачей 3-х параметров.</code></p>
<p><code>! $args[0] = $var (значению), args[1] = 2,</code></p>
<p><code>! $args[2] = "данные". Обратите внимание на символы '$'.</code></p>
<p><code>gosub 'ход',$var,2,'данные'</code></p>
<p>Ещё пример:</p>
<p><code>! это код вызова локации "переход"</code></p>
<p><code>gosub 'переход', 'локация'</code></p>
<p><code></code></p>
<p><code>! а это код самой локации "переход"</code></p>
<p><code># переход</code></p>
<p><code>*pl $args[0]  &amp; ! на экран выведется текст 'локация'</code></p>
<p><code>! в окне действий появится новое действие:</code></p>
<p><code>act 'перейти':</code></p>
<p><code>goto "улица"</code></p>
<p><code>end</code></p>
<p><code>- переход</code></p>
<p>Оператор имеет краткую форму gs:</p>
<p><code>GS [$локация],[аргумент 0],[аргумент 1], ... ,[аргумент 8]</code></p>
</section>

<section id="faq_80_02_goto"><title>
<p>GOTO (GT)</p>
</title>

<p>`GOTO` — переход на указанную локацию. Общая запись:</p>
<p><code>GOTO [$локация],[аргумент 0],[аргумент 1], ... ,[аргумент 8]</code></p>
<p>, где `[$локация]` — название локации, на которую должен быть осуществлён переход. Аргументы `[аргумент 0]`, `[аргумент 1]` и т.д. могут использоваться на этой локации, их значения автоматически помещаются в переменные `args[0]`, `args[1]`, и т.д. соответственно. Использование аргументов не обязательно.</p>
<p>При переходе на новую локацию при помощи `goto` очищается окно основного описания, а также список текущих действий, затем в окно основного описания выводится текст базового описания, в окно действий — базовые действия, а так же выполняется код из поля "Выполнить при посещении" локации `[$локация]`. Так же при переходе на новую локацию изменяется значение, возвращаемое функцией `$curloc`.</p>
<p>Примеры:</p>
<p><code>! переход на локацию "дом".</code></p>
<p><code>! Массив args на локации "дом" будет пуст.</code></p>
<p><code>goto 'дом'</code></p>
<p><code></code></p>
<p><code>! переход на локацию "улица" с передачей 2-х параметров.</code></p>
<p><code>! на локации "улица" args[0] равен 1,</code></p>
<p><code>! $args[1] содержит строку "данные".</code></p>
<p><code>goto 'улица',1,'данные'</code></p>
<p>Оператор имеет краткую форму gt:</p>
<p><code>GT [$локация],[аргумент 0],[аргумент 1], ... ,[аргумент 8]</code></p>
</section>

<section id="faq_80_02_if"><title>
<p>IF (ELSE, ELSEIF)</p>
</title>

<p>`IF` — оператор условия. Собственно для того и нужен, чтобы проверять выполнение какого-либо условия. Имеет несколько форм записи.</p>
<p>Простая однострочная форма записи:</p>
<p><code>IF [#выражение]: [команда 1] &amp; [команда 2] &amp; ...</code></p>
<p>Как видите, за ключевым словом `if` следует выражение `[#выражение]`, и если это выражение верно, тогда выполняется набор команд `[команда 1]`, `[команда 2]`, и т.д., которые записаны после двоеточия в той же строке. При этом команды перечисляются через амперсанд (`&amp;`).</p>
<p>Именно по наличию команд сразу в той же строке после двоеточия плеер определяет, что это однострочная форма, и считает конец этой строки концом конструкции условия.</p>
<p>Примеры:</p>
<p><code>! если сумма a и b равна двум,</code></p>
<p><code>! переменной c присваивается значение 30</code></p>
<p><code>if a+b=2: c=30</code></p>
<p><code>! Если в инвентаре нет апельсина, выводится текст</code></p>
<p><code>if no obj "Апельсин": pl "У Вас нет апельсина."</code></p>
<p><code>! это тоже простая однострочная форма</code></p>
<p><code>if ((a+b)/c)=45+54 or (b&lt;5 or c&gt;45) and no obj 'лопата' and $f=$vvv+'RRRRR': p 'OK' &amp; goto 'Next'</code></p>
<p>Сложная однострочная форма записи:</p>
<p><code>IF [#выражение]: [команда д1] &amp; [команда д2] &amp; ... ELSE [команда н1] &amp; [команда н2] &amp; ...</code></p>
<p>Здесь снова за ключевым словом `if` следует `[#выражение]`, истиность которого требуется проверить. Если выражение верно, выполняется набор команд `[команда д1]`, `[команда д2]` и т.д., от двоеточия до ключевого слова else. В противном случае, если выражение `[#выражение]` неверно, выполняется набор команд `[команда н1]`, `[команда н2]` и т.д., от `else` и до конца строки. Точно так же, как и для простой однострочной формы, концом конструкции условия считается конец строки.</p>
<p>Примеры сложной однострочной формы:</p>
<p><code>! если сумма a и b равна двум, переменной c присваивается значение 30</code></p>
<p><code>! в противном случае (то есть если сумма a и b не равна двум)</code></p>
<p><code>! переменной c присваивается значение 10</code></p>
<p><code>if a+b=2: c=30 else c=10</code></p>
<p><code>! в зависимости от того есть ли в инвентаре апельсин</code></p>
<p><code>! выводится соответствующий текст</code></p>
<p><code>if obj "Апельсин": pl "У Вас есть апельсин." else pl "У Вас нет апельсина."</code></p>
<p>Простая многострочная форма записи в общем виде выглядит вот так:</p>
<p><code>IF [#выражение]:</code></p>
<p><code>[команда 1]</code></p>
<p><code>[команда 2]</code></p>
<p><code>...</code></p>
<p><code>END</code></p>
<p>Как видите, она отличается от простой однострочной формы записи тем, что команды `[команда 1]`, `[команда 2]` и т.д. записаны не сразу после двоеточия, а только в следующей строке. Именно так плеер понимает, что имеет дело с многострочной формой записи. Наличие или отсутствие пробелов или символов табуляции перед командами роли не играет, однако, чтобы плеер понял, где заканчивается конструкция условия, в конце на отдельной строке необходимо прописывать ключевое слово end, или end `if`.</p>
<p>Примеры:</p>
<p><code>if библиотека = 0:</code></p>
<p><code>узнал_о_тусовке = 0</code></p>
<p><code>библиотека_вернулся = 1</code></p>
<p><code>gt 'библиотека'</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>if a+b=2:</code></p>
<p><code>c=30</code></p>
<p><code>end</code></p>
<p>Сложная многострочная форма в общей записи выглядит вот так:</p>
<p><code>IF [#выражение]:</code></p>
<p><code>[команда д1]</code></p>
<p><code>[команда д2]</code></p>
<p><code>...</code></p>
<p><code>ELSE</code></p>
<p><code>[команда н1]</code></p>
<p><code>[команда н2]</code></p>
<p><code>...</code></p>
<p><code>END</code></p>
<p>Здесь так же комнады `[команда д1]`, `[команда д2]` и т.д. записываются не сразу после двоеточия, а только в следующей строке. Ключевое слово else так же записывается в отдельной строке, и команды `[команда н1]`, `[команда н2]` и т.д. идут в последующих строках после `else`. Завершается конструкция условия ключевым словом `end` (или `end if`), которое снова идёт отдельной строкой.</p>
<p>При верности выражения `[#выражение]` выполняется набор команд между двоеточием и `else`, а если `[#выражение]` неверно, выполняется набор команд между `else` и `end`.</p>
<p>Примеры:</p>
<p><code>if a+b=2:</code></p>
<p><code>c=30</code></p>
<p><code>else</code></p>
<p><code>c=10</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>if obj "Апельсин":</code></p>
<p><code>pl "У Вас есть апельсин."</code></p>
<p><code>else</code></p>
<p><code>pl "У Вас нет апельсина."</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>if len($curtoken) &gt; 0:</code></p>
<p><code>$tokens[curtoken] = $curtoken</code></p>
<p><code>tokens = curtoken + 1</code></p>
<p><code>else</code></p>
<p><code>tokens = curtoken</code></p>
<p><code>end</code></p>
<p>Ещё одна форма записи работает только в многострочном варианте (обещали исправить в новых версиях). Это расширенная форма. Она позволяет размещать на одном уровне вложенности последовательно-исключающие условия. Общая форма записи такая:</p>
<p><code>IF [#выражение 1]:</code></p>
<p><code>[набор команд 1]</code></p>
<p><code>...</code></p>
<p><code>ELSEIF [#выражение 2]:</code></p>
<p><code>[набор команд 2]</code></p>
<p><code>...</code></p>
<p><code>ELSEIF ... :</code></p>
<p><code>...</code></p>
<p><code>ELSE</code></p>
<p><code>[последний набор команд]</code></p>
<p><code>...</code></p>
<p><code>END</code></p>
<p>Правила записи такие же, как и для других видов многострочных условий. После двоеточия в той же строке, где находится оператор `if` или `elseif` не должно идти никаких команд, только со следующей строки. Вся конструкция должна заканчиваться оператором `end` (или `end if`), стоящим в отдельной строке. В конструкции может как присутствовать, так и отсуствовать часть с `else`.</p>
<p>Работает это следующим образом. Если `[#выражение 1]` верно, выполняются команды `[набор команд 1]`. Если `[#выражение 1]` неверно, но верно `[#выражение 2]`, выполняются команды `[набор команд 2]`, и т.д. И только если неверны все выражения в текущей конструкции условия, выполнятся команды после `else`.</p>
<p>Как вы понимаете, верность выражения `[#выражение 1]` не исключает верности выражения `[#выражение 2]`, однако верность выражения `[#выражение 2]` исключает верность выражения `[#выражение 1]`. Поэтому я и назвал эту конструкцию конструкцией последовательно-исключающих условий.</p>
<p>Примеры:</p>
<p><code>IF ОЧКИ&gt;124:</code></p>
<p><code>GOTO 'КОН3'</code></p>
<p><code>ELSEIF ОЧКИ&gt;99:</code></p>
<p><code>GOTO 'КОН4'</code></p>
<p><code>ELSE</code></p>
<p><code>GOTO 'КОН5'</code></p>
<p><code>END</code></p>
<p><code>if money mod 10=1 and money mod 100&lt;&gt;11:</code></p>
<p><code>*pl "У вас &lt;&lt;money&gt;&gt; монета."</code></p>
<p><code>elseif money mod 10&gt;1 and money mod 10&lt;5 and (money mod 100&lt;5 or money mod 100&gt;20):</code></p>
<p><code>*pl "У вас &lt;&lt;money&gt;&gt; монеты."</code></p>
<p><code>elseif money mod 10=0 or money mod 10&gt;4 or (money mod 100&gt;10 and money mod 100&lt;21):</code></p>
<p><code>*pl "У вас &lt;&lt;money&gt;&gt; монет."</code></p>
<p><code>end</code></p>
<p>Обратите внимание. Ключевым словом `end` заканчивается не каждый отдельный `elseif`, а вся конструкция условия.</p>
<p>Для многострочных форм записи допускается вложенность неограниченной глубины. Каждый уровень вложения должен заканчиваться своей строкой `end`.</p>
<p>Примеры:</p>
<p><code>if a+b&lt;3 or y=8:</code></p>
<p><code>p 'A+B&lt;3 или Y=8'</code></p>
<p><code>nl</code></p>
<p><code>if j=88: nl &amp; p 'NEXT'</code></p>
<p><code>if $h='ooo':</code></p>
<p><code>p 'loo' &amp; jump 'lll'</code></p>
<p><code>end</code></p>
<p><code>end</code></p>
<p><code>if a=0:</code></p>
<p><code>'abc1234'</code></p>
<p><code>if b=0: '0' else '1'</code></p>
<p><code>if j=88: nl &amp; p 'NEXT'</code></p>
<p><code>if $h='ooo':</code></p>
<p><code>p 'loo' &amp; jump 'lll'</code></p>
<p><code>else</code></p>
<p><code>p 'sample text'</code></p>
<p><code>v=8</code></p>
<p><code>end</code></p>
<p><code>1234</code></p>
<p><code>else</code></p>
<p><code>'01234'</code></p>
<p><code>g=78</code></p>
<p><code>end</code></p>
<p>Несколько примеров неверной записи:</p>
<p><code>! в этом случае, если условие не будет выполнено,</code></p>
<p><code>! плеер проигнорирует только команду `k1=34`</code></p>
<p><code>! поскольку посчитает, что это однострочное условие</code></p>
<p><code>if abcd=3: k1=34</code></p>
<p><code>k2=35 &amp; ! эта команда будет выполняться всегда</code></p>
<p><code>k3=36 &amp; ! эта комнада будет выполняться всегда</code></p>
<p><code>end &amp; ! этот end будет проигнорирован</code></p>
<p><code>! данная строка выведет ошибку неизвестное действие</code></p>
<p><code>! так как однострочные формы записи не должны оканчиваться end`ом</code></p>
<p><code>if abcd=3: k1=34 else k1=25 end</code></p>
<p><code></code></p>
<p><code>! данная запись приведёт к ошибке:</code></p>
<p><code>! "Неверная запись однострочного оператора"</code></p>
<p><code>if absd=3:</code></p>
<p><code>k=34</code></p>
<p><code>else if absd=6:</code></p>
<p><code>k1=25</code></p>
<p><code>end</code></p>
</section>

<section id="faq_80_02_addqst"><title>
<p>INCLIB (ADDQST)</p>
</title>

<p>`INCLIB` — из заданного файла игры добавляет все локации, названия которых отсутствуют среди текущих игровых локаций. Загруженные локации полностью эквивалентны локациям из основного файла игры. Общая запись:</p>
<p><code>INCLIB [$путь к файлу игры]</code></p>
<p>В более старых версиях библиотеки команда называлась `addqst` и `addlib` (нигде не использовалось).</p>
<p>Пример:</p>
<p><code>inclib "lib/easy.math.qsp"</code></p>
<p><code>inclib "lib/easy.title.qsp"</code></p>
<p><code>inclib "res/drive.qsp"</code></p>
<p><code>inclib "res/base.qsp"</code></p>
<p><code>inclib "res/intro.qsp"</code></p>
</section>

<section id="faq_80_02_jump"><title>
<p>JUMP</p>
</title>

<p>`JUMP` — переход в текущем блоке кода на указанную метку. Общая запись:</p>
<p><code>JUMP [$метка]</code></p>
<p>, где `
<a l:href="#faq_80_05_marks">
$метка]` — это метка ниже или выше по коду (см. раздел ["Метки"</a>).</p>
<p>`jump` находит метку только в пределах текущего блока кода, то есть метки локальны.</p>
<p>Отдельными блоками кода в QSP являются:</p>
<p>* 
код "Выполнить при посещении" конкретной локации (каждая локация - отдельный блок кода),</p>
<p>* 
код действия даже если действие добавлено программно,</p>
<p>* 
код в гиперссылке,</p>
<p>* 
код `DYNAMIC`/`DYNEVAL`</p>
<p>Пример:</p>
<p><code>jump 'КонеЦ'</code></p>
<p><code>p 'Это сообщение не будет выведено'</code></p>
<p><code>:конец</code></p>
<p><code>p 'А это сообщение пользователь увидит'</code></p>
<p>С помощью оператора `jump` можно организовывать циклы:</p>
<p><code>:loop</code></p>
<p><code>if s&lt;9:</code></p>
<p><code>s=s+1</code></p>
<p><code>pl s</code></p>
<p><code>jump 'loop'</code></p>
<p><code>end</code></p>
<p><code>p 'Всё!'</code></p>
<p>Двойной цикл с одной меткой:</p>
<p><code>:loop</code></p>
<p><code>if y&lt;9:</code></p>
<p><code>if x&lt;9:</code></p>
<p><code>*p "&lt;&lt;x&gt;&gt; - "</code></p>
<p><code>x=x+1</code></p>
<p><code>jump 'loop'</code></p>
<p><code>end</code></p>
<p><code>*pl ":&lt;&lt;y&gt;&gt;"</code></p>
<p><code>y=y+1</code></p>
<p><code>x=0</code></p>
<p><code>jump 'loop'</code></p>
<p><code>end</code></p>
</section>

<section id="faq_80_02_killall"><title>
<p>KILLALL</p>
</title>

<p>`KILLALL` — уничтожает все переменные и удаляет все предметы из окна предметов. Эквивалентен конструкции:</p>
<p><code>killvar &amp; killobj</code></p>
<p>Обратите внимание, `killall` не эквивалентен конструкции:</p>
<p><code>killobj &amp; killvar</code></p>
<p>поскольку в этом случае значения переменных удаляются после удаления предметов, а значит код локации-обработчика удаления предметов успевает выполниться (см. `$onobjdel`).</p>
<p>Обычно `killall` используют в начале игры, если в конце игры предусмотрено действие "Начать заново".</p>

</section>

<section id="faq_80_02_killobj"><title>
<p>KILLOBJ</p>
</title>

<p>`KILLOBJ` — удаление предмета, расположенного в заданной позиции. Общая запись:</p>
<p><code>KILLOBJ [#номер]</code></p>
<p>, где `[#номер]` — номер предмета в окне инвентаря. Нумерация предметов начинается с 1. Если параметр `[#номер]` не указан, удаляются все предметы. При удалении каждого предмета с помощью `killobj`, происходит выполнение кода локации-обработчика удаления предметов (см. `$onobjdel`).</p>
<p>Пример:</p>
<p><code>! удаляем самый верхний предмет в списке</code></p>
<p><code>killobj 1</code></p>
<p><code>! удаляем самый нижний предмет в списке</code></p>
<p><code>killobj countobj</code></p>
<p><code>! удаляем все предметы</code></p>
<p><code>killobj</code></p>
</section>

<section id="faq_80_02_killqst"><title>
<p>KILLQST</p>
</title>

<p>`KILLQST` — удаляет все локации, добавленные с помощью оператора `inclib`. В более новых версиях библиотеки команда переименована в `dellib`, затем в `freelib`.</p>

</section>

<section id="faq_80_02_killvar"><title>
<p>KILLVAR</p>
</title>

<p>`KILLVAR` — удаление указанного элемента массива. Общая запись:</p>
<p><code>KILLVAR [$название массива],[индекс элемента]</code></p>
<p>, где `[$название массива]` — название массива, из которого хотим удалить элемент, а `[#индекс элемента]` — номер элемента в массиве, который хотим удалить. Нумерация элементов массивов начинается с 0.</p>
<p>Если индекс элемента не указан, то очищается весь массив. Если оператор вызван без аргументов, то удаляются все переменные и массивы.</p>
<p>Примеры:</p>
<p><code>killvar 'a',3 &amp; ! удалит из массива 'a' элемент с индексом 3.</code></p>
<p><code>killvar 'a' &amp; ! удаляет массив 'a'</code></p>
<p><code>killvar &amp; ! удаляет все переменные, массивы</code></p>
<p>При удалении элемента все следующие за ним элементы сдвигаются на позицию вверх.</p>
<p>Пример:</p>
<p><code>a[0]=4</code></p>
<p><code>a[1]=3</code></p>
<p><code>a[2]=23</code></p>
<p><code>a[3]=15</code></p>
<p><code>KILLVAR 'a',1</code></p>
<p><code>! теперь массив выглядит так:</code></p>
<p><code>! a[0]=4</code></p>
<p><code>! a[1]=23</code></p>
<p><code>! a[2]=15</code></p>
</section>

<section id="faq_80_02_let"><title>
<p>LET</p>
</title>

<p>`LET` — устаревший оператор для установки значения переменной. Общая запись:</p>
<p><code>LET [название переменной]=[выражение]</code></p>
<p>, где `[название переменной]` — это допустимое имя переменной, `[выражение]` — это допустимое для данной переменной значение.</p>
<p>Названия числовых переменных записываются без символа `$` в начале. Названия текстовых переменных записываются с символом `$` в начале. Примеры:</p>
<p><code>! задаём текстовую переменную</code></p>
<p><code>let $text="text string"</code></p>
<p><code>! задаём числовую переменную</code></p>
<p><code>let abs=123</code></p>
<p>Данный оператор является устаревшим, как и оператор `set`, поскольку в настоящее время значение переменной устанавливается через присвоение:</p>
<p><code>$text="text string"</code></p>
<p>Использование операторов `set` и `let` не рекомендуется.</p>

</section>

<section id="faq_80_02_menu"><title>
<p>MENU</p>
</title>

<p>`MENU` — в любом месте игры выводит на экран всплывающее меню, пункты которого прописаны в указанном массиве. Общая запись:</p>
<p><code>MENU [$название массива]</code></p>
<p>Прежде, чем использовать данный оператор, необходимо заполнить массив, на основе содержимого которого будут формироваться пункты меню. Пункты меню — это строковые начения массива с особым форматом записи:</p>
<p><code>"название пункта меню:название локации:путь к файлу иконки"</code></p>
<p>Название пункта меню — это то, что мы увидим на экране, когда меню будет выведено; название локации — это название локации, код которой будет выполняться при щелчке на соответствующем пункте меню; путь к файлу иконки — это путь к файлу изображения, которое будет выведено рядом с названием пункта меню.</p>
<p>Таким образом мы можем заполнить массив для того, чтоб создать наши пункты меню:</p>
<p><code>$stone[0]='Взять камень:takestone'</code></p>
<p><code>$stone[1]='Кинуть камень:throwstone'</code></p>
<p><code>$stone[2]='Осмотреть камень:lookstone'</code></p>
<p>Поиск символов ":" начинается с конца строки, то есть название пункта меню может содержать двоеточия, однако тогда обязательно после названия локации должно стоять двоеточие, даже если вы не используете иконки для пунктов меню.</p>
<p>Если путь к файлу иконки не указан или указанный файл недоступен, то пункт меню отобразится без иконки.</p>
<p>Здесь название массива (`$stone`) - это название меню, а текстовые значения массива - действия, для которых указаны названия и названия локаций-обработчиков выбора пунктов меню. При выборе пункта "Взять камень" произойдёт обработка локации с названием "takestone". Аналогично будет происходить с другими пунктами.</p>
<p>Чтобы вызвать меню на экран нужно воспользоваться оператором menu:</p>
<p><code>menu '$stone'</code></p>
<p>Меню можно вызывать в любом месте игры, например, из гиперссылок:</p>
<p><code>'&lt;a href="EXEC: menu ''$stone''"&gt;Камень&lt;/a&gt;'</code></p>
<p>В локацию-обработчик выбора пункта меню передаётся аргумент (`args[0]`) - позиция выбранного пункта. Позиции элементов меню нумеруются с 1.</p>
<p>Пример создания меню с иконками:</p>
<p><code>! нет иконки</code></p>
<p><code>$usr_menu[0] = 'Взять предмет:take_item'</code></p>
<p><code>! иконка задана gif-файлом</code></p>
<p><code>$usr_menu[1] = 'Положить предмет:put_item:images/put_item.gif'</code></p>
<p><code>! иконка задана значением $icon_file</code></p>
<p><code>$usr_menu[2] = 'Осмотреть предмет:look_item:&lt;&lt;$icon_file&gt;&gt;'</code></p>
<p><code>! пункт меню задан 3-мя переменными</code></p>
<p><code>$usr_menu[3] = '&lt;&lt;$name&gt;&gt;:&lt;&lt;$location&gt;&gt;:&lt;&lt;$file&gt;&gt;'</code></p>
<p><code></code></p>
<p><code>menu 'usr_menu' &amp;! покажет меню из 4-х пунктов</code></p>
<p>Меню заканчивается на элементе массива со значением `
<code>` (пустая строка). Т.е. если массив меню состоит из элементов 'Взять','Осмотреть',</code>,'Бросить', то 2 последних пункта меню не будут созданы:</p>
<p><code>$usr_menu[0]='Взять предмет:take_item' &amp; ! этот пункт мы увидим на экране</code></p>
<p><code>$usr_menu[1]='Осмотреть предмет:look_item' &amp; ! и этот пункт мы увидим на экране</code></p>
<p><code>$usr_menu[2]='' &amp; ! здесь пустое значение, плеер посчитает, что меню кончилось</code></p>
<p><code>$usr_menu[3]='Положить предмет:put_item' &amp; ! этот пункт мы не увидим</code></p>
<p>Чтобы вставить разделитель в меню, вместо соответствующего элемента массива напишите `"-:-"`. Т.е. если нужно поставить разделитель вместо 3-го элемента:</p>
<p><code>$usr_menu[0]='Взять предмет:take_item'</code></p>
<p><code>$usr_menu[1]='Осмотреть предмет:look_item'</code></p>
<p><code>$usr_menu[2]='-:-'</code></p>
<p><code>$usr_menu[3]='Положить предмет:put_item'</code></p>
</section>

<section id="faq_80_02_msg"><title>
<p>MSG</p>
</title>

<p>`MSG` — вывод указанного сообщения в диалоговом окне. Общая запись:</p>
<p><code>MSG [сообщение]</code></p>
<p>, где `[сообщение]` — любая строка текста. число, выражение любого типа. Примеры:</p>
<p>Примеры:</p>
<p><code>! простой вывод сообщения.</code></p>
<p><code>msg 'Много спелых груш.'</code></p>
<p><code>! получим окно с сообщением 'Много спелых груш'</code></p>
<p><code>! Пример сообщения в действии ACT.</code></p>
<p><code>act 'Поесть груш':</code></p>
<p><code>msg 'Ммм груши очень вкусные.'</code></p>
<p><code>end</code></p>
<p><code>! Получим вывод сообщения при клике по действию "Поесть груш"</code></p>
<p><code>!Пример с условием.</code></p>
<p><code>if hlebgotov = 1:</code></p>
<p><code>msg 'Похоже хлеб уже готов.'</code></p>
<p><code>end</code></p>
<p><code>! Получаем вывод сообщения когда условие hlebgotov = 1</code></p>
</section>

<section id="faq_80_02_nl"><title>
<p>NL</p>
</title>

<p>`NL` — переход на новую строку, затем вывод текста в окне основногодополнительного описания. Общая запись:</p>
<p><code>NL [$текст]</code></p>
<p>, где `[$текст]` — любая строка текста, число, или выражение любого типа. Если `[$текст]` отсутствует, происходит просто переход на новую строку. Пример:</p>
<p><code>p "Текст без перехода на новую строку."</code></p>
<p><code>nl "Переход на новую строку + выведение текста."</code></p>
<p><code>p "Текст без перехода на новую строку."</code></p>
</section>

<section id="faq_80_02_opengame"><title>
<p>OPENGAME</p>
</title>

<p>`OPENGAME` — загрузка указанного файла состояния игры. Общая запись:</p>
<p><code>OPENGAME [$путь]</code></p>
<p>, где `[$путь]` — путь к файлу сохранённого состояния игры. Если параметр `[$путь]` отсутствует, то вызывается окно загрузки состояния игры.</p>
<p>Пример:</p>
<p><code>! загрузка состояния из файла 1.sav</code></p>
<p><code>opengame "1.sav"</code></p>
<p><code>! открываем окно загрузки состояния</code></p>
<p><code>opengame</code></p>
<p>См. также локацию-обработчик события загрузки состояния игры (
<a l:href="#faq_80_04_ongload">
$ongload</a>).</p>

</section>

<section id="faq_80_02_openqst"><title>
<p>OPENQST</p>
</title>

<p>`OPENQST` — открытие и запуск указанного файла игры. Общая запись:</p>
<p><code>OPENQST [$путь]</code></p>
<p>, где [$путь] — путь к файлу игры, который требуется запустить. Пример:</p>
<p><code>openqst "gamespool/cubesgame.qsp"</code></p>
<p>При использовании данного оператора, не происходит удаления переменных, удаления предметов инвентаря, очистки дополнительного описания и строки ввода, а также остановки проигрываемых файлов. Если вам нужно очистить экран и значения всех переменных, можно прописать в начале загружаемого файла игры такие команды:</p>
<p><code>killall &amp; cls &amp; close all</code></p>
</section>

<section id="faq_80_02_p"><title>
<p>P</p>
</title>

<p>`P` — вывод текста в окно основного описания без перехода на новую строку. Вывод текста любым другим оператором сразу после p добавит новый текст сразу после текущего. Общая запись:</p>
<p><code>P [$текст]</code></p>
<p>, где `[$текст]` — любая строка текста, число, или выражение любого типа. `[$текст]` может быть пустой строкой '', но не должен отсутствовать. Пример:</p>
<p><code>p "Текст без перехода на новую строку."</code></p>
<p><code>p "Текст без перехода на новую строку."</code></p>
<p><code>p ""</code></p>
<p><code>p "Текст без перехода на новую строку."</code></p>
</section>

<section id="faq_80_02_pl"><title>
<p>PL</p>
</title>

<p>`PL` — вывод текста в окно основного описания, затем переход на новую строку. Общая запись:</p>
<p><code>PL [$текст]</code></p>
<p>, где `[$текст]` — любая строка текста, число, или выражение любого типа. `[$текст]` может отсутствовать, тогда просто переход на новую строку. Пример:</p>
<p><code>pl "Вывод текста, затем переход на новую строку."</code></p>
<p><code>pl "Вывод текста, затем переход на новую строку."</code></p>
<p><code>p "Текст без перехода на новую строку."</code></p>
<p><code>pl "Вывод текста, затем переход на новую строку."</code></p>
</section>

<section id="faq_80_02_play"><title>
<p>PLAY</p>
</title>

<p>`PLAY` — проигрывание указанного звукового файла с заданной громкостью. Общая запись:</p>
<p><code>PLAY [$путь к звуковому файлу],[#громкость]</code></p>
<p>, где `[$путь к звуковому файлу]` — путь к звуковому файлу относительно файла игры, `[#громкость]` — громкость воспроизведения в процентах от 0 до 100. Параметр `[#громкость]` может отсутствовать, при этом громкость принимается равной 100%. Примеры:</p>
<p><code>!Громкость 100%</code></p>
<p><code>play 'sound/music.mp3'</code></p>
<p><code>!Громкость 50%</code></p>
<p><code>play 'sound/music.mp3',50</code></p>
<p><code>!Громкость 0% (без звука)</code></p>
<p><code>play 'sound/music.mp3',0</code></p>
<p><code>!Проигрывание файла по адресу из переменной $file</code></p>
<p><code>! с расширением 'mid'</code></p>
<p><code>! и громкостью volume</code></p>
<p><code>$file="melody"</code></p>
<p><code>play '&lt;&lt;$file&gt;&gt;.mid',volume</code></p>
<p><code>! аналогично:</code></p>
<p><code>$file="melody.mid"</code></p>
<p><code>play $file,volume</code></p>
<p>Если файл уже проигрывается, то изменяется громкость звучания без его "перезапуска". Поддерживается множество различных аудиоформатов и одновременное звучание до 32-х композиций.</p>

</section>

<section id="faq_80_02_refint"><title>
<p>REFINT</p>
</title>

<p>`REFINT` — принудительное обновление интерфейса (в т.ч. смена цветов, шрифтов, назначенных с помощью системных переменных).</p>
<p>По умолчанию обновление интерфейса происходит 2 раза в секунду (каждые 500 мс). Так же см. оператор settimer.</p>

</section>

<section id="faq_80_02_savegame"><title>
<p>SAVEGAME</p>
</title>

<p>`SAVEGAME` — сохранение состояния игры в указанный файл. Общая запись:</p>
<p><code>SAVEGAME [$путь]</code></p>
<p>, где `[$путь]` — путь к создаваемому файлу сохранения состояния игры. Если параметр `[$путь]` отсутствует, то вызывается окно сохранения состояния игры.</p>
<p>Пример:</p>
<p><code>! сохранение состояния в файл 1.sav</code></p>
<p><code>savegame "1.sav"</code></p>
<p><code>! открываем окно сохранения состояния</code></p>
<p><code>savegame</code></p>
<p>См. также 
<a l:href="#faq_80_04_ongsave">
локацию-обработчик события сохранения состояния игры ($ongsave)</a>.</p>

</section>

<section id="faq_80_02_set"><title>
<p>SET</p>
</title>

<p>`SET` — устаревший оператор для установки значения переменной. Общая запись:</p>
<p><code>SET [название переменной]=[выражение]</code></p>
<p>, где `[название переменной]` — это допустимое имя переменной, `[выражение]` — это допустимое для данной переменной значение.</p>
<p>Названия числовых переменных записываются без символа `$` в начале. Названия текстовых переменных записываются с символом `$` в начале. Примеры:</p>
<p><code>! задаём текстовую переменную</code></p>
<p><code>set $text="text string"</code></p>
<p><code>! задаём числовую переменную</code></p>
<p><code>set abs=123</code></p>
<p>Данный оператор является устаревшим, как и оператор `let`, поскольку в настоящее время значение переменной устанавливается через присвоение:</p>
<p><code>$text="text string"</code></p>
<p>Использование операторов `set` и `let` не рекомендуется, так как они устарели.</p>

</section>

<section id="faq_80_02_settimer"><title>
<p>SETTIMER</p>
</title>

<p>`SETTIMER` — задаёт интервал обращения к локации-счётчику. Общая запись:</p>
<p><code>SETTIMER [#выражение]</code></p>
<p>, где `[#выражение]` — период обращения к локации-счётчику в миллисекундах. По умолчанию плеер обращается к локации-счётчику каждые 500 мс., т.е. 2 раза в секунду.</p>
<p>Установка периода обращения к локации-счётчику влияет и на частоту автоматического обновления настроек интерфейса.</p>
<p>Примеры:</p>
<p><code>! локация-счётчик будет запускаться каждые 2 секунды:</code></p>
<p><code>settimer 2000</code></p>
<p><code>! локация-счётчик будет запускаться 4 раза в секунду:</code></p>
<p><code>settimer 250</code></p>
<p><code>! если мы задаём частоту обращения (раз в секунду)</code></p>
<p><code>frequency=10 &amp; ! десять раз в секунду</code></p>
<p><code>settimer 1000/frequency</code></p>
<p><code>! если мы задаём период обращения (через сколько секунд)</code></p>
<p><code>period=2 &amp; ! каждые две секунды</code></p>
<p><code>settimer 1000*period</code></p>
<p>Минимальное значение периода таким образом может быть 1 миллисекунда:</p>
<p><code>settimer 1</code></p>
<p>Однако на практике минимальное значение ограничено мощностью вашего компьютера, и оно, как правило, выше 1 миллисекунды.</p>

</section>

<section id="faq_80_02_showacts"><title>
<p>SHOWACTS</p>
</title>

<p>`SHOWACTS` — управляет отображением окна действий на экране. Общая запись:</p>
<p><code>SHOWACTS [#выражение]</code></p>
<p>, где `[#выражение]` — это число. Обычно используются значения 0 и 1. Если значение выражения `[#выражение]` отлично от нуля, окно действий отображается. Если значение выражения `[#выражение]` равно нулю, окно действий скрыто. Примеры:</p>
<p><code>showacts 1 &amp; ! показывает список действий</code></p>
<p><code>showacts 0 &amp; ! скрывает список действий</code></p>
<p>Для удобства чтения кода можно заранее определить переменные on и off и использовать их:</p>
<p><code>on=1</code></p>
<p><code>off=0</code></p>
<p><code>showacts on &amp; ! показывает список действий</code></p>
<p><code>showacts off &amp; ! скрывает список действий</code></p>
</section>

<section id="faq_80_02_showinput"><title>
<p>SHOWINPUT</p>
</title>

<p>`SHOWINPUT` — управляет отображением строки ввода на экране. Общая запись:</p>
<p><code>SHOWINPUT [#выражение]</code></p>
<p>, где `[#выражение]` — это число. Обычно используются значения 0 и 1. Если значение выражения `[#выражение]` отлично от нуля, строка ввода отображается. Если значение выражения `[#выражение]` равно нулю, строка ввода скрыта. Примеры:</p>
<p><code>showinput 1 &amp; ! показывает строку ввода</code></p>
<p><code>showinput 0 &amp; ! скрывает строку ввода</code></p>
<p>Для удобства чтения кода можно заранее определить переменные on и off и использовать их:</p>
<p><code>on=1</code></p>
<p><code>off=0</code></p>
<p><code>showinput on &amp; ! показывает строку ввода</code></p>
<p><code>showinput off &amp; ! скрывает строку ввода</code></p>
</section>

<section id="faq_80_02_showobjs"><title>
<p>SHOWOBJS</p>
</title>

<p>`SHOWOBJS` — управляет отображением инвентаря на экране. Общая запись:</p>
<p><code>SHOWOBJS [#выражение]</code></p>
<p>, где `[#выражение]` — это число. Обычно используются значения 0 и 1. Если значение выражения `[#выражение]` отлично от нуля, инвентарь отображается. Если значение выражения `[#выражение]` равно нулю, инвентарь скрыт. Примеры:</p>
<p><code>showobjs 1 &amp; ! показывает инвентарь</code></p>
<p><code>showobjs 0 &amp; ! скрывает инвентарь</code></p>
<p>Для удобства чтения кода можно заранее определить переменные `on` и `off` и использовать их:</p>
<p><code>on=1</code></p>
<p><code>off=0</code></p>
<p><code>showobjs on &amp; ! показывает инвентарь</code></p>
<p><code>showobjs off &amp; ! скрывает инвентарь</code></p>
</section>

<section id="faq_80_02_showstat"><title>
<p>SHOWSTAT</p>
</title>

<p>`SHOWSTAT` — управляет отображением окна дополнительного описания на экране. Общая запись:</p>
<p><code>SHOWSTAT [#выражение]</code></p>
<p>, где `[#выражение]` — это число. Обычно используются значения 0 и 1. Если значение выражения `[#выражение]` отлично от нуля, окно дополнительного описания отображается. Если значение выражения `[#выражение]` равно нулю, окно дополнительного описания скрыто. Примеры:</p>
<p><code>showstat 1 &amp; ! показывает окно дополнительного описания</code></p>
<p><code>showstat 0 &amp; ! скрывает окно дополнительного описания</code></p>
<p>Для удобства чтения кода можно заранее определить переменные `on` и `off` и использовать их:</p>
<p><code>on=1</code></p>
<p><code>off=0</code></p>
<p><code>showstat on &amp; ! показывает окно дополнительного описания</code></p>
<p><code>showstat off &amp; ! скрывает окно дополнительного описания</code></p>
</section>

<section id="faq_80_02_unsel"><title>
<p>UNSELECT (UNSEL)</p>
</title>

<p>`UNSELECT` — отмена выделения предмета. Имеет краткую форму `unsel`.</p>
<p>При щелчке играющим по какому-либо предмету, он остаётся выделенным. Чтобы снять выделение с предмета используется данный оператор. Обычно его размещают на локации-обработчике выделения предмета.</p>
<p><code>if $selobj='Апельсин':</code></p>
<p><code>*P 'Вкусный сладкий апельсин. Много нас, а он один.'</code></p>
<p><code>end</code></p>
<p><code>if $selobj = 'Чайник':</code></p>
<p><code>p 'Самый обычный чугунный чайник.'</code></p>
<p><code>end</code></p>
<p><code>...</code></p>
<p><code>if $selobj='Отвёртка':</code></p>
<p><code>menu '$screwdriver'</code></p>
<p><code>end</code></p>
<p><code>unsel</code></p>
</section>

<section id="faq_80_02_view"><title>
<p>VIEW</p>
</title>

<p>`VIEW` — выводит на экран указанное изображение. В классическом плеере изображение выводится в отдельном окошке (окно предпросмотра), в AeroQSP и Quest Navigator изображение выводится верхним слоем в общем окне. Общая запись:</p>
<p><code>VIEW [$путь к графическому файлу]</code></p>
<p>, где `[$путь к графическому файлу]` — путь к файлу картинки. Если параметр `[$путь к графическому файлу]` отсутствует, или задан как `''` (пустая строка), окно предпросмотра закрывается.</p>
<p>Примеры:</p>
<p><code>! выводим изображение в окне предпросмотра</code></p>
<p><code>view 'content/monster.png'</code></p>
<p><code>! закрываем окно предпросмотра</code></p>
<p><code>view ''</code></p>
<p><code></code></p>
<p><code>! закрыть окно предпросмотра можно и так</code></p>
<p><code>view</code></p>
</section>

<section id="faq_80_02_wait"><title>
<p>WAIT</p>
</title>

<p>`WAIT` — приостановка выполнения кода программы на указанное количество миллисекунд. Общая запись:</p>
<p><code>WAIT [#миллисекунды]</code></p>
<p>, где `[#миллисекунды]` — время в миллисекундах, на какое следует остановить выполнение кода программы.</p>
<p>Пример:</p>
<p><code>! остановка выполнения программы на 5 секунд</code></p>
<p><code>wait 5000</code></p>
<p>Использовать данный оператор необходимо с осторожностью, поскольку приостановка выполнения кода блокирует для игрока возможность взаимодействовать с игрой.</p>
<p>`WAIT` не только прерывает выполнение кода, но так же засталяет плеер выводить на экран информацию из буфера экрана. При нормальном выполнении кода локации, весь текст для операторов 
<code><emphasis>
pl </emphasis>

p</code>

 pl nl и т.д. помещается в специальный буфер экрана, и уже после выполнения всего кода на локации выводится на экран. При использовании `WAIT` текст из буфера выводится сразу в момент выполнения `WAIT`, что иногда полезно, поскольку позволяет проследить изменение некоторых значений поэтапно.</p>
<p>В примере ниже числа сначала запишутся в буфер экрана и только потом появятся на экране:</p>
<p><code>loop i=0 while i&lt;5 step i+=1:</code></p>
<p><code>*p i</code></p>
<p><code>end</code></p>
<p><code>*pl</code></p>
<p>В следующем примере</p>

</section>

<section id="faq_80_02_xgoto"><title>
<p>XGOTO (XGT)</p>
</title>

<p>`XGOTO` — переход на указанную локацию без очистки окна основного описания. Общая запись:</p>
<p><code>XGOTO [$локация],[аргумент 0],[аргумент 1], ... ,[аргумент 8]</code></p>
<p>, где `[$локация]` — название локации, на которую должен быть осуществлён переход. Аргументы `[аргумент 0]`, `[аргумент 1]` и т.д. могут использоваться на этой локации, их значения автоматически помещаются в переменные `args[0]`, `args[1]`, и т.д. соответственно. Использование аргументов не обязательно.</p>
<p>При переходе на новую локацию при помощи `xgoto` не очищается окно основного описания, а базовое описание новой локации добавляется к уже имеющемуся тексту в окне основного описания. Список действий очищается, затем в окно действий выводятся базовые действия, а так же выполняется код из поля "Выполнить при посещении" локации `[$локация]`. Так же при переходе на новую локацию изменяется значение, возвращаемое функцией `$curloc`.</p>
<p>Примеры:</p>
<p><code>! переход на локацию "дом".</code></p>
<p><code>! Массив args на локации "дом" будет пуст.</code></p>
<p><code>xgoto 'дом'</code></p>
<p><code>! переход на локацию "улица" с передачей 2-х параметров.</code></p>
<p><code>! на локации "улица" args[0] равен 1,</code></p>
<p><code>! $args[1] содержит строку "данные".</code></p>
<p><code>xgoto 'улица',1,'данные'</code></p>
<p>Оператор имеет краткую форму xgt:</p>
<p><code>XGT [$локация],[аргумент 0],[аргумент 1], ... ,[аргумент 8]</code></p>
</section>

</section>
<section id="faq_80_03">
<title head-level="h2">
<p>Функции</p>
</title>

<section>
<br/>
<br/>
</section>

<section id="faq_80_03_curacts"><title>
<p>$CURACTS</p>
</title>

<p>`$CURACTS` —  данная функция возвращает выведенные на экран действия в виде кода QSP, как текстовое значение.</p>
<p>Действия сохраняются как набор операторов `act` с cответствующими параметрами и операциями.</p>
<p>Записав возвращённое функцией значение в переменную, можно восстановить действия с помощью оператора `dynamic`. Пример:</p>
<p><code>! записываем текущие действия в переменную</code></p>
<p><code>$actlist=$curacts</code></p>
<p><code>! восстанавливаем действия из переменной</code></p>
<p><code>dynamic $actlist</code></p>
</section>

<section id="faq_80_03_curloc"><title>
<p>$CURLOC</p>
</title>

<p>`$CURLOC` —  функция возвращает название текущей локации, т.е. локации, в которой "находится" игрок.</p>
<p>Технически это следует понимать так. В момент запуска игры плеер начинает выполнять код самой первой локации в игре, а когда код выполнен, плеер "останавливается" и ждёт участия игрока. Игрок может нажимать различные кнопки в игре, ссылки и выбирать пункты меню, что приводит к выполнению других блоков кода (например, действий) и переходам на новые локации по `goto` или `xgoto`. При таких переходах плеер вновь выполняет код других локаций и, когда код выполнен, "останавливается".</p>
<p>Так вот, когда на локацию осуществлён непосредственный переход (т.е. по `goto` или `xgoto`, либо это самая первая локация в игре), `$curloc` начинает возвращать название этой локации, — во всё время, пока выполняется код, и когда плеер "останавливается". Если после остановки не происходит переход по `goto`/`xgoto`, значение, которое возвращает `$curloc`, не меняется.</p>
<p>Пример использования:</p>
<p><code>act "— Где я нахожусь?": *pl "Это "+$curloc+"."</code></p>
</section>

<section id="faq_80_03_desc"><title>
<p>$DESC</p>
</title>

<p>`$DESC` —  возвращает текст базового описания локации с заданным названием. Общая запись:</p>
<p><code>$DESC([$локация])</code></p>
<p>, где `[$локация]` — это название интересующей нас локации. Например:</p>
<p><code>! возвращаем базовое описание локации "каморка_под_лестницей"</code></p>
<p><code>$desc('каморка_под_лестницей')</code></p>
<p><code>!возвращаем базовое описание текущей локации</code></p>
<p><code>$desc($curloc)</code></p>
<p>Если в базовом описании присутствуют подвыражения, функция автоматически раскрывает их.</p>
<p>Использование данной функции имеет смысл только если вы работает в редакторе `Quest Generator`, поскольку лишь из этого редактора доступно редактирование поля "Базовое описание" локации.</p>

</section>

<section id="faq_80_03_dyneval"><title>
<p>$DYNEVAL (DYNEVAL)</p>
</title>

<p>`DYNEVAL` —  выполняет код, переданный в виде строки текста, и возвращает результат, если он есть. Общая запись:</p>
<p><code>$DYNEVAL([$код],[аргумент 0],[аргумент 1], ... ,[аргумент 8])</code></p>
<p><code>DYNEVAL([$код],[аргумент 0],[аргумент 1], ... ,[аргумент 8])</code></p>
<p>, где `[$код]` — это обычный код QSP, записанный в виде текста. Выполнение такого кода аналогично выполнению кода функции `FUNC`. Аргументы `[аргумент 0]`, `[аргумент 1]` и т.д. могут использоваться внутри `[$код]`, их значения автоматически помещаются в переменные `args[0]`, `args[1]`, и т.д. соответственно.</p>
<p>Чтобы `dyneval` возвращала результат, необходимо внутри `[$код]` присвоить этот результат переменной `result`.</p>
<p>Примеры:</p>
<p><code>dyneval('result = 3+4')</code></p>
<p><code>*pl $dyneval('$result = mid("abcd",2,1)+"qwerty"')</code></p>
<p><code>проход=dyneval("result = ($args[0] &lt;&gt; 'текст')", 'строка')</code></p>
<p>Результат функции равен значению `$result` при возврате строкового значения или `result` при возврате числового значения. если при выполнении кода были установлены и `result`, и `$result`, то предпочтение отдаётся строковому значению. После выполнения кода предыдущие значения `args` и `result` восстанавливаются, затем продолжается выполнение кода после `dyneval`.</p>
<p>См. также 
<a l:href="#faq_80_02_dynamic">
оператор `DYNAMIC`</a>.</p>

</section>

<section id="faq_80_03_func"><title>
<p>$FUNC (FUNC)</p>
</title>

<p>`FUNC` —  выполнение кода указанной локации без непосредственного перехода на неё с возвращением значения.</p>
<p>Общая запись:</p>
<p><code>FUNC([$локация],[аргумент 0],[аргумент 1], ... ,[аргумент 8])</code></p>
<p><code>$FUNC([$локация],[аргумент 0],[аргумент 1], ... ,[аргумент 8])</code></p>
<p>, где `[$локация]` — это название локации, код которой мы хотим выполнить без непосредственного перехода на неё. Аргументы `[аргумент 0]`, `[аргумент 1]` и т.д. могут использоваться на этой локации, их значения автоматически помещаются в переменные `args[0]`, `args[1]`, и т.д. соответственно.</p>
<p>Базовое описание и список действий локации `[$локация]` добавляются к основному описанию и действиям старой локации. Так же происходит выполнение операторов в поле "Выполнить при посещении"</p>
<p>Результат функции равен значению `$RESULT` при возврате строкового значения или `RESULT` при возврате числового значения. Если при обработке локации были установлены и `RESULT`, и `$RESULT`, то предпочтение отдаётся строковому значению. После обработки локации предыдущие значения `ARGS` и `RESULT` восстанавливаются.</p>
<p>Примеры:</p>
<p><code>!Обработка локации "функция" как функции.</code></p>
<p><code>!Массив ARGS пуст.</code></p>
<p><code>яблоки = FUNC('функция')</code></p>
<p><code></code></p>
<p><code>!обработка локации с названием лежащим в переменной $name как функции. ARGS[0] равен 1.</code></p>
<p><code>pl func($name, 1) * 78</code></p>
<p><code></code></p>
<p><code>!обработка локации с названием в $name как функции.</code></p>
<p><code>!$ARGS[0] содержит строку "строка", ARGS[1] равен 2.</code></p>
<p><code>msg "text" + func($name, "строка", 2)</code></p>
<p><code></code></p>
<p><code>! код локации для функции, получающей сумму ряда чисел от единицы до указанного значения</code></p>
<p><code># summ</code></p>
<p><code>! в args[0] будет помещено число, которое мы укажем в качестве [аргумента 0]</code></p>
<p><code>:for</code></p>
<p><code>if args[0]&gt;0:</code></p>
<p><code>result=result+args[0]</code></p>
<p><code>args[0]=args[0]-1</code></p>
<p><code>jump 'for'</code></p>
<p><code>end</code></p>
<p><code>-----summ-----</code></p>
<p><code></code></p>
<p><code>! пример вызова локации "summ", как функции</code></p>
<p><code>*pl func("summ",19) &amp; ! выведет на экран 190</code></p>
<p><code>! пример вызова с записью названия локации в переменную</code></p>
<p><code>$name_loc="summ"</code></p>
<p><code>*pl func($name_loc,23) &amp; ! выведет на экран 276</code></p>
</section>

<section id="faq_80_03_getobj"><title>
<p>$GETOBJ</p>
</title>

<p>`$GETOBJ` —  возвращает название предмета в Окне предметов, расположенного в заданной позиции. Общая запись:</p>
<p><code>$GETOBJ([номер предмета])</code></p>
<p>Индексация (нумерация) предметов в Окне предметов ведётся с 1. Если предмета с индексом `[номер предмета]` не существует, возвращается пустая строка (`''`).</p>
<p>Примеры:</p>
<p><code>$getobj(1) &amp; ! вернёт название первого предмета в рюкзаке</code></p>
<p><code></code></p>
<p><code>$getobj(countobj) &amp; ! вернёт название последнего добавленного предмета</code></p>
<p>Код, подсчитывающий в массиве `OBJECTS` число предметов с одинаковым названием:</p>
<p><code>i = 1</code></p>
<p><code>:loop</code></p>
<p><code>if i&lt;=countobj:</code></p>
<p><code>objects[$getobj(i)] = objects[$getobj(i)] + 1</code></p>
<p><code>i = i + 1</code></p>
<p><code>jump 'loop'</code></p>
<p><code>end</code></p>
</section>

<section id="faq_80_03_iif"><title>
<p>$IIF (IIF)</p>
</title>

<p>`IIF` —  возвращает значение в зависимости от верности выражения.</p>
<p>Общая запись:</p>
<p><code>IIF([#выражение],[#выражение_да],[#выражение_нет])</code></p>
<p><code>$IIF([#выражение],[$выражение_да],[$выражение_нет])</code></p>
<p>Если `[#выражение]` верно, возвращает значение выражения `[выражение_да]`, в противном случае возвращает значение выражения `[выражение_нет]`. При выполнении функции вычисляются значения всех трёх выражений.</p>
<p>Примеры:</p>
<p><code>!Модуль числа</code></p>
<p><code>abs_x=iif(x&gt;0,x,-x)</code></p>
<p><code></code></p>
<p><code>!А следующая конструкция вызовет ошибку деления на ноль:</code></p>
<p><code>x=0</code></p>
<p><code>y=iif(x=0,0,1/x)</code></p>
<p><code></code></p>
<p><code>! типичное решение для вывода времени, чтобы не терять ноль на часах:</code></p>
<p><code>$iif(hour&gt;9,$str(hour),"0"+$str(hour))+":"+$iif(minute&gt;9,$str(minute),"0"+$str(minute))</code></p>
</section>

<section id="faq_80_03_input"><title>
<p>$INPUT</p>
</title>

<p>`$INPUT` —  возвращает интерпретатору введённый игроком текст, либо `''` (пустая строка), если была нажата кнопка "Отмена". Общая запись:</p>
<p><code>$INPUT([$текст])</code></p>
<p>, где `[$текст]` — это приглашение в диалоговом окне, которое видит игрок. Например:</p>
<p><code>$name = $input('Как звать тебя, герой?')</code></p>
<p>При выполнении данной команды на экране появится диалоговое окно с текстом "Как звать тебя, герой?", а выполнение остального кода приостановится, пока игрок не провзаимодействует с диалоговым окном.</p>
<p>Игрок может ввести или не ввести текст, и нажать кнопку "ОК" или "Отмена". Если игрок ввёл текст и нажал кнопку "ОК", функция `$input` вернёт переменной `$text` введённый игроком текст. Во всех остальных случаях после закрытия диалогового окна функция вернёт пустую строку (`''`).</p>
<p>Другие примеры:</p>
<p><code>! Вопрос с одним правильным ответом.</code></p>
<p><code>if $input('Что приходит после тьмы?')='свет':</code></p>
<p><code>msg 'Все верно.'</code></p>
<p><code>else</code></p>
<p><code>msg 'Ответ не верный.'</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>! Пример реализации вопроса с несколькими вариантами ответа из которых любой будет правильным.</code></p>
<p><code>$answer =$trim($lcase($input('Ответить')))</code></p>
<p><code>if instr($answer,'красный') or instr($answer,'желтый') or instr($answer,'зеленый'): gt 'win'</code></p>
<p><code>! Введя красный или зеленый ил желтый произойдет переход на локацию 'win'</code></p>
<p>Допустимо, но не одобряется, использовать функцию для возвращения числовых значений:</p>
<p><code>INPUT([$приглашение])</code></p>
<p>Это может привести к различным ошибкам в игре, если игрок введёт в диалоговом окне не только цифры. Например:</p>
<p><code>age=input('Сколько вам лет?')</code></p>
<p>Если игрок введёт вместо числа строку "24 года", плеер выдаст ошибку 101 "Несоответствие типов данных". Подобные ситуации должен предусматривать автор игры, а значит правильно будет озаботиться проверкой введённого значения уже после того, как функция $input будет выполнена.</p>
<p><code>:enter_text</code></p>
<p><code>! предлагаем игроку ответить на вопрос</code></p>
<p><code>! и присваиваем введённый текст переменной</code></p>
<p><code>$text=$input('Сколько вам лет?')</code></p>
<p><code>! если во введённом тексте содержатся не только цифры</code></p>
<p><code>! либо игрок не ввёл ответ</code></p>
<p><code>if isnum($text)&lt;&gt;-1 or $text="":</code></p>
<p><code>! предлагаем игроку снова ответить на вопрос</code></p>
<p><code>jump 'enter_text'</code></p>
<p><code>else</code></p>
<p><code>age=val($text)</code></p>
<p><code>end</code></p>
</section>

<section id="faq_80_03_lcase"><title>
<p>$LCASE</p>
</title>

<p>`$LCASE` —  возвращает строку маленьких букв, полученную изменением регистра букв исходной строки. Общая запись:</p>
<p><code>$LCASE([$текст])</code></p>
<p>, где `[$текст]` — любая строка текста.</p>
<p>Примеры:</p>
<p><code>$lcase('TExT#') &amp; ! вернёт 'text#'</code></p>
<p><code>$lcase('Привет, Алиса!') &amp; ! вернёт 'привет, алиса!'</code></p>
<p><code>$lcase('Я НЕ ХОЧУ НА ВАС ОРАТЬ.') &amp; ! вернёт 'я не хочу на вас орать.'</code></p>
</section>

<section id="faq_80_03_maintxt"><title>
<p>$MAINTXT</p>
</title>

<p>`$MAINTXT` —  возвращает текст, выведенный в окно основного описания.</p>
<p>Данная функция может быть полезна для замены части текста в окне основного описания, либо иной обработке текста. Пример:</p>
<p><code>! изначально мы вывели строку</code></p>
<p><code>*pl "Мы вывели на экран строку и в этой строке есть кусок, который мы хотим удалить."</code></p>
<p><code></code></p>
<p><code>! получаем текст из окна основного описания</code></p>
<p><code>$text=$maintxt</code></p>
<p><code>! вырезаем лишний кусок</code></p>
<p><code>$text_new=$replace($text," и в этой строке есть кусок, который мы хотим удалить")</code></p>
<p><code>! очищаем окно основного описания</code></p>
<p><code>*clr</code></p>
<p><code>! выводим новый текст</code></p>
<p><code>*p $text_new</code></p>
</section>

<section id="faq_80_03_max"><title>
<p>$MAX (MAX)</p>
</title>

<p>`MAX` —  возвращает максимальное из значений выражений-аргументов. Можно передавать от одного до девяти значений/аргументов. Если передан один аргумент, то считается, что указано имя массива. Общая запись:</p>
<p><code>MAX([#выражение 1],[#выражение 2], ... ,[#выражение 10])</code></p>
<p><code>$MAX([$выражение 1],[$выражение 2], ... ,[$выражение 10])</code></p>
<p><code></code></p>
<p><code>MAX([$название массива])</code></p>
<p><code>$MAX([$название массива])</code></p>
<p>Обратите внимание, при передаче одного аргумента поиск максимального элемента происходит среди строковых (если название массива указано со знаком `$`) или среди числовых значений элементов массива. Например:</p>
<p><code>max('a') &amp; ! вернёт максимальное из числовых значений элементов массива "a"</code></p>
<p><code>$max('$b') &amp; ! вернёт максимальное из строковых значений элементов массива "b"</code></p>
<p>Нельзя писать так и надеяться, что произойдёт поиск среди значений массива `a`:</p>
<p><code>max(a)</code></p>
<p>Можно так:</p>
<p><code>$b='a'</code></p>
<p><code>max($b) &amp; ! произойдёт поиск максимального значения среди элементов массива "a"</code></p>
<p>Другие примеры:</p>
<p><code>max(1,2,5,2,0) &amp;! вернёт 5</code></p>
<p><code>max(a,b,c) &amp;! вернёт максимальное из значений переменных a,b,c</code></p>
<p><code>$max('aa','ab','zz') &amp;! вернёт 'zz'</code></p>
</section>

<section id="faq_80_03_mid"><title>
<p>$MID</p>
</title>

<p>`$MID` —  позволяет вырезать из строки её часть. Общая запись:</p>
<p><code>$MID([$строка],[#начало],[#длина])</code></p>
<p>, где `[$строка]` — это строка текста, именно из неё функция вырезает часть, начиная с символа номер `[#начало]`, и длиной в `[#длина]` символов. Нумерация символов начинается с 1. Если отсутствует параметр `[#длина]`, вырезается часть до конца строки. Параметр `[#начало]` обязателен, и может в принципе принимать любые значения.</p>
<p><code>$mid('abcdef',1,2)    &amp;    ! 'ab'</code></p>
<p><code>$mid('abcdef',2,3)    &amp;    ! 'bcd'</code></p>
<p><code>$mid('abcdef',2)    &amp;    ! 'bcdef'</code></p>
<p><code>$mid('abcdef')        &amp;    ! 'ошибка [120] — неверное число аргументов оператора/функции'</code></p>
<p><code>$mid('abcdef',0)    &amp;    ! 'abcdef'</code></p>
<p><code>$mid('abcdef',8)    &amp;    ! ''</code></p>
</section>

<section id="faq_80_03_min"><title>
<p>$MIN (MIN)</p>
</title>

<p>`MIN` —  возвращает минимальное из значений выражений-аргументов. Можно передавать от одного до девяти значений/аргументов. Если передан один аргумент, то считается, что указано имя массива. Общая запись:</p>
<p><code>MIN([#выражение 1],[#выражение 2], ... ,[#выражение 10])</code></p>
<p><code>$MIN([$выражение 1],[$выражение 2], ... ,[$выражение 10])</code></p>
<p><code>MIN([$название массива])</code></p>
<p><code>$MIN([$название массива])</code></p>
<p>Обратите внимание, при передаче одного аргумента поиск минимального элемента происходит среди строковых (если название массива указано со знаком `$`) или среди числовых значений элементов массива. Например:</p>
<p><code>min('a')    &amp; ! вернёт минимальное из числовых значений элементов массива "a"</code></p>
<p><code>$min('$b')    &amp; ! вернёт минимальное из строковых значений элементов массива "b"</code></p>
<p>Нельзя писать так:</p>
<p><code>min(a)</code></p>
<p>Можно так:</p>
<p><code>$b='a'</code></p>
<p><code>min($b) &amp; ! произойдёт поиск максимального значения среди элементов массива "a"</code></p>
<p>Другие примеры:</p>
<p><code>min(1,2,5,2,0)    &amp;    ! вернёт 0</code></p>
<p><code>min(a,b,c)        &amp;    ! вернёт минимальное из значений переменных a,b,c</code></p>
<p><code>$min('aa','ab','zz') &amp; ! вернёт 'aa'</code></p>
</section>

<section id="faq_80_03_qspver"><title>
<p>$QSPVER</p>
</title>

<p>`$QSPVER` - возвращает версию интерпретатора в формате "X.Y.Z". Пример вызова:</p>
<p><code>if $qspver&lt;"5.7.0": *pl "Ваша версия плеера не подходит для этой игры. Установите плеер версии 5.7.0 или выше."</code></p>
</section>

<section id="faq_80_03_replace"><title>
<p>$REPLACE</p>
</title>

<p>`$REPLACE` —  общая запись:</p>
<p><code>$REPLACE([$строка],[$поиск],[$замена])</code></p>
<p>Данная функция заменяет в строке `[$строка]` все вхождения строки `[$поиск]` строкой `[$замена]` и возвращает результат. Если `[$замена]` отсутствует или указана пустая строка, то удаляет в исходной строке все вхождения искомой строки. Примеры:</p>
<p><code>$replace('test', '12', '4')    &amp; ! выведет на экран 'test'</code></p>
<p><code>$replace('test', 'e', 's')    &amp; ! выведет на экран 'tsst'</code></p>
<p><code>$replace('test', 't', '34')    &amp; ! выведет на экран '34es34'</code></p>
<p><code>$replace('test', 't')        &amp; ! выведет на экран 'es'</code></p>
<p><code>! можно присвоить значение переменной</code></p>
<p><code>$text="Строка текста с разными буквами."</code></p>
<p><code>! а новое значение вписать в другую переменную</code></p>
<p><code>$text_new=$replace($text,"ст","st")</code></p>
<p><code>*pl $text</code></p>
<p><code>*pl $text_new</code></p>
</section>

<section id="faq_80_03_selact"><title>
<p>$SELACT</p>
</title>

<p>`$SELACT` —  возвращает название выделенного действия в любом месте игры.</p>
<p>Следует помнить, что выделение действия происходит при наведении на него указателя мыши, а не при непосредственном нажатии.</p>
<p>Пример использования можно посмотреть в разделе 
<a l:href="#faq_80_04_onactsel">
`$onactsel`</a></p>

</section>

<section id="faq_80_03_selobj"><title>
<p>$SELOBJ</p>
</title>

<p>`$SELOBJ` —  возвращает название выделенного предмета в любом месте игры. Выделение предмета происходит в момент нажатия (щелчка мышью по предмету) и не снимается до применения команды `unselect`.</p>
<p>Пример использования можно посмотреть в разделе 
<a l:href="#faq_80_04_onobjsel">
`$onobjsel`</a></p>

</section>

<section id="faq_80_03_stattxt"><title>
<p>$STATTXT</p>
</title>

<p>`$STATTXT` —  возвращает текст, выведенный в окно дополнительного описания. Может быть полезна для замены части текста в окне дополнительного описания.</p>

</section>

<section id="faq_80_03_str"><title>
<p>$STR</p>
</title>

<p>`$STR` —  возвращает строку текста, полученную переводом числа в строку. Общая запись:</p>
<p><code>$STR([#число])</code></p>
<p>Пример:</p>
<p><code>$str(56) &amp; ! превратит число 56 в строку "56" и выведет на экран</code></p>
</section>

<section id="faq_80_03_strfind"><title>
<p>$STRFIND</p>
</title>

<p>`$STRFIND` —  возвращает подстроку, соответствующую регулярному выражению, из указанной строки. Общая запись:</p>
<p><code>$STRFIND([$строка],[$шаблон],[#номер])</code></p>
<p>, где `[$строка]` — исходная строка, в которой производим поиск вхождения, соответствующего регулярному выражению `[$шаблон]`, или группе номер `[#номер]` в регулярном выражении. Если подстрока с указанным номером отсутствует, то возвращается пустая строка. Нумерация групп подстрок начинается с 1. Если параметр `[#номер]` отсутствует или равен 0, то возвращается подстрока, соответствующая всему регулярному выражению `[$шаблон]`</p>
<p>Например, возьмём регулярное выражение:</p>
<p><code>'^(\S+)\s(\S+)\s(\S+)$'</code></p>
<p>Метасимвол `\S` означает любой непробельный символ, а квантификатор `+` указывает, что непробельные символы должны присутствовать один или более раз. Таким образом запись `\S+` можно условно сопоставить слову. Каждое слово с помощью скобок `()` выделено в отдельную группу, а между группами присутствуют пробельные символы `\s`. Метасимволы `^` и `$` означают соответственно начало и конец строки. Таким образом наше регулярное выражение соответствует любой строке из трёх слов, разделённых пробелами.</p>
<p>Тогда:</p>
<p><code>! в этом случае строка не соответствует регулярному выражению</code></p>
<p><code>! потому что согласно регулярному выражению строка должна начинаться</code></p>
<p><code>! с группы непробельных символов. Команда вернёт пустую строку ''</code></p>
<p><code>$strfind(' идти к пещере','^(\S+)\s(\S+)\s(\S+)$')</code></p>
<p><code>! в данном случае строка полностью соответствует регулярному выражению</code></p>
<p><code>! а значит команда вернёт строку полностью 'идти к пещере'</code></p>
<p><code>$strfind('идти к пещере','^(\S+)\s(\S+)\s(\S+)$')=''</code></p>
<p><code>! в следующих трёх примерах строка соответствует регулярному выражению</code></p>
<p><code>! однако третий аргумент указывает, какую именно группу из этого</code></p>
<p><code>! регулярного выражения мы хотим получить, поэтому каждая команда вернёт</code></p>
<p><code>! соответственно первое, второе и третье слова из строки</code></p>
<p><code>$strfind('идти к пещере','^(\S+)\s(\S+)\s(\S+)$',1) &amp; ! вернёт 'идти'</code></p>
<p><code>$strfind('идти к пещере','^(\S+)\s(\S+)\s(\S+)$',2) &amp; ! вернёт 'к'</code></p>
<p><code>$strfind('идти к пещере','^(\S+)\s(\S+)\s(\S+)$',3) &amp; ! вернёт 'пещере'</code></p>
<p><code>! здесь последняя группа непробельных символов объединена в одну</code></p>
<p><code>! группу с последним пробельным символом. Квантификатор "?" указывает,</code></p>
<p><code>! что эта группа может как присутствовать в строке, так и отсутствовать:</code></p>
<p><code>$strfind('идти к пещере','^(\S+)\s(\S+)(\s(\S+))?$',4) &amp; ! вернёт 'пещере'</code></p>
<p><code>$strfind('идти к пещере','^(\S+)\s(\S+)(\s(\S+))?$',3) &amp; ! вернёт ' пещере'</code></p>
<p><code>! этому же регулярному выражению соответствует и такая строка</code></p>
<p><code>$strfind('искать ключ','^(\S+)\s(\S+)(\s(\S+))?$',1) &amp; ! вернёт 'искать'</code></p>
<p><code>! а вот эта строка уже не соответствует регулярному выражению</code></p>
<p><code>$strfind('искать','^(\S+)\s(\S+)(\s(\S+))?$',1) &amp; ! вернёт ''</code></p>
<p>Следующие примеры показывают, как `$strfind` возвращает часть строки, соответствующую регулярному выражению:</p>
<p><code>$strfind('идти к дому','к\s(\S+)') &amp; ! вернёт 'к дому'</code></p>
<p><code>$strfind('идти к дому', 'к\s(\S+)', 1) &amp; ! вернёт 'дому'</code></p>
<p><code>$strfind('идти к своему дому','к\s(\S+)',1) &amp; ! вернёт 'своему'</code></p>
</section>

<section id="faq_80_03_trim"><title>
<p>$TRIM</p>
</title>

<p>`$TRIM` —  возвращает указанную строку без прилегающих символов табуляции и пробелов. Общая запись:</p>
<p><code>$TRIM([$выражение])</code></p>
<p>Например:</p>
<p><code>$trim('     trim test        ') &amp; ! вернёт 'trim test'</code></p>
</section>

<section id="faq_80_03_ucase"><title>
<p>$UCASE</p>
</title>

<p>`$UCASE` —  возвращает строку больших букв, полученную изменением регистра букв исходной строки. Общая запись:</p>
<p><code>$UCASE([$текст])</code></p>
<p>, где `[$текст]` — любая строка текста.</p>
<p>Примеры:</p>
<p><code>$ucase('TExT#') &amp; ! вернёт 'TEXT#'</code></p>
<p><code>$ucase('Привет, Алиса!') &amp; ! вернёт 'ПРИВЕТ, АЛИСА!'</code></p>
<p><code>$ucase('Я хочу на вас орать.') &amp; ! вернёт 'Я ХОЧУ НА ВАС ОРАТЬ.'</code></p>
</section>

<section id="faq_80_03_usrtxt"><title>
<p>$USER_TEXT ($USRTXT)</p>
</title>

<p>`$USER_TEXT` —  в любом месте игры возвращает текст, который находится в строке ввода (поле ввода). Имеет краткую форму `$usrtxt`. Пример смотри в разделе `$usercom`.</p>

</section>

<section id="faq_80_03_arrcomp"><title>
<p>ARRCOMP</p>
</title>

<p>`ARRCOMP` —  возвращает индекс элемента массива, соответствующего регулярному выражению. Поиск начинается с элемента с заданным номером; индексация элементов массива ведётся с нуля. Если указанное значение не найдено, функция возвращает -1. Общая запись:</p>
<p><code>ARRCOMP([#начало],[$имя_массива],[$шаблон])</code></p>
<p>, где `[#начало]` — номер элемента массива, с которого следует начать поиск, `[$имя_массива]` — название массива, по которому нужно произвести поиск, `[$шаблон]` — регулярное выражение, с которым будет сравниваться искомый элемент.</p>
<p>Параметр `[#начало]` может отсутствовать, при этом его значение принимается равным 0. Поиск ведётся только среди текстовых элементов массива.</p>
<p>Важно! В более новых версиях плеера (например, в Quest Navigator) параметр `[#начало]` переставлен в конец:</p>
<p><code>ARRCOMP([$имя_массива],[$шаблон],[#начало])</code></p>
<p>Для примера возьмём вот такой массив:</p>
<p><code>$mass[0]="топаю вперёд"</code></p>
<p><code>$mass[1]=" иду в пещеру"</code></p>
<p><code>$mass[2]="не иду в пещеру"</code></p>
<p><code>$mass[3]="топаю к дому"</code></p>
<p>Нам нужно найти элемент, значение которого состояит из трёх слов. В грубом приближении слово — это набор из одного или более непробельных символов `\S+`, по бокам от которого могут стоять или не стоять символы пробела `\s`, отсюда мы можем составить вот такое регулярное выражение:</p>
<p><code>\s?\S+\s\S+\s\S+\s?</code></p>
<p>Остаётся только выяснить какой элемент массива соответсвует шаблону:</p>
<p><code>arrcomp('$mass','\s?\S+\s\S+\s\S+\s?') &amp; ! этому выражению соответствует первый элемент</code></p>
<p>Если мы хотим проигнорировать первый элемент и начать поиск со второго:</p>
<p><code>arrcomp(2,'$mass','\s?\S+\s\S+\s\S+\s?') &amp; ! этому выражению соответствует третий элемент</code></p>
<p>А вот так мы можем вывести на экран значения всех элементов, содержащих слово "иду":</p>
<p><code>pos=0</code></p>
<p><code>:for</code></p>
<p><code>index=arrcomp(pos,'$mass','(.*\s|^)иду(\s.*|$)')</code></p>
<p><code>if index&lt;&gt;-1:</code></p>
<p><code>$mass[index]</code></p>
<p><code>pos=index+1</code></p>
<p><code>jump 'for'</code></p>
<p><code>end</code></p>
<p>Другие примеры:</p>
<p><code>! Поиск строки 'This' среди элементов массива "$A"</code></p>
<p><code>arrcomp(0,'$A','This')</code></p>
<p><code>! Поиск строки, соответствующей регулярному выражению "abc\d+"</code></p>
<p><code>! (первые два элемента массива игнорируются)</code></p>
<p><code>arrcomp(2,'$A','abc\d+')</code></p>
<p><code>! аналогично предыдущему примеру,</code></p>
<p><code>! но поиск осуществляется по всем элементам массива</code></p>
<p><code>arrcomp(0,'$A','.*string.*')</code></p>
<p><code></code></p>
<p><code>arrcomp('$A','This') &amp; ! эквивалентно 1му варианту</code></p>
</section>

<section id="faq_80_03_arrpos"><title>
<p>ARRPOS</p>
</title>

<p>`ARRPOS` —   возвращает индекс элемента массива, равного указанному значению. Поиск начинается с элемента с заданным номером; индексация элементов массива ведётся с нуля. Если указанное значение не найдено, функция возвращает -1. Общая запись:</p>
<p><code>ARRPOS([#начало],[$имя_массива],[значение])</code></p>
<p>, где `[#начало]` — номер элемента массива, с которого следует начать поиск, `[$имя_массива]` — название массива, по которому нужно произвести поиск, `[значение]` — число, или строка (в зависимости от типа массива), которое нужно найти в массиве.</p>
<p>Важно! В более новых версиях плеера (например, в Quest Navigator) параметр `[#начало]` переставлен в конец:</p>
<p><code>ARRPOS([$имя_массива],[$шаблон],[#начало])</code></p>
<p>Для примера возьмём такой массив:</p>
<p><code>$color[0]='красный'</code></p>
<p><code>$color[1]='жёлтый'</code></p>
<p><code>$color[2]='зелёный'</code></p>
<p><code>$color[3]='синий'</code></p>
<p><code>$color[4]='жёлтый'</code></p>
<p>Нам нужно найти элемент со значением "жёлтый":</p>
<p><code>arrpos('$color','жёлтый') &amp; ! вернёт значение 1</code></p>
<p>Если мы хотим проигнорировать первые два элемента:</p>
<p><code>arrpos(2,'$color','жёлтый') &amp; ! вернёт значение 4</code></p>
<p>Если мы хотим найти элемент со значением, которого нет в массиве:</p>
<p><code>arrpos('$color','голубой') &amp; ! вернёт значение -1</code></p>
<p>Другие примеры:</p>
<p><code>! поиск строки 'this' в текстовом массиве "$a"</code></p>
<p><code>arrpos(0,'$a','this')</code></p>
<p><code>! поиск числа 65 в массиве "a" (два элемента массива игнорируются)</code></p>
<p><code>arrpos(2,'a',65)</code></p>
<p><code>! поиск строки 'test' среди значений массива "$b"</code></p>
<p><code>arrpos('$b','test')</code></p>
</section>

<section id="faq_80_03_arrsize"><title>
<p>ARRSIZE</p>
</title>

<p>`ARRSIZE` —  функция возвращает число элементов массива. Общая запись:</p>
<p><code>ARRSIZE([$имя_массива])</code></p>
<p>, где `[$имя_массива]` — название массива, размер которого хотим получить.</p>
<p>В силу особенностей движка плеера, не важно, указывается ли название текстового, или числового, массива, возвращено будет наибольшее значение. Для примера:</p>
<p><code>$a[0]='0'</code></p>
<p><code>$a[1]='1'</code></p>
<p><code>a[0]=1</code></p>
<p><code>a[1]=2</code></p>
<p><code>a[2]=3</code></p>
<p><code></code></p>
<p><code>arrsize('$a')    &amp; ! вернёт значение 3</code></p>
<p><code>arrsize('a')    &amp; ! вернёт значение 3</code></p>
<p><code></code></p>
<p><code>$b[0]='0'</code></p>
<p><code>$b[1]='1'</code></p>
<p><code>$b[2]='2'</code></p>
<p><code>b[0]=1</code></p>
<p><code>b[1]=2</code></p>
<p><code></code></p>
<p><code>arrsize('$b')    &amp; ! вернёт значение 3</code></p>
<p><code>arrsize('b')    &amp; ! вернёт значение 3</code></p>
</section>

<section id="faq_80_03_countobj"><title>
<p>COUNTOBJ</p>
</title>

<p>`COUNTOBJ` —  возвращает количество предметов в инвентаре.</p>
<p>Номер последнего предмета в списке численно совпадает с количеством предметов, поэтому всегда можно получить название последнего предмета так:</p>
<p><code>$getobj(countobj)</code></p>
</section>

<section id="faq_80_03_instr"><title>
<p>INSTR</p>
</title>

<p>`INSTR` —  возвращает номер символа, с которого начинается вхождение подстроки в строку. Общая запись:</p>
<p><code>INSTR([#начало],[$строка],[$подстрока])</code></p>
<p>, где `[#начало]` — это номер символа, с которого нужно начинать поиск, `[$строка]` — это текстовое значение (строка), по которому нужно производить поиск, а `[$подстрока]` — значение, которое мы ищем в указанной строке. Нумерация символов начианется с 1. Параметр `[#начало]` может отсутствовать, при этом он принимается равным 1.</p>
<p>Примеры:</p>
<p><code>instr(3,'abcdefabcdef','bc')    &amp; ! вернёт число 8</code></p>
<p><code>instr('abcdefghijklm','abc')    &amp; ! вернёт число 1</code></p>
<p>Если ни одного вхождения указанной подстроки в строке нет, instr возвращает 0.</p>
<p>Пример:</p>
<p><code>instr('Вася вышел из дома.','идти') &amp; ! вернёт 0</code></p>
<p>Важно: в более новых версиях (Quest Navigator) необязательный параметр `[#начало]` переставлен в конец:</p>
<p><code>INSTR([$строка],[$подстрока],[#начало])</code></p>
</section>

<section id="faq_80_03_isnum"><title>
<p>ISNUM</p>
</title>

<p>`ISNUM` —  функция возвращает -1 (истина), если переданная строка является числом, и  — 0, если строка не является числом. Общая запись:</p>
<p><code>ISNUM([$строка])</code></p>
<p>, где `[$строка]` — любая строка текста.</p>
<p>При проверке учитываются знак `-` в начале, прилегающие пробелы и символы табуляции, но кроме того, если хотя бы один символ окажется не цифрой, функция вернёт 0 (ложь).</p>
<p>Примеры:</p>
<p><code>isnum(' 9999 ') &amp; ! вернёт -1</code></p>
<p><code>isnum(' -888')  &amp; ! вернёт -1</code></p>
<p><code>isnum('777a6')  &amp; ! вернёт 0</code></p>
<p><code>isnum('')       &amp; ! вернёт -1, так как нет ни одной не-цифры (пустая строка считается нулём)</code></p>
</section>

<section id="faq_80_03_isplay"><title>
<p>ISPLAY</p>
</title>

<p>`ISPLAY` —  функция проверяет, проигрывается ли в данный момент файл с указанным названием, и если проигрывается, возвращает -1. В противном случае функция возвращает 0. Общая запись:</p>
<p><code>ISPLAY([$путь_к_файлу])</code></p>
<p>, где `[$путь_к_файлу]` — путь к звуковому файлу относительно файла игры.</p>
<p>Пример:</p>
<p><code>isplay('music/mountsound.mp3')</code></p>
</section>

<section id="faq_80_03_len"><title>
<p>LEN</p>
</title>

<p>`LEN` —  возвращает длину указанной строки текста (количество символов). Общая запись:</p>
<p><code>LEN([$текст])</code></p>
<p>, где `[$текст]` — любое текстовое значение.</p>
<p>Примеры:</p>
<p><code>len("abc") &amp; ! вернёт значение 3</code></p>
<p><code>len("тысячадевятьсотвосьмидесятидевятимиллиметровый") &amp; ! вернёт значение 46</code></p>
<p><code>len("") &amp; ! вернёт значение 0</code></p>
</section>

<section id="faq_80_03_msecscount"><title>
<p>MSECSCOUNT</p>
</title>

<p>`MSECSCOUNT` —  возвращает количество миллисекунд, прошедших с момента начала игры. Данная функция при использовании на локации-счётчике позволяет организовывать различные события, происходящие в реальном времени. Так же, с помощью этой функции можно делать замеры быстродействия различных участков кода в вашей игре:</p>
<p><code>i=0</code></p>
<p><code>old_time=msecscount</code></p>
<p><code>:for</code></p>
<p><code>if i&lt;100000:</code></p>
<p><code>a[i]=i</code></p>
<p><code>i+=1</code></p>
<p><code>jump 'for'</code></p>
<p><code>end</code></p>
<p><code>new_time=msecscount</code></p>
<p><code>pl new_time-old_time</code></p>
</section>

<section id="faq_80_03_rand"><title>
<p>RAND</p>
</title>

<p>`RAND` —  возвращает случайное число между двумя указанными числами. Общая запись:</p>
<p><code>RAND([#выражение 1],[#выражение 2])</code></p>
<p>, где `[#выражение 1]` и `[#выражение 2]` — два любых числа или числовых выражения. Параметр `[#выражение 2]` может отсутствовать, при этом он принимается равным нулю (в более новых версиях плеера, например Quest Navigator, данный параметр по умолчанию равен единице).</p>
<p>Примеры:</p>
<p><code>rand(1,4) &amp;! вернёт случайное значение от 1 до 4</code></p>
<p><code>rand(4,1) &amp;! вернёт случайное значение от 1 до 4</code></p>
<p><code>rand(1000) &amp;! вернёт случайное значение от 0(1) до 1000</code></p>
<p><code>rand 1000 &amp;! вернёт случайное значение от 0(1) до 1000</code></p>
</section>

<section id="faq_80_03_rgb"><title>
<p>RGB</p>
</title>

<p>`RGB` —  возвращает числовой код цвета на основе трёх числовых аргумнтов, каждый из которых соответствует составляющей требуемого цвета. Общая запись:</p>
<p><code>RGB([#красный],[#зелёный],[#синий])</code></p>
<p>, где `[#красный]`,`[#зелёный]` и `[#синий]` — числовое выражение трёх составляющих цвета соответсвенно красной, зелёной и синей; должны принимать значения от 0 до 255.</p>
<p>Данная функция обычно используется совместно с системными переменными `bcolor`, `fcolor`, `lcolor`. Пример:</p>
<p><code>! гиперссылки светло-жёлтого цвета</code></p>
<p><code>lcolor=rgb(255,255,100)</code></p>
<p><code>! фон тёмно-серого цвета</code></p>
<p><code>bcolor=rgb(25,25,25)</code></p>
<p><code>! текст светло-зелёного цвета</code></p>
<p><code>fcolor=rgb(100,255,100)</code></p>
</section>

<section id="faq_80_03_rnd"><title>
<p>RND</p>
</title>

<p>`RND` - возвращает случайное значение от 1 до 1000. Аналогично команде:</p>
<p><code>rand(1,1000)</code></p>
</section>

<section id="faq_80_03_strcomp"><title>
<p>STRCOMP</p>
</title>

<p>`STRCOMP` —  проводит сравнение строки с регулярным выражением и, если строка соответствует регулярному выражению, возвращает -1 (истина), а если не соответствует — 0 (ложь). Общая запись:</p>
<p><code>STRCOMP([$строка],[$шаблон])</code></p>
<p>, где `[$строка]` — любое текстовое значение, `[$шаблон]` — регулярное выражение, с которым производится сравнение.</p>
<p>Например, нам нужно проверить, состоит ли указанная строка из трёх слов. Каждое слово, в грубом виде, это набор непробельных символов, значит мы можем воспользоваться метасимволом `\S` и квантификатором `+`. Слова обычно разделены пробельными символами, для чего мы используем метасимвол `\s`. Получается вот такое регулярное выражение:</p>
<p><code>"\s?\S+\s+\S+\s+\S+\s?"</code></p>
<p>Теперь мы можем проверить, какие строки соответствуют этому регулярному выражению:</p>
<p><code>strcomp('иду по дороге','\s?\S+\s+\S+\s+\S+\s?') &amp; ! вернёт -1</code></p>
<p><code>strcomp(' иду домой','\s?\S+\s+\S+\s+\S+\s?') &amp; ! вернёт 0</code></p>
<p><code>strcomp(' иду в лес ','\s?\S+\s+\S+\s+\S+\s?') &amp; ! вернёт -1</code></p>
<p><code>strcomp('однословие','\s?\S+\s+\S+\s+\S+\s?') &amp; ! вернёт 0</code></p>
</section>

<section id="faq_80_03_strpos"><title>
<p>STRPOS</p>
</title>

<p>`STRPOS` —  возвращает позицию символа, с которого начинается вхождение подстроки, соответствующей регулярному выражению, в указанную строку. Общая запись:</p>
<p><code>STRPOS([$строка],[$шаблон],[#номер])</code></p>
<p>, где `[$строка]` — исходная строка, в которой производим поиск вхождения, соответствующего регулярному выражению `[$шаблон]`, или группе номер `[#номер]` в регулярном выражении. Нумерация групп в регулярном выражении начинается с 1. Если подстрока с указанным номером отсутствует, то возвращается 0.</p>
<p>Если параметр `[#номер]` отсутствует или равен 0, то возвращается позиция символа, с которого начинается вхождение подстроки, соответствующей всему регулярному выражению.</p>
<p>Например, нам нужно выяснить, в какой части текста встречается словосочетание "зелёное яблоко", однако при этом не должно быть важно, в каком падеже записано это прилагательное.</p>
<p>Чтобы написать регулярное выражение для этой задачи, нам нужно предусмотреть все падежи:</p>
<p><code>зелёное яблоко</code></p>
<p><code>зелёного яблока</code></p>
<p><code>зелёному яблоку</code></p>
<p><code>зелёное яблоко</code></p>
<p><code>зелёным яблоком</code></p>
<p><code>зелёном яблоке</code></p>
<p>Как видим, во всех формах меняются только окончания слов. Поэтому мы можем составить вот такое регулярное выражение:</p>
<p><code>"зелён(ое|ого|ому|ым|ом)\s+яблок(о|а|у|ом|е)"</code></p>
<p>Через прямую черту в скобках перечисленны возможные варианты окончаний. А теперь выясним, с какого символа в строке начинается возможное слвовосочетание "зелёное яблоко":</p>
<p><code>! для удобства регулярное выражение помещаем в переменную</code></p>
<p><code>$regexp="зелён(ое|ого|ому|ым|ом)\s+яблок(о|а|у|ом|е)"</code></p>
<p><code>strpos("У меня есть зелёное яблоко",$regexp) &amp; ! вернёт 13</code></p>
<p><code>strpos("Ты швырнул в него зелёным яблоком!",$regexp) &amp; ! вернёт 19</code></p>
<p><code>strpos("полный ящик зелёных яблок",$regexp) &amp; ! вернёт 0, потому что такую форму мы не учли</code></p>
<p>Если мы не просто хотим узнать, с какого символа начинается вхождение в строку словосочетания, но где начинается вхождение слово "яблоко" из этого словосочетания, нам нужно выделить слово "яблоко" с вариантами окончаний в отдельную группу и воспользоваться параметром `[#номер]`:</p>
<p><code>$regexp="зелён(ое|ого|ому|ым|ом)\s+(яблок(о|а|у|ом|е))"</code></p>
<p><code>strpos("У меня есть зелёное яблоко",$regexp,2) &amp; ! вернёт 21</code></p>
<p><code>strpos("Ты швырнул в него зелёным яблоком!",$regexp,2) &amp; ! вернёт 27</code></p>
<p><code>strpos("полный ящик зелёных яблок",$regexp,2) &amp; ! вернёт 0, потому что мы не учли форму</code></p>
</section>

<section id="faq_80_03_val"><title>
<p>VAL</p>
</title>

<p>`VAL` —  переводит указанную строку цифр в соответствующее число. Общая запись:</p>
<p><code>VAL([$выражение])</code></p>
<p>, где `[$выражение]` — любая строка текста.</p>
<p>При проверке учитываются знак `-` в начале, прилегающие пробелы и символы табуляции, но кроме того, если хотя бы один символ окажется не цифрой, функция вернёт 0. Так же если `[$выражение]` равно `''` (пустая строка), то возвращается 0.</p>
<p>Пример:</p>
<p><code>яблоки=val($яблоки)</code></p>
</section>

</section>
<section id="faq_80_04">
<title head-level="h2">
<p>Системные переменные</p>
</title>

<section>
</section>

<section id="faq_80_04_backimage"><title>
<p>$BACKIMAGE</p>
</title>

<p>`$BACKIMAGE` —  содержит путь к файлу фонового изображения для окна основного описания. Фон в окне основного описания отображается в том случае, если значение данной переменной отлично от '' (т.е. не пустая строка) и файл изображения удалось загрузить.</p>
<p>Пример:</p>
<p><code>$backimage="img/bg.png" &amp; ! устанавливаем фоновым изображение, которое лежит в папке "img".</code></p>
<p><code>$backimage="" &amp; ! убираем изображение из фона окна основного описания.</code></p>
</section>

<section id="faq_80_04_counter"><title>
<p>$COUNTER</p>
</title>

<p>`$COUNTER` —  содержит название локации-счётчика. Локация-счётчик может использоваться для реалтаймовых событий (то есть событий, происходящих в действительном времени); например, плавное изменение цвета фона, постепенный вывод текста на экран, плейлист для постоянного проигрывания музыки и другие.</p>
<p>Локация-счетчик вызывается через одинаковые промежутки времени, по умолчанию каждые 500 мс, т.е. 2 раза в секунду. Автоматическое обновление интерфейса срабатывает с той же частотой. Промежутки задаются оператором `settimer` в миллисекундах.</p>
<p>Если ваша локация-счётчик называется "Счётчик", на самой первой локации в игре нужно написать:</p>
<p><code>$counter='Счётчик'</code></p>
<p>Как правило, чтобы не путаться, локацию называют так же, как и служебную переменную — "Counter":</p>
<p><code>$counter='Counter'</code></p>
<p>Чтобы отключить выполнение локации-счётчика, нужно задать пустое значение переменной `$COUNTER`:</p>
<p><code>$counter=""</code></p>
</section>

<section id="faq_80_04_fname"><title>
<p>$FNAME</p>
</title>

<p>`$FNAME` —  содержит название используемого в данный момент шрифта. Если равна `''` (пустая строка), то используется шрифт, заданный в настройках программы.</p>
<p>Пример:</p>
<p><code>! устанавливаем для всей игры шрифт Courier New</code></p>
<p><code>$fname="Courier New"</code></p>
</section>

<section id="faq_80_04_onactsel"><title>
<p>$ONACTSEL</p>
</title>

<p>`$ONACTSEL` —  содержит название локации-обработчика события "выделение действия". Иными словами, в этой переменной указывается название локации, код на которой срабатывает, когда одно из выведенных на экран действий выделено.</p>
<p>Следует помнить, что выделение действия происходит при наведении на него указателя мыши, а не при непосредственном нажатии.</p>
<p>Назначаем в качестве локации-обработчика события "выделение действия" локацию "on_mouse":</p>
<p><code>$onactsel="on_mouse"</code></p>
<p>Данная локация полезна, к примеру, для вывода изображений или проигрывания звуков при выборе действий. Получить название выбранного действия можно через функцию `$selact`.</p>
<p><code>if instr(1,$selact,'пойти'): play 'sounds\walk.mp3'</code></p>
<p>Чтобы отключить локацию-обработчик события "выделение действия", нужно задать переменной `$onactsel` пустое значение:</p>
<p><code>$onactsel=""</code></p>
</section>

<section id="faq_80_04_ongload"><title>
<p>$ONGLOAD</p>
</title>

<p>`$ONGLOAD` —  содержит название локации-обработчика события "загрузка состояния игры" (далее "обработчик загрузки состояния"). Иными словами, в эту переменную записывается название локации, код которой будет выполняться всякий раз после того, как был загружен файл сохранения состояния игры ("файл сохранения") с помощью команды opengame.</p>
<p>Назначаем в качестве обработчика загрузки состояния локацию "on_game_load":</p>
<p><code>$ongload="on_game_load"</code></p>
<p>Чтобы отключить обработчик загрузки состояния, нужно задать переменной `$ongload` пустое значение:</p>
<p><code>$ongload=""</code></p>
</section>

<section id="faq_80_04_ongsave"><title>
<p>$ONGSAVE</p>
</title>

<p>`$ONGSAVE` - содержит название локации-обработчика события "сохранение состояния игры" (далее "обработчик сохранения состояния"). Иными словами, в эту переменную записывается название локации, код которой будет выполняться всякий раз после того, как было записано состояние игры в новый или уже существующий файл сохранения состояния игры ("файл сохранения") с помощью команды `savegame`.</p>
<p>Назначаем в качестве обработчика сохранения состояния локацию "on_game_save":</p>
<p><code>$ongsave="on_game_save"</code></p>
<p>Чтобы отключить обработчик сохранения состояния, нужно задать переменной `$ongsave` пустое значение:</p>
<p><code>$ongsave=""</code></p>
</section>

<section id="faq_80_04_onnewloc"><title>
<p>$ONNEWLOC</p>
</title>

<p>`$ONNEWLOC` —  содержит название локации-обработчика перехода на новую локацию (аналог локации "common" в URQ). Иными словами, в эту переменную записывается название локации, код которой выполняется каждый раз после выполнения кода локации, на которую был осуществлён переход с помощью операторов `goto` или `xgoto`. Управление игрой передаётся игроку уже после выполнения кода на этой локации-обработчике.</p>
<p>Назначаем в качестве обработчика перехода на новую локацию локацию "on_goto_newloc":</p>
<p><code>$onnewloc="on_goto_newloc"</code></p>
<p>Получить название локации, на которую был осуществлён переход, можно с помощью функции `$curloc`.</p>
<p><code>if $curloc = 'дом': кошка = 1</code></p>
<p>Чтобы отключить локацию-обработчик перехода на новую локацию, нужно задать переменной `$onnewloc` пустое значение:</p>
<p><code>$onnewloc=""</code></p>
</section>

<section id="faq_80_04_onobjadd"><title>
<p>$ONOBJADD</p>
</title>

<p>`$ONOBJADD` —  содержит название локации-обработчика события "добавление предмета". Иными словами, в эту переменную записывается название локации, код которой выполняется всякий раз после добавления предмета в окно предметов с помощью команды `addobj`.</p>
<p>При добавлении предмета этой локации-обработчику передаются два аргумента, значения которых можно получить из `$args[0]` и `$args[1]` соответственно:</p>
<p>* 
$ARGS[0] - название добавленного предмета</p>
<p>* 
$ARGS[1] - путь к картинке добавленного предмета</p>
<p>Данная локация полезна, к примеру, для ограничения вместительности рюкзака.</p>
<p>Назначаем в качестве локации-обработчика события "добавление предмета" локацию "on_object_add":</p>
<p><code>$onobjadd="on_object_add"</code></p>
<p>Чтобы отключить локацию-обработчик события "добавление предмета", нужно задать переменной `$onobjadd` пустое значение:</p>
<p><code>$onobjadd=""</code></p>
</section>

<section id="faq_80_04_onobjdel"><title>
<p>$ONOBJDEL</p>
</title>

<p>`$ONOBJDEL` —  содержит название локации-обработчика события "удаление предмета". Иными словами, в эту переменную записывается название локации, код которой вполняется всякий раз при удалении предмета с помощью команды `delobj`. Если воспользоваться командой `killobj`, то это будет аналогично серии команд `delobj`, соответственно и локация-обработчик будет вызвана столько раз, сколько предметов будет удалено с помощью `killobj`.</p>
<p>При использовании команды `killall` локация-обработчик удаления предмета не вызывается, поскольку системная переменная `$onobjdel` уничтожается.</p>
<p>При удалении предмета этой локации-обработчику передаётся аргумент, значение которого можно получить из `$args[0]`:</p>
<p>* 
$ARGS[0] - название удалённого предмета</p>
<p>Назначаем в качестве локации-обработчика события "удаление предмета" локацию "on_object_del":</p>
<p><code>$onobjdel="on_object_del"</code></p>
<p>Данная локация полезна, к примеру, для проверки возможности удаления предмета:</p>
<p><code>! например есть предмет, который нам пригодится по сюжету</code></p>
<p><code>if $args[0]="Важный артефакт":</code></p>
<p><code>! восстанавливаем предмет</code></p>
<p><code>addobj $args[0]</code></p>
<p><code>end</code></p>
<p>Чтобы отключить локацию-обработчик события "удаление предмета", нужно задать переменной `$onobjdel` пустое значение:</p>
<p><code>$onobjdel=""</code></p>
</section>

<section id="faq_80_04_onobjsel"><title>
<p>$ONOBJSEL</p>
</title>

<p>`$ONOBJSEL` —  содержит название локации-обработчика события "выделение предмета" (далее "локация-обработчик выделения предмета"). Иными словами, в этой переменной указывается название локации, код на которой выполняется всякий раз при выделении предмета. Выделение предмета происходит непосредственно при "нажатии" на предмет (щелчок мышью по предмету).</p>
<p>Назначаем в качестве локации-обработчика выделения предмета локацию "on_object_select":</p>
<p><code>$onobjsel="on_object_select"</code></p>
<p>Данная локация полезна, к примеру, для выводаинформации о предмете, или меню предмета. Получить название выбранного предмета можно через функцию `$selobj`.</p>
<p><code>if $selobj = 'чайник':</code></p>
<p><code>p 'Cамый обычный чугунный чайник.'</code></p>
<p><code>end</code></p>
<p>При выборе играющим какого-либо предмета, он остаётся выделенным. Снять выделение можно командой `unselect`.</p>

</section>

<section id="faq_80_04_usercom"><title>
<p>$USERCOM</p>
</title>

<p>`$USERCOM` —  содержит название локации-обработчика строки ввода (поля ввода). Код данной локации-обработчика выполняется, если курсор установлен в строку ввода в момент нажатия клавиши "Enter" .</p>
<p>Назначаем в качестве локации-обработчика строки ввода локацию "user_command_line":</p>
<p><code>$usercom="user_command_line"</code></p>
<p>Полезна при организации парсера (управление игрой с помощью строки ввода), или для организации отладчика. Пример кода для локации-обработчика:</p>
<p><code>! если введённый текст соответствует названию существующей локации</code></p>
<p><code>if (loc $user_text)=-1:</code></p>
<p><code>! осуществляем переход на эту локацию</code></p>
<p><code>goto $user_text</code></p>
<p><code>end</code></p>
</section>

<section id="faq_80_04_args"><title>
<p>ARGS ($ARGS)</p>
</title>

<p>`ARGS` —  специфический системный массив, в который помещаются значения аргументов, передаваемых пользователем при обращении к локации или коду, записанному в виде текста. Пример:</p>
<p><code>gosub "#array.srtd#","$mass","rug","$time_ar"</code></p>
<p>Здесь на локацию "#array.srtd#" будут переданы три аргумента, которые поместятся в первые три ячейки массива `$args` соответсвенно. То есть в момент начала выполнения кода на локации "#array.srtd#" в `$args[0]` уже будет присутствовать значение "$mass", в `$args[1]` — значение "rug", в `$args[2]` — значение "$time_ar".</p>
<p>При использовании операторов `gosub`, `goto`, `xgoto`, `dynamic` и функций `dyneval`, `func` можно указать до девяти таких аргументов, и все они будут помещены в ячейки массива args с нулевой по восьмую. Однако, поскольку `args` — это всё же массив, вы можете работать с ним, как с обычным массивом, т.е. использовать больше десяти ячеек, назначать текстовые индексы и т.д.</p>
<p>Отличительной особенностью массива `args` является то, что для каждого отдельного блока кода создаётся свой собственный массив `args`. То есть если вы из локации 1 вызываете локацию 2, то на локации 1 действует собственный массив `args`, а на локации 2 — собственный, и значения в этих массивах не пересекаются.</p>
<p>Пример:</p>
<p><code># локация_1</code></p>
<p><code>args[0]=23</code></p>
<p><code>gosub "локация_2",34</code></p>
<p><code>args[0]</code></p>
<p><code>-</code></p>
<p><code></code></p>
<p><code># локация_2</code></p>
<p><code>args[0]</code></p>
<p><code>-</code></p>
<p>Запустив этот код, вы увидите, что сначала будет выведено число 34, и только затем 23.</p>
<p>Более того, если вы сделаете рекурсивный вывод локации самой из себя, то для каждого вызова локации будет создан собственный набор массивов. Таким образом массив `args` является локальным для каждого отдельного вызова блока кода.</p>
<p>Отдельными блоками кода в QSP считаются:</p>
<p>* 
код локаций</p>
<p>* 
код действий</p>
<p>* 
код, передаваемый `dynamic`/`dyneval`</p>
<p>* 
код в гиперссылках</p>
<p>Для каждой отдельной сессии таких блоков кода плеер будет создавать собственный массив `args`.</p>

</section>

<section id="faq_80_04_bcolor"><title>
<p>BCOLOR</p>
</title>

<p>`BCOLOR` —  содержит цвет текущего фона. Если равна 0, то используется цвет, заданный в настройках программы. Примеры:</p>
<p><code>! чёрный цвет фона</code></p>
<p><code>bcolor=-16777216</code></p>
<p><code>! красный цвет фона</code></p>
<p><code>bcolor=-16776961</code></p>
<p><code>! белый цвет фона</code></p>
<p><code>bcolor=-1</code></p>
<p>Поскольку цвет фона кодируется специальным числом, а вычислять это число самостоятельно неудобно, следует пользоваться функцией `rgb`, которой в качестве аргументов передаются три составляющие цвета:</p>
<p><code>! задаём цвет фона через функцию rgb(red,green,blue)</code></p>
<p><code>! фон синего цвета</code></p>
<p><code>bcolor=rgb(0,0,255)</code></p>
<p><code>! фон жёлтого цвета</code></p>
<p><code>bcolor=rgb(255,255,0)</code></p>
<p><code>! фон оранжевого цвета</code></p>
<p><code>bcolor=rgb(255,130,0)</code></p>
<p><code>! фон голубого цвета</code></p>
<p><code>bcolor=rgb(0,255,255)</code></p>
<p><code>! фон малинового цвета</code></p>
<p><code>bcolor=rgb(255,0,255)</code></p>
</section>

<section id="faq_80_04_debug"><title>
<p>DEBUG</p>
</title>

<p>`DEBUG` —  если значение переменной отлично от нуля, отключается проверка идентификатора игры при загрузке состояния. Иначе при каждом изменении файла игры нельзя будет использовать файлы сохранений, сделанные до изменения игры.</p>
<p>Совет: во время разработки и тестов игры значение переменной `debug` всегда должно быть отлично от нуля, а когда вы выпускаете финальную версию игры (релиз), нужно выставить переменной `debug` значение 0, чтобы игроки не смогли загрузить файлы сохранений от других игр.</p>

</section>

<section id="faq_80_04_disablescroll"><title>
<p>DISABLESCROLL</p>
</title>

<p>`DISABLESCROLL` —  если значение переменной отлично от нуля, автопрокрутка текста в окнах основного и дополнительного описаний отключается.</p>
<p>`Что это значит`. Предположим, мы вывели на экран большой объём текста, а затем при нажатии на `действие` у нас выводится ещё один фрагментик текста. Если `DISABLESCROLL = 0`, этот фрагментик текста при выводе заставит экран прокрутиться вниз. Если мы не хотим, чтобы экран прокручивался вниз в этом случае, мы присваиваем переменной `DISABLESCROLL` единицу.</p>
<p>Довольно мутное поведение в классическом плеере — при некоторых обстоятельствах текст и так не прокручивается.</p>

</section>

<section id="faq_80_04_disablesubex"><title>
<p>DISABLESUBEX</p>
</title>

<p>`DISABLESUBEX` —  если значение переменной отлично от нуля, отключается вычисление подвыражений в строках. Пример:</p>
<p><code>var=123</code></p>
<p><code>$text='&lt;&lt;var&gt;&gt;'        &amp; ! переменной $text будет присвоена строка '123'</code></p>
<p><code>'string &lt;&lt;var&gt;&gt;'    &amp; ! на экран будет выведена строка 'string 123'</code></p>
<p><code>'&lt;&lt;5+6&gt;&gt;'            &amp; ! на экран будет выведена строка '11'</code></p>
<p><code></code></p>
<p><code>disablesubex=1        &amp; ! отключаем вычисление подвыражений</code></p>
<p><code>$text='&lt;&lt;var&gt;&gt;'        &amp; ! переменной $text будет присвоена строка '&lt;&lt;var&gt;&gt;'</code></p>
<p><code>'string &lt;&lt;var&gt;&gt;'    &amp; ! на экран будет выведена строка 'string &lt;&lt;var&gt;&gt;'</code></p>
<p><code>'&lt;&lt;5+6&gt;&gt;'            &amp; ! на экран будет выведена строка '&lt;&lt;5+6&gt;&gt;'</code></p>
<p>В плеерах версии 5.8.0 и выше эта переменная больше не используется.</p>

</section>

<section id="faq_80_04_fcolor"><title>
<p>FCOLOR</p>
</title>

<p>`FCOLOR` —  содержит цвет используемого в данный момент шрифта. Если равна 0, то используется цвет, заданный в настройках программы. Изменение значения переменной меняет цвет всего текста игры, кроме гиперссылок и текста, цвет которого переназначен через HTML. Пример:</p>
<p><code>! чёрный цвет текста</code></p>
<p><code>fcolor=-16777216</code></p>
<p><code>! красный цвет текста</code></p>
<p><code>fcolor=-16776961</code></p>
<p><code>! белый цвет текста</code></p>
<p><code>fcolor=-1</code></p>
<p>Поскольку цвет шрифта кодируется специальным числом, а вычислять это число самостоятельно неудобно, следует пользоваться функцией `rgb`, которой в качестве аргументов передаются три составляющие цвета:</p>
<p><code>! задаём цвет текста через функцию rgb(red,green,blue)</code></p>
<p><code>! текст чёрного цвета</code></p>
<p><code>fcolor=rgb(0,0,0)</code></p>
<p><code>! текст белого цвета</code></p>
<p><code>fcolor=rgb(255,255,255)</code></p>
<p><code>! текст красного цвета</code></p>
<p><code>fcolor=rgb(255,0,0)</code></p>
<p><code>! текст зелёного цвета</code></p>
<p><code>fcolor=rgb(0,255,0)</code></p>
</section>

<section id="faq_80_04_fsize"><title>
<p>FSIZE</p>
</title>

<p>`FSIZE` —  содержит размер используемого в данный момент шрифта. Если равна 0, то используется размер, заданный в настройках программы. Относительно данного значения в HTML-режиме вычисляются размеры шрифтов тега `&lt;font&gt;`. Пример:</p>
<p><code>fsize=18</code></p>
<p>Размер шрифта устанавливается для всего текста в игре, кроме текста, размер которого переназначен через HTML.</p>

</section>

<section id="faq_80_04_lcolor"><title>
<p>LCOLOR</p>
</title>

<p>`LCOLOR` —  содержит текущий цвет шрифта гиперссылок. Если равна 0, то используется цвет, заданный в настройках программы. Изменение значения переменной меняет цвет текста всех гиперссылок, кроме тех, цвет которых переназначен через HTML. Пример:</p>
<p><code>! чёрный цвет гиперссылок</code></p>
<p><code>lcolor=-16777216</code></p>
<p><code>! красный цвет гиперссылок</code></p>
<p><code>lcolor=-16776961</code></p>
<p><code>! белый цвет гиперссылок</code></p>
<p><code>lcolor=-1</code></p>
<p>Поскольку цвет в QSP кодируется специальным числом, а вычислять это число самостоятельно неудобно, следует пользоваться функцией `rgb`, которой в качестве аргументов передаются три составляющие цвета:</p>
<p><code>! задаём цвет  гиперссылок через функцию rgb(red,green,blue)</code></p>
<p><code>!  гиперссылки синего цвета</code></p>
<p><code>lcolor=rgb(0,0,255)</code></p>
<p><code>! гиперссылки жёлтого цвета</code></p>
<p><code>lcolor=rgb(255,255,0)</code></p>
<p><code>! гиперссылки оранжевого цвета</code></p>
<p><code>lcolor=rgb(255,130,0)</code></p>
<p><code>! гиперссылки голубого цвета</code></p>
<p><code>lcolor=rgb(0,255,255)</code></p>
<p><code>! гиперссылки малинового цвета</code></p>
<p><code>lcolor=rgb(255,0,255)</code></p>
</section>

<section id="faq_80_04_nosave"><title>
<p>NOSAVE</p>
</title>

<p>`NOSAVE` —  если значение данной переменной отлично от 0, пункт меню плеера "Сохранить состояние игры" игроку становится недоступен, т.е. игрок не может самостоятельно сохранить игру. В то же время на уровне кода QSP продолжает работать оператор `savegame`. Пример:</p>
<p><code>! отключаем возможность сохранения игры</code></p>
<p><code>nosave=1</code></p>
<p><code>act "Бросить кости":</code></p>
<p><code>cubes=rand(1,6)</code></p>
<p><code>! включаем возможность сохранений обратно</code></p>
<p><code>nosave=0</code></p>
<p><code>delact $selact</code></p>
<p><code>end</code></p>
</section>

<section id="faq_80_04_result"><title>
<p>RESULT ($RESULT)</p>
</title>

<p>`RESULT` —  специфическая системная переменная, предназначенная для получения значения в текущем блоке кода и передачи этого значения функции `func` или `dyneval`. Иными словами, чтобы функции `func` или `dyneval` вернули какое-то значение, необходимо в вызываемом ими блоке кода присвоить значение переменной `result`.</p>
<p>Например:</p>
<p><code>$dyneval "</code></p>
<p><code>if args[0] mod 2 = 0:</code></p>
<p><code>$result='чётное число'</code></p>
<p><code>else</code></p>
<p><code>$result='нечётное число'</code></p>
<p><code>end</code></p>
<p><code>",279</code></p>
<p>Для каждого отдельного блока кода плеером создаётся собственная переменная `result`. То есть если вы из локации 1 вызываете локацию 2, то на локации 1 создаётся собственная переменная `result`, а на локации 2 — собственная, и значения в этих переменных не пересекаются (хотя в плеере 5.7.0. есть небольшая проблема с этим, и использовать переменную `result` рекомендуется только в конце кода локации. В более новых версиях плееров, например в Quest Navigator, эту проблему исправили и `result` можно использовать наравне с `args`). Таким образом переменная `result` является локальной для каждого отдельного вызова блока кода.</p>
<p>Если при обработке блока кода были установлены и `result`, и `$result`, то предпочтение отдаётся строковому значению.</p>

</section>

<section id="faq_80_04_usehtml"><title>
<p>USEHTML</p>
</title>

<p>`USEHTML` —  если значение данной переменной отлично от нуля, включается режим распознавания HTML. При этом HTML разметку можно использовать в названиях действий, предметов, в тексте, выводимом в окна основного и дополнтельного описаний, а так же в диалоговых окнах, вызываемых оператром `msg` и функцией `$input`.</p>
<p><code>! включение HTML</code></p>
<p><code>usehtml=1</code></p>
<p><code>! вывод текста с HTML-разметкой</code></p>
<p><code>*pl "&lt;font color=#ff8888&gt;Красный текст.&lt;/font&gt;"</code></p>
</section>

<section id="primechaniia-dlia-liubopytnyh"><title>
<p>Примечания для любопытных</p>
</title>


<p>1. 
Есть возможность определить любую системную переменную локальной для отдельного блока кода, и тогда эту системную переменную можно использовать как обычную локальную переменную, т.е. она не повлияет на работу плеера. Однако, строго не рекомендуется так делать, чтобы не допускать возможных ошибок.</p>
<p>2. 
Как и все прочие переменные в QSP, системные переменные так же являются массивами.</p>
<p>3. 
Переменные настройки интерфейса позволяют без последствий использовать любые ячейки, кроме нулевой, это не повлияет на работу плеера, однако так всё же не рекомендуется делать, если только это не является каким-то необходимым техническим решением.</p>
<p>4. 
А вот системные переменные, в которых прописываются названия локаций-обработчиков событий, при последовательном заполнении ячеек дают очень своеобразный эффект. Если вписать подряд в несколько ячеек названия локаций, то последовательно будет вызвана каждая из внесённых в массив локаций. Таким образом можно разгружать от кода локации-обработчики событий. Например, локацию-счётчик:</p>
<p><code>$counter[]='playlist'</code></p>
<p><code>$counter[]='animation'</code></p>
<p><code>$counter[]='time.acts'</code></p>
<p>При этом очень важно, чтобы названия локаций перечислялись в массиве подряд. Если между названиями локаций окажутся пустые ячейки, то выполнятся лишь те локации, которые находятся в массиве до первой встреченной пустой ячейки:</p>
<p><code>! будут выполняться только локации 'playlist' и 'animation'</code></p>
<p><code>$counter[]='playlist'</code></p>
<p><code>$counter[]='animation'</code></p>
<p><code>$counter[]=''</code></p>
<p><code>$counter[]='time.acts'</code></p>




</section>

</section>
<section id="faq_80_05">
<title head-level="h2">
<p>Синтаксемы и спецсимволы</p>
</title>


<section id="faq_80_05_end"><title>
<p>END</p>
</title>

<p>Ключевое слово (оператор), отмечающее окончание многострочной конструкции. Многострочными могут быть действия, конструкции условий, циклов. Примеры:</p>
<p><code>! открываем условие</code></p>
<p><code>if obj "Кувшин":</code></p>
<p><code>*pl "У вас есть кувшин."</code></p>
<p><code>! закрываем условие</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>! открываем действие</code></p>
<p><code>act "Взять яблоко":</code></p>
<p><code>яблоко+=1</code></p>
<p><code>addobj "Яблоко"</code></p>
<p><code>! закрываем действие</code></p>
<p><code>end</code></p>
<p><code></code></p>
<p><code>loop local i=0 while i&lt;10 step i+=1:</code></p>
<p><code>*pl "Проход &lt;&lt;i+1&gt;&gt;: i=&lt;&lt;i&gt;&gt;"</code></p>
<p><code>end</code></p>
<p>Каждая многострочная конструкция должна завершаться ключевым словом `end`. Однако здесь работают такие же правила, как для HTML-тегов или скобок: если мы вкладываем одну конструкцию в другую, сначала необходимо закрывать последнюю открытую конструкцию:</p>
<p><code>! открываем условие</code></p>
<p><code>if obj "Пустой кувшин":</code></p>
<p><code>! код, который относится к условию</code></p>
<p><code>*pl "У вас есть пустой кувшин."</code></p>
<p><code>! открываем действие</code></p>
<p><code>act "Наполнить кувшин":</code></p>
<p><code>! код который относится к действию</code></p>
<p><code>delobj "Пустой кувшин"</code></p>
<p><code>addobj "Полный кувшин"</code></p>
<p><code>! закрываем ДЕЙСТВИЕ</code></p>
<p><code>end</code></p>
<p><code>*pl "Кувшин можно наполнить из колодца."</code></p>
<p><code>! закрываем УСЛОВИЕ</code></p>
<p><code>end</code></p>
<p>Можно использовать не просто `end`, а `end if`, `end act` и `end loop`:</p>
<p><code>! открываем действие</code></p>
<p><code>act "Купить 10 стрел по 5 рублей":</code></p>
<p><code>! открываем условие 1 уровня</code></p>
<p><code>if money&gt;=10*5:</code></p>
<p><code>arrow+=10</code></p>
<p><code>money-=10*5</code></p>
<p><code>! открываем условие 2 уровня</code></p>
<p><code>if no (obj "Стрелы"):</code></p>
<p><code>addobj "Стрелы"</code></p>
<p><code>! закрываем условие 2 уровня</code></p>
<p><code>end if</code></p>
<p><code>else</code></p>
<p><code>*pl "Вам не хватает денег."</code></p>
<p><code>! закрываем условие 1 уровня</code></p>
<p><code>end if</code></p>
<p><code>! закрываем действие</code></p>
<p><code>end act</code></p>
<p>Вообще, после ключевого слова `end` допускается, но не одобряется, запись любого текста. При этом игнорируется весь текст до следующей команды. Если команда записывается в той же строке, что и `end`, то эта команда должна стоять после амперсанда (`&amp;`):</p>
<p><code>! открываем действие</code></p>
<p><code>act "Взять яблоко":</code></p>
<p><code>яблоко+=1</code></p>
<p><code>addobj "Яблоко"</code></p>
<p><code>! закрываем действие</code></p>
<p><code>end присутствие этого текста после end не одобряется &amp; *pl "Новая команда"</code></p>
</section>

<section id="faq_80_05_marks"><title>
<p>Метки `:`</p>
</title>

<p>Метки — это особые синтаксические конструкции (а вернее меньше, чем конструкции, — синтаксемы), которые отмечают указанную строку кода и служат для быстрого перемещения к таким строкам с помощью оператора 
<a l:href="#faq_80_02_jump">
`JUMP`</a>. Общая запись:</p>
<p><code>:[название метки]</code></p>
<p>, где `[название метки]` — теоретически любое сочетание символов, однако на практике желательно использовать лишь буквы, цифры, символы подчёркивания и пробелы. Перед двоеточием могут стоять символы пробелов и табуляции в любом количестве. Так же игнорируются прилегающие к названию метки символы пробелов и табуляций (однако ставить их не рекомендуется для удобства чтения кода).</p>
<p><code>! рекомендуемый вариант использования метки</code></p>
<p><code>jump 'метка'</code></p>
<p><code>! ...</code></p>
<p><code>:метка</code></p>
<p><code>! рабочий вариант с игнорированием прилегающих пробелов в метке</code></p>
<p><code>jump "метка с прилегающими пробелами"</code></p>
<p><code>! ...</code></p>
<p><code>: метка с прилегающими пробелами</code></p>
<p><code>! рабочий вариант с игнорированием прилегающих пробелов в jump</code></p>
<p><code>jump "  метка с прилегающими пробелами  "</code></p>
<p><code>! ...</code></p>
<p><code>:метка с прилегающими пробелами</code></p>
<p>Непосредственно после метки, в той же строке, через амперсанд (`&amp;`) могут идти любые другие команды, однако так делать не рекомендуется.</p>
<p><code>! метка с командами после неё</code></p>
<p><code>jump 'markdown'</code></p>
<p><code>! ...</code></p>
<p><code>:markdown &amp; *pl "вывожу текст" &amp; ! комментарий</code></p>
<p>Метки не чувствительны к регистру:</p>
<p><code>jump "FoR"</code></p>
<p><code>! ...</code></p>
<p><code>:for</code></p>
<p>Оператор `jump` "видит" метки только внутри текущего блока кода. Иными словами метки локальны, метки с одинаковыми названиями могут располагаться на разных локациях, в разных блоках кода).</p>
<p>Если метки с одинаковыми названиями расположены в одном блоке кода, то все дублирующие метки, кроме самой первой, игнорируются плеером.</p>
<p>Отдельными блоками кода считаются:</p>
<p>* 
код "Выполнить при посещении" конкретной локации (каждая локация — отдельный блок кода),</p>
<p>* 
код действия даже если действие добавлено программно,</p>
<p>* 
код в гиперссылке,</p>
<p>* 
код, передаваемый `DYNAMIC`/`DYNEVAL`.</p>
<p>Случайные метки, то есть метки, на которые в текущем блоке кода нет перехода с помощью `jump`, просто игнорируются интерпретатором.</p>

</section>

<section id="faq_80_05_ampersand"><title>
<p>Амперсанд `&amp;`</p>
</title>

<p>`&amp;` — символ амперсанда служит для перечисления команд в одной строке. Общая запись:</p>
<p><code>[команда 1] &amp; [команда 2] &amp; ...</code></p>
<p>Данный символ не следует путать с 
<a l:href="#faq_80_01_concatenation">
операцией объединения строк (конкатенация)</a>, а использовать нужно с осторожностью.</p>
<p>Примеры:</p>
<p><code>*pl "Я сорвал с ветки яблоко." &amp; addobj "Яблоко" &amp; яблоко+=1</code></p>
<p><code></code></p>
<p><code>a=3 &amp; b=7 &amp; g=rand(1,6) &amp; ("26"&amp;"27") &amp; ! в скобках — конкатенация</code></p>
</section>

<section id="faq_80_05_comma"><title>
<p>Запятая ,</p>
</title>

<p>Запятая `,` в QSP используется для перечисления аргументов, передаваемых различным операторам и функциям:</p>
<p><code>rgb(25,67,250)</code></p>
<p><code>max(12,45,67,89,90,122,135,168,90)</code></p>
<p><code>addobj "Отвёртка","img/screwdriver.png"</code></p>
<p><code>gosub "add_object","Апельсин",2,"Еда",37</code></p>
</section>

<section id="faq_80_05_roundbrackets"><title>
<p>Круглые скобки ()</p>
</title>

<p>Круглые скобки `()` в QSP используются в трёх случаях:</p>
<p>1. 
В различных выражениях скобки повышают приоритет операций (операции в скобках выполняются в первую очередь):</p>
<p><code>! повышение приоритета арифметических операций</code></p>
<p><code>(256+789)*(789-256)</code></p>
<p><code>! повышение приоритета операций сравнения</code></p>
<p><code>if A=(A&lt;&gt;B): ...</code></p>
<p>2. 
Если нужно передать функции более одного аргумента следует помещать всю группу аргументов в скобки:</p>
<p><code>rgb(25,67,250)</code></p>
<p><code>max(12,45,67,89,90,122,135,168,90)</code></p>
<p><code>rand(1,1000)</code></p>
<p>Будет хорошим тоном помещать даже один аргумент функции в скобки:</p>
<p><code>rand(999)</code></p>
<p>Не будет осуждаться, хотя так обычно не делают, если в скобки помещать и группу аргументов к операторам:</p>
<p><code>showinput(0)</code></p>
<p><code>addobj("Отвёртка","img/screwdriver.png")</code></p>
<p><code>gosub("add_object","Апельсин",2,"Еда",37)</code></p>
<p><code>gosub("add_object","Рек",rand(23,45),"Артефакт",max(36,67,90,a))</code></p>
<p>3. 
Если нужно организовать кортеж значений:</p>
<p><code>tuple=(123,234,'string')</code></p>
<p><code>mass[23]=('Петров','Пётр','Петрович')</code></p>


</section>

<section id="faq_80_05_squarebrackets"><title>
<p>Квадратные скобки []</p>
</title>

<p>Квадратные скобки `[]` в QSP используются для указания индекса ячейки массива:</p>
<p><code>! присваиваем значение седьмой ячейке массива $mass</code></p>
<p><code>$mass[7]="textstring"</code></p>
<p>Для индексации ячеек массивов можно использовать строковые значения:</p>
<p><code>$mass["x:4,y:6"]="map-dot"</code></p>
<p>Так же для индексации ячеек массивов можно использовать кортежи. При этом не обязательно указывать внутри квадратных скобок ещё и круглые:</p>
<p><code>$mass[4,6]="map_cell"</code></p>
<p><code>! эквивалентно</code></p>
<p><code>$mass[(4,6)]="map_cell"</code></p>
<p>Если квадратные скобки после названия массива не стоят, значит происходит работа с нулевой ячейкой массива:</p>
<p><code>$mass="text"</code></p>
<p><code>! равнозначно</code></p>
<p><code>$mass[0]="text"</code></p>
<p>Если индекс в квадратных скобках не указан, значит мы работаем с последней ячейкой массива:</p>
<p><code>! создаём новую ячейку в конце массива и присваиваем ей значение</code></p>
<p><code>$mass[]="last_cell"</code></p>
<p><code></code></p>
<p><code>! получаем значение из последней ячейки массива:</code></p>
<p><code>$mass[]</code></p>
</section>

<section id="faq_80_05_curclybrackets"><title>
<p>Фигурные скобки {}</p>
</title>

<p>Фигурные скобки `{}` в QSP выступают как спецсимволы, отмечающие начало и конец строковых значений. Иными словами, по наличию таких скобок плеер может понять, где начинается и где кончается строковое значение:</p>
<p><code>*pl {Текст, который будет выведен на экран.}</code></p>
<p>Особенностью указания текстового значения с помощью фигурных скобок является то, что в таких строках не раскрываются подвыражения:</p>
<p><code>health=150</code></p>
<p><code>*pl {Здоровье: &lt;&lt;health&gt;&gt;}</code></p>
<p><code>! на экран будет выведен текст 'Здоровье: &lt;&lt;health&gt;&gt;'</code></p>
<p><code>*pl "Здоровье: &lt;&lt;health&gt;&gt;"</code></p>
<p><code>! на экран будет выведен текст 'Здоровье: 150'</code></p>
<p>Для большей совместимости с различными версиями плееров, а так же для удобства чтения, фигурные скобки следует в основном использовать для записи кода, предназначенного для оператора `dynamic` или функции `dyneval`:</p>
<p><code>*pl $dyneval({$result = $mid("abcd",2,1)+"qwerty"})</code></p>
<p><code>dynamic {</code></p>
<p><code>$args[0]</code></p>
<p><code>addobj $args[1]</code></p>
<p><code>},'Текст','Вилка'</code></p>
<p>Так же фигурные скобки можно использовать для написания многострочных комментариев:</p>
<p><code>! {</code></p>
<p><code>многострочный</code></p>
<p><code>комментарий</code></p>
<p><code>}</code></p>
<p>Допустимо вложение любого количества фигурных скобок друг в друга.</p>

</section>

<section id="faq_80_05_quotes"><title>
<p>Кавычки `""`</p>
</title>

<p>Кавычки `" "` (двойные апострофы) в QSP выступают как спецсимволы, отмечающие начало и конец строковых значений. Иными словами, по наличию кавычек плеер может понять, где начинается и где кончается строковое значение:</p>
<p><code>*pl "Текст, который будет выведен на экран."</code></p>
<p>Особенностью указания текстового значения с помощью апострофов является то, что в таких строках раскрываются подвыражения:</p>
<p><code>health=150</code></p>
<p><code>*pl "Здоровье: &lt;&lt;health&gt;&gt;"</code></p>
<p><code>! на экран будет выведен текст 'Здоровье: 150'</code></p>
<p>Кавычки внутри строки можно экранировать дублированием:</p>
<p><code>*pl "В кабачке ""У Мо"" сегодня весело и шумно."</code></p>
<p>Так же кавычки можно использовать для написания многострочных комментариев:</p>
<p><code>! "</code></p>
<p><code>многострочный</code></p>
<p><code>комментарий</code></p>
<p><code>"</code></p>
</section>

<section id="faq_80_05_apostrophes"><title>
<p>Апострофы ''</p>
</title>

<p>Апострофы `' '` в QSP выступают как спецсимволы, отмечающие начало и конец строковых значений. Иными словами, по наличию апострофов плеер может понять, где начинается и где кончается строковое значение:</p>
<p><code>*pl 'Текст, который будет выведен на экран.'</code></p>
<p>Особенностью указания текстового значения с помощью апострофов является то, что в таких строках раскрываются подвыражения:</p>
<p><code>health=150</code></p>
<p><code>*pl 'Здоровье: &lt;&lt;health&gt;&gt;'</code></p>
<p><code>! на экран будет выведен текст 'Здоровье: 150'</code></p>
<p>Кавычки внутри строки можно экранировать дублированием:</p>
<p><code>*pl 'Руг''Ста''Раг сказал: — Что ты хочешь, мора? Хочешь мухомора?'</code></p>
<p>Так же апострофы можно использовать для написания многострочных комментариев:</p>
<p><code>! '</code></p>
<p><code>многострочный</code></p>
<p><code>комментарий</code></p>
<p><code>'</code></p>
</section>

<section id="simvol-kommercheskoe-et-"><title>
<p>Символ "Коммерческое эт" @</p>
</title>

<p>Символ "Коммерческое эт" `@` используется для организации неявного вызова локаций-функций, упрощая запись и заменяя собой оператор `gosub` или функию `func`. Общая запись:</p>
<p><code>@[$локация]([аргумент 0],[аргумент 1], ... ,[аргумент 18])</code></p>
<p>, где `[$локация]` — это название локации, код которой мы хотим выполнить без непосредственного перехода на неё. Аргументы `[аргумент 0]`, `[аргумент 1]` и т.д. могут использоваться на этой локации, их значения автоматически помещаются в переменные `args[0]`, `args[1]`, и т.д. соответственно. После обработки локации предыдущие значения `args` восстанавливаются. Использование аргументов не обязательно, в этом случае скобки можно опускать.</p>
<p>При обращении к локации с помощью `@` базовое описание локации добавляется к текущему описанию, базовые действия добавляются к текущим действиям, и происходит выполнение операторов в поле "Выполнить при посещении", затем возврат на исходную строку (продолжение выполнения кода после команды с `@`).</p>
<p>Название локации при неявном вызове не должно содержать специальных символов, иначе это может привести к неработоспособности кода. Можно использовать буквы, цифры, символ подчёркивания и точку.</p>
<p>Примеры:</p>
<p><code>!обработка локации "ход". Массив args[] пуст.</code></p>
<p><code>@ход()</code></p>
<p><code></code></p>
<p><code>!обработка локации "ход" с передачей 3-х параметров.</code></p>
<p><code>! $args[0] = $var (значению), args[1] = 2,</code></p>
<p><code>! $args[2] = "данные". Обратите внимание на символы '$'.</code></p>
<p><code>@ход($var,2,'данные')</code></p>
<p><code>! это код вызова локации "переход"</code></p>
<p><code>@переход('локация')</code></p>
<p><code></code></p>
<p><code>! а это код самой локации "переход"</code></p>
<p><code># переход</code></p>
<p><code>*pl $args[0]  &amp; ! на экран выведется текст 'локация'</code></p>
<p><code>! в окне действий появится новое действие:</code></p>
<p><code>act 'перейти':</code></p>
<p><code>goto "улица"</code></p>
<p><code>end</code></p>
<p><code>- переход</code></p>
<p><code>! код локации для функции, получающей сумму ряда чисел от единицы до указанного значения</code></p>
<p><code># summ</code></p>
<p><code>! в args[0] будет помещено число, которое мы укажем в качестве [аргумента 0]</code></p>
<p><code>loop while args[0]&gt;0 step args[0]=args[0]-1:</code></p>
<p><code>result=result+args[0]</code></p>
<p><code>end</code></p>
<p><code>-----summ-----</code></p>
<p><code></code></p>
<p><code>! пример вызова локации "summ", как функции</code></p>
<p><code>*pl @summ(19) &amp; ! выведет на экран 190</code></p>
<p>Обратите внимание, неявный вызов локации-функции заменяет и `gosub`, и `func`, поэтому, если ваша локация-функция возвращает результат, неявный вызов такой локации будет работать точно так же, как явный вызов через `func`; если же локация-функция не возвращает результат, то при использовании её с неявным оператором она будет работать, как явный вызов через `gosub`.</p>

</section>

</section>
<section id="faq_80_06">
<title head-level="h2">
<p>Почти алфавитный указатель ключевых слов, системных переменных и спецсимволов</p>
</title>

<p><a l:href="#faq_80_02_impicit">
Неявный оператор</a></p>
<p><a l:href="#faq_80_02_comments">
! (комментарий)</a></p>
<p><a l:href="#faq_80_01_noeq">
! (не равно)</a></p>
<p><a l:href="#faq_80_01_concatenation">
&amp; (конкатенация)</a></p>
<p><a l:href="#faq_80_05_ampersand">
&amp; (перечисление команд)</a></p>
<p><a l:href="#faq_80_05_marks">: (метки)</a></p>
<p><a l:href="#faq_80_05_comma">, (разделитель аргументов)</a></p>
<p><a l:href="#faq_80_05_quotes">
"" (кавычки)</a></p>
<p><a l:href="#faq_80_05_apostrophes">
'' (апострофы)</a></p>
<p><a l:href="#faq_80_05_curclybrackets">
{} (Фигурные скобки)</a></p>
<p><a l:href="#faq_80_05_roundbrackets">() (круглые скобки)</a></p>
<p><a l:href="#faq_80_05_squarebrackets">
[] (квадратные скобки)</a></p>
<p><a l:href="#faq_80_01_multi">
*</a></p>
<p><a l:href="#faq_80_01_multiaprop">
*=</a></p>
<p><a l:href="#faq_80_01_add">
+</a></p>
<p><a l:href="#faq_80_01_incr">
+=</a></p>
<p><a l:href="#faq_80_01_subt">
-</a></p>
<p><a l:href="#faq_80_01_decr">
-=</a></p>
<p><a l:href="#faq_80_01_unar">
+ и - (унарные)</a></p>
<p><a l:href="#faq_80_01_div">
/</a></p>
<p><a l:href="#faq_80_01_divaprop">
/=</a></p>
<p><a l:href="#faq_80_01_smal">
&lt;</a></p>
<p><a l:href="#faq_80_01_smaleq">
&lt;=</a></p>
<p><a l:href="#faq_80_01_smalmore">
&lt;&gt;</a></p>
<p><a l:href="#faq_80_01_eq">
= (равно)</a></p>
<p><a l:href="#faq_80_01_aprop">
= (присвоение)</a></p>
<p><a l:href="#faq_80_01_eqsmal">
=&lt;</a></p>
<p><a l:href="#faq_80_01_eqmore">
=&gt;</a></p>
<p><a l:href="#faq_80_01_more">
&gt;</a></p>
<p><a l:href="#faq_80_01_moreeq">
&gt;=</a></p>
<p><a l:href="#faq_80_02_act">
ACT</a></p>
<p><a l:href="#faq_80_02_addqst">
ADDLIB</a></p>
<p><a l:href="#faq_80_02_addobj">
ADDOBJ</a></p>
<p><a l:href="#faq_80_02_addqst">
ADDQST</a></p>
<p><a l:href="#faq_80_01_and">
AND</a></p>
<p><a l:href="#faq_80_04_args">
ARGS</a></p>
<p><a l:href="#faq_80_03_arrcomp">
ARRCOMP</a></p>
<p><a l:href="#faq_80_03_arrpos">
ARRPOS</a></p>
<p><a l:href="#faq_80_03_arrsize">
ARRSIZE</a></p>
<p><a l:href="#faq_80_04_backimage">
$BACKIMAGE</a></p>
<p><a l:href="#faq_80_04_bcolor">
BCOLOR</a></p>
<p><a l:href="#faq_80_02_cla">
CLA</a></p>
<p><a l:href="#faq_80_02_clear">
CLEAR</a></p>
<p><a l:href="#faq_80_02_sclr">
*CLEAR</a></p>
<p><a l:href="#faq_80_02_close">
CLOSE</a></p>
<p><a l:href="#faq_80_02_closeall">
CLOSE ALL</a></p>
<p><a l:href="#faq_80_02_clear">
CLR</a></p>
<p><a l:href="#faq_80_02_sclr">
*CLR</a></p>
<p><a l:href="#faq_80_02_cls">
CLS</a></p>
<p><a l:href="#faq_80_02_cmdclear">
CMDCLEAR</a></p>
<p><a l:href="#faq_80_02_cmdclear">
CMDCLR</a></p>
<p><a l:href="#faq_80_02_copyarr">
COPYARR</a></p>
<p><a l:href="#faq_80_04_counter">
$COUNTER</a></p>
<p><a l:href="#faq_80_03_countobj">
COUNTOBJ</a></p>
<p><a l:href="#faq_80_03_curacts">
$CURACTS</a></p>
<p><a l:href="#faq_80_03_curloc">
$CURLOC</a></p>
<p><a l:href="#faq_80_04_debug">
DEBUG</a></p>
<p><a l:href="#faq_80_02_delact">
DELACT</a></p>
<p><a l:href="#faq_80_02_killqst">
DELLIB</a></p>
<p><a l:href="#faq_80_02_delobj">
DELOBJ</a></p>
<p><a l:href="#faq_80_03_desc">
$DESC</a></p>
<p><a l:href="#faq_80_04_disablescroll">
DISABLESCROLL</a></p>
<p><a l:href="#faq_80_04_disablesubex">
DISABLESUBEX</a></p>
<p><a l:href="#faq_80_02_dynamic">
DYNAMIC</a></p>
<p><a l:href="#faq_80_03_dyneval">
DYNEVAL</a></p>
<p><a l:href="#faq_80_02_if">
ELSE</a></p>
<p><a l:href="#faq_80_02_if">
ELSEIF</a></p>
<p><a l:href="#faq_80_05_end">
END</a></p>
<p><a l:href="#faq_80_02_exit">
EXIT</a></p>
<p><a l:href="#faq_80_04_fcolor">
FCOLOR</a></p>
<p><a l:href="#faq_80_04_fname">
$FNAME</a></p>
<p><a l:href="#faq_80_02_killqst">
FREELIB</a></p>
<p><a l:href="#faq_80_04_fsize">
FSIZE</a></p>
<p><a l:href="#faq_80_03_func">
FUNC</a></p>
<p><a l:href="#faq_80_03_getobj">
$GETOBJ</a></p>
<p><a l:href="#faq_80_02_gosub">
GOSUB</a></p>
<p><a l:href="#faq_80_02_goto">
GOTO</a></p>
<p><a l:href="#faq_80_02_gosub">
GS</a></p>
<p><a l:href="#faq_80_02_goto">
GT</a></p>
<p><a l:href="#faq_80_02_if">
IF</a></p>
<p><a l:href="#faq_80_03_iif">
IIF</a></p>
<p><a l:href="#faq_80_02_addqst">
INCLIB</a></p>
<p><a l:href="#faq_80_03_input">
$INPUT</a></p>
<p><a l:href="#faq_80_03_instr">
INSTR</a></p>
<p><a l:href="#faq_80_03_isnum">
ISNUM</a></p>
<p><a l:href="#faq_80_03_isplay">
ISPLAY</a></p>
<p><a l:href="#faq_80_02_jump">
JUMP</a></p>
<p><a l:href="#faq_80_02_killall">
KILLALL</a></p>
<p><a l:href="#faq_80_02_killobj">
KILLOBJ</a></p>
<p><a l:href="#faq_80_02_killqst">
KILLQST</a></p>
<p><a l:href="#faq_80_02_killvar">
KILLVAR</a></p>
<p><a l:href="#faq_80_03_lcase">
$LCASE</a></p>
<p><a l:href="#faq_80_04_lcolor">
LCOLOR</a></p>
<p><a l:href="#faq_80_03_len">
LEN</a></p>
<p><a l:href="#faq_80_02_let">
LET</a></p>
<p><a l:href="#faq_80_01_loc">
LOC</a></p>
<p><a l:href="#faq_80_03_maintxt">
$MAINTXT</a></p>
<p><a l:href="#faq_80_03_max">
MAX</a></p>
<p><a l:href="#faq_80_02_menu">
MENU</a></p>
<p><a l:href="#faq_80_03_mid">
$MID</a></p>
<p><a l:href="#faq_80_03_min">
MIN</a></p>
<p><a l:href="#faq_80_01_mod">
MOD</a></p>
<p><a l:href="#faq_80_03_msecscount">
MSECSCOUNT</a></p>
<p><a l:href="#faq_80_02_msg">
MSG</a></p>
<p><a l:href="#faq_80_02_nl">
NL</a></p>
<p><a l:href="#faq_80_02_snl">
*NL</a></p>
<p><a l:href="#faq_80_01_no">
NO</a></p>
<p><a l:href="#faq_80_04_nosave">
NOSAVE</a></p>
<p><a l:href="#faq_80_01_obj">
OBJ</a></p>
<p><a l:href="#faq_80_04_onactsel">
$ONACTSEL</a></p>
<p><a l:href="#faq_80_04_ongload">
$ONGLOAD</a></p>
<p><a l:href="#faq_80_04_ongsave">
$ONGSAVE</a></p>
<p><a l:href="#faq_80_04_onnewloc">
$ONNEWLOC</a></p>
<p><a l:href="#faq_80_04_onobjadd">
$ONOBJADD</a></p>
<p><a l:href="#faq_80_04_onobjdel">
$ONOBJDEL</a></p>
<p><a l:href="#faq_80_04_onobjsel">
$ONOBJSEL</a></p>
<p><a l:href="#faq_80_02_opengame">
OPENGAME</a></p>
<p><a l:href="#faq_80_02_openqst">
OPENQST</a></p>
<p><a l:href="#faq_80_01_or">
OR</a></p>
<p><a l:href="#faq_80_02_p">
P</a></p>
<p><a l:href="#faq_80_02_sp">
*P</a></p>
<p><a l:href="#faq_80_02_pl">
PL</a></p>
<p><a l:href="#faq_80_02_spl">
*PL</a></p>
<p><a l:href="#faq_80_02_play">
PLAY</a></p>
<p><a l:href="#faq_80_03_qspver">
$QSPVER</a></p>
<p><a l:href="#faq_80_03_rand">
RAND</a></p>
<p><a l:href="#faq_80_02_refint">
REFINT</a></p>
<p><a l:href="#faq_80_03_replace">
$REPLACE</a></p>
<p><a l:href="#faq_80_04_result">
RESULT</a></p>
<p><a l:href="#faq_80_03_rgb">
RGB</a></p>
<p><a l:href="#faq_80_03_rnd">
RND</a></p>
<p><a l:href="#faq_80_02_savegame">
SAVEGAME</a></p>
<p><a l:href="#faq_80_03_selact">
$SELACT</a></p>
<p><a l:href="#faq_80_03_selobj">
$SELOBJ</a></p>
<p><a l:href="#faq_80_02_set">
SET</a></p>
<p><a l:href="#faq_80_02_settimer">
SETTIMER</a></p>
<p><a l:href="#faq_80_02_showacts">
SHOWACTS</a></p>
<p><a l:href="#faq_80_02_showinput">
SHOWINPUT</a></p>
<p><a l:href="#faq_80_02_showobjs">
SHOWOBJS</a></p>
<p><a l:href="#faq_80_02_showstat">
SHOWSTAT</a></p>
<p><a l:href="#faq_80_03_stattxt">
$STATTXT</a></p>
<p><a l:href="#faq_80_03_str">
$STR</a></p>
<p><a l:href="#faq_80_03_strcomp">
STRCOMP</a></p>
<p><a l:href="#faq_80_03_strfind">
$STRFIND</a></p>
<p><a l:href="#faq_80_03_strpos">
STRPOS</a></p>
<p><a l:href="#faq_80_03_trim">
$TRIM</a></p>
<p><a l:href="#faq_80_03_ucase">
$UCASE</a></p>
<p><a l:href="#faq_80_02_unsel">
UNSEL</a></p>
<p><a l:href="#faq_80_02_unsel">
UNSELECT</a></p>
<p><a l:href="#faq_80_04_usehtml">
USEHTML</a></p>
<p><a l:href="#faq_80_04_usercom">
$USERCOM</a></p>
<p><a l:href="#faq_80_03_usrtxt">
$USER_TEXT</a></p>
<p><a l:href="#faq_80_03_usrtxt">
$USRTXT</a></p>
<p><a l:href="#faq_80_03_val">
VAL</a></p>
<p><a l:href="#faq_80_02_view">
VIEW</a></p>
<p><a l:href="#faq_80_02_wait">
WAIT</a></p>
<p><a l:href="#faq_80_02_xgoto">
XGOTO</a></p>
<p><a l:href="#faq_80_02_xgoto">
XGT</a></p>

</section>
</section>
<section>
<section id="link_list">
<title head-level="h1">
<p>Источники и дополнительные материалы</p>
</title>

<section>
<p>Список ссылок на источники, по которым составлялся справочник, на дополнительные материалы и видео по указанным темам.</p>
<p>ВНИМАНИЕ!!! Некоторые ридеры не поддерживают переход по https-ссылкам.</p>
<p>Сборник различных полезных примеров: 
<a l:href="https://mega.nz/folder/rfAllKzR#rssaaJSs4tpGA_tUbaCCQw">
MEGA.nz/QSP-Example</a></p>
<p>Страница справочника на github: 
<a l:href="https://aleksversus.github.io/howdo_faq/">
github/howdo_faq</a></p>
</section>

<section id="link_01"><title>
<p>01. Чем отличается?</p>
</title>

<section id="link_01_01"><title>
<p>1.1. В чём разница между `set x=10`, `let x=10` и `x=10`?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=uaEfDzBXFSw&amp;list=PLcAHO4WsUl2R70UDclnyevDSuBJGDH9F6&amp;index=1&amp;t=25s">
https://www.youtube.com/watch?v=uaEfDzBXFSw&amp;</a></p>
<p>oleksandrigo (TEMP_USER). #5253 15.Мар.18 00:08:17: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=211&amp;prc=25&amp;Itemid=57#p26532">
`set x = 1` `let x = 1` `x = 1` Может между ними есть хоть какая-то разница?</a></p>

</section>

<section id="link_01_02"><title>
<p>1.2. В чём разница между переменной со знаком `$` и без знака `$`?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=uaEfDzBXFSw&amp;list=PLcAHO4WsUl2R70UDclnyevDSuBJGDH9F6&amp;index=1&amp;t=64s">
https://www.youtube.com/watch?v=uaEfDzBXFSw&amp;</a></p>
<p>WastedCarl. #5205 17.Фев.18 22:17:57: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=209&amp;prc=25&amp;Itemid=57#p26408">
Какая разница между названием переменной с $ и без $ ?</a></p>

</section>

<section id="link_01_03"><title>
<p>1.3. В чём разница между ' ' (апострофы) и " " (кавычки)?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=uaEfDzBXFSw&amp;list=PLcAHO4WsUl2R70UDclnyevDSuBJGDH9F6&amp;index=1&amp;t=113s">
https://www.youtube.com/watch?v=uaEfDzBXFSw&amp;</a></p>
<p>CH_B_L. #4333 09.Май.16 15:31:05: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=174&amp;prc=25&amp;Itemid=57#p23889">
в чем отличия в qsp у ' ' от " "?</a></p>
<p>Storm. #3567 21.Окт.15 22:43:22: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=143&amp;prc=25&amp;Itemid=57#p21978">
Сложный код</a></p>

</section>

<section id="link_01_04"><title>
<p>1.4. В чём разница между `*pl "строка"` и просто `"строка"`?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=uaEfDzBXFSw&amp;list=PLcAHO4WsUl2R70UDclnyevDSuBJGDH9F6&amp;index=1&amp;t=238s">
https://www.youtube.com/watch?v=uaEfDzBXFSw&amp;</a></p>
<p>Jolly Roger. #3482 13.Сен.15 22:46:52: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=140&amp;prc=25&amp;Itemid=57#p21694">
не вижу разницы между командами</a></p>

</section>

<section id="link_01_05"><title>
<p>1.5. Чем отличаются эти две команды? `
<emphasis>
pl "&lt;&lt;$perem&gt;&gt;"` и `</emphasis>

pl $perem`</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=uaEfDzBXFSw&amp;list=PLcAHO4WsUl2R70UDclnyevDSuBJGDH9F6&amp;index=1&amp;t=280s">
https://www.youtube.com/watch?v=uaEfDzBXFSw&amp;</a></p>
<p>oleksandrigo (TEMP_USER). #5199 16.Фев.18 21:45:45: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=208&amp;prc=25&amp;Itemid=57#p26396">
Чем отличаются эти две команды?</a></p>

</section>

<section id="link_01_06"><title>
<p>1.6. В чём разница между `dynamic` и `dyneval`?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=uaEfDzBXFSw&amp;list=PLcAHO4WsUl2R70UDclnyevDSuBJGDH9F6&amp;index=1&amp;t=399s">
https://www.youtube.com/watch?v=uaEfDzBXFSw&amp;</a></p>

</section>

<section id="link_01_07"><title>
<p>1.7. В чём разница между `gt` и `goto`?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=uaEfDzBXFSw&amp;list=PLcAHO4WsUl2R70UDclnyevDSuBJGDH9F6&amp;index=1&amp;t=529s">
https://www.youtube.com/watch?v=uaEfDzBXFSw&amp;</a></p>

</section>

<section id="link_01_08"><title>
<p>1.8. Чем отличается `goto` от `gosub`?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=uaEfDzBXFSw&amp;list=PLcAHO4WsUl2R70UDclnyevDSuBJGDH9F6&amp;index=1&amp;t=557s">
https://www.youtube.com/watch?v=uaEfDzBXFSw&amp;</a></p>

</section>
</section>

<section id="link_02"><title>
<p>02. Вопросы о $COUNTER</p>
</title>
<section>
<p>Реалтайм в справке: 
<a l:href="https://wiki.qsp.org/help:realtime">
https://wiki.qsp.org/help:realtime</a></p>
<p>Информация о локации $counter справке: 
<a l:href="https://wiki.qsp.org/help:service_locations">
https://wiki.qsp.org/help:service_locations</a></p>
<p>Ajenta. #4305 28.Апр.16 12:23:09: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=173&amp;prc=25&amp;Itemid=57#p23828">
CH_B_L, теоретически можно в локации каунтер через каждые две-три секунды сделать перерисовку доп описание...</a></p>
<p>NickoAilus. #4908 11.Фев.17 18:36:48: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=197&amp;prc=25&amp;Itemid=57#p25212">
можно ли сделать так, чтобы через определённый промежуток времени значение переменной увеличивалось на одну единицу?</a></p>
<p>mkir. #5033 29.Апр.17 19:37:02: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=202&amp;prc=25&amp;Itemid=57#p25564">
можно ли сделать так, чтобы была возможность загрузки состояния игры во время срабатывания WAIT...</a></p>
<p>ejikplains. #5391 04.Сен.18 22:49:33: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=216&amp;prc=25&amp;Itemid=57#p26885">
возможно ли сделать "независимые" циклы? Чтобы они исполнялись и игра продолжалась?</a></p>
<p>ejikplains. #5550 18.Май.19 09:58:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=223&amp;prc=25&amp;Itemid=57#p26389">
возможно ли реализовать таймер с выводом времени?</a></p>
<p>BraJelon. #3155 26.Июл.15 07:57:50: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=127&amp;prc=25&amp;Itemid=57#p20887">
Как сделать так, чтобы при посещении локации "1" спустя секунду меня перекидывало на локацию "2" автоматически.</a></p>
<p>Ontario. #3699 21.Дек.15 16:20:09: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=148&amp;prc=25&amp;Itemid=57#p22355">
Как сделать, чтобы действие открывалось спустя некоторое время проведенное на локации.</a></p>
<p>Vlad. #4530 18.Июл.16 19:56:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=182&amp;prc=25&amp;Itemid=57#p24390">
1. Как зациклить проигрывание аудио? 2. на локации В ожидание несколько секунд и автоматический переход на локацию С</a></p>
<p>Aaaspavel. #4685 04.Окт.16 00:52:27: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=188&amp;prc=25&amp;Itemid=57#p24722">
как сделать что-то вроде быстрого теста, выдается текст с вопросом, потом на несколько секунд появляются варианты ответов и если не успел нажать на правильный ответ или вообще нажать, то задается следующий вопрос...</a></p>
<p>Larson. #4971 29.Мар.17 20:20:50: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=199&amp;prc=25&amp;Itemid=57#p25399">
Какой нужен код чтобы при переходе на локацию, звук в ней воспроизводился не сразу а например через 5 сек.?</a></p>
</section>

<section id="link_02_01"><title>
<p>2.1. Как сделать, чтобы значение переменной изменялось с течением времени?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=vRqh-dYa8WI&amp;t=19s">
https://www.youtube.com/watch?v=vRqh-dYa8WI&amp;</a></p>
</section>

<section id="link_02_02"><title>
<p>2.2. Как сделать, чтобы из одной локации меня через пару секунд перебрасывало в другую локацию?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=vRqh-dYa8WI&amp;t=284s">
https://www.youtube.com/watch?v=vRqh-dYa8WI&amp;</a></p>
</section>

<section id="link_02_03"><title>
<p>2.3. Как сделать, чтобы через пару секунд после входа на локацию появлялось новое действие?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=YYGMIZcXAUc&amp;t=19s">
https://www.youtube.com/watch?v=YYGMIZcXAUc&amp;</a></p>
</section>

<section id="link_02_04"><title>
<p>2.4. Как сделать, чтобы цикл выполнялся параллельно остальному коду, а не прерывал его?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=YYGMIZcXAUc&amp;t=417s">
https://www.youtube.com/watch?v=YYGMIZcXAUc&amp;</a></p>

</section>
</section>

<section id="link_03"><title>
<p>03. Вопросы о MSG и $INPUT</p>
</title>
<section>

<p>Справка по `input`: 
<a l:href="https://wiki.qsp.org/help:inputs">
https://wiki.qsp.org/help:inputs</a></p>
<p>Работа со строками в папках: 
<a l:href="https://wiki.qsp.org/help:strings">
https://wiki.qsp.org/help:strings</a></p>
<p>Podkovally. #4270 14.Апр.16 19:15:48: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=171&amp;prc=25&amp;Itemid=57#p23758">
как сделать список, к примеру покупок, через input?</a></p>
<p>NickoAilus. #4903 08.Фев.17 15:28:43: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=197&amp;prc=25&amp;Itemid=57#p25192">
Как можно сделать ввод имени игроком?</a></p>
<p>Одиночка. #2819 09.Май.15 01:34:00: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=113&amp;prc=25&amp;Itemid=57#p19933">
А как сделать так, чтобы окно imput было без возможности написания текста?</a></p>
<p>mkir. #2974 13.Июн.15 00:07:32: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=119&amp;prc=25&amp;Itemid=57#p20423">
А можно как-то ставить необходимость выбора какого-либо варианта в тело сообщения "msg"?</a></p>
<p>bkz. #3401 01.Сен.15 14:18:19: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=137&amp;prc=25&amp;Itemid=57#p21559">
Второй вопрос, как реализовать возможность ввод любого из двух правильных слов.</a></p>
<p>Ontario. #3904 18.Фев.16 21:33:13: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=157&amp;prc=25&amp;Itemid=57#p22996">
надо чтобы ответ принимало без учета регистра</a></p>
<p>Podkovally. #5419 19.Дек.18 15:49:48: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=217&amp;prc=25&amp;Itemid=57#p27001">
как реализовать ввод ответа игрока через "Input" не чувствительный к регистру?</a></p>
<p>oleksandrigo (TEMP_USER). #5246 11.Мар.18 18:34:42: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=210&amp;prc=25&amp;Itemid=57#p26516">
Зачем нужно поле ввода в плеере?</a></p>

</section>

<section id="link_03_01"><title>
<p>3.1. Как вывести на экран отдельное окошко с текстом?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=RTMrZF_mTD0&amp;t=16s">
https://www.youtube.com/watch?v=RTMrZF_mTD0&amp;</a></p>
</section>

<section id="link_03_02"><title>
<p>3.2. Как вывести на экран окошко, в котором игрок должен ввести текст?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=RTMrZF_mTD0&amp;t=77s">
https://www.youtube.com/watch?v=RTMrZF_mTD0&amp;</a></p>
</section>

<section id="link_03_03"><title>
<p>3.3. Как прикрутить возможность выбора варианта к окну msg?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=RTMrZF_mTD0&amp;t=193s">
https://www.youtube.com/watch?v=RTMrZF_mTD0&amp;</a></p>
</section>

<section id="link_03_04"><title>
<p>3.4. Как сделать ввод имени игроком?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=RTMrZF_mTD0&amp;t=309s">
https://www.youtube.com/watch?v=RTMrZF_mTD0&amp;</a></p>
</section>

<section id="link_03_05"><title>
<p>3.5. Как сделать варианты для ответа через $input?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=RTMrZF_mTD0&amp;t=415s">
https://www.youtube.com/watch?v=RTMrZF_mTD0&amp;</a></p>

</section>
</section>

<section id="link_04"><title>
<p>04. Вопросы о меню</p>
</title>
<section>

<p>Пример от Svandrus:		
<a l:href="https://qsp.org/components/com_agora/img/members/983/menu_2.qsp">
Скачать</a></p>
<p>Пример от Aleks Versus:	
<a l:href="https://qsp.org/components/com_agora/img/members/248/21032016-0856_menu.qsp">
Скачать</a></p>
<p>Динамическое меню от Lisichka: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=114&amp;prc=25&amp;Itemid=57#p19982">
Сообщение в теме "Как сделать?"</a></p>
<p>Как сделать меню предмета? 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;prc=25&amp;p=1&amp;id=829&amp;Itemid=57#p18902">
Тема на форуме QSP.su</a></p>
<p>О меню в справке: 
<a l:href="https://wiki.qsp.org/help:menu">
https://wiki.qsp.org/help:menu</a></p>
<p>PsiH. #3522 23.Сен.15 17:06:11: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=141&amp;prc=25&amp;Itemid=57#p21810">
Покажите пример меню с двумя и более предметами.</a></p>
<p>St-john. #3665 25.Ноя.15 10:04:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=147&amp;prc=25&amp;Itemid=57#p22270">
как мне из меню напрямую передать нужные аргументы?</a></p>
<p>Lisichka. #4134 20.Мар.16 18:05:34: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=166&amp;prc=25&amp;Itemid=57#p23451">
хочу сделать разворачивающееся меню из ссылки в тексте</a></p>
<p>Darvin432. #4380 16.Май.16 22:35:17: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=176&amp;prc=25&amp;Itemid=57#p23959">
как сделать так что бы при нажатии предметов выводилось доп окно на которое можно было нажать.</a></p>
<p>denedi. #4478 27.Июн.16 09:27:29: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=180&amp;prc=25&amp;Itemid=57#p24260">
Как сделать меню которое будет выскакивать при выборе предмета в инвентаре?</a></p>
<p>Axi.Lex. #4582 17.Авг.16 13:47:19: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=184&amp;prc=25&amp;Itemid=57#p24527">
Создать меню предмета?</a></p>
<p>Ivan27_XL. #5721 19.Май.19 12:50:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=229&amp;prc=25&amp;Itemid=57#p18215">
Как сделать, чтобы предмет (записка, например) можно было использовать прямо в окне предметов</a></p>

</section>

<section id="link_04_01"><title>
<p>4.1. Как сделать меню предмета?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=THlEwBbzf1k&amp;t=16s">
https://www.youtube.com/watch?v=THlEwBbzf1k&amp;</a></p>
</section>

<section id="link_04_02"><title>
<p>4.2. Как сделать разные меню для двух и более предметов?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=THlEwBbzf1k&amp;t=460s">
https://www.youtube.com/watch?v=THlEwBbzf1k&amp;</a></p>
</section>

<section id="link_04_03"><title>
<p>4.3. Как сделать меню в ссылках?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=JRUjSCbbUIY&amp;t=16s">
https://www.youtube.com/watch?v=JRUjSCbbUIY&amp;</a></p>
</section>

<section id="link_04_04"><title>
<p>4.4. Как передавать локациям-пунктам меню аргументы?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=JRUjSCbbUIY&amp;t=292s">
https://www.youtube.com/watch?v=JRUjSCbbUIY&amp;</a></p>
</section>

<section id="link_04_05"><title>
<p>4.5. Как делать контекстное (динамическое) меню?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=eMYJG5WrY4k&amp;t=18s">
https://www.youtube.com/watch?v=eMYJG5WrY4k&amp;</a></p>
</section>

<section id="link_04_06"><title>
<p>4.6. Как вставить разделитель в меню?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=eMYJG5WrY4k&amp;t=210s">
https://www.youtube.com/watch?v=eMYJG5WrY4k&amp;</a></p>
</section>

<section id="link_04_07"><title>
<p>4.7. Как вставить картинки в меню?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=eMYJG5WrY4k&amp;t=287s">
https://www.youtube.com/watch?v=eMYJG5WrY4k&amp;</a></p>

</section>
</section>

<section id="link_05"><title>
<p>05. Вопросы по $ONNEWLOC</p>
</title>
<section>

<p>SneakBug8, Одиночка. #2813 07.Май.15 10:16:00: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=113&amp;prc=25&amp;Itemid=57#p19885">
Я хотел бы сделать локацию, которая отвечает за переходы</a></p>
<p>Одиночка. #2864 14.Май.15 23:26:22: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=115&amp;prc=25&amp;Itemid=57#p20011">
Хочу, чтобы время менялось на каждой локации и работало по этому правилу</a></p>
<p>Ivan27_XL. #5728 19.Май.19 13:04:18: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=230&amp;prc=25&amp;Itemid=57#p18255">
Как сделать так, чтобы не писать условия игры в каждой локации(if a&lt;0: gt'проиграл' и т.д.), а создать одну локацию с условиями, код которой будет выполняться при переходах по локациям игры?</a></p>
<p>SneakBug8. #5745 19.Май.19 13:33:19: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=230&amp;prc=25&amp;Itemid=57#p17161">
Как сделать счетчик ходов? ... Как сделать временную локацию чтобы мне работало это.</a></p>

</section>

<section id="link_05_01"><title>
<p>5.1. Как сделать так, чтобы не писать один и тот же код в каждой локации?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=M0V-qO3V0Io&amp;t=16s">
https://www.youtube.com/watch?v=M0V-qO3V0Io&amp;</a></p>
</section>

<section id="link_05_02"><title>
<p>5.2. Как сделать кнопку "Назад", работающую на каждой локации?</p>
</title>
<p>Amadeus. #5295 12.Апр.18 22:09:32: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=212&amp;prc=25&amp;Itemid=57#p26617">
Есть ли в QSP команда, которая отвечает за возврат на предыдущую локацию?</a></p>
<p>NaViGaToR. #4942 26.Фев.17 04:26:42: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=198&amp;prc=25&amp;Itemid=57#p25296">
Хочу сделать кнопку "Назад" которая возвращала на последнюю посещенную локацию.</a></p>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=M0V-qO3V0Io&amp;t=295s">
https://www.youtube.com/watch?v=M0V-qO3V0Io&amp;</a></p>
<p>Рабочий пример: 
<a l:href="Рабочий пример: [https://qsp.org/components/com_agora/img/members/248/example.qsp">
Скачать</a>

](https://qsp.org/components/com_agora/img/members/248/example.qsp))</p>
</section>

<section id="link_05_03"><title>
<p>5.3. Почему в args[] на локации-обработчике перехода на новую локацию уже есть данные?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=d9XzToqROok&amp;t=16s">
https://www.youtube.com/watch?v=d9XzToqROok&amp;</a></p>

</section>
</section>

<section id="link_06"><title>
<p>06. Вопросы по звуковым файлам в QSP</p>
</title>

<section id="link_06_01"><title>
<p>6.1. Как вставить музыку или звук в игру?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=d9XzToqROok&amp;t=172s">
https://www.youtube.com/как вставить в игру музыку/</a></p>
<p>Освещение темы вставки звуков и музыки в игру в справке: 
<a l:href="https://wiki.qsp.org/help:sound">
https://wiki.qsp.org/help:sound</a></p>
<p>Обсуждение требуемых возможностей команды PLAY: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=509&amp;Itemid=57">
Тема на форуме</a></p>
<p>konolya. #3342 20.Авг.15 19:00:57: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=134&amp;prc=25&amp;Itemid=57#p21451">
Можно ли на одну локацию выставить несколько звуков? Что бы они шли одновременно</a></p>
<p>gribochek. #3746 11.Янв.16 01:12:40: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=150&amp;prc=25&amp;Itemid=57#p22446">
Как вставить картинку и звуки в локацию?</a></p>
<p>Совёнок. #4146 22.Мар.16 23:21:22: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=166&amp;prc=25&amp;Itemid=57#p23506">
Как вставить музыку в квест на QSP?</a></p>
<p>Genryzz. #4439 05.Июн.16 19:16:46: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=178&amp;prc=25&amp;Itemid=57#p24099">
Можно ли запустить одновременно 2 звуковых дорожки?</a></p>
<p>Axi.Lex. #4607 26.Авг.16 16:44:36: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=185&amp;prc=25&amp;Itemid=57#p24562">
А как добавить музыку?</a></p>
<p>Larson. #4971 29.Мар.17 20:20:50: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=199&amp;prc=25&amp;Itemid=57#p25399">
Можно ли както вставить в код звук, чтобы в игре при выборе действия воспроизводился звук?</a></p>
<p>mkir. #5011 21.Апр.17 20:35:53: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=201&amp;prc=25&amp;Itemid=57#p25506">
пока не проиграет до конца один звук, другой не включится</a></p>
<p>Darvin432. #5457 29.Янв.19 00:39:58: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=219&amp;prc=25&amp;Itemid=57#p27051">
Как впилить фоновую музыку в игре.</a></p>
<p>NickoAilus. #5650 18.Май.19 12:51:47: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=227&amp;prc=25&amp;Itemid=57#p25177">
Можно ли вставить в игру свой саундтрек?</a></p>

</section>

<section id="link_06_02"><title>
<p>6.2. Как запустить две звуковые дорожки?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=d9XzToqROok&amp;t=295s">
https://www.youtube.com/watch?v=d9XzToqROok&amp;</a></p>

</section>

<section id="link_06_03"><title>
<p>6.3. Как при переходе на новую локацию прервать одну мелодию и запустить другую?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=d9XzToqROok&amp;t=410s">
https://www.youtube.com/watch?v=d9XzToqROok&amp;</a></p>

</section>

<section id="link_06_04"><title>
<p>6.4. Как перезапустить звуковую дорожку?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=d9XzToqROok&amp;t=501s">
https://www.youtube.com/watch?v=d9XzToqROok&amp;</a></p>

</section>

<section id="link_06_05"><title>
<p>6.5. Как приглушить музыку?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=L08MyUk6QEQ&amp;t=16s">
https://www.youtube.com/watch?v=L08MyUk6QEQ&amp;</a></p>
<p>TricksterAl. #4836 07.Янв.17 08:07:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=194&amp;prc=25&amp;Itemid=57#p25054">
хочу её не закрывать чтобы её снова запускать а чтобы она затихала и при возвращении в бар продолжала играть как будто за время отсутствия прошло время  возможно ли это ?</a></p>

</section>

<section id="link_06_06"><title>
<p>6.6. Как зациклить мелодию?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=L08MyUk6QEQ&amp;t=150s">
https://www.youtube.com/watch?v=L08MyUk6QEQ&amp;</a></p>
<p>Реализация гибкого плейлиста: 
<a l:href="https://qsp.org/index.php?option=com_content&amp;view=article&amp;id=79:-10&amp;catid=36:2009-02-19-06-11-21&amp;Itemid=76">
Открыть страницу в браузере</a></p>
<p>konolya. #3330 18.Авг.15 18:32:22: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=134&amp;prc=25&amp;Itemid=57#p21408">
И как вставить звук что бы он сразу прекратился или шёл по кругу?</a></p>
<p>bkz. #3437 05.Сен.15 22:46:19: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=138&amp;prc=25&amp;Itemid=57#p21614">
юююисправление ошибки плейлиста</a></p>
<p>BlackFox. #3594 01.Ноя.15 01:58:37: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=144&amp;prc=25&amp;Itemid=57#p22085">
Как сделать так чтобы Мелодия играла без остановки в определенной локации, Тоже самое только с поддержкой нескольких локаций?</a></p>
<p>Dark
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=142&amp;prc=25&amp;Itemid=57#p21859">
Ol(U23)leneri]. #3535 30.Сен.15 12:56:41: [единственный способ сделать радио с переключением волн - это не выключать композиции, а уменьшать их громкость до нуля?</a></p>
<p>Совёнок. #4162 27.Мар.16 15:05:42: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=167&amp;prc=25&amp;Itemid=57#p23566">
Как сделать, чтобы несколько песен проигрывались одна за другой, и повторялись по кругу?</a></p>
<p>Совёнок. #4414 26.Май.16 22:33:25: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=177&amp;prc=25&amp;Itemid=57#p24030">
как зациклить одну песню?</a></p>
<p>Vlad. #4530 18.Июл.16 19:56:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=182&amp;prc=25&amp;Itemid=57#p24390">
Как зациклить проигрывание аудио?</a></p>
<p>De@th K!d. #5185 14.Янв.18 19:21:27: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=208&amp;prc=25&amp;Itemid=57#p26305">
как сделать цикличное воспроизведение музыкального файла</a></p>

</section>
</section>

<section id="link_07"><title>
<p>07. Вопросы о гиперссылках</p>
</title>
<section>

<p>Darvin432. #4408 24.Май.16 12:43:48: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=177&amp;prc=25&amp;Itemid=57#p24011">
Профи подскажите нубу как создавать гипперсылки?</a></p>
<p>Wol4ik. #4821 26.Дек.16 16:13:43: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=193&amp;prc=25&amp;Itemid=57#p25011">
чтобы выделенное активное слово было любого цвета, а не так как в настройках QSP плеера; чтобы это выделенное слово не было изображено с подчеркиванием</a></p>
<p>Abrukt (Roma Dova). #4866 22.Янв.17 19:04:18: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=195&amp;prc=25&amp;Itemid=57#p25108">
какая команда используется для того, чтобы отобразить ссылку без подчеркивания</a></p>
<p>D31M0S (7H3_D31M0S). #5400 16.Окт.18 23:31:35: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=217&amp;prc=25&amp;Itemid=57#p26906">
как делать HTML-гиперссылки для перехода между локациями или выполнения строчек кода?</a></p>
<p>Katy. #3461 12.Сен.15 13:29:54: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=139&amp;prc=25&amp;Itemid=57#p21647">
как сделать переход при нажатии на что-то в описании?</a></p>
<p>Сергей. #5738 19.Май.19 13:12:46: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=230&amp;prc=25&amp;Itemid=57#p19373">
Как заставить код выполняться по нажатию на картинку/текст</a></p>
<p>CH_B_L. #4330 09.Май.16 06:08:42: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=174&amp;prc=25&amp;Itemid=57#p23885">
хочу, чтобы выбор товара был не через окно действий, а, например, через гиперссылки на экране</a></p>
<p>NickoAilus. #4980 07.Апр.17 12:57:34: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=200&amp;prc=25&amp;Itemid=57#p25442">
можно ли выполнить по ссылке сразу два действия?</a></p>

</section>

<section id="link_07_01"><title>
<p>7.1. Как делать гиперссылки, по нажатию на которые выполняется код?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=2lVeh7udKLY&amp;t=16s">
https://www.youtube.com/watch?v=2lVeh7udKLY&amp;</a></p>

</section>

<section id="link_07_02"><title>
<p>7.2. Как менять цвет гиперссылки?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=2lVeh7udKLY&amp;t=181s">
https://www.youtube.com/watch?v=2lVeh7udKLY&amp;</a></p>

</section>

<section id="link_07_03"><title>
<p>7.3. Как помещать в гиперссылки сложный код?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=2lVeh7udKLY&amp;t=317s">
https://www.youtube.com/watch?v=2lVeh7udKLY&amp;</a></p>

</section>

<section id="link_07_04"><title>
<p>7.4. Как сделать гиперссылки без подчёркивания?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=2lVeh7udKLY&amp;t=518s">
https://www.youtube.com/watch?v=2lVeh7udKLY&amp;</a></p>

</section>
</section>

<section id="link_08"><title>
<p>08. Есть ли команда...</p>
</title>
<section>
</section>

<section id="link_08_01"><title>
<p>8.1. Какой командой можно очистить окно дополнительного описания?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=0aeXqSRncZI&amp;t=16s">
https://www.youtube.com/watch?v=0aeXqSRncZI&amp;</a></p>
<p>Работа с окном дополнительного описания в справке: 
<a l:href="https://wiki.qsp.org/help:stat">
https://wiki.qsp.org/help:stat</a></p>
<p>Jack. #3373 28.Авг.15 01:46:52: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=135&amp;prc=25&amp;Itemid=57#p21505">
как только я нажимаю переход с локацию на локацию данное действие копируется как мне закрепить это все что бы оно не повторялось по несколько раз</a></p>
<p>Katy. #3463 12.Сен.15 15:10:04: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=139&amp;prc=25&amp;Itemid=57#p21651">
А можно как-то очистить окно дополнительного описания, когда там появляется новое описание?</a></p>
<p>Совёнок. #4081 14.Мар.16 18:52:05: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=164&amp;prc=25&amp;Itemid=57#p23363">
Как отчистить окно описания предметов после начала игры заново?</a></p>

</section>

<section id="link_08_02"><title>
<p>8.2. Существует ли команда для того, чтобы получить название текущей локации?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=0aeXqSRncZI&amp;t=116s">
https://www.youtube.com/watch?v=0aeXqSRncZI&amp;</a></p>
<p>mkir. #2933 05.Июн.15 03:57:54: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=118&amp;prc=25&amp;Itemid=57#p20296">
есть ли какая команда, чтобы можно было присвоить переменной имя данной локации</a></p>

</section>

<section id="link_08_03"><title>
<p>8.3. Какой командой можно вывести текст в окно дополнительного описания?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=0aeXqSRncZI&amp;t=333s">
https://www.youtube.com/watch?v=0aeXqSRncZI&amp;</a></p>
<p>Larson. #4967 27.Мар.17 21:03:47: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=199&amp;prc=25&amp;Itemid=57#p25385">
Какой код нужно прописать чтобы в игре в окне Additional desc отображалась картинка?</a></p>
<p>Genryzz. #5352 26.Июн.18 05:22:01: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=215&amp;prc=25&amp;Itemid=57#p26781">
как добавить текст в "Дополнительное описание"</a></p>

</section>

<section id="link_08_04"><title>
<p>8.4. Есть ли команда, которая делает выход из игры?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=0aeXqSRncZI&amp;t=478s">
https://www.youtube.com/watch?v=0aeXqSRncZI&amp;</a></p>
<p>Работа с окном дополнительного описания в справке: 
<a l:href="https://wiki.qsp.org/help:stat">
https://wiki.qsp.org/help:stat</a></p>
<p>Белый Шарик. #3003 24.Июн.15 15:44:44: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=121&amp;prc=25&amp;Itemid=57#p20553">
Как в коде прописать опцию Quit ? Ну тоесть выход из игры.</a></p>

</section>
</section>

<section id="link_09"><title>
<p>09. Вопросы об изображениях</p>
</title>

<section id="link_09_01"><title>
<p>9.1. Как вставить картинку в игру?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=xCpp_ZYN7Tw&amp;t=16s">
https://www.youtube.com/watch?v=xCpp_ZYN7Tw&amp;</a></p>
<p>gribochek. #3746 11.Янв.16 01:12:40: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=150&amp;prc=25&amp;Itemid=57#p22446">
Как вставить картинку и звуки в локацию?</a></p>
<p>Axi.Lex. #4610 28.Авг.16 17:16:19: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=185&amp;prc=25&amp;Itemid=57#p24565">
Как загрузить картинку в игру и изменить фон.</a></p>

</section>

<section id="link_09_02"><title>
<p>9.2. Можно ли вставить в игру gif-файл?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=xCpp_ZYN7Tw&amp;t=431s">
https://www.youtube.com/watch?v=xCpp_ZYN7Tw&amp;</a></p>
<p>Примеры по вставке gif от NickoAilus: 
<a l:href="https://qsp.org/components/com_agora/img/members/2018/GIF.zip">
Пример 1 в архиве ZIP</a>, 
<a l:href="https://qsp.org/components/com_agora/img/members/2018/GIF2.zip">
Пример 2в архиве ZIP</a></p>
<p>loony25 (WastedCarl). #5167 16.Дек.17 20:21:46: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=207&amp;prc=25&amp;Itemid=57#p26259">
Как в QSP вставить GIF файл ?</a></p>
<p>Bup0H. #4512 14.Июл.16 02:30:39: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=181&amp;prc=25&amp;Itemid=57#p24359">
Подскажите, почему некоторые гифки проигрываются нормально, а у некоторых искажаются либо цвета, либо скорость в qsp плеере?</a></p>
<p>ejikplains. #5564 18.Май.19 09:58:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=223&amp;prc=25&amp;Itemid=57#p26550">
при добавлении гиф картинок они воспроизводятся коряво и то пропадают, то их почти не видно</a></p>
<p>Larson. #5629 18.Май.19 10:15:38: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=226&amp;prc=25&amp;Itemid=57#p25409">
Проблемы с гифками (+ссылки на сообщения и темы)</a></p>
<p>TEMP_USER. #5769 23.Май.19 12:32:46: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=231&amp;prc=25&amp;Itemid=57#p27217">
Гифка не работает/не отображается/выводится неправильно</a></p>

</section>

<section id="link_09_03"><title>
<p>9.3. Как вставить картинку в действие?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=xCpp_ZYN7Tw&amp;t=616s">
https://www.youtube.com/watch?v=xCpp_ZYN7Tw&amp;</a></p>
<p>Mioirel. #4947 27.Фев.17 15:33:22: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=198&amp;prc=25&amp;Itemid=57#p25305">
Как вставить изображение в меню плеера? Например, чтобы рядом с act'ом "север" стояла пикча в формате jpg</a></p>

</section>

<section id="link_09_04"><title>
<p>9.4. Как поставить картинку фоном?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=xCpp_ZYN7Tw&amp;t=45s">
https://www.youtube.com/watch?v=xCpp_ZYN7Tw&amp;</a></p>
<p>Aaaspavel. #3679 09.Дек.15 15:01:10: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=148&amp;prc=25&amp;Itemid=57#p22306">
как сделать картинку фоном?</a></p>

</section>

<section id="link_09_05"><title>
<p>9.5. Как выводить изображения послойно? Накладывать друг на друга?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=xCpp_ZYN7Tw&amp;t=744s">
https://www.youtube.com/watch?v=xCpp_ZYN7Tw&amp;</a></p>
<p>Chaos Legion. #4113 18.Мар.16 12:52:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=165&amp;prc=25&amp;Itemid=57#p23409">
как сделать в классике вывод изображений послойно.</a></p>
<p>lamerUA. #4152 25.Мар.16 12:08:11: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=167&amp;prc=25&amp;Itemid=57#p23534">
Возможно ли в QSP 5.7 осуществить наложение одной картинки на другую</a></p>

</section>

<section id="link_09_06"><title>
<p>9.6. Как сделать кликабельное изображение?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=xCpp_ZYN7Tw&amp;t=801s">
https://www.youtube.com/watch?v=xCpp_ZYN7Tw&amp;</a></p>
<p>Mr.Crazzyr. #3013 24.Июн.15 23:58:46: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=121&amp;prc=25&amp;Itemid=57#p20567">
как сделать кликабельное изображение в основном окне.</a></p>
<p>BraJelon. #2978 13.Июн.15 04:24:21: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=120&amp;prc=25&amp;Itemid=57#p20428">
Как сделать так, чтобы эти действия были отдельно друг от друга, а не в одном подменю, а также, как корректировать их расположение на экране или к примеру, чтобы это самое действие игрока было изображением и при нажатии, происходил переход?</a></p>
<p>saks. #4027 07.Мар.16 05:53:02: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=162&amp;prc=25&amp;Itemid=57#p23267">
тоесть полностью отказаться от окна "Действия" и перенести весь интерфейс в основное окно не получится?</a></p>
<p>Сергей. #5738 19.Май.19 13:12:46: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=230&amp;prc=25&amp;Itemid=57#p19373">
Как заставить код выполняться по нажатию на картинку/текст</a></p>

</section>

<section id="link_09_07"><title>
<p>9.7. Как сделать сменяемое изображение на локации?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=HMYo0xVyGNA&amp;t=16s">
https://www.youtube.com/watch?v=HMYo0xVyGNA&amp;</a></p>
<p>jeesson. #4914 14.Фев.17 05:32:46: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=197&amp;prc=25&amp;Itemid=57#p25227">
как сделать динамическое изображение(ну или как-то так называется), чтобы по нажатию по него - оно менялось на другое.</a></p>
<p>Фрай. #5430 06.Янв.19 13:47:25: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=218&amp;prc=25&amp;Itemid=57#p27018">
как сделать, чтобы на одной локации картинки (jpg, png, gif) и текст под ними, сменяли одна другую?</a></p>
</section>

<section id="link_09_08"><title>
<p>9.8. Как сделать вывод рандомного изображения?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=HMYo0xVyGNA&amp;t=318s">
https://www.youtube.com/watch?v=HMYo0xVyGNA&amp;</a></p>
<p>WeReT. #4062 10.Мар.16 20:18:24: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=163&amp;prc=25&amp;Itemid=57#p23310">
Как создать выбор из нескольких картинок?</a></p>

</section>
</section>

<section id="link_10"><title>
<p>10. Интерфейс, дизайн, украшения</p>
</title>
<section>

<p>Bup0H. #4421 29.Май.16 11:55:38: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=177&amp;prc=25&amp;Itemid=57#p24056">
Какие цвета по умолчанию можно вписать (Red, Green и т.п) есть ли весь список?</a></p>

</section>

<section id="link_10_01"><title>
<p>10.1. Для чего нужен оператор REFINT, и как он работает?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=9KHLbHZ7T_Q&amp;t=16s">
https://www.youtube.com/watch?v=9KHLbHZ7T_Q&amp;</a></p>
<p>Storm. 15.Июн.15 11:47:45: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=120&amp;prc=25&amp;Itemid=57#p20448">
Как работает оператор REFINT?</a></p>
<p>Byte. #1020 31.Мар.12 11:27:02: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=41&amp;prc=25&amp;Itemid=57#p10355">
REFINT принудительно выводит на экран текст, который находится в буфере вывода</a></p>

</section>

<section id="link_10_02"><title>
<p>10.2. Как изменить цвет фона в игре?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=9KHLbHZ7T_Q&amp;t=370s">
https://www.youtube.com/watch?v=9KHLbHZ7T_Q&amp;</a></p>
<p>konolya. #3330 18.Авг.15 18:32:22: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=134&amp;prc=25&amp;Itemid=57#p21408">
как сделать фон полностью красным или чёрным?</a></p>
<p>mkir. #3433 04.Сен.15 21:11:39: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=138&amp;prc=25&amp;Itemid=57#p21609">
Вот в игре цвета фона какой-то сероватый по умолчанию, мне бы хотелось сделать его идеально белым - и это получается через сам плеер,- выбор цвета фона. А вот в коде игры - если набрать bcolor = 0, то этот самый ноль и будет "сероватым-по умолчанию". Как добиться белизны через код?</a></p>
<p>tay. #3739 09.Янв.16 20:38:51: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=150&amp;prc=25&amp;Itemid=57#p22437">
как сделать чтобы в навигаторе можно было изменять цвет фона</a></p>
<p>DeathSpace. #3880 14.Фев.16 15:19:11: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=156&amp;prc=25&amp;Itemid=57#p22944">
Можно ли сделать фон для окон: предметов,доп описания и окна действий?</a></p>
<p>Совёнок. #4410 24.Май.16 18:47:56: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=177&amp;prc=25&amp;Itemid=57#p24015">
как задать цвет фону в игре?</a></p>
<p>Alcohol. #5634 18.Май.19 10:16:41: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=226&amp;prc=25&amp;Itemid=57#p25541">
Подскажите простейшие команды, типо изменение цвета текста и фона.</a></p>

</section>

<section id="link_10_03"><title>
<p>10.3. Как изменить формат части текста? Размер, цвет, наклон и т.д.?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=ITvRi_pmgRo&amp;t=16s">
https://www.youtube.com/watch?v=ITvRi_pmgRo&amp;</a></p>
<p>Работа со шрифтами в справке: http://htmlbook.ru/html/font</p>
<p>Белый Шарик. #3299 10.Авг.15 11:44:57: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=132&amp;prc=25&amp;Itemid=57#p21298">
Можно ли как-то сделать, что бы шрифт в окне объектов(предметов) отличался от основного шрифта игры?</a></p>
<p>Aaaspavel. #3656 11.Ноя.15 22:16:23: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=147&amp;prc=25&amp;Itemid=57#p22182">
как сделать, чтобы не расписывать каждую строчку '&lt;i&gt;&lt;b&gt;&lt;font color = yellow&gt;Ждать&lt;/font&gt;&lt;/b&gt;&lt;/i&gt;', а задать наклон, толщину и цвет всего текста один раз для локации</a></p>
<p>Aaaspavel. #3682 10.Дек.15 21:05:50: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=148&amp;prc=25&amp;Itemid=57#p22311">
а как сделать чтобы текст на фоне был?</a></p>
<p>Abrukt (RomaDova). #3704 23.Дек.15 21:21:35: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=149&amp;prc=25&amp;Itemid=57#p22369">
При помощи какого оператора можно изменить шрифт лишь части текста</a></p>
<p>Aaaspavel. #3736 08.Янв.16 22:27:18: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=150&amp;prc=25&amp;Itemid=57#p22428">
а сменить шрифт можно? ну чтобы весь текст был одним шрифтом, который прописан FNAME, а в определённых местах заменить, к примеру, на готический шрифт?</a></p>
<p>Weliot. #4209 01.Апр.16 14:44:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=169&amp;prc=25&amp;Itemid=57#p23635">
Как изменить цвет шрифта?</a></p>
<p>Hungry. #4824 28.Дек.16 06:37:28: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=193&amp;prc=25&amp;Itemid=57#p25014">
Как вставить и описание/доп. описание кусок текста с отличным от остального массива текста шрифтом/размером шрифта?</a></p>
<p>CH_B_L. #4333 09.Май.16 15:31:05: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=174&amp;prc=25&amp;Itemid=57#p23889">
как в qsp можно часть строки сделать, скажем, курсивом, а часть - нормальной?</a></p>

</section>

<section id="link_10_04"><title>
<p>10.4. Как сделать красивый фон в классическом плеере?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=9KHLbHZ7T_Q&amp;t=563s">
https://www.youtube.com/watch?v=9KHLbHZ7T_Q&amp;</a></p>
<p>St-john. #5154 18.Окт.17 17:07:40: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=207&amp;prc=25&amp;Itemid=57#p26184">
Такой вопрос - есть ли какой-нибудь способ сделать нормальный и красивый  фон в классике?</a></p>

</section>

<section id="link_10_05"><title>
<p>10.5. Хочу, чтоб в игре окна располагались определённым образом. Как это сделать?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=ITvRi_pmgRo&amp;t=235s">
https://www.youtube.com/watch?v=ITvRi_pmgRo&amp;</a></p>
<p>Настройка окошек классического плеера с помощью qspgui.cfg 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=861&amp;Itemid=57">
Открыть в браузере</a></p>
<p>Белый Шарик. #3308 10.Авг.15 16:09:57: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=133&amp;prc=25&amp;Itemid=57#p21308">
А можно как-то в классик куспе менять размер окошек Объектов и доп. описания?</a></p>
<p>DeathSpace. #3801 26.Янв.16 23:55:03: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=153&amp;prc=25&amp;Itemid=57#p22683">
нужно чтобы мой qsp файл сразу открывался во весь экран а не окошком</a></p>
<p>InoYnika. #4131 19.Мар.16 16:43:38: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=166&amp;prc=25&amp;Itemid=57#p23441">
Как сделать так чтобы экран приложения был поцентру?</a></p>
<p>Axi.Lex. #4661 18.Сен.16 15:19:50: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=187&amp;prc=25&amp;Itemid=57#p24655">
Пропало окно доп.описания. Пытался открыть - ничегошеньки. Что случилось?</a></p>
<p>Sin. #4691 13.Окт.16 00:27:04: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=188&amp;prc=25&amp;Itemid=57#p24741">
есть ли возможность убрать разворачивание экрана в классике?</a></p>
<p>NickoAilus. #4949 27.Фев.17 20:23:32: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=198&amp;prc=25&amp;Itemid=57#p25307">
Можно ли прописать в коде, чтобы окно "Предпросмотр" разворачивалось на полный экран?</a></p>
<p>mkir. #5097 25.Июн.17 18:40:59: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=204&amp;prc=25&amp;Itemid=57#p25937">
как сделать, чтобы в игре было фиксированно-определенное расположение и размер всех окон, а также размер и тип шрифта?</a></p>
<p>oleksandrigo (TEMP_USER). #5292 10.Апр.18 23:52:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=212&amp;prc=25&amp;Itemid=57#p26614">
как задать дефолтные настройки размера(размеров) экрана(экранов)?</a></p>

</section>

<section id="link_10_06"><title>
<p>10.6. Можно ли задавать размер окон из кода игры? Чтобы в одной локации были одни настройки, в другой — другие.</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=ITvRi_pmgRo&amp;t=303s">
https://www.youtube.com/watch?v=ITvRi_pmgRo&amp;</a></p>
<p>Белый Шарик. #3312 10.Авг.15 16:29:53: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=133&amp;prc=25&amp;Itemid=57#p21312">
А по окнам.  Можно ли их как-то программировать им размеры? Что бы на одной локации были одни размеры, на другой - другие.</a></p>
<p>Darvin432. #5471 02.Фев.19 14:37:27: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=219&amp;prc=25&amp;Itemid=57#p27072">
Можно ли сделать так что бы окно доп описаний было в разных местах в зависимости от локации</a></p>
<p>Anuki. #3936 26.Фев.16 23:50:20: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=158&amp;prc=25&amp;Itemid=57#p23132">
как заставить закрываться окно предпросмотра автоматически</a></p>

</section>

<section id="link_10_07"><title>
<p>10.7. Настроил расположение окна предпросмотра, но когда выключаю его, другие окна смещаются, как это исправить?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=ITvRi_pmgRo&amp;t=394s">
https://www.youtube.com/watch?v=ITvRi_pmgRo&amp;</a></p>
<p>Jolly Roger. #3322 11.Авг.15 21:37:13: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=133&amp;prc=25&amp;Itemid=57#p21353">
как сделать, чтобы окно предпросмотра (которое VIEW) не скакало по экрану после перезагрузки интерфейса в процессе игры?</a></p>

</section>

<section id="link_10_08"><title>
<p>10.8. Как изменить цвет подсветки действий?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=ITvRi_pmgRo&amp;t=440s">
https://www.youtube.com/watch?v=ITvRi_pmgRo&amp;</a></p>
<p>Белый Шарик. #3488 14.Сен.15 15:37:53: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=140&amp;prc=25&amp;Itemid=57#p21700">
как изменить цвет подсветки, выбираемого действия</a></p>

</section>

<section id="link_10_09"><title>
<p>10.9. Как изменить цвет фона для отдельного окна?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=ITvRi_pmgRo&amp;t=463s">
https://www.youtube.com/watch?v=ITvRi_pmgRo&amp;</a></p>
<p>ejikplains. #5529 18.Май.19 09:58:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=222&amp;prc=25&amp;Itemid=57#p26317">
Как сделать так, чтобы блок действий был другого цвета?</a></p>

</section>

<section id="link_10_10"><title>
<p>10.10. Как сделать плавное появление текста?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=ggTZHJsGHBs&amp;t=16s">
https://www.youtube.com/watch?v=ggTZHJsGHBs&amp;</a></p>
<p>Плавное изменение цвета фона: 
<a l:href="https://qsp.org/index.php?option=com_content&amp;view=article&amp;id=112:2011-05-20-06-23-02&amp;catid=36:2009-02-19-06-11-21&amp;Itemid=76">
https://qsp.org/index.php?...&amp;Itemid=76</a></p>
<p>ejikplains. #5553 18.Май.19 09:58:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=223&amp;prc=25&amp;Itemid=57#p26533">
возможно ли реализовать плавное появление текста, и, через какое-либо время, его плавное затухание?</a></p>

</section>

<section id="link_10_11"><title>
<p>10.11. Как использовать в игре собственный шрифт?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=ITvRi_pmgRo&amp;t=504s">
https://www.youtube.com/watch?v=ITvRi_pmgRo&amp;</a></p>
<p>Aaaspavel. #3727 03.Янв.16 19:02:47: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=150&amp;prc=25&amp;Itemid=57#p22401">
а как добавить альтернативный шрифт ( пользовательский шрифт, которого на компе нет по умолчанию) для qsp</a></p>

</section>

<section id="link_10_12"><title>
<p>10.12. С предметов можно снимать выделение, а можно ли снять выделение с действия?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=ggTZHJsGHBs&amp;t=365s">
https://www.youtube.com/watch?v=ggTZHJsGHBs&amp;</a></p>
<p>Ways. #5358 07.Авг.18 22:03:04: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=215&amp;prc=25&amp;Itemid=57#p26820">
Подскажите пожалуйста, есть ли возможность снять выделение в окне действий?</a></p>
<p>NickoAilus. #5156 22.Окт.17 18:48:24: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=207&amp;prc=25&amp;Itemid=57#p26187">
Можно ли сделать так, чтобы шрифт использовался в игре, но не был установлен на компьютере?</a></p>

</section>
</section>

<section id="link_11"><title>
<p>11. Вопросы об условиях</p>
</title>

<section id="link_11_01"><title>
<p>11.1. При проверке условия записано просто число, без операции сравнения, но QSP не выдаёт ошибку. Почему?</p>
</title>

<p>Смотреть на ютубе: 
<a l:href="https://www.youtube.com/watch?v=tzu-0aV_m5M&amp;t=16s">
https://www.youtube.com/watch?v=tzu-0aV_m5M&amp;</a></p>
<p>mkir. #4687 09.Окт.16 18:27:41: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=188&amp;prc=25&amp;Itemid=57#p24736">
наткнулся у себя же на такую строчку: "if x &gt; 100 and y:", где, как видите, "y" просто "y" без всяких там больше-меньше-равно. Разве это не ошибка?</a></p>

</section>

<section id="link_11_02"><title>
<p>11.2. Как сделать так, чтобы действие появлялось только при определённом условии?</p>
</title>
<p>Смотреть на ютубе: 
<a l:href="https://www.youtube.com/watch?v=tzu-0aV_m5M&amp;t=196s">
https://www.youtube.com/watch?v=tzu-0aV_m5M&amp;</a></p>
<p>Действие по условию: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=348&amp;Itemid=57">
тема на форуме QSP.su</a></p>
<p>Примеры реализации диалогов: 
<a l:href="https://qsp.org/index.php?option=com_content&amp;view=article&amp;id=72:-11&amp;catid=36:2009-02-19-06-11-21&amp;Itemid=76">
тема на форуме QSP.su</a></p>
<p>Jack. #3428 04.Сен.15 18:15:00: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=138&amp;prc=25&amp;Itemid=57#p21604">
мне надо сделать в одном действие два действия только не знаю как правильно прописать</a></p>
<p>saks. #3989 06.Мар.16 10:54:33: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=160&amp;prc=25&amp;Itemid=57#p23220">
как упростить код (допустим чтобы вариант "уйти" прописать только 1 раз а не в каждом действии)</a></p>
<p>Larson. #4955 23.Мар.17 15:32:50: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=199&amp;prc=25&amp;Itemid=57#p25352">
Какой код нужно написать чтобы только после посещения Комнаты1, в  Комнате2 появилось действие 'Открыть ключем' ?</a></p>
<p>Larson. #4975 05.Апр.17 01:53:33: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=200&amp;prc=25&amp;Itemid=57#p25429">
Действие по условию</a></p>
<p>Larson. #4987 13.Апр.17 22:40:27: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=200&amp;prc=25&amp;Itemid=57#p25470">
как сделать чтобы при наличии определенных предметов в локации появлялось действие</a></p>
<p>vitorio555. #4995 17.Апр.17 13:33:27: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=200&amp;prc=25&amp;Itemid=57#p25482">
как сделать так чтоб в локации кнопка перехода появлялась при определённых условиях</a></p>
<p>waganwils. #5170 23.Дек.17 00:25:41: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=207&amp;prc=25&amp;Itemid=57#p26276">
Скрытое действие, Диалоги и прочее...</a></p>
<p>Kaspar. #5328 08.Июн.18 16:29:51: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=214&amp;prc=25&amp;Itemid=57#p26716">
как возможно реализовать вывод текста по клику кнопки далее в действиях?</a></p>
<p>новичок. #5463 31.Янв.19 11:42:38: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=219&amp;prc=25&amp;Itemid=57#p27064">
как сделать, что бы при покупке предмета, он добавлялся в определенную локацию</a></p>
<p>Katy. #3459 11.Сен.15 20:06:27: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=139&amp;prc=25&amp;Itemid=57#p21642">
как сделать так, чтобы после того, как действие сработало один раз и исчезло, появилось новое действие?</a></p>
</section>

<section id="link_11_03"><title>
<p>11.3. Видел в одной из игр, как после нажатия на действие, оно становится неактивным. Как это сделать?</p>
</title>
<p>Смотреть на ютубе: 
<a l:href="https://www.youtube.com/watch?v=qYDeZ6wmaDY&amp;t=16s">
https://www.youtube.com/watch?v=qYDeZ6wmaDY&amp;</a></p>
<p>Bup0H. #4416 26.Май.16 23:29:21: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=177&amp;prc=25&amp;Itemid=57#p24036">
При выполнение действия, кнопка меняет цвет и уже повторно нажать не удается.</a></p>
</section>

<section id="link_11_04"><title>
<p>11.4. Как добавить текст, который будет выводиться только при выполнении определённого условия?</p>
</title>
<p>Смотреть на ютубе: 
<a l:href="https://www.youtube.com/watch?v=qYDeZ6wmaDY&amp;t=475s">
https://www.youtube.com/watch?v=qYDeZ6wmaDY&amp;</a></p>
<p>Cannibal_Rat. #5108 10.Июл.17 09:31:56: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=205&amp;prc=25&amp;Itemid=57#p25990">
как добавить зависимый текст в описание (QGen)?</a></p>
</section>

<section id="link_11_05"><title>
<p>11.5. Как сделать, чтобы в диалоговом окне текст набирался в зависимости от условий?</p>
</title>
<p>Смотреть на ютубе: 
<a l:href="https://www.youtube.com/watch?v=qYDeZ6wmaDY&amp;t=216s">
https://www.youtube.com/watch?v=qYDeZ6wmaDY&amp;</a></p>
<p>прохожий. #4763 05.Ноя.16 21:42:54: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=191&amp;prc=25&amp;Itemid=57#p24837">
как в диалоговое окно засунуть несколько условий?</a></p>
</section>

<section id="link_11_06"><title>
<p>11.6. Как упростить условие?</p>
</title>

<p>Смотреть на ютубе: 
<a l:href="https://www.youtube.com/watch?v=qYDeZ6wmaDY&amp;t=586s">
https://www.youtube.com/watch?v=qYDeZ6wmaDY&amp;</a></p>
<p>Gefestions. #3358 25.Авг.15 11:05:06: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=135&amp;prc=25&amp;Itemid=57#p21473">
как сделать: к примеру есть 3 локации... что бы открылась 4 надо во всех 3 побыть, неважно в каком порядке.</a></p>

</section>
</section>

<section id="link_12"><title>
<p>12. Вопросы о DYNAMIC</p>
</title>

<section id="link_12_01"><title>
<p>12.1. Зачем нужен оператор dynamic?</p>
</title>
<p>Смотреть на ютубе: 
<a l:href="https://www.youtube.com/watch?v=djQbaN7-bfE&amp;t=16s">
https://www.youtube.com/watch?v=djQbaN7-bfE&amp;</a></p>
<p>Динамический код: 
<a l:href="https://wiki.qsp.org/help:dynamical">
Справка на wiki.qsp.su</a></p>
<p>Storm. #2822 09.Май.15 17:08:46: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=113&amp;prc=25&amp;Itemid=57#p19941">
мне нужно к названию массива, допустим, char прибавить число 1, 2 и так далее чтобы получить название нового массива, допустим char1. Затем в этот новый массив копировать данные из какого-то другого массива в игре. Возможно ли это реализовать в QSP?</a></p>
<p>Chaos Legion. #3981 05.Мар.16 19:39:21: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=160&amp;prc=25&amp;Itemid=57#p23212">
есть лока changestat которая вызывается по gs и ей передается имя переменной и число ... сама лока должна к этой переменной добавлять число, но я не могу понять, как там оперировать именно переменной, а не args%[%0%]%</a></p>
<p>Hinkmar. #5010 21.Апр.17 20:04:22: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=201&amp;prc=25&amp;Itemid=57#p25505">
можно ли проверить соответствие истине выражения, записанного в текстовую переменную?</a></p>
</section>

<section id="link_12_02"><title>
<p>12.2. Можно ли сделать переменную с рандомным (случайным) названием?</p>
</title>
<p>Смотреть на ютубе: 
<a l:href="https://www.youtube.com/watch?v=YqEGWwMNzDc&amp;t=16s">
https://www.youtube.com/watch?v=YqEGWwMNzDc&amp;</a></p>
<p>Hungry. #3114 20.Июл.15 06:08:09: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=125&amp;prc=25&amp;Itemid=57#p20811">
Вопрос такой: можно ли сделать, чтобы игра создавала переменную с рандомным НАЗВАНИЕМ?</a></p>
</section>

<section id="link_12_03"><title>
<p>12.3. Создаю действия с помощью цикла, но они работают неправильно. Что делать?</p>
</title>
<p>Смотреть на ютубе: 
<a l:href="https://www.youtube.com/watch?v=YqEGWwMNzDc&amp;t=254s">
https://www.youtube.com/watch?v=YqEGWwMNzDc&amp;</a></p>
<p>Вывод действий в цикле с передачей параметров: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=530&amp;Itemid=57">
Тема на форуме</a></p>
<p>Storm. #2869 17.Май.15 22:27:57: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=115&amp;prc=25&amp;Itemid=57#p20054">
это невозможно сделать в QSP, или у меня что-то не правильно в коде?</a></p>
<p>Dark
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=140&amp;prc=25&amp;Itemid=57#p21696">
Ol(U23)leneri]. #3484 14.Сен.15 11:23:49: [Понимаю, что во всех актах одно и то же N, но что с этим делать?</a></p>
<p>Адри. #4555 30.Июл.16 22:45:04: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=183&amp;prc=25&amp;Itemid=57#p24437">
Проблема в том, что список удалось создать, но передать каждому персонажу (в примере они создали с помощью ACT) значение ID - не получается.</a></p>
<p>St-john. #4616 28.Авг.16 19:01:39: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=185&amp;prc=25&amp;Itemid=57#p24572">
Как в коде ниже при генерации действий сделать так чтобы получились связанные действия и реакция на него?</a></p>
</section>

<section id="link_12_04"><title>
<p>12.4. Почему не работает dynamic?</p>
</title>
<p>Смотреть на ютубе: 
<a l:href="https://www.youtube.com/watch?v=djQbaN7-bfE&amp;t=512s">
https://www.youtube.com/watch?v=djQbaN7-bfE&amp;</a></p>
<p>oleksandrigo (TEMP_USER). #5310 13.Май.18 14:48:52: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=213&amp;prc=25&amp;Itemid=57#p26665">
Почему вместо того чтобы изменить Х он просто в виде текста выдает мне x -= 10. И как сделать так чтобы это был не текст а код?</a></p>
</section>
</section>

<section id="link_13"><title>
<p>13. Не работает...</p>
</title>
<section>
</section>

<section id="link_13_01"><title>
<p>13.1. Рисую таблицу и хочу зафиксировать высоту, но атрибут height не работает.</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=177Wyt7Z13Q&amp;t=18s">
https://www.youtube.com/watch?v=177Wyt7Z13Q&amp;</a></p>
<p>svandrus. #3541 01.Окт.15 14:59:43: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=142&amp;prc=25&amp;Itemid=57#p21893">
Можно ли в классическом плеере отрегулировать высоту строк. Тег height не поддерживается</a></p>
<p>kosmosnash. #4574 14.Авг.16 16:55:06: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=183&amp;prc=25&amp;Itemid=57#p24518">
можно ли в куспе как-то зафиксировать высоту таблицы и высоту отдельных ячеек в частности</a></p>
<p>Darvin432. #5440 08.Янв.19 14:41:23: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=218&amp;prc=25&amp;Itemid=57#p27028">
почему то не работает тег "height", хотя  тег "width" работает</a></p>

</section>

<section id="link_13_02"><title>
<p>13.2. Пытаюсь использовать разные HTML-теги в игре, но они не работают — просто не выводятся. Почему?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=177Wyt7Z13Q&amp;t=151s">
https://www.youtube.com/watch?v=177Wyt7Z13Q&amp;</a></p>
<p>Поддерживаемые в классическом плеере HTML-теги: 
<a l:href="https://wiki.qsp.org/help:html">
wiki.qsp.su</a></p>
<p>Bup0H. #4789 25.Ноя.16 22:01:09: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=192&amp;prc=25&amp;Itemid=57#p24921">
Как я понимаю небольшая разница в оформлении HTML в QSP есть</a></p>
<p>Darvin432. #4842 10.Янв.17 01:16:10: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=194&amp;prc=25&amp;Itemid=57#p25060">
Я нашёл команду table-layout, Но не могу разобраться почему она не работает в Qsp.</a></p>
</section>

<section id="link_13_03"><title>
<p>13.3. Не работает IIF!</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=177Wyt7Z13Q&amp;t=244s">
https://www.youtube.com/watch?v=177Wyt7Z13Q&amp;</a></p>
<p>TEMP_USER (oleksandrigo). #5253 15.Мар.18 00:08:17: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=211&amp;prc=25&amp;Itemid=57#p26532">
Насчет оператора IIF</a></p>

</section>

<section id="link_13_04"><title>
<p>13.4. Пытаюсь сделать кликабельную картинку с помощью тегов MAP и AREA, но ничего не получается</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=h5h1pwbkw5k&amp;t=18s">
https://www.youtube.com/watch?v=h5h1pwbkw5k&amp;</a></p>
<p>Как работать с тегами MAP и AREA: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=793&amp;Itemid=57">
Тема на форуме</a></p>
<p>Shellect. #3178 27.Июл.15 17:27:07: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=128&amp;prc=25&amp;Itemid=57#p20912">
Создаю HTML файл, запускаю - всё работает, как задумано. На странице картинка, в центре круглая область-ссылка. Пытаюсь запустить этот код в QSP - ссылки нет.</a></p>
<p>Gefestions. #3358 25.Авг.15 11:05:06: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=135&amp;prc=25&amp;Itemid=57#p21473">
Есть ли возможность нарисовать карту? что бы при нажатии на изображение (определенную часть) был переход на локацию?</a></p>
<p>Lamer. #4940 25.Фев.17 17:32:43: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=198&amp;prc=25&amp;Itemid=57#p25293">
Можно увидеть, хоть где нибудь, простенький пример использования тегов &lt;map&gt; и соответственно &lt;area&gt;</a></p>
<p>Light_333. #5103 02.Июл.17 16:35:30: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=205&amp;prc=25&amp;Itemid=57#p25964">
Подскажите пожалуйста, поддерживает ли QSP работу с картами изображений?</a></p>

</section>

<section id="link_13_05"><title>
<p>13.5. Не работает *pl в действии с goto</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=h5h1pwbkw5k&amp;t=383s">
https://www.youtube.com/watch?v=h5h1pwbkw5k&amp;</a></p>
<p>Ars_Sacra. #4396 21.Май.16 21:28:01: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=176&amp;prc=25&amp;Itemid=57#p23989">

в АКТЕ 'ДАЛЕЕ' функции 
<emphasis>
PL - не работают. </emphasis>

CLR так же.
</a></p>

</section>

<section id="link_13_08"><title>
<p>13.8. Не работает оператор JUMP — не может найти метку</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=TCve-b6AQMs&amp;t=376s">
https://www.youtube.com/watch?v=TCve-b6AQMs&amp;</a></p>
<p>svandrus. #2874 19.Май.15 20:17:41: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=115&amp;prc=25&amp;Itemid=57#p20071">
у меня вопрос по меткам в локации</a></p>
<p>JUMP надо модифицировать? 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=314&amp;Itemid=57">
Тема на форуме QSP.su</a></p>
<p>Белый Шарик. #3057 07.Июл.15 13:37:00: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=123&amp;prc=25&amp;Itemid=57#p20670">
Да что ж я делаю не так?</a></p>
<p>Small Jerboa. #3336 19.Авг.15 21:26:16: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=134&amp;prc=25&amp;Itemid=57#p21421">
ругается, что не находит такой метки</a></p>
<p>Storm. #3517 20.Сен.15 03:19:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=141&amp;prc=25&amp;Itemid=57#p21764">
можно ли использовать оператор "jump" в операторе "dynamic"?</a></p>
<p>Darvin432. #4394 21.Май.16 11:18:44: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=176&amp;prc=25&amp;Itemid=57#p23984">
Народ а почему не работает команда джамп?</a></p>
<p>Lv2013. #5036 03.Май.17 17:48:52: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=202&amp;prc=25&amp;Itemid=57#p25575">
есть такой код...</a></p>
</section>

<section id="link_13_09"><title>
<p>13.9. Не работает многострочное условие. Как исправить?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=TCve-b6AQMs&amp;t=531s">
https://www.youtube.com/watch?v=TCve-b6AQMs&amp;</a></p>
<p>Kaspar. #3681 10.Дек.15 18:05:55: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=148&amp;prc=25&amp;Itemid=57#p22310">
Подскажите в чём ошибка? Дело в том, что не выводится msg.</a></p>
<p>Lexon. #3909 21.Фев.16 03:13:48: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=157&amp;prc=25&amp;Itemid=57#p23047">
все 3 картинки всплывают когда подходишь к кузницу в любое время и при любом статусе, как сделать что бы 1 картинка была, а не все 3.</a></p>
</section>

<section id="link_13_10"><title>
<p>13.10. Не работает многострочный код. Как исправить?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=2S4nFzzal7Y&amp;t=18s">
https://www.youtube.com/watch?v=2S4nFzzal7Y&amp;</a></p>
<p>Gefestions. #3419 02.Сен.15 16:54:57: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=137&amp;prc=25&amp;Itemid=57#p21592">
помогите плз найти ошибку</a></p>

</section>

<section id="link_13_11"><title>
<p>13.11. Сколько END'ов нужно добавить?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=2S4nFzzal7Y&amp;t=377s">
https://www.youtube.com/watch?v=2S4nFzzal7Y&amp;</a></p>
<p>Gefestions. #3419 02.Сен.15 16:54:57: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=137&amp;prc=25&amp;Itemid=57#p21592">
помогите плз найти ошибку</a></p>
<p>Twinkie. #4781 16.Ноя.16 18:38:54: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=192&amp;prc=25&amp;Itemid=57#p24901">
Не могу понять сколько эндов надо добавить</a></p>
<p>skov. #4800 14.Дек.16 18:32:43: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=193&amp;prc=25&amp;Itemid=57#p24964">
скажите пожалуйста что не так? Почему он не видит функцию IF?</a></p>
</section>

<section id="link_13_12"><title>
<p>13.12. Не работает условие. Как исправить?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=2S4nFzzal7Y&amp;t=838s">
https://www.youtube.com/watch?v=2S4nFzzal7Y&amp;</a></p>
<p>lamerUA. #4151 25.Мар.16 11:48:46: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=167&amp;prc=25&amp;Itemid=57#p23532">
Срабатывают только 2 первых. И как в таком случае проще организовать "сумерки" в игре?</a></p>
<p>skov. #4796 11.Дек.16 13:36:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=192&amp;prc=25&amp;Itemid=57#p24956">
что я делаю не так?</a></p>
<p>Amadeus. #5411 30.Окт.18 23:25:52: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=217&amp;prc=25&amp;Itemid=57#p26918">
Можно ли как-то сделать, чтоб если одна переменная была равна другой? Почему-то выдает ошибку</a></p>
<p>SneakBug8. #5681 19.Май.19 12:12:28: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=228&amp;prc=25&amp;Itemid=57#p17192">
Как в один оператор if загнать несколько условий типо if x=1 y=6 z=39?</a></p>
</section>

<section id="link_13_13"><title>
<p>13.13. Не работают десятичные дроби, дробные числа, числа с запятыми!</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=2S4nFzzal7Y&amp;t=874s">
https://www.youtube.com/watch?v=2S4nFzzal7Y&amp;</a></p>
<p>Талер. #2881 22.Май.15 19:25:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=116&amp;prc=25&amp;Itemid=57#p20116">
Во время назначения переменных, при использовании запятой пишет, "ошибка синтаксиса", а при использовании точки "неизвестное действие"</a></p>
<p>DeathSpace. #3798 25.Янв.16 20:54:06: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=152&amp;prc=25&amp;Itemid=57#p22674">
нужны коэффициенты например 0.05, но их нельзя писать т.к. выходит ошибка</a></p>
<p>SneakBug8. #5731 19.Май.19 13:05:03: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=230&amp;prc=25&amp;Itemid=57#p18405">
Умеет ли QSP работать с дробными числами?</a></p>

</section>
</section>

<section id="link_14"><title>
<p>14. Вопросы о предметах</p>
</title>

<section id="link_14_01"><title>
<p>14.1. Как добавить предмет в окно предметов?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=VRRPLrP72Ds&amp;t=18s">
https://www.youtube.com/watch?v=VRRPLrP72Ds&amp;</a></p>

</section>

<section id="link_14_02"><title>
<p>14.2. Как удалить предмет из окна предметов?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=VRRPLrP72Ds&amp;t=143s">
https://www.youtube.com/watch?v=VRRPLrP72Ds&amp;</a></p>
<p>rutigl. #2991 17.Июн.15 16:55:12: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=120&amp;prc=25&amp;Itemid=57#p20499">
Разве нельзя удалять предмет из инвентаря по индексу?</a></p>

</section>

<section id="link_14_03"><title>
<p>14.3. Как удалить все предметы?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=VRRPLrP72Ds&amp;t=374s">
https://www.youtube.com/watch?v=VRRPLrP72Ds&amp;</a></p>
<p>WastedCarl. #5300 01.Май.18 22:06:38: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=213&amp;prc=25&amp;Itemid=57#p26642">
После смерти игрока все предметы должны исчезнуть,как это сделать?</a></p>

</section>

<section id="link_14_04"><title>
<p>14.4. Как добавить предмет в определённую позицию в окне предметов?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=VRRPLrP72Ds&amp;t=448s">
https://www.youtube.com/watch?v=VRRPLrP72Ds&amp;</a></p>
<p>Oliver. #4041 09.Мар.16 00:49:31: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=162&amp;prc=25&amp;Itemid=57#p23284">
как сделать так, чтобы предмет "Очистить журнал" был последним, а предмет "Экипировка" первым?</a></p>

</section>

<section id="link_14_05"><title>
<p>14.5. Как заменить один предмет на другой?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=VRRPLrP72Ds&amp;t=551s">
https://www.youtube.com/watch?v=VRRPLrP72Ds&amp;</a></p>
<p>Mr. Black (BiK). #3653 09.Ноя.15 08:32:59: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=147&amp;prc=25&amp;Itemid=57#p22168">
меню у предмета появляется, а вот имя предмета меняться не хочет. Что делать?</a></p>

</section>

<section id="link_14_06"><title>
<p>14.6. Как делать динамические/считаемые предметы?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=4tjOVO8ccrI&amp;t=18s">
https://www.youtube.com/watch?v=4tjOVO8ccrI&amp;</a></p>
<p>Библиотечка, расширяющая возможности инвентаря: 
<a l:href="https://qsp.org/index.php?option=com_content&amp;view=article&amp;id=70:qsp-inventory-advanced-lib-076&amp;catid=36:2009-02-19-06-11-21&amp;Itemid=76">
Страница на QSP.su</a></p>
<p>Одиночка. #2858 14.Май.15 02:48:16: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=115&amp;prc=25&amp;Itemid=57#p20004">
addobj 'Здоровье: &lt;&lt;$Здоровье&gt;&gt; ед.' Добавил в инвентарь, но при изменении переменной здесь ничего не высвечивается, что делать?</a></p>
<p>Белый Шарик. #2947 09.Июн.15 14:09:36: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=118&amp;prc=25&amp;Itemid=57#p20330">
Как сделать, что бы однотипные предметы в инвентарь попадали не отдельными строками, а складывались в одну строку с указанием количества?</a></p>
<p>Lexian13. #4409 24.Май.16 17:31:40: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=177&amp;prc=25&amp;Itemid=57#p24014">
В своей игре использую объект Зелья. Хочу что бы в запасе было несколько. Но чтоб не забивать инвентарь.</a></p>
<p>Aleks Versus. #5594 18.Май.19 10:06:35: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=224&amp;prc=25&amp;Itemid=57#p26370">
Стакающиеся предметы — это считаемые, как я понимаю. Деньги, патроны, одинаковые мечи и прочее. Тема довольно интересная и сложная. Но новичкам обычно предлагают начать с этого:</a></p>
</section>

<section id="link_14_07"><title>
<p>14.7. Как добавить предмет с картинкой но без названия?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=4tjOVO8ccrI&amp;t=366s">
https://www.youtube.com/watch?v=4tjOVO8ccrI&amp;</a></p>
<p>Podkovally. #3706 24.Дек.15 13:37:40: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=149&amp;prc=25&amp;Itemid=57#p22371">
подскажите пожалуйста, как правильно сделать предметы графическими?</a></p>
<p>sergeev_v. #3026 25.Июн.15 23:52:16: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=122&amp;prc=25&amp;Itemid=57#p20588">
При лобавлении в инвентарь предмета с картинуой, сначала идёт картинка, а затем название предмета. Пожалуйста подскажите как убрать название.</a></p>
<p>Lisichka. #3526 26.Сен.15 14:56:49: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=142&amp;prc=25&amp;Itemid=57#p21826">
но стоит только назвать предмет так, чтобы его имя не отображалось, например, '&lt;&lt;$кинжал&gt;&gt;', для того, чтобы осталась одна картинка, и код начинает выделывать фортели и показывать совсем не то, что нужно</a></p>
<p>новичок. #5479 08.Фев.19 23:41:11: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=220&amp;prc=25&amp;Itemid=57#p27084">
как сделать предмет в виде картинки?</a></p>
</section>

<section id="link_14_08"><title>
<p>14.8. Как сделать, чтоб при щелчке по предмету выполнялся какой-либо код?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=4tjOVO8ccrI&amp;t=566s">
https://www.youtube.com/watch?v=4tjOVO8ccrI&amp;</a></p>
<p>Одиночка. #2814 08.Май.15 01:46:06: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=113&amp;prc=25&amp;Itemid=57#p19907">
что нужно прописать, чтобы при нажатии на предмет в инвентаре происходило действие.</a></p>
<p>konolya. #3350 23.Авг.15 11:20:13: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=134&amp;prc=25&amp;Itemid=57#p21462">
Расскажите как используя предмет перейти в локацию, допустим: "Инвентарь", а затем перейти обратно в локацию.</a></p>
<p>Katy. #3456 11.Сен.15 18:35:46: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=139&amp;prc=25&amp;Itemid=57#p21639">
как сделать так, чтобы при выборе предмета появлялось его описание?</a></p>
<p>Lolopok. #4659 16.Сен.16 21:12:15: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=187&amp;prc=25&amp;Itemid=57#p24653">
как сделать вывод описания предмета по клику в основное окно/стат?</a></p>
<p>FreshBlood. #4907 10.Фев.17 19:41:55: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=197&amp;prc=25&amp;Itemid=57#p25207">
как сделать так, чтобы при нажатии предмета в инвентаре на окно дополнительного описания выводился текст?</a></p>
<p>NaViGaToR. #4916 14.Фев.17 18:54:00: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=197&amp;prc=25&amp;Itemid=57#p25231">
Как сделать чтобы при нажатии на предмет в инвенторе открывалось окно действий?</a></p>
<p>Alcohol. #4993 16.Апр.17 13:45:26: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=200&amp;prc=25&amp;Itemid=57#p25479">
как сделать так, чтобы при нажатии на предмет в инвентаре в окне дополнительного описания выводилось описание предмета?</a></p>
<p>loony25. #5238 04.Мар.18 20:31:45: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=210&amp;prc=25&amp;Itemid=57#p26487">
Как сделать так, чтобы при нажатии использовать игрока перекинуло на другую локацию?</a></p>
</section>

<section id="link_14_09"><title>
<p>14.9. Как снять выделение предмета?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=7OCfh3TxLbk&amp;t=18s">
https://www.youtube.com/watch?v=7OCfh3TxLbk&amp;</a></p>
<p>Axil. #2894 31.Май.15 22:49:41: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=116&amp;prc=25&amp;Itemid=57#p20231">
Как сделать чтобы на выбраный предмет в инвентаре можно было кликнуть еще раз?</a></p>

</section>

<section id="link_14_10"><title>
<p>14.10. Как сделать два списка предметов?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=TWAA2cq-hhk&amp;t=18s">
https://www.youtube.com/watch?v=TWAA2cq-hhk&amp;</a></p>

</section>

<section id="link_14_11"><title>
<p>14.11. Как сделать, чтобы плеер выполнял определённый код при добавлении любого предмета?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=7OCfh3TxLbk&amp;t=279s">
https://www.youtube.com/watch?v=7OCfh3TxLbk&amp;</a></p>
<p>Одиночка. #4130 19.Мар.16 16:21:20: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=166&amp;prc=25&amp;Itemid=57#p23440">
Можно ли сделать так, чтобы при добавлении любого предмета в инвентарь какая-либо переменная менялась автоматически?</a></p>

</section>

<section id="link_14_12"><title>
<p>14.12. Как сделать два разных предмета с одинаковыми названиями?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=7OCfh3TxLbk&amp;t=495s">
https://www.youtube.com/watch?v=7OCfh3TxLbk&amp;</a></p>

</section>

<section id="link_14_13"><title>
<p>14.13. Как сделать многоуровневый рюкзак?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=TWAA2cq-hhk&amp;t=1177s">
https://www.youtube.com/watch?v=TWAA2cq-hhk&amp;</a></p>
<p>Darvin432. #4373 16.Май.16 11:05:21: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=175&amp;prc=25&amp;Itemid=57#p23951">
Как сделать рюкзак? то есть что бы на панели предметов был просто "инвентарь" а уже если заходить в него то там(например в доп окне) показывался весь список предметов.</a></p>
<p>Многоуровневый рюкзак: 
<a l:href="https://qsp.org/components/com_agora/img/members/248/multibag.qsp">
Скачать пример</a></p>
</section>

<section id="link_14_14"><title>
<p>14.14. Можно ли выводить предметы не в окне предметов?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=7OCfh3TxLbk&amp;t=670s">
https://www.youtube.com/watch?v=7OCfh3TxLbk&amp;</a></p>
<p>Lisichka. #3519 23.Сен.15 00:27:25: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=141&amp;prc=25&amp;Itemid=57#p21803">
можно ли сделать так, чтобы предметы в окне инвентаря отображались не один за другим, а были как бы в таблице?</a></p>
<p>Предметы не в окне предметов: 
<a l:href="https://qsp.org/components/com_agora/img/members/248/invent.zip">
Скачать пример</a></p>

</section>
</section>

<section id="link_15"><title>
<p>15. Вопросы о строке ввода</p>
</title>
<section>
<p>Раздел о Строке Ввода в справке: 
<a l:href="https://wiki.qsp.org/help:inputs">
wiki.qsp.su/inputs</a></p>
</section>

<section id="link_15_01"><title>
<p>15.1. Зачем вообще нужна строка ввода (поле ввода)?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=1FGiKZLiNP8&amp;t=18s">
https://www.youtube.com/watch?v=1FGiKZLiNP8&amp;</a></p>
<p>Строка ввода используется в парсерных играх: 
<a l:href="https://ifwiki.ru/Парсерные_игры">
ifwiki.ru/Парсерные игры</a></p>
<p>oleksandrigo (TEMP_USER). #5246 11.Мар.18 18:34:42: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=210&amp;prc=25&amp;Itemid=57#p26516">
Зачем нужно поле ввода в плеере?</a></p>
<p>Alcohol. #5025 27.Апр.17 17:02:05: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=202&amp;prc=25&amp;Itemid=57#p25547">
Как сделать в игре что-то типа консоли?</a></p>
</section>

<section id="link_15_02"><title>
<p>15.2. Как задействовать строку ввода в игре?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=1FGiKZLiNP8&amp;t=117s">
https://www.youtube.com/watch?v=1FGiKZLiNP8&amp;</a></p>
<p>Axi.Lex. #4639 04.Сен.16 23:25:32: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=186&amp;prc=25&amp;Itemid=57#p24603">
Как задействовать строку ввода?</a></p>
<p>Gefestions. #4827 05.Янв.17 19:14:06: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=194&amp;prc=25&amp;Itemid=57#p25040">
Как сделать обработку команд через поле ввода</a></p>

</section>
</section>

<section id="link_16"><title>
<p>16. Вопросы по вёрстке</p>
</title>
<section>
</section>

<section id="link_16_01"><title>
<p>16.01. Можно ли писать текст поверх вставленной картинки (не бэкграунда)?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=_L0MJaaWJAo&amp;t=18s">
https://www.youtube.com/watch?v=_L0MJaaWJAo&amp;</a></p>
<p>Mr.Crazzyr. #3019 25.Июн.15 15:30:55: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=121&amp;prc=25&amp;Itemid=57#p20575">
Можно ли писать поверх вставленной картинки (не бекграунда)?</a></p>

</section>

<section id="link_16_02"><title>
<p>16.02. Возможно ли сделать плавный переход между локациями?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=_L0MJaaWJAo&amp;t=124s">
https://www.youtube.com/watch?v=_L0MJaaWJAo&amp;</a></p>
<p>Mr.Crazzyr. #3019 25.Июн.15 15:30:55: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=121&amp;prc=25&amp;Itemid=57#p20575">
возможно ли реализовать плавный переход между локациями?</a></p>

</section>

<section id="link_16_03"><title>
<p>16.03. Как расположить картинку справа, а текст слева?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=_L0MJaaWJAo&amp;t=248s">
https://www.youtube.com/watch?v=_L0MJaaWJAo&amp;</a></p>
<p>Mr.Crazzyr. #3025 25.Июн.15 21:36:24: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=121&amp;prc=25&amp;Itemid=57#p20586">
как его сделать, что картинка была слева, а сообщение справа на одном уровне.</a></p>
<p>Aaaspavel. #3971 05.Мар.16 08:54:22: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=159&amp;prc=25&amp;Itemid=57#p23200">
как сделать для картинки 350х600 чтобы текстовый блок располагался справа или слева от картинки?</a></p>
<p>WeReT. #4076 11.Мар.16 19:32:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=164&amp;prc=25&amp;Itemid=57#p23332">
Как сделать так, что бы картинки выводились не сверху вниз, а слева на право?</a></p>
<p>Совёнок. #4430 02.Июн.16 18:42:38: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=178&amp;prc=25&amp;Itemid=57#p24077">
Как вставить изображение в окно описания перед текстом?</a></p>
</section>

<section id="link_16_04"><title>
<p>16.04. Как ограничить размер выводимого изображения?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=_L0MJaaWJAo&amp;t=394s">
https://www.youtube.com/watch?v=_L0MJaaWJAo&amp;</a></p>
<p>Katy. #3472 13.Сен.15 05:04:38: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=139&amp;prc=25&amp;Itemid=57#p21673">
Можно сделать, чтобы вставляемая картинка как-нибудь ограничивалась в размере, а не занимала всё пространство?</a></p>

</section>

<section id="link_16_05"><title>
<p>16.05. Как сделать рамку окна основного описания?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=la-2HpjAiic&amp;t=18s">
https://www.youtube.com/watch?v=la-2HpjAiic&amp;</a></p>
<p>Deonder. #3606 02.Ноя.15 18:07:06: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=145&amp;prc=25&amp;Itemid=57#p22103">
Возможно ли сделать так чтобы картинки шли по контуру основного окна?</a></p>

</section>

<section id="link_16_06"><title>
<p>16.06. Как сделать вывод предметов магазина не длинным списком, а в виде таблицы?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=la-2HpjAiic&amp;t=258s">
https://www.youtube.com/watch?v=la-2HpjAiic&amp;</a></p>
<p>DeathSpace. #3775 21.Янв.16 23:27:22: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=151&amp;prc=25&amp;Itemid=57#p22616">
предметы в магазине у меня расположены вертикально ... как сделать так чтобы например 1 сет брони у меня был расположен горизонтально?</a></p>

</section>

<section id="link_16_07"><title>
<p>16.7. Можно ли зеркально отразить картинку методами плеера?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=_L0MJaaWJAo&amp;t=508s">
https://www.youtube.com/watch?v=_L0MJaaWJAo&amp;</a></p>
<p>CH_B_L. #4312 30.Апр.16 18:06:22: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=173&amp;prc=25&amp;Itemid=57#p23837">
как-нибудь можно с помощью кода в игре зеркально отразить картинку справа-налево?</a></p>
<p>Morning Star. #5177 29.Дек.17 02:11:56: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=208&amp;prc=25&amp;Itemid=57#p26288">
 есть ли какой-то код, чтобы вставленные картинки автоматически подгонялись под разрешение экрана?</a></p>
</section>

<section id="link_16_08"><title>
<p>16.8. Вывожу в окно табличку, а потом текст, но между текстом и табличкой возникают пустые строки. Что это и как этого избежать?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=Q5-AEr4Vdwk&amp;t=18s">
https://www.youtube.com/watch?v=Q5-AEr4Vdwk&amp;</a></p>
<p>BrainFK. #4207 01.Апр.16 09:57:25: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=169&amp;prc=25&amp;Itemid=57#p23633">
Как избавиться от лишнего пространства картинки внизу таблицы?</a></p>
<p>svandrus.#3059 07.Июл.15 14:27:28: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=123&amp;prc=25&amp;Itemid=57#p20672">
Табличка в порядке, но вот если располагать ниже неё ещё какой-нибудь текст, появляется здоровенный пробел...</a></p>
<p>Bup0H. #4545 26.Июл.16 17:32:30: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=182&amp;prc=25&amp;Itemid=57#p24415">
В qsp не могу разобраться с таблицей</a></p>
<p>Darvin432. #4814 25.Дек.16 13:51:07: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=193&amp;prc=25&amp;Itemid=57#p25003">
как сделать таблицу в главном окне?</a></p>
<p>zeek17. #5428 31.Дек.18 16:47:35: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=218&amp;prc=25&amp;Itemid=57#p27014">
Можно ли как-нибудь задать ширину ячейки таблицы "не больше 50%", к примеру?</a></p>

</section>

<section id="link_16_09"><title>
<p>16.9. Можно как-нибудь вывести текст в два столбца в классике?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=Q5-AEr4Vdwk&amp;t=210s">
https://www.youtube.com/watch?v=Q5-AEr4Vdwk&amp;</a></p>
<p>Драккан. #3719 27.Дек.15 12:02:10: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=149&amp;prc=25&amp;Itemid=57#p22388">
Можно как нибудь вывести текст в два столба в классике?</a></p>

</section>

<section id="link_16_10"><title>
<p>16.10. Как работать с тегами MAP и AREA?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://youtu.be/CeMLenb-n5w">
https://youtu.be/CeMLenb-n5w</a></p>
<p>Теги MAP и AREA: 
<a l:href="http://htmlbook.ru/html/area">
статья на HTMLBOOK</a></p>
<p>Теги MAP и AREA: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=793&amp;Itemid=57">
тема на форуме QSP.su</a></p>
<p>Shellect. #3178 27.Июл.15 17:27:07: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=128&amp;prc=25&amp;Itemid=57#p20912">
Создаю HTML файл, запускаю - всё работает, как задумано. На странице картинка, в центре круглая область-ссылка. Пытаюсь запустить этот код в QSP - ссылки нет.</a></p>
<p>Gefestions. #3358 25.Авг.15 11:05:06: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=135&amp;prc=25&amp;Itemid=57#p21473">
Есть ли возможность нарисовать карту? что бы при нажатии на изображение (определенную часть) был переход на локацию?</a></p>
<p>Lamer. #4940 25.Фев.17 17:32:43: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=198&amp;prc=25&amp;Itemid=57#p25293">
Можно увидеть, хоть где нибудь, простенький пример использования тегов &lt;map&gt; и соответственно &lt;area&gt;</a></p>
<p>Light_333. #5103 02.Июл.17 16:35:30: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=205&amp;prc=25&amp;Itemid=57#p25964">
Подскажите пожалуйста, поддерживает ли QSP работу с картами изображений?</a></p>

</section>
</section>

<section id="link_17"><title>
<p>17. Вопросы о сохранениях</p>
</title>

<section id="link_17_01"><title>
<p>17.1.  Как запретить игроку самостоятельно сохранять игру?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=D9zfeG5IWYE&amp;t=18s">
https://www.youtube.com/watch?v=D9zfeG5IWYE&amp;</a></p>
<p>Ontario. #5666 19.Май.19 10:11:55: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=227&amp;prc=25&amp;Itemid=57#p17136">
Нужно выключить возможность сохраняться где угодно и сделать возможность сохраняться там где мне это нужно</a></p>
</section>

<section id="link_17_02"><title>
<p>17.2.   Во время теста игры делал сохранения, затем внёс в игру несколько правок, но сохранения перестали загружаться. Почему так происходит, и что теперь делать?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=D9zfeG5IWYE&amp;t=95s">
https://www.youtube.com/watch?v=D9zfeG5IWYE&amp;</a></p>
<p>Aaaspavel. #4138 20.Мар.16 19:06:26: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=166&amp;prc=25&amp;Itemid=57#p23457">
открыл блокнотом сейв, нашёл шрифт, автозаменой сменил на подходящий - сейв не хочет открываться...</a></p>
<p>Михаил Юматов. #4669 22.Сен.16 10:21:15: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=187&amp;prc=25&amp;Itemid=57#p24665">
Как обновиться на новую версию игры, сохранив всё нажитое на старой версии, чтобы не пришлось набирать всё заного и развиваться после обновления</a></p>
<p>TEMP_USER. #5267 26.Мар.18 20:27:15: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=211&amp;prc=25&amp;Itemid=57#p26573">
Что делает Код:debug = 1и для чего он нужен?</a></p>
</section>

<section id="link_17_03"><title>
<p>17.3.  Как сделать чекпойнты в игре?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=D9zfeG5IWYE&amp;t=219s">
https://www.youtube.com/watch?v=D9zfeG5IWYE&amp;</a></p>
<p>Решение по чекпоинтам: 
<a l:href="https://qsp.org/index.php?option=com_content&amp;view=article&amp;id=120:2012-03-21-03-39-37&amp;catid=36:2009-02-19-06-11-21&amp;Itemid=76">
статья на qsp.su</a></p>
<p>DeathSpace. #4087 14.Мар.16 19:27:42: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=164&amp;prc=25&amp;Itemid=57#p23369">
Ребят, как сделать чтобы после проигрыша в игре ее можно было начать с последнего сохранения? avtosave.sav</a></p>
</section>

<section id="link_17_04"><title>
<p>17.4.  Как написать действие, которое при каждом клике сохраняло бы игру в файлы "1.sav" и "2.sav" поочерёдно?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=D9zfeG5IWYE&amp;t=1477s">
https://www.youtube.com/watch?v=D9zfeG5IWYE&amp;</a></p>
<p>Aaaspavel. #4103 16.Мар.16 18:07:39: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=165&amp;prc=25&amp;Itemid=57#p23387">
проблема в сохранениях. как сделать чтобы act сейва делала два сохранения поочерёдно при каждом следующем клике</a></p>

</section>
</section>

<section id="link_18"><title>
<p>18. Вопросы о файлах и модулях</p>
</title>

<section id="link_18_01"><title>
<p>18.1.  Чем отличаются команды `inclib` и `openqst`?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=oi3lFKTI_HI&amp;t=18s">
https://www.youtube.com/watch?v=oi3lFKTI_HI&amp;</a></p>
<p>lamerUA. #4566 11.Авг.16 18:20:01: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=183&amp;prc=25&amp;Itemid=57#p24507">
Если inclib именно "вклеивает" все локации/переменные - то боюсь идея моя не прокатывает авансом. Но может быть все-же осуществимо - просто я использую не тот метод?</a></p>
</section>

<section id="link_18_021"><title>
<p>18.2.  Как сделать лаунчер?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=UVZhiksS1zk&amp;t=18s">
https://www.youtube.com/watch?v=UVZhiksS1zk&amp;</a></p>
<p>Aaaspavel. #4308 29.Апр.16 14:58:39: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=173&amp;prc=25&amp;Itemid=57#p23832">
нужно чтобы при запуске ярлычком навигатора появлялось меню выбора, ну к примеру игра1 или игра2 и в зависимости от выбора игрока запускался соответственно файл start1.qsp или start2.qsp</a></p>
</section>

<section id="link_18_03"><title>
<p>18.3.  Мне нужно узнать, есть ли в папке файл (картинка, музыка и т.д.). Как это сделать?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=UVZhiksS1zk&amp;t=152s">
https://www.youtube.com/watch?v=UVZhiksS1zk&amp;</a></p>
<p>Chaos Legion. #3885 16.Фев.16 17:53:27: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=156&amp;prc=25&amp;Itemid=57#p22957">
при точном количестве файлов сабж не вызывают вопроса, а вот как сделать, чтобы при добавлении новых файлов не менять код?</a></p>
</section>

<section id="link_18_04"><title>
<p>18.4.  Перенёс файл игры из одной папки в другую. В Quest Generator пропали все папки. Почему так происходит, и как этого избежать?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=oi3lFKTI_HI&amp;t=707s">
https://www.youtube.com/watch?v=oi3lFKTI_HI&amp;</a></p>
<p>Зачем нужен файл `.qproj`: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=163&amp;Itemid=57">
Тема на форуме qsp.su</a></p>
<p>mkir. #2997 21.Июн.15 00:13:23: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=120&amp;prc=25&amp;Itemid=57#p20526">
При переносе почему-то из игры пропали все папки. То есть локации остались, но без папок и в жутком беспорядке. что это такое и как с этим бороться?</a></p>
</section>

<section id="link_18_05"><title>
<p>18.5.  В папке с игрой стали появляться файлы с расширением .tmp. Что это за файлы, нужны они, и как избавиться от их появления?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=UVZhiksS1zk&amp;t=665s">
https://www.youtube.com/watch?v=UVZhiksS1zk&amp;</a></p>
<p>Драккан. #3060 07.Июл.15 13:06:42: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=123&amp;prc=25&amp;Itemid=57#p20673">
После запуска игры в папке с игрой образуется файл .tmp, как сделать что бы он не создавался каждый раз заново?</a></p>
<p>mkir. #5118 25.Июл.17 19:47:10: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=205&amp;prc=25&amp;Itemid=57#p26049">
в оригинальных папках с каждым тестом "копятся" какие-то непонятные (временные?) файлы .tmp. Что с ними делать, зачем они нужны?</a></p>

</section>
</section>

<section id="link_19"><title>
<p>19. Изыски</p>
</title>
<section>
</section>

<section id="link_19_01"><title>
<p>19.1.  Как использовать ASCII-графику в QSP?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=y-OafwUm9ow&amp;t=18s">
https://www.youtube.com/watch?v=y-OafwUm9ow&amp;</a></p>
<p>Hungry. #3896 17.Фев.16 12:15:04: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=156&amp;prc=25&amp;Itemid=57#p22971">
Вроде бы уже был этот вопрос (я вроде бы и задавал): как осуществить ascii графику на куспе?</a></p>
</section>

<section id="link_19_02"><title>
<p>19.2.  Как вставить в игру видео?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=y-OafwUm9ow&amp;t=127s">
https://www.youtube.com/watch?v=y-OafwUm9ow&amp;</a></p>
<p>Плеер QSP с поддержкой webm: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=1192&amp;Itemid=57">
Тема на форуме QSP.su</a></p>
<p>Sonnix. #5 17.Фев.18 14:26:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=1192&amp;p=1&amp;prc=25&amp;Itemid=57#p26404">
Новая версия 1.4.2</a></p>
<p>Jack. #3382 29.Авг.15 21:13:54: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=136&amp;prc=25&amp;Itemid=57#p21523">
скажите пожалуйста а в игру можно внедрять коротко митражные ролики ???</a></p>
<p>Fyrchun. #3738 09.Янв.16 18:28:12: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=150&amp;prc=25&amp;Itemid=57#p22436">
Всем привет ,человек я тут новый. У меня вопрос: можно ли QSP воспроизводить видео? ( если да, то как?)</a></p>
<p>satna. #5311 14.Май.18 11:54:44: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=213&amp;prc=25&amp;Itemid=57#p26667">
вопрос как вставить видео в игру</a></p>
<p>Andrik2219. #5494 22.Фев.19 12:57:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=220&amp;prc=25&amp;Itemid=57#p27117">
Как в свою игру вставить webm видео?</a></p>
</section>

<section id="link_19_03"><title>
<p>19.3.  Как сделать так, чтобы текст появлялся на экране постепенно? По буквам?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=y-OafwUm9ow&amp;t=183s">
https://www.youtube.com/watch?v=y-OafwUm9ow&amp;</a></p>
<p>Weliot. #4283 17.Апр.16 06:20:07: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=172&amp;prc=25&amp;Itemid=57#p23780">
А можно ли сделать так, чтобы текст описания появлялся ПОСТЕПЕННО САМ?</a></p>
<p>Lisichka. #4288 17.Апр.16 13:46:41: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=172&amp;prc=25&amp;Itemid=57#p23785">
возможно ли прикрутить кнопку, чтобы скипнуть постепенное появление текста или пока цикл не закончится, его не удастся прервать?</a></p>
</section>

<section id="link_19_04"><title>
<p>19.4.  Как защитить игру от чита?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=y-OafwUm9ow&amp;t=544s">
https://www.youtube.com/watch?v=y-OafwUm9ow&amp;</a></p>
<p>Белый Шарик. #3562 12.Окт.15 11:29:44: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=143&amp;prc=25&amp;Itemid=57#p21941">
есть ли действенный способ закрыть доступ к редактированию игры сторонними людьми?</a></p>
<p>Aaaspavel. #4089 14.Мар.16 19:47:15: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=164&amp;prc=25&amp;Itemid=57#p23371">
вопрос: есть какие-нибудь эффективные варианты пароля на файлы qsp?</a></p>
</section>

<section id="link_19_05"><title>
<p>19.5.  Как задействовать клавиатуру в игре?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=DDmIxbOWbgc&amp;t=18s">
https://www.youtube.com/watch?v=DDmIxbOWbgc&amp;</a></p>
<p>Решение по привязке буквенной клавиатуры от ejikplains: 
<a l:href="https://qsp.org/components/com_agora/img/members/2177/privyazka_klavish_v_klassicheskom_pleere.qsp">
скачать</a></p>
<p>Пример игры с клавиатуры от Mioirel: 
<a l:href="https://qsp.org/index.php?option=com_sobi2&amp;sobi2Task=sobi2Details&amp;sobi2Id=305&amp;Itemid=55">
Игра "Серафим"</a></p>
<p>ejikplains. #5572 18.Май.19 07:58:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=223&amp;prc=25&amp;Itemid=57#p26738">
Биндить клаву заместо действий реально?</a></p>
<p>Nex. #311 17.Июл.17 21:05:43: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=633&amp;p=13&amp;prc=25&amp;Itemid=57#p26034">
zsoft, реально, на яваскрипте сделай.</a></p>
<p>ejikplains. #5580 18.Май.19 07:58:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=224&amp;prc=25&amp;Itemid=57#p26757">
у меня получилось привязать клавиши к действиям в классическом плеере</a></p>
</section>

<section id="link_19_06"><title>
<p>19.6.  Как пропустить прохождение нескольких глав, чтобы протестировать вновь написанную главу и только её?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=DDmIxbOWbgc&amp;t=139s">
https://www.youtube.com/watch?v=DDmIxbOWbgc&amp;</a></p>
<p>HITD. #5095 25.Июн.17 15:05:56: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=204&amp;prc=25&amp;Itemid=57#p25935">
Как можно проверить кусок написанного кода не запуская игру сначала?</a></p>
<p>ejikplains. #5531 18.Май.19 07:58:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=222&amp;prc=25&amp;Itemid=57#p26319">
как запускать для проверки отдельные главы?</a></p>
</section>

<section id="link_19_07"><title>
<p>19.7.  Как из под плеера выполнить произвольную строку кода?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=DDmIxbOWbgc&amp;t=188s">
https://www.youtube.com/watch?v=DDmIxbOWbgc&amp;</a></p>
<p>Отладчик: 
<a l:href="https://wiki.qsp.org/help:debugger">
Страница на wiki.qsp.su</a></p>
<p>Отладчик 2.0: 
<a l:href="https://qsp.org/index.php?option=com_content&amp;id=71&amp;Itemid=56">
Статья на qsp.su</a></p>
<p>mkir. #3175 27.Июл.15 04:08:40: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=127&amp;prc=25&amp;Itemid=57#p20909">
возможно ли настроить внутри игры эдакий ввод команды, чтобы можно было через тот ж INPUT не только значение переменной, но и к тому же имя, какой именно переменной мы хотим что-то назначать?</a></p>
<p>Valvs. #3554 09.Окт.15 11:11:19: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=143&amp;prc=25&amp;Itemid=57#p21929">
Есть ли возможность из клиента (aka плеера) задать значение произвольной переменной?</a></p>
</section>

<section id="link_19_08"><title>
<p>19.8.  Как узнать, на каком устройстве запущена игра? Телефон, компьютер, планшет?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=DDmIxbOWbgc&amp;t=333s">
https://www.youtube.com/watch?v=DDmIxbOWbgc&amp;</a></p>
<p>TEMP_USER. #5261 20.Мар.18 21:32:24: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=211&amp;prc=25&amp;Itemid=57#p26562">
Есть ли способ узнать на каком устройстве запущена игра?</a></p>
<p>Nex. #2 19.Ноя.13 21:05:23: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=658&amp;p=1&amp;prc=30&amp;Itemid=57#p14905">
в Quest Navigator сделана функция GETPLAYER</a></p>
</section>

<section id="link_19_09"><title>
<p>19.9.  Как обновлять переменные на экране?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=DDmIxbOWbgc&amp;t=397s">
https://www.youtube.com/watch?v=DDmIxbOWbgc&amp;</a></p>
<p>Straginski. #4717 23.Окт.16 19:50:40: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=189&amp;prc=25&amp;Itemid=57#p24781">
Нужно что бы в зависимости от выбора в тексте менялась переменная</a></p>
</section>

<section id="link_19_10"><title>
<p>19.10.  Как сделать, чтобы текст выводился снизу вверх?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=yDBsyKk2TPA&amp;t=530s">
https://www.youtube.com/watch?v=yDBsyKk2TPA&amp;</a></p>
<p>NickoAilus. #5197 16.Фев.18 10:53:24: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=208&amp;prc=25&amp;Itemid=57#p26391">
Как сделать так, чтобы текст выводился с нижней левой части экрана?</a></p>
</section>
</section>

<section id="link_20"><title>
<p>20. Конкретные задачи</p>
</title>

<section id="link_20_01"><title>
<p>20.1.  Как сделать возврат на предыдущую локацию?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=v5JRRscDgSM&amp;t=18s">
https://www.youtube.com/watch?v=v5JRRscDgSM&amp;</a></p>
<p>Возврат на предыдущую локацию: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=751&amp;Itemid=57">
Тема на форуме qsp.su</a></p>
<p>Драккан. #3060 07.Июл.15 13:06:42: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=123&amp;prc=25&amp;Itemid=57#p20673">
как после случайного события вернуться на локацию срабатывания этого события</a></p>
<p>svandrus. #3541 01.Окт.15 12:59:43: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=142&amp;prc=25&amp;Itemid=57#p21893">
При переходах с локации на локацию приходится прибегать к этому ... чтобы без проблем вернуться куда надо</a></p>
<p>Сергей. #4700 22.Окт.16 15:40:23: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=189&amp;prc=25&amp;Itemid=57#p24764">
Как организовать мобильный телефон с функций, собственно, телефона и браузера (без возможности выбросить или выложить). По сути нужна переносимая локация в окне предметов</a></p>
<p>NaViGaToR. #4942 26.Фев.17 02:26:42: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=198&amp;prc=25&amp;Itemid=57#p25296">
Хочу сделать кнопку "Назад" которая возвращала на последнюю посещенную локацию</a></p>
<p>Amadeus. #5295 12.Апр.18 20:09:32: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=212&amp;prc=25&amp;Itemid=57#p26617">
Есть ли в QSP команда, которая отвечает за возврат на предыдущую локацию?</a></p>
<p>WastedCarl. #5302 02.Май.18 18:11:01: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=213&amp;prc=25&amp;Itemid=57#p26646">
Инветарь продуман как отдельная локация Как сделать выход с нее равносильным ?</a></p>
</section>

<section id="link_20_02"><title>
<p>20.2.  Как проверить число на чётность?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=qvSAU6PjC2E&amp;t=18s">
https://www.youtube.com/watch?v=qvSAU6PjC2E&amp;</a></p>
<p>Вета. #3878 11.Фев.16 21:50:54: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=156&amp;prc=25&amp;Itemid=57#p22927">
если n - четное число =&gt; условие 1. если n - нечетное число =&gt; условие 2.</a></p>
<p>Lv2013. #5044 05.Май.17 10:18:57: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=202&amp;prc=25&amp;Itemid=57#p25586">
тогда вопрос еще такой, как узнать четное ли число ?</a></p>
<p>Amadeus. #5307 06.Май.18 19:47:41: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=213&amp;prc=25&amp;Itemid=57#p26657">
Есть ли возможность сделать проверку числа переменной по значению "четное/нечетное число"?</a></p>
</section>

<section id="link_20_03"><title>
<p>20.3.  Как сделать шанс на выпадение определённой вещи?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=vR3fdzPczfU&amp;t=18s">
https://www.youtube.com/watch?v=vR3fdzPczfU&amp;</a></p>
<p>Готовый алгоритм на github: 
<a l:href="https://gist.github.com/Riateche/3038910">
https://gist.github.com/Riateche/3038910</a></p>
<p>Драккан. #3054 06.Июл.15 23:16:52: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=123&amp;prc=25&amp;Itemid=57#p20665">
Есть начальная локация (после вступления), нужно добавить кнопку "прогулка". При выполнении в первый раз, должно попасться первое оружие (допустим "труба"). При последующих прогулках должно выпасть одно из 4-х действий...</a></p>
<p>Svartberg. #4927 17.Фев.17 00:11:55: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=198&amp;prc=25&amp;Itemid=57#p25257">
уже в течении нескольких недель бьюсь головой об генератор предметов и единственной моей проблемой является вероятность выпадения предметов</a></p>
<p>ejikplains. #5569 18.Май.19 07:58:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=223&amp;prc=25&amp;Itemid=57#p26730">
Есть ячейка А. В неё должен попадать предмет рандомно из немалого количества разных. Однако, у каждого предмета свой шанс на его выпадение(процент), как возможно реализовать подобное?</a></p>
</section>

<section id="link_20_04"><title>
<p>20.4.  Как сделать, чтобы текст выводился не внизу окна основного описания, а сверху?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=7uU3MeS-Sgw&amp;t=18s">
https://www.youtube.com/watch?v=7uU3MeS-Sgw&amp;</a></p>
<p>De@th K!d. #5496 23.Фев.19 17:21:55: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=220&amp;prc=25&amp;Itemid=57#p27119">
как сделать вывод текста, вбитового в основное окно, в начале локации?</a></p>
</section>

<section id="link_20_05"><title>
<p>20.5.  Как можно удалить часть текста из описания?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=qvSAU6PjC2E&amp;t=272s">
https://www.youtube.com/watch?v=qvSAU6PjC2E&amp;</a></p>
<p>Совёнок. #4098 15.Мар.16 21:33:23: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=164&amp;prc=25&amp;Itemid=57#p23381">
Можно ли как-то выборочно удалить одно из описаний, чтобы остальные остались?</a></p>
</section>

<section id="link_20_06"><title>
<p>20.6.  Как вывести на экран HTML-разметку, не отключая режим распознавания HTML? То есть при usehtml=1</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=qvSAU6PjC2E&amp;t=128s">
https://www.youtube.com/watch?v=qvSAU6PjC2E&amp;</a></p>
<p>svandrus. #2879 21.Май.15 08:30:41: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=116&amp;prc=25&amp;Itemid=57#p20092">
Как сделать так, чтобы в основном окне описаний отображались строки, содержащие теги html не отключая USEHTML?</a></p>
<p>NickoAilus. #5190 18.Янв.18 19:21:13: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=208&amp;prc=25&amp;Itemid=57#p26310">
Здравствуйте... Появилась одна проблема. Мне нужно, чтобы в одном окне показывался текст с HTML-форматированием, а в другом - без. Возможно ли такое сделать?</a></p>

</section>

<section id="link_20_07"><title>
<p>20.7.  Есть несколько переменных с разными значениями. Как получить имя переменной, в которой находится наибольшее значение?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=7uU3MeS-Sgw&amp;t=562s">
https://www.youtube.com/watch?v=7uU3MeS-Sgw&amp;</a></p>
<p>Белый Шарик. #3087 15.Июл.15 10:13:19: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=124&amp;prc=25&amp;Itemid=57#p20760">
Имеется 4 разных числовых переменных, необходимо определить наибольшую по значению</a></p>
<p>sergeev_v. #3069 10.Июл.15 11:09:51: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=123&amp;prc=25&amp;Itemid=57#p20693">
Есть 3 числа, надо определить какое из них самое большое</a></p>

</section>

<section id="link_20_08"><title>
<p>20.8.  Как в QSP сравнить два массива?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=HGX87nDwHRY&amp;t=18s">
https://www.youtube.com/watch?v=HGX87nDwHRY&amp;</a></p>
<p>Белый Шарик. #3259 03.Авг.15 13:11:39: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=131&amp;prc=25&amp;Itemid=57#p21159">
По моему разумению Код:if win = fail : jump 'opp'Сверит весь массив переменных win на равенство всему массиву fail?</a></p>
</section>

<section id="link_20_09"><title>
<p>20.9.  Как сделать вытягивание случайных карт из колоды?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=NsxbBgkI_kE&amp;t=18s">
https://www.youtube.com/watch?v=NsxbBgkI_kE&amp;</a></p>
<p>Тянем карту из колоды: 
<a l:href="https://qsp.org/index.php?option=com_content&amp;view=article&amp;id=114:-10&amp;catid=36:2009-02-19-06-11-21&amp;Itemid=76">
статья на qsp.su</a></p>
<p>Белый Шарик. #3222 30.Июл.15 10:08:48: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=129&amp;prc=25&amp;Itemid=57#p21006">
Подскажите, почему зависает при исполнении? Хочу сделать рандомные значения для трех переменных, но так чтобы они не были равны</a></p>
<p>Pin1221. #3624 04.Ноя.15 11:26:06: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=145&amp;prc=25&amp;Itemid=57#p22122">
Всем привет, нужна ваша помощь. Нужно, чтобы программа выбрала 3 любых случайных действия</a></p>
<p>D31M0S. #5504 05.Апр.19 20:56:05: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=221&amp;prc=25&amp;Itemid=57#p27163">
Как сделать так, чтобы программа вытаскивала карты (переменные) из колоды (массива)?</a></p>
</section>

<section id="link_20_10"><title>
<p>20.10.  Как отсортировать данные?</p>
</title>
<p>Смотреть ответ на ютубе:  
<a l:href="https://www.youtube.com/watch?v=HGX87nDwHRY&amp;t=343s">
https://www.youtube.com/watch?v=HGX87nDwHRY&amp;</a></p>
<p>lamerUA. #4664 19.Сен.16 06:36:26: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=187&amp;prc=25&amp;Itemid=57#p24659">
Идея - список учеников выстроить в порядке убывания очков.КАк?</a></p>
<p>cleep. #5082 21.Июн.17 11:25:30: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=204&amp;prc=25&amp;Itemid=57#p25894">
Возможно ли организовать сортировку в Quest Navigator?</a></p>
</section>

<section id="link_20_11"><title>
<p>20.11.  Как сделать проценты?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=NsxbBgkI_kE&amp;t=472s">
https://www.youtube.com/watch?v=NsxbBgkI_kE&amp;</a></p>
<p>Abrukt. #5360 08.Авг.18 15:28:18: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=215&amp;prc=25&amp;Itemid=57#p26822">
Как работают проценты в QSP?</a></p>
<p>Darvin432. #5490 16.Фев.19 18:39:57: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=220&amp;prc=25&amp;Itemid=57#p27101">
Как использовать проценты?</a></p>
<p>Одиночка. #2851 13.Май.15 21:24:12: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=115&amp;prc=25&amp;Itemid=57#p19996">
А как сделать проценты в игре? Допустим 25 из 100 56 из 100 и так далее?</a></p>
</section>

<section id="link_20_12"><title>
<p>20.12.  Как решить задачу по поиску случайного набора слагаемых?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=Daa6LvyqU4Q&amp;t=18s">
https://www.youtube.com/watch?v=Daa6LvyqU4Q&amp;</a></p>
<p>Genryzz. #4426 01.Июн.16 23:20:43: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=178&amp;prc=25&amp;Itemid=57#p24072">
Нужно получить определенную сумму из случайных чисел. Случайные числа определенны, но их количество зависит от суммы.</a></p>
</section>

<section id="link_20_13"><title>
<p>20.13.  Как разредить текст пробелами?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=YJT9Zk_1LJU&amp;t=18s">
https://www.youtube.com/watch?v=YJT9Zk_1LJU&amp;</a></p>
<p>Разрежение текста: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=962&amp;Itemid=57">
тема на форуме qsp.su</a></p>
<p>ItsHim. #3075 13.Июл.15 12:16:35: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=123&amp;prc=25&amp;Itemid=57#p20734">
Может кто-нибудь подсказать как сделать пробел через каждые три буквы/цифры сплошного слова?</a></p>
</section>

<section id="link_20_14"><title>
<p>20.14.  Как сделать записную книжку в игре?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=YJT9Zk_1LJU&amp;t=323s">
https://www.youtube.com/watch?v=YJT9Zk_1LJU&amp;</a></p>
<p>loony25. #5235 04.Мар.18 17:15:14: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=210&amp;prc=25&amp;Itemid=57#p26483">
появилась идея реализовать внутри нее что-то вроде "Записной книжки". Можно ли вообще такое реализовать и если да, то как?</a></p>
</section>

<section id="link_20_15"><title>
<p>20.15.  Как сделать так, чтобы на локацию можно было зайти только один раз?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=qvSAU6PjC2E&amp;t=411s">
https://www.youtube.com/watch?v=qvSAU6PjC2E&amp;</a></p>
<p>skunsss. #4347 10.Май.16 18:36:08: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=174&amp;prc=25&amp;Itemid=57#p23905">
Подскажите, пожалуйста,как сделать так что-б локация была только одноразово посещаема ?</a></p>
</section>

<section id="link_20_16"><title>
<p>20.16.  Как заставить действия выводиться в нужном мне порядке?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=K0PN86klR_E&amp;t=18s">
https://www.youtube.com/watch?v=K0PN86klR_E&amp;</a></p>
<p>Совёнок. #4140 21.Мар.16 15:21:47: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=166&amp;prc=25&amp;Itemid=57#p23467">
При запуске игры это действие появляется ниже всех остальных доступных действий. Как сделать, чтобы оно было самым первым, или находилось среди других?</a></p>
</section>

<section id="link_20_17"><title>
<p>20.17.  Как сделать в игре книгу? Чтобы её можно было взять и потом прочитать?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=vR3fdzPczfU&amp;t=528s">
https://www.youtube.com/watch?v=vR3fdzPczfU&amp;</a></p>
<p>denedi. #3690 16.Дек.15 11:23:58: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=148&amp;prc=25&amp;Itemid=57#p22320">
как сделать например книгу которую можно взять в инвентарь и потом прочитать?</a></p>
</section>

<section id="link_20_18"><title>
<p>20.18.  Как сделать склад, сундук, тайник, место, в котором можно выкладывать и хранить предметы?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=uK8EOCF4Mok&amp;t=18s">
https://www.youtube.com/watch?v=uK8EOCF4Mok&amp;</a></p>
<p>Одиночка. #2872 17.Май.15 23:17:12: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=115&amp;prc=25&amp;Itemid=57#p20060">
Кто нибудь подскажите, как сделать тайник?</a></p>
</section>

<section id="link_20_19"><title>
<p>20.19.  Как сделать выпадение случайного действия на локации?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=uK8EOCF4Mok&amp;t=465s">
https://www.youtube.com/watch?v=uK8EOCF4Mok&amp;</a></p>
<p>Larson. #5016 22.Апр.17 20:32:04: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=201&amp;prc=25&amp;Itemid=57#p25514">
Как сделать чтобы при посещении локации, пусть она будет называться Портал, случайным образом выводились действия перехода на другую локацию</a></p>
</section>

<section id="link_20_20"><title>
<p>20.20.  Как сделать перемещение на случайную локацию?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=yDBsyKk2TPA&amp;t=18s">
https://www.youtube.com/watch?v=yDBsyKk2TPA&amp;</a></p>
<p>Lv2013. #5027 28.Апр.17 11:20:54: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=202&amp;prc=25&amp;Itemid=57#p25555">
Я может где то что то упустил но я немного не понял как создать правильным путем случайное событие так чтоб в итоге попасть на нужную локацию</a></p>
<p>WastedCarl. #5220 22.Фев.18 20:42:50: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=209&amp;prc=25&amp;Itemid=57#p26435">
Можно ли сделать так что бы действие переносило на рандомную локацию</a></p>
<p>Andrik2219. #5473 06.Фев.19 12:30:27: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=219&amp;prc=25&amp;Itemid=57#p27075">
Всем привет. Подскажите про систему рандомизации что бы при заходе на определенную локацию перекидывало на одну из рандомных локаций</a></p>
</section>

<section id="link_20_21"><title>
<p>20.21.  Как сделать случайный предмет?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=yDBsyKk2TPA&amp;t=288s">
https://www.youtube.com/watch?v=yDBsyKk2TPA&amp;</a></p>
<p>Lv2013. #5031 28.Апр.17 16:34:30: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=202&amp;prc=25&amp;Itemid=57#p25560">
в данный момент я делаю случайные события которые происходят с персонажем от простых типа подобрать монетку до квестов</a></p>
<p>Cow. #3927 24.Фев.16 23:15:48: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=158&amp;prc=25&amp;Itemid=57#p23110">
Допустим у меня есть 10 предметов, и надо сделать так, чтобы выбралось рандомом один из них</a></p>

</section>

<section id="link_20_22"><title>
<p>20.22.  Как узнать, какие переменные есть в игре? Может для этого есть специальная команда?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=qvSAU6PjC2E&amp;t=553s">
https://www.youtube.com/watch?v=qvSAU6PjC2E&amp;</a></p>
<p>mkir. #3140 22.Июл.15 23:11:53: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=126&amp;prc=25&amp;Itemid=57#p20860">
а есть ли какая возможность узнать количество переменных в игре?</a></p>

</section>
</section>

<section id="link_21"><title>
<p>21. Вопросы о Quest Generator (v.4.0.0 beta)</p>
</title>

<section id="link_21_01"><title>
<p>21.1.  Мне часто приходится вставлять одинаковые или почти одинаковые кусочки кода. Как автоматизировать этот процесс?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=nZtsLkiOv0o&amp;t=197s">
https://www.youtube.com/watch?v=nZtsLkiOv0o&amp;</a></p>

</section>

<section id="link_21_02"><title>
<p>21.2.  Делаю преформатирование пробелами, чтобы появлялась вертикальная полоска, так нагляднее. Нет ли какой-то комбинации клавиш, чтобы не тыкать пробел по пять раз?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=nZtsLkiOv0o&amp;t=478s">
https://www.youtube.com/watch?v=nZtsLkiOv0o&amp;</a></p>
<p>saks. #3498 16.Сен.15 20:29:14: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=140&amp;prc=25&amp;Itemid=57#p21719">
многие используют в кодах отступы чтобы выделять куски кода, и пунктирную линию ведущую от начала куска до его завершения. естли какаято комбинация клавиш или настройка чтобы не тыкать пробелы для отступа или все тыкают пробелы?</a></p>
</section>

<section id="link_21_03"><title>
<p>21.3.  Как свернуть кусочек кода, написанный под комментарием?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=nZtsLkiOv0o&amp;t=629s">
https://www.youtube.com/watch?v=nZtsLkiOv0o&amp;</a></p>
<p>Chaos Legion. #3967 03.Мар.16 21:37:43: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=159&amp;prc=25&amp;Itemid=57#p23194">
Есть ли способ или какая то разметка, али мудрость народная, чтобы все это красиво свернуть? В идеале, чтобы оставался один коммент</a></p>

</section>
</section>

<section id="link_23"><title>
<p>22. Ограничения</p>
</title>
<section>
<p>Ограничения QSP: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=392&amp;Itemid=57">
Тема на форуме qsp.su</a></p>
</section>

<section id="link_23_01"><title>
<p>22.1.  Видел в справке ограничение на 100 подключаемых файлов. Это что, я не смогу использовать более ста файлов картинок и музыки?</p>
</title>

<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=5pSZ3-itIOY&amp;t=18s">
https://www.youtube.com/watch?v=5pSZ3-itIOY&amp;</a></p>
<p>Белый Шарик. #2944 09.Июн.15 09:03:49: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=118&amp;prc=25&amp;Itemid=57#p20327">
Видел в ограничениях программы - использование не более 100 подключаемых файлов. Т.е. в каждой игре я смогу использовать, например 70 картинок и 30 звуков = 100 файлов, не более?</a></p>
<p>mkir. #5140 06.Сен.17 03:29:25: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=206&amp;prc=25&amp;Itemid=57#p26114">
Скорее всего, я что-то путаю и даже догадываюсь что, но точно помню, об ограничении подключаемых файлов в 100, однако, например, в этой игре их несколько тысяч. Получается, о чем здесь шла речь?</a></p>

</section>

<section id="link_23_02"><title>
<p>22.2.  Хочу разместить на локации около 100 действий. Это вообще возможно?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=5pSZ3-itIOY&amp;t=103s">
https://www.youtube.com/watch?v=5pSZ3-itIOY&amp;</a></p>
<p>De@th K!d. #3619 03.Ноя.15 20:28:49: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=145&amp;prc=25&amp;Itemid=57#p22117">
Каково максимальное число действий, которые можно впихнуть на одну локацию?</a></p>
</section>

<section id="link_23_03"><title>
<p>22.3.  Генерирую переменные с помощью оператора dynamic, и вдруг выходит ошибка 123. Что это, и как с этим бороться?</p>
</title>
<p>Смотреть ответ на ютубе: 
<a l:href="https://www.youtube.com/watch?v=5pSZ3-itIOY&amp;t=144s">
https://www.youtube.com/watch?v=5pSZ3-itIOY&amp;</a></p>
<p>DaGrozz. #3806 27.Янв.16 11:25:37: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=153&amp;prc=25&amp;Itemid=57#p22690">
Так вот вопрос первый, так как нпс около 2000-2500 и этот массив постоянно растет в какой момент будет слишком большой индекс массива, как тут хотя бы приблизительно прикинуть?</a></p>
<p>DaGrozz. #3836 03.Фев.16 15:06:30: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=154&amp;prc=25&amp;Itemid=57#p22850">
Ошибка 123 Слишком много переменных с одинаковым хэшем!</a></p>
<p>Small Jerboa. #3875 11.Фев.16 00:43:13: 
<a l:href="https://qsp.org/index.php?option=com_agora&amp;task=topic&amp;id=40&amp;p=155&amp;prc=25&amp;Itemid=57#p22916">
Надо по вставлять кучу (предполагаю 5-10 тысяч строк) текста в строковых переменных. Лучше сделать это через обычные переменные? какой из вариантов будет меньше памяти жрать, быстрее работать, меньше ограничений на применение?</a></p>
</section>
</section>

</section>
</section>
</section>
 </body>
 <binary id="cover.png" content-type="image/png"></binary>
</FictionBook>