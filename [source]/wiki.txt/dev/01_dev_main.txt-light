==Служебная страница==
[:dev_main]

[:sluzhebnaja_stranica]

	*  [Статистика](../dev/stats.html)
	*  Navigator: свёрстанный шаблон экрана называется "сценой". Изменение оформление удобнее всего сделать переключением сцен.
=Сделано=
	*  Добавить ссылку [http://htmlacademy.ru/](http://htmlacademy.ru/) в справку.
		*  В общую нельзя - в классике HTML неполный.
		*  Нужно куда-нибудь в Навигатор. **Добавлено в qSpider**
	*  Дописать [Что такое QSP?](../help:qsp) и картинки туда.
		* X Дописано. Без картинок пока.
	*  Общие слова к статьям:
		*  [Условия](help:conditional)
		*  [Пользовательские функции и процедуры](help:organizing)
		*  [Переходы внутри локации, циклы](help:jump)??
		*  [Динамический код](help:dynamical)
		*  [Диалоговое окно](help:msgbox)??
		*  [Звук](help:sound)??
		*  [Настройки интерфейса](help:interface)??
		*  [Работа с файлами, использование модулей](help:modules)
		*  [Реальное время](help:realtime)
	*  Переделать [Меню](../help/menu.html)
	*  Переделать [Порядок работы интерпретатора](help:principle)
	*  Переделать [Регулярные выражения](help:regexp)
	*  Утилиты или средства разработки
		*  [TXT2GAM](../help/txt2gam.html)
		*  [QGen](../help/qgen.html) - пока оставлю тут, потом подумаю, нужна ли статья
		*  [qgen](../help/qgen.html)
		*  [txt2gam](../help/txt2gam.html)
	*  Добавить куда-нибудь все способы экранирования в одном месте:	
	```qsp
	'<a href="exec:GOTO ''верстак''">версак</a>' 
	"<a href=""exec:GOTO 'верстак'"">версак</a>" 
	{<a href="exec:GOTO 'верстак'">версак</a>} 
	'<a href="exec:GOTO \"верстак\"">версак</a>' 
	'<a href="exec:GOTO &quot;верстак&quot;">версак</a>'

	!Ещё способ, который может пригодиться с глубокими уровнями вложенности:
	'<a href="exec:GOTO '+"'верстак'"+'">версак</a>' 
	```
	*  Возможно перенести подвыражения:
		*  Разбить строковые константы и строковые функции на две статьи
		*  Строки сразу после переменных
		*  Подвыражения в выражениях
	Данный раздел реструктурирован и переписан. 


=К удалению, или как архивная статья=
	*  Недописанный кусок структуры:
		*  Quest Navigator
		Думаю Quest Navigator задвинуть в дальний угол, пока Некс не вернётся к разработке, или пока кто-то другой не возьмётся и не избавит Навигатор от текущих недостатков. В принципе, теперь есть qSpider, поэтому предлагаю сконцентрироваться на его описании. Ниже разделы навигатора.
			*  Список файлов игры
			*  Файл настроек игры
			*  Файл шаблона и файл стилей [1)](#fn__1) [2)](#fn__2)
				*  Шрифты
			*  Файл JS [3)](#fn__3)
			*  Нюансы переноса с предыдущих плееров, отличия.
			*  Гайд по кроссплатформенности [4)](#fn__4)

=Сделать=
[:sdelat]

	*  Жизненно необходим раздел справочного описания всех ключевых слов, системных переменных и синтаксем, как это сделано сейчас в справочнике "Как сделать?" с примерами, с большим количеством примеров. Фактически нужна, как мне кажется, по каждому ключевому слову статья, либо - операторы, функции, системные переменные, операции и т.д.
	*  Статья по навешиванию событий на различные объекты в qSpider, чтобы можно было управлять содержимым и делать "подвижный" интерфейс в qSpider. Короче, надо больше информации по qSpider.

	*  Доработки навигации
		*  Ссылки вперед/назад и сверху и снизу
			*  Как первую половину строки прижать влево, а вторую - вправо?
		*  К `Nex`у: выделение текущей страницы в левом меню.
			*  Жирностью, выключением ссылки, цветом?
		*  К `Nex`у: баг - в левом меню выделяется жирным последняя отредактированная страница
		*  К `Nex`у: нужна более заметная ссылка на вики в разделе сайта "Разработчикам".
	*  Сделать выделение символов `~&!%*^|-+=,./?<>;:()[]{}` в sxh.

	
	*  Впихнуть куда-нибудь статью "Как писать игры" - в каком порядке удобнее обдумывать и писать, что изначально лучше локации прописать на листочке и т.п.
	*  Самоучители
		*  regexp
	*  [Регулярные выражения](help:regexp) - выглядит не очень
		*  Нужен самоучитель
		

=Подумать/обсудить=
[:podumatobsudit]

	
	*  [HTML](help:html) - выглядит не очень
		*  Можно отложить до релиза Навигатора.
	*  Самоучители - отдельный неймспейс, отдельные неймспейсы или howto?
	*  Как хранить файлы с примерами кода, там же или перезалить в wiki (все яйца в одну корзину)?
	*  Возможно статью "Известные баги"
	*  Возможно отдельные статьи по концепциям "блоков кода" <и "переменных с двумя значениями"> переменные с двумя значениями больше не актуальны. Отдельная статья по блокам кода актуальна.
	*  Возможно вынести базовые функции из [программного кода](help:coding)
	*  В какой момент обрабатываются подвыражения?
	*  На странице циклов сделать примеры циклов do-while и while-do.

=Статьи вне меню=
[:stati_vne_menju]

	Добавить в меню обязательно обновлённые лицензии
	*  `[О лицензиях](#qsp_license)` <<<---------------------------------------

	После раздела утилиты и средства разработки вставить раздел модули
	*  `Модули` <<<------- здесь будет раздел, посвящённый отдельным модулям с краткой информацией и примерами по их использованию
	*  []   <<<------- этот раздел не должен быть доступен через ссылки вперёд-назад, так как логически он не относится к обуч
	*  []   <<<------- ающей информации. Это лишь дополнительная информация.

	*  [dummy](../help/dummy.html)
	*  [Лицензионное соглашение Quest Soft Player](../help/qsp_license.html)
		*  [GNU GPL](../help/gnu_gpl_eng.html)
		*  [GNU GPL на русском](../help/gnu_gpl_rus.html)
	*  [Разбор изменений движка](../dev/razbor_izmenenij_dvizhka.html)
	*  [sidebar](../sidebar.html) <--- это боковое меню.

=Список плагинов=
[:spisok_plaginov]

	*  [statdisplay](http://www.dokuwiki.org/plugin%3Astatdisplay)
	*  Здесь должно быть продолжение

=Общие принципы для статей=
[:obschie_principy_dlja_statej]

--Как можно читать справку--
[:kak_mozhno_chitat_spravku]

	*  `Последовательно` читать ВСЕ статьи подряд, пропуская неинтересные.
		*  Ссылки сверху и снизу статей
		*  Возможно стоит реализовать другой вариант, но нет идей.
		*  Последовательное изложение информации
			*  Т.е. минимальное количество отсылок "вперёд"
			*  Если не ошибаюсь, то у меня это нарушается только с регэкспами, но так лучше.
			*  Возможно стоит перенести вывод на экран, предметы и действия до программирования в структуре
	*  `Искать необходимое`
		*  Оглавление
			*  Удобная структура
			*  Ссылки на оглавление
				*  В каждой статье
				*  Или в меню слева
			*  Говорящие названия статей
		*  Список ключевых слов со ссылками на статьи.
		*  Перекрёстные ссылки между статьями
		*  Словарь терминов

--Удобочитаемость--
[:udobochitaemost]

	*  Разбиение материала по статьям должно быть удобным и логичным.
		*  Пока существует несколько актуальных плееров, приходится на это оглядываться.
			*  Должно легко сводиться к одному плееру в будущем.
	*  `Выделение` новых ключевых слов, чтобы взгляд мог зацепиться.
		*  Реализовано `жирным`
	*  Выделение ключевых моментов
		*  В каждой статье индивидуально
		*  Но так, чтобы не пестрило
	*  Характерные примеры
		*  Нужно будет многие переделать
			*  Пока на это нет сил, времени и воображения

[1)](#fnt__1) 
Похоже будет лучше объединить эти две статьи, не могу придумать, как будет  хорошо в разделенном виде
[2)](#fnt__2) 
Список id, классов и кусочков body. Разные варианты для разных целей. Возможно ссылки на самоучители
[3)](#fnt__3) 
Список колбэков и переменных. Возможно ссылки на самоучители типа [http://learn.javascript.ru/](http://learn.javascript.ru/) . Возможно примеры кода для разных целей.
[4)](#fnt__4) 
я не возмусь писать, но статья нужная для тех, кто будет шаблоны править

