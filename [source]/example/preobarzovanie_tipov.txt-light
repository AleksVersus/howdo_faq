==Преобразование типов в QSP==
[:preobrazovanije_tipov_qsp]

Эта **статья** поможет вам ''разобраться'' в таком ''[*сложном вопросе*](#linetest)'', как преобразование типов в операции присвоения, или в выражениях.

В QSP существует всего два типа значений: числовой и текстовый. Числовой означает любое целочисленное число в пределах от -2147483648 до 2147483647; а текстовый — любую строку текста (нет, на самом деле любую. Ограничения для строк — 2 Гб текста).

Вот как выглядят такие значения:

```qsp
	! числовые значения
	123
	345
	999

	!текстовые значения
	"строка текста"
	'Ещё одна строка текста'
	"Третья строка текста"
```

Для хранения значений мы используем переменные или массивы. И точно так же массивы и переменные (далее просто — переменные) бывают двух типов.

Чтобы записать в числовую переменную числовое значение, мы просто пишем имя переменной, знак = и число:

```css
/*
    данный стиль описывает внешний вид общего блока, играющего в т.ч. роль затенения
    (обратите внимание, на какую область в вашем шаблоне распространяется затенение)
*/
.modalDialog { 
    position: fixed; 
    top: 0;    right: 0;    bottom: 0; left: 0; 
    background: hsla(0,0%,0%,0.8); 
    z-index: 50; /* выводится одним из верхних слоёв */
    opacity: 0; /* видимость на нуле, чтобы игрок не видел содержимое */
    -webkit-transition: opacity 400ms ease-in; /* обеспечивает плавное появление */
    pointer-events: none; /* скрывает блок от курсора мыши */
} 
/* 
    псевдокласс :target применяется к тому элементу
    к которому обратился браузер/плеер по нажатию на ссылку (по id)
*/
.modalDialog:target { 
    opacity: 1; /* видимость повышается до 100% */
    pointer-events: auto; /* с блоком снова может работать мышь */
} 
/* стилизация дочернего блока, т.е. непосредственно окошка */
.modalDialog > div { 
    width: 400px; 
    position: relative; 
    margin: 10% auto; 
    padding: 5px 20px 13px 20px; 
    border-radius: 10px; 
    background: #fff; 
    background: -webkit-linear-gradient(#fff, #b8ecfb); 
}
```

Чтобы записать в текстовую переменную текстовое значение, перед именем переменной мы обязательно ставим знак $.

```qsp
# start
*pl "На следующей локации демонстрируется использование меню в качестве даилогового окна для выбора двух вариантов"
$dialog[]="Сообщение: кошелёк или жизнь:dial_loc:?"
$dialog[]="> Кошелёк:dial_loc"
$dialog[]="> Жизнь:dial_loc"
act "Перейти в следующую локацию":
    goto 'room'
end
-- start

# room
refint & ! данная функция принудительно обновит содержимое окон плеера при входе на локацию
:loop
menu '$dialog'
if variant<>1: jump 'loop'
-- room

# dial_loc
if args[0]=1:
    ! данный пункт меню не работает
elseif args[0]=2:
    *pl "Вы выбрали вариант кошелёк"
    variant=1
elseif args[0]=3:
    *pl "Вы выбради вариант жизнь"
    variant=1
end
-- dial_loc
```

Если мы попытаемся записать в текстовую переменную числовое значение, плеер автоматически преобразует число в текст, и в текстовой переменной окажется текстовое значение:

```html
<game title="Моя крутая Игра" resizeable="true" standalone="false" width=1280 height=720 />
<link type="text/css" href="skins/game.css" rel="stylesheet" /><link type="text/css" href="avscss/coolstyle.css" rel="stylesheet" />
<!-- <script type="text/javascript" src="../qsplib/js/core.js"></script>
<script type="text/javascript" src="../qsplib/js/coreAwesomium.js"></script>
<script type="text/javascript" src="../qsplib/js/QspLibAwesomium.js"></script> -->
<script type="text/javascript" src="../qsplib/js/api.js"></script>
<script type="text/javascript" src="../standalone_content/skins/js/game.js"></script>
```

Если мы попытаемся присвоить числовой переменной текстовое значение, плеер попытается преобразовать текстовое значение в числовое, но если преобразование невозможно, на экране появится ошибка.

```qsp
	box='134'		 & ! тип будет преобразован, а в box запишется число 134
	cell='non cifer' & ! тип не будет преобразован, плеер выдаст ошибку 101

	! не эквивалентно

	box=val('134')		  & ! строка преобразуется в число, в box запишется число 134
	cell=val('non cifer') & ! строка не преобразуется в число, в cell запишется 0

	! только для команды 2 не удастся выполнить преобразование типа
```

Всё становится гораздо интереснее, если мы имеем дело не с отдельными значениями, а с выражениями.

Например, если мы попытаемся сложить два числа, то результатом сложения будет третье число:

```qsp
	123+456 & ! результатом будет число 579
```

Если мы попытаемся «сложить» две строки, то мы их просто «склеим» (в программировании это называется конкатенация):

```qsp
	"Hello"+"World" & ! результатом будет строка "HelloWorld"
```
Но что будет, если мы попытаемся сложить число и строку?

А тут произойдёт вот что.

Если хотя бы одно **из значений** в выражении — ''числовое'', плеер попытается все значения преобразовать в числовые и вычислить выражение:

```qsp
	123+"456" & ! результатом будет число 579
```
Если преобразование не удастся, то выполняется конкатенация:

```qsp
	123+"d456" & ! результатом будет строка 123d456
```
Строки можно только «складывать» или сравнивать, поэтому если вы попытаетесь проделать с ними какие-то другие штуки, плеер выдаст ошибку о несоответствии типов данных:

```qsp
	"Hello"-"World" & ! плеер выдаст ошибку 101
```
Однако, если возможно преобразование всех строк в числа, то можно сделать так:

```qsp
	"4560"/"3"*"9" & ! результатом будет число 13680
```
Таким образом, плеер обязательно преобразует тип к необходимому, если это возможно, особенно для операций присвоения.

Вам не нужно строго следить за тем, какие типы значений вы используете в выражениях, однако старайтесь избегать выражений, в которых математические операции применяются к строкам.

Старайтесь не использовать строковые и числовые значения в одном выражении, либо приводите их к требуемому типу с помощью функций $str и val:

```qsp
	$str(1234) & ! преобразует число в строку
	! если получает строку, возвращает строку
	$str("string")

	val("1234") & ! преобразует строку в число
	! если не может преобразовать в число, возвращает ноль
	val("string")
```
Не забывайте пользоваться подвыражениями, если нужно вставить значение в строку:

```qsp
	health=100
	max_health=350
	*pl "Здоровье: <<health>>/<<max_health>>."
```

-P.S.:-
[:post_scriptum_articles_0001]

Данную статью вы можете найти так же и на других ресурсах:
	* [мой_сайт/преобразование_типов_в_QSP](http://aleksversus.narod.ru/index/preobrazovanie_tipov_v_qsp/0-53)
	* [medium/Преобразование типов в QSP](https://aleksversus.medium.com/преобразование-типов-в-qsp-8eec585f93e2)
	* [vk.com/Преобразование типов в QSP](https://vk.com/@qsplayer-preobrazovanie-tipov-v-qsp)
	* [ifhub.club/Преобразование типов в QSP](https://ifhub.club/2020/09/23/preobrazovanie-tipov-v-qsp.html)

