<folder path="D:\my\projects\howdo_faq\[source]\example">
<file path="D:\my\projects\howdo_faq\[source]\example\preobarzovanie_tipov.txt-light">
<head anchor="preobrazovanije_tipov_qsp" head-level="h1">
<p>
Преобразование типов в QSP</p>
</head>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Эта </tag>
<tag name="bold">
статья</tag>
<tag name="simple-string">
 поможет вам </tag>
<tag name="tt">
разобраться</tag>
<tag name="simple-string">
 в таком </tag>
<tag name="tt">
<tag name="hyperlink" href="#linetest">
<tag name="italic">
сложном вопросе</tag>
</tag>
</tag>
<tag name="simple-string">
, как преобразование типов в операции присвоения, или в выражениях.
</tag>
</p>
<p>
В QSP существует всего два типа значений: числовой и текстовый. Числовой означает любое целочисленное число в пределах от -2147483648 до 2147483647; а текстовый — любую строку текста (нет, на самом деле любую. Ограничения для строк — 2 Гб текста).
</p>
<p>
Вот как выглядят такие значения:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
! числовые значения
<br/>123
<br/>345
<br/>999
<br/>
<br/>!текстовые значения
<br/>"строка текста"
<br/>'Ещё одна строка текста'
<br/>"Третья строка текста"
</code>
<segment>
<p>
Для хранения значений мы используем переменные или массивы. И точно так же массивы и переменные (далее просто — переменные) бывают двух типов.
</p>
<p>
Чтобы записать в числовую переменную числовое значение, мы просто пишем имя переменной, знак = и число:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
box=13
</code>
<segment>
<p>
Чтобы записать в текстовую переменную текстовое значение, перед именем переменной мы обязательно ставим знак $.
</p>
</segment>
<code code-left-level="4" code-type="qsp">
$text='Текстовое значение'
</code>
<segment>
<p>
Если мы попытаемся записать в текстовую переменную числовое значение, плеер автоматически преобразует число в текст, и в текстовой переменной окажется текстовое значение:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
$text=123
<br/>
<br/>! эквивалентно
<br/>
<br/>$text=$str(123)
</code>
<segment>
<p>
Если мы попытаемся присвоить числовой переменной текстовое значение, плеер попытается преобразовать текстовое значение в числовое, но если преобразование невозможно, на экране появится ошибка.
</p>
</segment>
<code code-left-level="4" code-type="qsp">
box='134'         & ! тип будет преобразован, а в box запишется число 134
<br/>cell='non cifer' & ! тип не будет преобразован, плеер выдаст ошибку 101
<br/>
<br/>! не эквивалентно
<br/>
<br/>box=val('134')          & ! строка преобразуется в число, в box запишется число 134
<br/>cell=val('non cifer') & ! строка не преобразуется в число, в cell запишется 0
<br/>
<br/>! только для команды 2 не удастся выполнить преобразование типа
</code>
<segment>
<p>
Всё становится гораздо интереснее, если мы имеем дело не с отдельными значениями, а с выражениями.
</p>
<p>
Например, если мы попытаемся сложить два числа, то результатом сложения будет третье число:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
123+456 & ! результатом будет число 579
</code>
<segment>
<p>
Если мы попытаемся «сложить» две строки, то мы их просто «склеим» (в программировании это называется конкатенация):
</p>
</segment>
<code code-left-level="4" code-type="qsp">
"Hello"+"World" & ! результатом будет строка "HelloWorld"
</code>
<segment>
<p>
Но что будет, если мы попытаемся сложить число и строку?
</p>
<p>
А тут произойдёт вот что.
</p>
<p>
<tag name="simple-string">
Если хотя бы одно </tag>
<tag name="bold">
из значений</tag>
<tag name="simple-string">
 в выражении — </tag>
<tag name="tt">
числовое</tag>
<tag name="simple-string">
, плеер попытается все значения преобразовать в числовые и вычислить выражение:
</tag>
</p>
</segment>
<code code-left-level="4" code-type="qsp">
123+"456" & ! результатом будет число 579
</code>
<segment>
<p>
Если преобразование не удастся, то выполняется конкатенация:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
123+"d456" & ! результатом будет строка 123d456
</code>
<segment>
<p>
Строки можно только «складывать» или сравнивать, поэтому если вы попытаетесь проделать с ними какие-то другие штуки, плеер выдаст ошибку о несоответствии типов данных:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
"Hello"-"World" & ! плеер выдаст ошибку 101
</code>
<segment>
<p>
Однако, если возможно преобразование всех строк в числа, то можно сделать так:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
"4560"/"3"*"9" & ! результатом будет число 13680
</code>
<segment>
<p>
Таким образом, плеер обязательно преобразует тип к необходимому, если это возможно, особенно для операций присвоения.
</p>
<p>
Вам не нужно строго следить за тем, какие типы значений вы используете в выражениях, однако старайтесь избегать выражений, в которых математические операции применяются к строкам.
</p>
<p>
Старайтесь не использовать строковые и числовые значения в одном выражении, либо приводите их к требуемому типу с помощью функций $str и val:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
$str(1234) & ! преобразует число в строку
<br/>! если получает строку, возвращает строку
<br/>$str("string")
<br/>
<br/>val("1234") & ! преобразует строку в число
<br/>! если не может преобразовать в число, возвращает ноль
<br/>val("string")
</code>
<segment>
<p>
Не забывайте пользоваться подвыражениями, если нужно вставить значение в строку:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
health=100
<br/>max_health=350
<br/>*pl "Здоровье: <<health>>/<<max_health>>."
</code>
</segment>
<head anchor="post_scriptum_articles_0001" head-level="h4">
<p>
P.S.:</p>
</head>
<segment segment-class="for-head">
<segment>
<p>
Данную статью вы можете найти так же и на других ресурсах:
</p>
</segment>
<list list-type="ul-list">
<segment>
<p>
<tag name="hyperlink" href="http://aleksversus.narod.ru/index/preobrazovanie_tipov_v_qsp/0-53">
мой_сайт/преобразование_типов_в_QSP</tag>
</p>
</segment>
<segment>
<p>
<tag name="hyperlink" href="https://aleksversus.medium.com/преобразование-типов-в-qsp-8eec585f93e2">
medium/Преобразование типов в QSP</tag>
</p>
</segment>
<segment>
<p>
<tag name="hyperlink" href="https://vk.com/@qsplayer-preobrazovanie-tipov-v-qsp">
vk.com/Преобразование типов в QSP</tag>
</p>
</segment>
<segment>
<p>
<tag name="hyperlink" href="https://ifhub.club/2020/09/23/preobrazovanie-tipov-v-qsp.html">
ifhub.club/Преобразование типов в QSP</tag>
</p>
</segment>
</list>
</segment>
</segment>
</file>
</folder>
