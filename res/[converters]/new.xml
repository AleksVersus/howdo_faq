<folder path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP">
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\000_soderzhanie_0000.txt-light">
<header anchor="informarch_soderzhanije" head-level="h1">
<p>
Содержание</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">

</segment>
<header head-level="h2" anchor="bol_shoj-sbornik-poleznyh-ssylok-i-zakladok">
<p>
Большой сборник полезных ссылок и закладок</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_bookmarks">
Сборник ссылок и закладок по QSP</tag>
</p>
</segment>
</list>
</segment>
<header head-level="h2" anchor="chto-takoe-qsp">
<p>
Что такое QSP</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_faq">
Список наиболее часто задаваемых вопросов и ответы на них</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_qspinfo">
Что такое QSP?</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_ourway">
Наш путь</tag>
</p>
</segment>
</list>
</segment>
<header head-level="h2" anchor="obschie-voprosy-i-resheniia">
<p>
Общие вопросы и решения</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_qgen_teach">
Учебник по QSP для редактора QGen</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_localization">
Локализация классического плеера версии 5.7.0</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_analyzer_qsp">
Анализатор кода</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_gameshelf">
Полка игр</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#faq_24_02">
Распространяемая сборка игры на класическом плеере</tag>
</p>
</segment>
</list>
</segment>
<header head-level="h2" anchor="prodvinutyj-qsp">
<p>
Продвинутый QSP</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_consoleplayer">
Простой консольный QSP-плеер</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_automateprogs">
Автоматное программирование в QSP</tag>
</p>
</segment>
</list>
</segment>
<header head-level="h2" anchor="rabota-v-tekstovom-redaktore">
<p>
Работа в текстовом редакторе</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_txt2gam_manual">
TXT2GAM. Краткое руководство</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_game_in_texteditor">
Пишем QSP-игру в текстовом редакторе</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_txt2gam_preprocessor">
Использование препроцессора</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_forlinux">
TXT2GAM. Сборка для Linux</tag>
</p>
</segment>
</list>
</segment>
<header head-level="h2" anchor="voprosy-po-programmirovaniiu">
<p>
Вопросы по программированию</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_calend_jul">
Календарь по методу счёта Юлианский дней</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_gametime">
Игровое время (1.0)</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_flexible_playlist">
Гибкий плейлист (1.0)</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_usethemassive">
Использование массивов</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_ia_lib_ntropy">
Библиотечка дополняющая инвентарь 0.76</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_ifacts">
Действие по условию</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_transformation">
Плавное изменение цвета фона (1.0)</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_debugger20">
Отладчик 2.0 beta</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_randomizer">
Выбор случайных вариантов - тянем карты из колоды (1.0)</tag>
</p>
</segment>
</list>
</segment>
<header head-level="h2" anchor="obnovleniia-pleera">
<p>
Обновления плеера</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_update570">
Обновление QSP (5.7.0) и QGen (4.0.0b)</tag>
</p>
</segment>
</list>
</segment>
<header head-level="h2" anchor="voprosy-po-quest-navigator">
<p>
Вопросы по Quest Navigator</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="#faq_22_01">
Шаблоны оформления для игр</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#faq_22_02">
Как подключить свой шрифт к игре?</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#faq_22_03">
Как изменять цвет фона игры?</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#faq_22_04">
Как прописать игре собственный курсор?</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#faq_22_05">
Как редактировать шаблон?</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#faq_22_06">
Как узнать, что игра запущена на Навигаторе?</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#faq_22_07">
Как вставить видео в игру?</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#faq_22_08">
Как сделать standalone-сборку</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#faq_22_09">
Размер окна с игрой</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#faq_22_10">
Запуск JavaScript из кода игры</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#faq_22_11">
Полная смена оформления из кода игры</tag>
</p>
</segment>
</list>
</segment>
<header head-level="h2" anchor="voprosy-po-aeroqsp">
<p>
Вопросы по AeroQSP</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_aeroqsp_wtfit">
Общая информация по AeroQSP</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_aeroqsp_instr">
Инструкция по использованию AeroQSP совместно с Quest Generator</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_aeroqsp_help">
Справка по AeroQSP (в дополнение к основной справке QSP)</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_standalone_aeroqsp">
Stand-alone сборка игр на AeroQSP</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_aeroqspguide">
Учебник по AeroQSP и QGen</tag>
</p>
</segment>
</list>
</segment>
<header head-level="h2" anchor="obzory-igr">
<p>
Обзоры игр</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="#informarch_compo10">
Обзоры игр с QSP-Compo 2010</tag>
</p>
</segment>
</list>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\001_faq_po_qsp_0001.txt-light">
<header anchor="informarch_faq" head-level="h1">
<p>
F.A.Q</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Список наиболее часто задаваемых вопросов и ответы на них.
</p>
</segment>
</segment>
<header head-level="h2" anchor="obschie-voprosy">
<p>
Общие вопросы</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">

</segment>
<header head-level="h3" anchor="chto-takoe-tekstovye-igry-tekstovye-kvesty-interaktivnaia-literatura">
<p>
Что такое текстовые игры, текстовые квесты, интерактивная литература?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="hyperlink" href="http://ifwiki.ru/FAQ">
http://ifwiki.ru/FAQ</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="chto-takoe-qsp-chto-eto-za-sajt-qsporg">
<p>
Что такое QSP? Что это за сайт QSP.org?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
QSP - это система разработки текстовых игр. Проще говоря, с помощью QSP можно играть в текстовые игры и создавать собственные.
</p>
<p>
<tag name="simple-string">
Подробнее см. здесь - </tag>
<tag name="hyperlink" href="#informarch_qspinfo">
Информация о QSP</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="hochu-napisat_-svoiu-tekstovuiu-igru-s-chego-nachat_">
<p>
Хочу написать свою текстовую игру, с чего начать?</p>
</header>
<segment segment-class="for-head">
<list list-type="ol-list">
<segment name="li">
<p>
<tag name="simple-string">
Если у вас еще не установлен плеер QSP, скачайте и установите </tag>
<tag name="hyperlink" href="https://qsp.org/attachments/players_pack_2012_12_29.exe">
"Набор игрока"</tag>
<tag name="simple-string">
.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Скачайте справку и редактор QGen со страницы </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_content&view=article&id=57&Itemid=56">
"Разработчикам"</tag>
<tag name="simple-string">
.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Откройте </tag>
<tag name="hyperlink" href="#informarch_qgen_teach">
Учебник по QSP для редактора Qgen</tag>
<tag name="simple-string">
 и следуйте его инструкциям.</tag>
</p>
</segment>
</list>
</segment>
<header head-level="h3" anchor="chto-takoe-aeroqsp">
<p>
Что такое AeroQSP?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Ответ </tag>
<tag name="hyperlink" href="#informarch_aeroqsp_wtfit">
здесь</tag>
<tag name="simple-string">
.
</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="gde-vziat_-ishodnyj-kod">
<p>
Где взять исходный код?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
qsp.dll, txt2gam, AeroQSP, справка - </tag>
<tag name="hyperlink" href="https://github.com/QSPFoundation/qsp">
https://github.com/QSPFoundation/qsp</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Редактор игр QGen - </tag>
<tag name="hyperlink" href="http://my-trac.assembla.com/q-gen">
http://my-trac.assembla.com/q-gen</tag>
<tag name="simple-string">
 (нынешняя версия на wxWidgets), </tag>
<tag name="hyperlink" href="https://github.com/rrockru/QtQGen">
https://github.com/rrockru/QtQGen</tag>
<tag name="simple-string">
 (будущая версия на Qt)
</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="pod-kakoj-litsenziej-rasprostraniaetsia-pleer-qsp-a-igry">
<p>
Под какой лицензией распространяется плеер QSP? А игры?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Полезно будет знать для всех. Байт отвечает на вопросы по лицензиям на плеер и игры QSP.
</p>
<p>
`Вопрос 1:` Лицензия на платформу QSP (в частности плеер). Какие права есть у автора игры в части распространения (в том числе и коммерческое) плеера совместно со своей игрой? И все ли авторы версий для разных ОС (windows, linux, mac os и т.п.) едины в этом вопросе?
</p>
<p>
`Ответ:` Классический плеер - под GPL, либа под LGPL. Другие плееры могут быть под своими лицензиями. Если меняем исходники либы или классического плеера, то нужно выкладывать модифицированные исходники. Распространять существующий плеер можно как угодно, в т.ч. коммерчески.
</p>
<p>
`Вопрос 2:` Лицензия на игру под QSP. Какие права есть у авторов самой игры в части распространения (в том числе и коммерческое)?
</p>
<p>
`Ответ:` Лицензию на игру указывает сам автор игры. Плеер и игры - разный контент. Соответственно, автор может как угодно распространять игру.
</p>
<p>
`Вопрос 3:` Какие права есть у авторов платформы QSP в части игр? Оставляют ли они за собой право без согласования с автором распространять игру (в том числе и на возмездной основе) либо получать доход от безвозмездного предоставления доступа к игре, например, от рекламы и т.п.? И все ли авторы версий для разных ОС (windows, linux, mac os и т.п.) едины в этом вопросе?
</p>
<p>
`Ответ:` См. п.2. Если автор игры специально не оговаривает условия распространения игры, считается, что игру может распространять кто угодно и как угодно.
</p>
<p>
В особенных случаях (необходимость доработки плеера/либы, создание нового плеера, выпуск под спец. лицензией, участие в коммерческом проекте и т.п.) требуется отдельное обсуждение.
</p>
</segment>
</segment>
<header head-level="h3" anchor="fajl-proekta---qproj-zachem-on-nuzhen">
<p>
Файл проекта - ".qproj", зачем он нужен?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Это т.н. "настройки проекта". Там сейчас хранятся "папки локаций". Этот файл нужен только при использовании QGen, и используется только на этапе разработки игры. Со временем, туда могут быть добавлены настройки QGen, специфичные для конкретного проекта.
</p>
<p>
Файл `.qproj` создается автоматически. Если случайно стереть его, ничего страшного не произойдет - просто придется заново рассовать локации по папкам. Сами локации никуда не денутся.
</p>
<p>
Для того, чтобы запустить игру, он не нужен.
</p>
</segment>
</segment>
</segment>
<header head-level="h2" anchor="voprosy-po-programmirovaniiu">
<p>
Вопросы по программированию</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">

</segment>
<header head-level="h3" anchor="kak-sdelat_-vremia">
<p>
Как сделать время?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Самый простой и понятный способ реализовать не совсем соответствующее календарному время изложен в этой короткой статье: </tag>
<tag name="hyperlink" href="#informarch_gametime">
Игровое время</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Также см. </tag>
<tag name="hyperlink" href="#informarch_calend_jul">
Календарь по методу счёта Юлианских дней</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="kak-sdelat_-kalendar_">
<p>
Как сделать календарь?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Самый быстрый способ сделать очень точный календарь без использования циклов и громоздкого кода, это воспользоваться уже готовым решением от `evp`: </tag>
<tag name="hyperlink" href="#informarch_calend_jul">
Календарь по методу счёта Юлианских дней</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=956&Itemid=57">
Тема на форуме QSP</tag>
<tag name="simple-string">
.
</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="kak-sdelat_-boj">
<p>
Как сделать бой?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Эта тема достаточно обширная и сложная, чтобы осветить её в нескольких предложениях. По этому поводу требуется написание большой статьи. Но вы можете посмотреть, как реализована простая система боя в уже существующем примере и модернизировать её.
</p>
<p>
В стартовой локациии примера задаются изначальные параметры - сила удара игрока и противника, и очки здоровья.
</p>
<p>
В бою к силе удара прибавляется случайное значение - "0" либо "1", меняющееся каждый раунд, и полученное значение вычитается из здоровья противника.
</p>
<p>
Бой заканчивается, как только здоровье одного из противников станет нулевым или отрицательным.
</p>
<p>
<tag name="hyperlink" href="https://qsp.org/attachments/fight.zip">
Пример реализации боя 1.0</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="kak-sdelat_-dialogi">
<p>
Как сделать диалоги?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Пример, показывающий реализацию 3-х видов диалогов.
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
Простой линейный диалог</p>
</segment>
<segment name="li">
<p>
Многовариантный диалог с использованием переменных.</p>
</segment>
<segment name="li">
<p>
Простой случайный диалог</p>
</segment>
</list>
<segment>
<p>
Подготовил пример — WladySpb
</p>
<p>
Чистка текста —  y4ndexx
</p>
<p>
<tag name="hyperlink" href="https://qsp.org/attachments/dialog.zip">
Пример реализации трёх видов диалога</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="kak-ispol_zovat_-html">
<p>
Как использовать HTML?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Для того, чтобы использовать HTML-разметку в своей игре, необходимо включить режим распознавания HTML. Для этого переменной `usehtml` нужно присвоить значение отличное от нуля:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
usehtml=1
</code>
<segment>
<p>
При включенном режиме распознавания HTML, все HTML-теги, выведенные вместе с текстом, будут обрабатываться плеером.
</p>
<p>
<tag name="simple-string">
Список поддерживаемых HTML-тегов можно посмотреть на странице справки </tag>
<tag name="hyperlink" href="https://wiki.qsp.org/help:html_classic">
"Список поддерживаемых HTML-тегов для классического плеера""</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Работу с HTML-тегами демонстрирует пример, который можно скачать </tag>
<tag name="hyperlink" href="https://qsp.org/attachments/html_sample.qsp">
отсюда</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="kak-zatsiklit_-muzyku-sdelat_-plejlist">
<p>
Как "зациклить" музыку, сделать плейлист?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Вновь вопрос довольно обширный и сложный. Но усложняется он не тем, что само решение для зацикливания музыки сложно, а тем, что существует множество вариантов задачи и соответственно на каждую задачу существует минимум одно решение.
</p>
<p>
<tag name="simple-string">
Самый примитивный вариант зацикливания представлен в справочнике по самым часто задаваемым вопросам из темы "Как сделать?": </tag>
<tag name="hyperlink" href="https://aleksversus.github.io/howdo_faq/pages/kak_zatsiklit__melodiju_0034.html#faq_06_06">
Как зациклить мелодию</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
<tag name="simple-string">
Чуть более сложные варианты с зацикливанием целых плейлистов представлены в статье </tag>
<tag name="hyperlink" href="https://aleksversus.github.io/howdo_faq/pages/kak_sdelat__plejlist_0035#faq_06_07">
"Как сделать плейлист?"</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
<tag name="simple-string">
Ну и самым продвинутым вариантом на сегодня является </tag>
<tag name="hyperlink" href="#informarch_flexible_playlist">
Гибкий плейлист от `Werewolf`а</tag>
<tag name="simple-string">
.
</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="kak-sdelat_-schitaemye-predmety-naprimer-patrony-50-sht">
<p>
Как сделать "считаемые" предметы, например, "патроны: 50 шт."?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
А вот это вопрос довольно простой. Понятное и очевидное решение изложено в статье </tag>
<tag name="hyperlink" href="https://aleksversus.github.io/howdo_faq/pages/kak_delat__schitaeye_predmety_0093.html#faq_14_06">
"Как сделать считаемые предметы?"</tag>
<tag name="simple-string">
 в справочнике по самым часто задаваемым вопросам из темы "Как сделать?".
</tag>
</p>
<p>
<tag name="simple-string">
Так же вы можете воспользоваться уже готовым решением в виде </tag>
<tag name="hyperlink" href="#informarch_ia_lib_ntropy">
библиотечки, дополняющей инвентарь</tag>
<tag name="simple-string">
 от `Ntropy`.
</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="kak-sdelat_-perehod-na-metku-v-lokatsii-iz-dejstviia">
<p>
Как сделать переход на метку в локации из действия?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Привычка к использованию оператора `JUMP` часто приводит автора к следующей проблеме:
</p>
<p>
он хочет сделать переход из действия на метку в коде локации, но `JUMP` не срабатывает.
</p>
<p>
Это связано с тем, что область видимости меток органичена блоком кода, в котором они находятся, а выполняемое действие - это отдельный блок кода.
</p>
<p>
Обойти это ограничение довольно просто.
</p>
</segment>
<code code-left-level="0" code-type="qsp">
!Начало локации
<br/>IF $args[0]&lt;&gt;'': JUMP $args[0]
<br/>...
<br/>...
<br/>:моя_метка
<br/>...
<br/>...
<br/>!Действие, из которого будет переход на нужную нам метку
<br/>ACT 'Переход':
<br/>    GOTO $CURLOC,'моя_метка'
<br/>END
</code>
</segment>
<header head-level="h3" anchor="kak-sdelat_-dejstvie-kotoroe-poiavliaetsia-pri-vypolnenii-opredelennogo-usloviia">
<p>
Как сделать действие, которое появляется при выполнении определенного условия?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Этот вопрос был рассмотрен множество раз в различных вариациях. Можете ознакомиться с соответствующей </tag>
<tag name="hyperlink" href="https://aleksversus.github.io/howdo_faq/pages/dejstvie_po_usloviju_0065.html#faq_11_02">
статьёй</tag>
<tag name="simple-string">
 в справочнике по самым часто задаваемым вопросам из темы
</tag>
</p>
<p>
<tag name="simple-string">
"Как сделать?" на форуме </tag>
<tag name="hyperlink" href="https://qsp.org">
qsp.org</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
<tag name="simple-string">
Так же есть </tag>
<tag name="hyperlink" href="#informarch_ifacts">
синтетическая статья</tag>
<tag name="simple-string">
 на основе темы </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=348&Itemid=57">
"Действие по условию"</tag>
<tag name="simple-string">
.
</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="kak-vstavit_-kartinku">
<p>
Как вставить картинку?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Со всеми возможностями работы с изображениями в классическом плеере QSP вы можете ознакомиться на странице справки </tag>
<tag name="hyperlink" href="https://wiki.qsp.su/help:graphics">
wiki.qsp.org/Графика</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
<tag name="hyperlink" href="https://aleksversus.github.io/howdo_faq/pages/kak_vstavit__kartinku_v_igru_0044.html#faq_09_01">
Краткая статья с наиболее распространёнными примерами вывода изображения</tag>
<tag name="simple-string">
 есть в справочнике по самым часто задаваемым вопросам из темы "Как сделать?" на форуме </tag>
<tag name="hyperlink" href="https://qsp.org">
qsp.org</tag>
<tag name="simple-string">
.
</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="kakie-ogranicheniia-est_-v-qsp">
<p>
Какие ограничения есть в QSP?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Актуальную информацию по ограничениям можно уточнить в соответствующем разделе справки: </tag>
<tag name="hyperlink" href="https://wiki.qsp.org/help:limits">
wiki.qsp.org/Ограничения</tag>
<tag name="simple-string">
 
</tag>
</p>
<p>
Максимальное количество одновременно видимых действий на локации: 50
</p>
<p>
Максимальное количество подключаемых файлов: 100
</p>
<p>
Максимальное количество аргументов: 20 (для плееров версии 5.7.0 и ниже — 10)
</p>
<p>
Максимальная вложенность выражений: 30
</p>
<p>
Максимальное количество операторов в выражении(на одном уровне вложенности): 100
</p>
<p>
Максимальное количество пунктов пользовательского меню: 100
</p>
<p>
Максимальное количество предметов в инвентаре: 1000
</p>
<p>
Максимальное количество одновременно проигрываемых звуков: 500
</p>
<p>
Длина строки теоретически ограничена только объемом доступной оперативной памяти, либо размером типа "int": 2 гигабайта текста.
</p>
<p>
Числовые переменные принимают значения от -2147483647 до 2147483647.
</p>
<p>
<tag name="simple-string">
Количество переменных ограничено 12800, при этом не допускается более 50 переменных с одинаковым </tag>
<tag name="hyperlink" href="https://ru.wikipedia.org/wiki/%D0%A5%D0%B5%D1%88-%D1%81%D1%83%D0%BC%D0%BC%D0%B0">
хэшем</tag>
<tag name="simple-string">
 имени.
</tag>
</p>
<p>
Количество элементов массива ограничено размерностью "int", в зависимости от того, как собрана библиотека, 32768 или 2147483648 соответственно.
</p>
<p>
Количество локаций ограничено размером типа "int". В зависимости от того, как собрана библиотека, "int" будет ограничивать либо 32768, либо 2147483648 локаций.
</p>
</segment>
</segment>
<header head-level="h3" anchor="kak-vernut_sia-na-predyduschuiu-lokatsiiu">
<p>
Как вернуться на предыдущую локацию?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Запоминаем текущую локацию при переходе, чтобы потом вернуться на неё.
</p>
</segment>
<code code-left-level="0" code-type="qsp">
! В начале игры назначаем обработчик перехода на новую локацию.
<br/>$ONNEWLOC = 'ONNEWLOC'
<br/>
<br/>! В локации "ONNEWLOC":
<br/>IF $CURLOC &lt;&gt; $nextLoc:
<br/>    $prevLoc = $nextLoc
<br/>    $nextLoc = $CURLOC
<br/>END
<br/>
<br/>! В локации, из которой надо вернуться на предыдущую:
<br/>ACT 'Вернуться':
<br/>    GOTO $prevLoc
<br/>END
</code>
<segment>
<p>
<tag name="simple-string">
Более подробный ответ на этот вопрос в статье </tag>
<tag name="hyperlink" href="https://aleksversus.github.io/howdo_faq/pages/vozvrat_na_predyduschuju_lokatsiju_0133.html#faq_20_01">
"Как сделать возврат на предыдущую локацию?"</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
<tag name="simple-string">
Ещё более подробный ответ на этот вопрос есть в соответствующей </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=751&Itemid=57&p=2">
теме</tag>
<tag name="simple-string">
 на форуме.
</tag>
</p>
</segment>
</segment>
</segment>
<header head-level="h2" anchor="tiomnaia-storona-sily">
<p>
Тёмная сторона силы</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">

</segment>
<header head-level="h3" anchor="ispol_zovanie-massivov-mnogomernye-massivy">
<p>
Использование массивов, многомерные массивы</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Для ответа на этот вопрос подготовлена </tag>
<tag name="hyperlink" href="#informarch_usethemassive">
синтетическая статья</tag>
<tag name="simple-string">
 на основе соответствующей </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=93&Itemid=57">
темы</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
<tag name="simple-string">
Так же смотри </tag>
<tag name="hyperlink" href="http://aleksversus.narod.ru/index/peremennye_i_massivy_v_qsp/0-28">
статью о том, что такое массивы</tag>
<tag name="simple-string">
 на сайте aleksversus.narod.ru.
</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="ispol_zovanie-figurnyh-skobok">
<p>
Использование фигурных скобок</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Фигурные скобки в QSP предназначены в освновном для того, чтобы записывать обычный код QSP в виде текстового значения. Например, мы можем вписать в переменную `$somecode` некоторый код:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
$somecode={
<br/>  p 'sdasdasd'
<br/>  er=3454
<br/>  $d='sdsd'
<br/>  'asdad'
<br/>  if args[0]=23:pl 'asdasdasd'
<br/>}
</code>
<segment>
<p>
А затем выполнить этот код с помощью оператора dynamic в любом месте игры:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
dynamic $somecode,23
</code>
<segment>
<p>
Фигурные скобки поддерживают вложенность, в отличие от кавычек и апострофов. И в отличие от кавычек и апострофов не поддерживают подвыражения.
</p>
<p>
<tag name="simple-string">
Подробнее можно прочесть здесь: </tag>
<tag name="hyperlink" href="https://aleksversus.github.io/howdo_faq/pages/qsp-keyword_0179.html#faq_80_05_curclybrackets">
"Фигурные скобки"</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="modul_-olegusa-dlia-raboty-s-tablitsami-dannyh">
<p>
Модуль Олегуса для работы с таблицами данных</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Таблицы данных — это не те таблицы, которые вы можете наблюдать на экране при использовании тега `"&lt;table&gt;"`. Таблицами данных называется определённый способ хранения данных в виде условных строк и столбцов.
</p>
<p>
Olegus t.Gl. написал для QSP модуль работы с такими таблицами данных. Что с его помощью можно делать:
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
Создавать таблицу с произвольным числом колонок.</p>
</segment>
<segment name="li">
<p>
Добавлять, находить и удалять строки в таблице.</p>
</segment>
<segment name="li">
<p>
Получать и устанавливать значения произвольных ячеек в таблице.</p>
</segment>
<segment name="li">
<p>
Сортировать строки таблицы как по одной, так и по нескольким колонкам в порядке возрастания и убывания.</p>
</segment>
<segment name="li">
<p>
Для доступа к отдельным строкам (чтение или запись значений ячеек) использовать не только номера строк, но и уникальные значения из какой-либо колонки (работа с индексом).</p>
</segment>
<segment name="li">
<p>
Выгружать строку таблицы в ассоциативный массив.</p>
</segment>
<segment name="li">
<p>
Перебирать таблицу в любом направлении: от первой строки до последней и наоборот.</p>
</segment>
<segment name="li">
<p>
Выбирать, копировать и удалять строки таблицы (как все, так и по заданному фильтру).</p>
</segment>
<segment name="li">
<p>
Получать число строк в таблице (как всех, так и по заданному фильтру).</p>
</segment>
</list>
<segment>
<p>
<tag name="simple-string">
Более подробно можно о модуле можно почитать на форуме qsp.org в теме </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=169&Itemid=57">
"Модуль для работы с таблицами данных"</tag>
<tag name="simple-string">
,
</tag>
</p>
<p>
<tag name="simple-string">
или на официальной странице модуля на форуме ifiction.ru в теме </tag>
<tag name="hyperlink" href="https://forum.ifiction.ru/viewtopic.php?id=1522">
"Модуль для работы с таблицами данных в QSP"</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
<tag name="simple-string">
Полная документация на модуль </tag>
<tag name="hyperlink" href="https://ifiction.ru/h/otg_lib_tables_help.html">
здесь</tag>
<tag name="simple-string">
.
</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="modul_-olegusa-dlia-raboty-s-meniu-rasshirenie-funktsionala-operatora-menu">
<p>
Модуль Олегуса для работы с меню (расширение функционала оператора "menu")</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Что можно делать с помощью модуля для расширения функционала оператора "MENU":
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
Передавать в вызываемую локацию/функцию произвольное число параметров.</p>
</segment>
<segment name="li">
<p>
Получать время, затраченное игроком на выбор пункта из меню.</p>
</segment>
<segment name="li">
<p>
Добавлять в меню пункты, появляющиеся в нём только при соблюдении ряда условий.</p>
</segment>
<segment name="li">
<p>
Прописывать выполняемый код прямо в настройках пункта меню, без отсылки к другим локациям/функциям.</p>
</segment>
</list>
<segment>
<p>
<tag name="simple-string">
Более подробно о модуле можно прочитать на форуме qsp.org в теме </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=170&Itemid=57">
"Модуль для работы с меню (расширение функционала оператора "menu")"</tag>
<tag name="simple-string">
,
</tag>
</p>
<p>
<tag name="simple-string">
или на официальной странице модуля на форуме ifiction.ru в теме </tag>
<tag name="hyperlink" href="https://forum.ifiction.ru/viewtopic.php?id=1527">
"Модуль для работы с меню (расширение функционала оператора "menu") в QSP"</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
<tag name="simple-string">
Полная документация на модуль </tag>
<tag name="hyperlink" href="https://ifiction.ru/h/otg_lib_menu_help.html">
здесь</tag>
<tag name="simple-string">
.
</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="tipograf--modul_-dlia-formatirovaniia-teksta">
<p>
"Типограф" — модуль для форматирования текста</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Платформа QSP позволяет задействовать возможности HTML для форматирования текстов описаний и всего такого, и это хорошо. Плохо то, что писать html-ready текст — сущая мука: теги загромождают текст и мешают его восприятию в редакторе.
</p>
<p>
Чтобы хоть немного облегчить подобную работу, Olegus t.Gl. написал небольшой модуль для форматирования текста. Он позволяет использовать сокращённые формы записи тегов, что изрядно облегчает как написание, так и визуальное восприятие "исходного" текста.
</p>
<p>
Например, для вставки заголовка в обычный html-текст, в него нужно добавить запись: "&lt;h1&gt;Заголовок&lt;/h1&gt;". Для вставки параграфа, растянутого по ширине, — "&lt;p align=justify&gt;Текст&lt;/p&gt;". С помощью представляемого модуля данные записи можно сократить до "з1. Заголовок" и "п. Текст" соответственно.
</p>
<p>
Кроме этого есть сокращённые формы для выделения текста: жирный, курсив, подчёркнутый, подстрочный, надстрочный и т.п.
</p>
<p>
И можно отметить автоматическую расстановку длинных тире и правильных кавычек.
</p>
<p>
<tag name="simple-string">
Более подробно о модуле можно прочитать на форуме qsp.org в теме </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=191&Itemid=57">
"QSP:Типограф" — модуль для форматирования текста</tag>
<tag name="simple-string">
,
</tag>
</p>
<p>
<tag name="simple-string">
или на официальной странице модуля на форуме ifiction.ru в теме </tag>
<tag name="hyperlink" href="https://forum.ifiction.ru/viewtopic.php?id=1540">
"QSP: Типограф" — модуль для форматирования текста</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
<tag name="simple-string">
Полная документация на модуль </tag>
<tag name="hyperlink" href="https://ifiction.ru/h/otg_lib_typograph_help.html">
здесь</tag>
<tag name="simple-string">
.
</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="plavnoe-izmenenie-tsveta-fona">
<p>
Плавное изменение цвета фона</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Для реализации плавного изменения цвета фона вы можете воспользоваться </tag>
<tag name="hyperlink" href="#informarch_transformation">
готовым решением от Antipod</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
<tag name="simple-string">
Плавное изменение цвета фона аналогично по своему решению задаче по плавному проявлению текста: </tag>
<tag name="hyperlink" href="https://aleksversus.github.io/howdo_faq/pages/plavnoe_pojavlenie_0061.html#faq_10_10">
Плавное появление текста</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="mini-igra-vzorvi-zombi---primer-ispol_zovaniia-lokatsii-schiotchika-takzhe-sm-dejstvie-po-tajmeru">
<p>
Мини-игра "Взорви зомби" - пример использования локации-счётчика, также см. Действие по таймеру</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Мини-игра - взорви зомби. :) Сделана для Таэль.
</p>
<p>
Ожидание взрыва осуществлено в локации-счётчике.
</p>
<p>
Важно: Помните, что ограничивая игроку время, вы можете попасть в одну из ловушек плохого гейм-дизайна. Игрок попросту ничего не успеет прочитать и сделать. А ведь это текстовые игры, в которых основное место должно занимать повествование, а не нервирование игрока. :)
</p>
<p>
<tag name="simple-string">
Статья на сайте qsp.org: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_content&view=article&id=105:2010-06-17-13-54-25&catid=36:2009-02-19-06-11-21&Itemid=76">
Мини-игра "Взорви зомби" - пример использования локации-счётчика</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Скачать игру: </tag>
<tag name="hyperlink" href="https://qsp.org/attachments/primer1.qsp">
Взорви зомби.qsp</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="nastrojka-okoshek-klassicheskogo-pleera-s-pomosch_iu-qspguicfg">
<p>
Настройка окошек классического плеера с помощью qspgui.cfg</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Подробную, но не полную, информацию по настройке окон классического плеера вы можете найти в статье </tag>
<tag name="hyperlink" href="https://aleksversus.github.io/howdo_faq/articles/classic.config_0005.html#classic_cfg">
Структура конфигурационного файла классического плеера версии 5.7.0</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
На форуме qsp.org так же существует тема </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=861&Itemid=57">
Настройка окошек классического плеера с помощью qspgui.cfg</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
</segment>
<header head-level="h2" anchor="esli-ne-nashli-otveta">
<p>
Если не нашли ответа</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Не нашли ответа на свой вопрос? Спрашивайте здесь - </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&Itemid=57">
Как сделать?</tag>
<tag name="simple-string">

</tag>
</p>
<p>
АВТОР: `NEX`  
</p>
<p>
19.02.2009 09:15
</p>
<p>
<tag name="simple-string">
Оригинал: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=316&Itemid=57">
FAQ</tag>
</p>
</segment>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\002_informatsija_o_qsp_0002.txt-light">
<header anchor="informarch_qspinfo" head-level="h1">
<p>
Информация о QSP</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
`QSP`, она же `Quest Soft Player`  - система разработки текстовых игр, преимущественно с "менюшным" вводом (существует возможность создания полноценного парсера). Система включает в себя кроссплатформенный проигрыватель, а также разнообразные утилиты для разработки игр. Подробный файл справки, простой синтаксис и множество примеров позволят Вам освоить QSP максимально быстро.
</p>
<p>
Автор QSP и главный разработчик - Аргунов Валерий aka Byte. Лицензия: GNU GPL.
</p>
</segment>
</segment>
<header head-level="h2" anchor="kontakty">
<p>
Контакты:</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
E-mail: hzdbyte [AT] gmail.com
</p>
<p>
ICQ: 122289012
</p>
<p>
IRC: irc.forestnet.org, #ifrus, Byte
</p>
</segment>
</segment>
<header head-level="h2" anchor="soobschestvo">
<p>
Сообщество:</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В настоящее время у QSP есть сообщество энтузиастов, активно участвующих в развитии платформы. Несколько человек участвует в разработке интерпретаторов и редактора игр QGen, кто-то создает свои утилиты, авторы создают новые игры, и все мы играем в игры на QSP, а также общаемся на форуме и IRC-канале платформы. Всех нас объединяет одно - любовь к текстовым играм. Мы всегда рады новичкам, присоединяйтесь!
</p>
</segment>
</segment>
<header head-level="h2" anchor="ishodnyj-kod">
<p>
Исходный код:</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
qsp.dll, txt2gam, AeroQSP, справка - </tag>
<tag name="hyperlink" href="https://github.com/QSPFoundation/qsp">
https://github.com/QSPFoundation/qsp</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Редактор игр QGen - </tag>
<tag name="hyperlink" href="http://my-trac.assembla.com/q-gen">
http://my-trac.assembla.com/q-gen</tag>
<tag name="simple-string">
 (нынешняя версия на wxWidgets), </tag>
<tag name="hyperlink" href="https://github.com/rrockru/QtQGen">
https://github.com/rrockru/QtQGen</tag>
<tag name="simple-string">
 (будущая версия на Qt)
</tag>
</p>
<p>
АВТОР: `BYTE`   
</p>
<p>
01.06.2010 11:20</p>
</segment>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\003_nash_put__0003.txt-light">
<header anchor="informarch_ourway" head-level="h1">
<p>
Наш путь</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Меня спрашивают, почему у QSP свой язык программирования и почему бы не использовать что-либо существующее (Python, например). На мой взгляд, вопрос вполне понятный, особенно для тех, кто не знаком (или плохо знаком) с QSP.
</p>
<p>
Причин несколько:
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
Во-первых, QSP появился до того, как Python стал популярен.</p>
</segment>
<segment name="li">
<p>
Во-вторых, QSP проще `Python`а в изучении (это важно, так как платформа ориентирована на начинающих).</p>
</segment>
<segment name="li">
<p>
В-третьих, свой интерпретатор позволяет сделать синтаксис более специализированным.</p>
</segment>
<segment name="li">
<p>
В-четвертых, интерпретатор QSP легче Python (Python - монстр при встраивании, во всяком случае так было раньше).</p>
</segment>
<segment name="li">
<p>
В-пятых, я не люблю идею вездесущих отступов для корректности программ (в теории это требование делает код более понятным, но мне, к примеру, сложно ориентироваться в Python-коде).</p>
</segment>
<segment name="li">
<p>
В-шестых, более специализированный движок упрощает портирование на разные платформы.</p>
</segment>
<segment name="li">
<p>
В-седьмых, QSP более изолирован от окружения, что делает его безопаснее для исполнения на машинах (по идее, невозможно написать QSP-код, который поломает что-то в системе).</p>
</segment>
<segment name="li">
<p>
В-восьмых, легче что-то изменить, в случае чего. В самом Python что-то менять было бы сложно (нужно писать транслятор из какого-то другого языка в Python).</p>
</segment>
</list>
<segment>
<p>
Ну и, конечно же, изначально хотелось поэкспериментировать с синтаксисом и интерпретацией :)
</p>
<p>
Автор: `Byte`
</p>
<p>
20.09.2020 15:03
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\010_uchebnik_po_qsp_dlja_redaktora_qgen_0004.txt-light">
<header anchor="informarch_qgen_teach" head-level="h1">
<p>
Учебник по QSP для редактора QGen</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Перед вами - учебник для написания игр в программе QGen.
</p>
<p>
Он создан для авторов, не имеющих опыта в программировании.
</p>
<p>
Последовательно и внимательно выполнив все задания из учебника, вы освоите QSP настолько, чтобы самостоятельно создавать свои игры. Благодаря подробным инструкциям и скриншотам, а также простоте языка QSP, это будет несложно.
</p>
<p>
Этот учебник будет вам полезен только в том случае, если вы будете на самом деле выполнять описанные в нем задания. Простое "чтение" уроков, а также "выполнение в уме" сведет эффект учебника к нулю. Выполнять уроки следует только в той последовательности, в которой они написаны, не пропуская ни одного.
</p>
<p>
Для того, чтобы приступить к выполнению заданий, убедитесь, что вы
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="simple-string">
Установили </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_content&view=article&id=64&Itemid=56">
плеер QSP</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Скачали и распаковали </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_content&task=view&id=46&Itemid=56">
редактор QGen</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Скачали справку по QSP со страницы </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_content&view=article&id=57&Itemid=56">
"Разработчикам"</tag>
</p>
</segment>
</list>
<segment>
<p>
Всё есть? Смело приступаем к первому уроку!
</p>
</segment>
</segment>
<header head-level="h2" anchor="urok-pervyj-sozdaiom-igru">
<p>
Урок первый. Создаём игру.</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Запускаем QGen. Выбираем меню "Утилиты\Настройки".
</p>
<tag name="image" src="https://i.ibb.co/PQw0fKD/tut1-01.png">
</tag>
<p>
Открываем вкладку "Пути".
</p>
<tag name="image" src="https://i.ibb.co/GCcNWnm/tut1-02.png">
</tag>
<p>
Указываем "Путь к плееру" и "Путь к справке". Нажимаем "ОК".
</p>
<p>
Игровые локации - это небольшие части, на которые мы делим игру.
</p>
<p>
Создаём локацию. Нажимаем зелёный крестик.
</p>
<tag name="image" src="https://i.ibb.co/1RV6q5R/tut1-03.png">
</tag>
<p>
В появившемся окне пишем название локации - в нашем уроке она будет называться "Начало".
</p>
<tag name="image" src="https://i.ibb.co/njrhhyt/tut1-04.png">
</tag>
<p>
Нажимаем "ОК".
</p>
<p>
В поле описания локации(курсор находится в нём по умолчанию) пишем
</p>
</segment>
<code code-left-level="0" code-type="None">
Привет, мир!
</code>
<segment>
<tag name="image" src="https://i.ibb.co/rdCb1Y7/tut1-05.png">
</tag>
<p>
Выбираем "Игра\Сохранить".
</p>
<tag name="image" src="https://i.ibb.co/JF9TG1T/tut1-06.png">
</tag>
<p>
Пишем имя для файла, в котором будет храниться игра - "учебная".
</p>
<tag name="image" src="https://i.ibb.co/1rHyJjr/tut1-07.png">
</tag>
<p>
Нажимаем "Сохранить".
</p>
<p>
Появится окошко для ввода пароля.
</p>
<tag name="image" src="https://i.ibb.co/sPT90fz/tut1-08.png">
</tag>
<p>
Ничего вводить не нужно, нажимаем "OK".
</p>
<p>
Запускаем игру, для этого нажимаем синий треугольник.
</p>
<tag name="image" src="https://i.ibb.co/2hZ67BB/tut1-09.png">
</tag>
<p>
Запустится плеер QSP с нашей игрой.
</p>
<tag name="image" src="https://i.ibb.co/LxtXFMZ/tut1-10.png">
</tag>
<p>
Закрываем окно плеера. В поле "Выполнить при посещении" пишем
</p>
</segment>
<code code-left-level="0" code-type="qsp">
showstat 0
<br/>showinput 0
</code>
<segment>
<tag name="image" src="https://i.ibb.co/51TmpqZ/tut1-11.png">
</tag>
<p>
`"SHOWSTAT 0"` означает, что мы отключаем "окно дополнительных описаний", `"SHOWINPUT 0"` - отключаем "поле ввода". В наших уроках они использоваться не будут, и поэтому для нашей игры их стоит отключить.
</p>
<p>
Запускаем. Смотрим, что изменилось:
</p>
<tag name="image" src="https://i.ibb.co/jkMStvw/tut1-12.png">
</tag>
<p>
Итог: в этом уроке мы научились делать начальную настройку QGen, сохранять игру, создавать игровые локации, показывать текст в поле описания, отключать неиспользуемые окна и запускать игру прямо из QGen.
</p>
</segment>
</segment>
<header head-level="h2" anchor="urok-vtoroj-perehody-po-lokatsiiam">
<p>
Урок второй. Переходы по локациям.</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В описании локации "Начало" удаляем строку "Привет, мир!" и пишем
</p>
</segment>
<code code-left-level="0" code-type="None">
Новое приключение героя.
</code>
<segment>
<p>
Создаём локации "Об игре", "Об авторе".
</p>
<p>
В описании локации "Об игре" пишем
</p>
</segment>
<code code-left-level="0" code-type="None">
Перед вами величайшая игра всех времён. И народов. Точно.
</code>
<segment>
<p>
В описании локации "Об авторе" пишем
</p>
</segment>
<code code-left-level="0" code-type="None">
Автор сей замечательной игры - великолепен и неподражаем. Вы сами сможете убедиться в этом, поиграв в мою игру.
</code>
<segment>
<p>
У нас есть три локации, осталось связать их вместе, сделать переходы между локациями. Для этого нам нужно добавить "действия" для каждой локации.
</p>
<p>
Выбираем в списке слева локацию "Начало" двойным щелчком мыши.
</p>
<tag name="image" src="https://i.ibb.co/kHfd5kt/tut2-01.png">
</tag>
<p>
Откроется вкладка с заголовком "Начало".
</p>
<tag name="image" src="https://i.ibb.co/7vXTRvm/tut2-02.png">
</tag>
<p>
В нижней части окна есть кнопка "Добавить действие", нажимаем её.
</p>
<tag name="image" src="https://i.ibb.co/bXnzR5F/tut2-03.png">
</tag>
<p>
В появившемся диалоговом окне вводим название действия - "Об игре".
</p>
<tag name="image" src="https://i.ibb.co/sFmSw1K/tut2-04.png">
</tag>
<p>
В поле для ввода текста, находящемся правее и ниже названия действия, пишем
</p>
</segment>
<code code-left-level="0" code-type="qsp">
GOTO 'Об игре'
</code>
<segment>
<tag name="image" src="https://i.ibb.co/st0HjjJ/tut2-05.png">
</tag>
<p>
С помощью оператора GOTO мы указываем, на какую локацию будет осуществляться переход.
</p>
<p>
Таким образом, мы создали переход с локации "Начало" на локацию "Об игре".
</p>
<p>
Добавим ещё одно действие на локации "Начало". Нажимаем Alt+F7, вводим имя действия - "Об авторе". Задаём команду перехода, пишем
</p>
</segment>
<code code-left-level="0" code-type="qsp">
GOTO 'Об авторе'
</code>
<segment>
<p>
Выбираем локацию "Об игре".
</p>
<p>
Создаём действие "Вернуться", в нём указываем переход на локацию "Начало".
</p>
<p>
Выбираем локацию "Об авторе".
</p>
<p>
Аналогично, создаём действие "Вернуться" - переход на локацию "Начало".
</p>
<p>
Теперь у нас есть три локации, связанные переходами.
</p>
<p>
Запускаем игру, смотрим, что получилось.
</p>
<tag name="image" src="https://i.ibb.co/f9d4RSc/tut2-06.png">
</tag>
<p>
Нажимая действия, мы сможем свободно перемещаться между локациями.
</p>
<p>
Итог: в этом уроке мы научились создавать действия, осуществлять переходы по локациям.
</p>
</segment>
</segment>
<header head-level="h2" anchor="urok-tretij-prostejshaia-igra-s-vyborom">
<p>
Урок третий. Простейшая игра с выбором</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Создаём локацию "Развилка". В описании пишем:
</p>
</segment>
<code code-left-level="0" code-type="None">
Вышел герой к реке, куда дальше идти?
</code>
<segment>
<p>
Создаём локацию "Выиграл". В описании пишем:
</p>
</segment>
<code code-left-level="0" code-type="None">
Переплыл герой реку и завершил своё приключение с победой.
</code>
<segment>
<p>
Создаём локацию "Проиграл". В описании пишем:
</p>
</segment>
<code code-left-level="0" code-type="None">
Брёл герой вдоль берега, брёл. А потом его съел медведь. Так наш герой проиграл.
</code>
<segment>
<p>
Мы создали три игровые локации, теперь сделаем переходы между ними.
</p>
<p>
В локации "Начало" создаём действие "Играть" с переходом в локацию "Развилка".
</p>
<p>
В локации "Развилка" создаём три действия: "Переплыть реку" с переходом в локацию "Выиграл"; "Налево вдоль реки" и "Направо вдоль реки" с переходом в локацию "Проиграл".
</p>
<p>
В локации "Проиграл" создаём действие "Начать сначала" с переходом на локацию "Начало".
</p>
<p>
Запускаем. Первая игра готова!
</p>
<p>
Итог: в этом уроке мы научились создавать в игре выбор, от которого зависит развитие сюжета.
</p>
</segment>
</segment>
<header head-level="h2" anchor="urok-chetvertyj-peremennye">
<p>
Урок четвертый. Переменные.</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Переменные - это "память" игры.
</p>
<p>
В переменных хранится информация обо всем, что изменяется в процессе игры. Автор называет переменные так, как ему удобно, главное следить за тем, чтобы в имени переменной не было других знаков, кроме букв, цифр и символов подчеркивания. Пробелы в имени не допускаются, для разделения пользуйтесь подчеркиванием, вот так: `моя_первая_переменная`. Если в начале имени стоит знак "$", значит, в переменной хранится текст, если нет, то в ней хранится число.
</p>
<p>
Основные действия с переменными, это запись, чтение и вывод.
</p>
</segment>
</segment>
<header head-level="h3" anchor="zapis_">
<p>
Запись</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Когда мы говорим плееру, "в переменной a будет храниться значение 5" - это запись в переменную. Также запись назвают "присваиванием", это одно и то же.
</p>
<p>
В коде это выглядит так:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
a = 5
</code>
<segment>
<p>
Мы записали в переменную "a" числовое значение 5. Знак "=" здесь не обозначает равенство, как в математике, он обозначает операцию присваивания. Переменная, в которую мы записываем значение, должна всегда стоять слева от знака "=".
</p>
<p>
Как же записать в переменную не число, а текстовую строку? Очень просто. Во-первых, не забываем ставить знак "$" в начале имени переменной. Во-вторых, заключаем строку в апострофы.
</p>
</segment>
<code code-left-level="0" code-type="qsp">
$строка = 'Быть или не быть?'
</code>
<segment>
<p>
Мы записали в переменную "$строка" текстовое значение "Быть или не быть?"
</p>
</segment>
</segment>
<header head-level="h3" anchor="chtenie">
<p>
Чтение</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Чаще всего, значение переменной нам требуется для нового присваивания, либо для проверки условия.
</p>
<p>
Вот, например, мы прибавляем 10 к переменной "a", и записываем результат в переменную "k".
</p>
</segment>
<code code-left-level="0" code-type="qsp">
k = a + 10
</code>
<segment>
<p>
Допустим, в переменной "a" было записано 5. Тогда k = 5 + 10 = 15. В переменной "k" теперь хранится значение 15. Обратите внимание, в этой строке кода было произведено чтение значения переменной "a", вычисление выражения "a + 10", и запись результата в переменную "k".
</p>
<p>
Уменьшаем значение переменной "k" на 2.
</p>
</segment>
<code code-left-level="0" code-type="qsp">
k = k - 2
</code>
<segment>
<p>
В переменной "k" было записано 15. Значит, k = 15 - 2 = 13. Теперь в переменной "k" хранится значение 13.
</p>
<p>
Для текстовых переменных существует операция "склеивания строк", записывается она знаком "+".
</p>
</segment>
<code code-left-level="0" code-type="qsp">
$вопрос = $строка + ' Вот в чем вопрос.'
</code>
<segment>
<p>
Теперь в переменной "$вопрос" хранится текстовое значение "Быть или не быть? Вот в чем вопрос."
</p>
<p>
Использование переменных в условиях мы разберем в следующем уроке.
</p>
</segment>
</segment>
<header head-level="h3" anchor="vyvod">
<p>
Вывод</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Для вывода используйте двойные угловые скобки, "&lt;&lt;" и "&gt;&gt;". Между двойными угловыми скобками напишите имя переменной, например "&lt;&lt;$вопрос&gt;&gt;", или "&lt;&gt;", и при выводе плеер сам подставит текущее значение переменной, при этом угловые скобки выведены на экран не будут.
</p>
</segment>
</segment>
<header head-level="h3" anchor="primeniaem-znaniia">
<p>
Применяем знания</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Начнем применять переменные на практике. Создайте новую игру, назовите ее "Planet Master".
</p>
<p>
`Локация "Начало"`
</p>
<p>
Создайте локацию "Начало", в описании напишите "Создайте свою планету и сможете управлять ей в меру своих скромных возможностей."
</p>
<p>
В коде локации(поле "выполнить при посещении") отключите неиспользуемые окна. На этот раз окно инвентаря нам не понадобится, поэтому его тоже отключаем.
</p>
</segment>
<code code-left-level="0" code-type="qsp">
SHOWSTAT 0
<br/>SHOWINPUT 0
<br/>SHOWOBJS 0
</code>
<segment>
<p>
Создайте действие "Создать планету" с переходом на локацию "СоздатьПланету".
</p>
<p>
`Локация "СоздатьПланету"`
</p>
<p>
Создайте локацию "СоздатьПланету". В коде локации пишем
</p>
</segment>
<code code-left-level="0" code-type="qsp">
$Имя = $INPUT('Придумайте имя для своей планеты.')
<br/>Температура = 100
<br/>'Ваша планета называется &lt;&lt;$Имя&gt;&gt;.'
</code>
<segment>
<p>
Рассмотрим подробно.
</p>
<p>
В первой строке, мы просим игрока ввести имя для планеты. В скобках функции INPUT указано приглашение, которое прочтет игрок. Текст, который введет игрок, будет сохранен в текстовой переменной $Имя.
</p>
<p>
Вторая строка задает значение для числовой переменной Температура. В этой переменной будет храниться текущая температура для планеты.
</p>
<p>
В третьей строке на экран описания локации выводится текст. В выводимом тексте, вместо выражения &lt;&lt;$Имя&gt;&gt; плеер подставит значение переменной $Имя, то есть тот текст, который ввел игрок. Если игрок ввел "Персефона", то на экране будет написано "Ваша планета называется Персефона."
</p>
<p>
Создайте действие "Управлять планетой" с переходом на локацию "Планета".
</p>
<p>
`Локация "Планета"`
</p>
<p>
Создайте локацию "Планета". В описании локации пишем
</p>
</segment>
<code code-left-level="0" code-type="None">
Имя планеты: &lt;&lt;$Имя&gt;&gt;
<br/>Температура на планете: &lt;&lt;Температура&gt;&gt; градусов.
</code>
<segment>
<p>
При выводе на экран, вместо `&lt;&lt;$Имя&gt;&gt;` и `&lt;&lt;Температура&gt;&gt;` будут подставлены значения указанных переменных.
</p>
<p>
Нам нужно, чтобы игрок мог изменить температуру на планете. Для этого сделаем несколько действий, в которых будет меняться переменная Температура.
</p>
<p>
Создайте действие "Поднять температуру на 10 градусов".
</p>
<p>
В коде действия пишем
</p>
</segment>
<code code-left-level="0" code-type="qsp">
Температура = Температура + 10
<br/>GOTO $CURLOC
</code>
<segment>
<p>
В первой строке, мы увеличиваем на 10 единиц значение переменной Температура. Если температура планеты была 100 градусов, то при выборе этого действия температура планеты станет 110 градусов, и так далее.
</p>
<p>
Вторая строка задает переход на текущую локацию. `$CURLOC` - специальная функция, которая всегда возвращает имя текущей локации, в нашем случае это локация "Планета".
</p>
<p>
Зачем же нам "переходить" на локацию, на которой мы и так уже находимся? Это нужно для того, чтобы обновить текст описания локации. Переменная Температура была изменена, но изменения в описании появятся только при "входе" на локацию, поэтому мы должны явно задать переход.
</p>
<p>
Создайте аналогичное действие "Снизить температуру на 10 градусов".
</p>
<p>
Создайте действие "Установить комнатную температуру". Код действия:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
Температура = 25
<br/>GOTO $CURLOC
</code>
<segment>
<p>
При выборе этого действия, температура планеты станет 25 градусов, вне зависимости от того, какой она была. Обычное присваивание.
</p>
<p>
Создайте действие "Создать новую планету" с переходом на локацию "СоздатьПланету". Когда игроку надоест одна планета, он может выбрать это действие и создать новую.
</p>
<p>
Игра готова!
</p>
<tag name="image" src="https://i.ibb.co/h2pmr17/tut4-01.png">
</tag>
<p>
Итог: в этом уроке мы узнали, что такое переменная, как вывести значение переменной на экран, какие операции возможны с переменными.
</p>
</segment>
</segment>
</segment>
<header head-level="h2" anchor="urok-piatyj-usloviia">
<p>
Урок пятый. Условия</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Условия - самый важный и мощный инструмент в разработке текстовой игры. Автору требуется не только вести учет состояния игры(переменные), но и делать прохождение игры зависящим от изменившегося состояния. Для этих целей в QSP есть условный оператор - "IF".
</p>
<p>
Записывается так:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
IF условие :
<br/>    действие1
<br/>ELSE
<br/>    действие2
<br/>END
</code>
<segment>
<p>
Если `условие` выполняется, то будет выполнено `действие1`, если нет - `действие2`.
</p>
<p>
Когда нам требуется задать только `действие1`, запись будет короче:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
IF условие :
<br/>    действие1
<br/>END
</code>
<segment>
<p>
Напишем игру, в которой прохождение будет зависеть от того, побывал ли игрок на некоторой локации.
</p>
<p>
`Локация "Начало"`
</p>
<p>
Создайте локацию "Начало", в описании напишите "Игра про космос."
</p>
<p>
В коде локации отключите неиспользуемые окна. Окно инвентаря в этой игре не понадобится, поэтому его тоже отключаем. Для удобного перезапуска игры из локации проигрыша, добавим оператор KILLALL, он очищает все переменные и инвентарь. Теперь достаточно сделать переход на локацию "Начало", чтобы состояние игры было "сброшено".
</p>
</segment>
<code code-left-level="0" code-type="qsp">
KILLALL
<br/>SHOWINPUT 0
<br/>SHOWSTAT 0
<br/>SHOWOBJS 0
</code>
<segment>
<p>
Создайте действие "Играть" с переходом на локацию "Играть".
</p>
<p>
`Локация "Играть"`
</p>
<p>
Создайте локацию "Играть". В описании пишем: "Вы долго исследовали пояс астероидов и настала пора возвращаться на Землю."
</p>
<p>
Создайте действие "Связаться с диспетчером" с переходом на локацию "Диспетчер".
</p>
<p>
Создайте действие "Лететь на Землю". В коде действия пишем условие:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
IF Курс_Полёта = 1:
<br/>  GOTO 'Победа'
<br/>ELSE
<br/>  GOTO 'Проигрыш'
<br/>END
</code>
<segment>
<p>
Рассмотрим подробно.
</p>
<p>
Мы проверяем значение переменной `Курс_Полёта`. Условие "Курс_Полёта = 1" означает "Значение переменной Курс_Полёта должно равняться 1". Если значение равняется `1`, то при нажатии этого действия будет переход на локацию "Победа", иначе - переход на локацию "Проигрыш".
</p>
<p>
Локация "Диспетчер"
</p>
<p>
Создайте локацию "Диспетчер". В описании пишем
</p>
</segment>
<code code-left-level="1" code-type="None">
- Вызываю диспетчера, вызываю диспетчера.
<br/>- Диспетчер на связи, высылаю вам курс полёта через пояс астероидов до Земли.
<br/>- Курс полёта принял.
</code>
<segment>
<p>
В коде локации пишем
</p>
</segment>
<code code-left-level="0" code-type="qsp">
Курс_Полёта = 1
</code>
<segment>
<p>
Здесь мы "запоминаем", что игрок зашел в локацию, записав в переменную Курс_Полёта значение 1. Если игрок не заходил в локацию, то значение переменной будет 0.
</p>
<p>
Создайте действие "Завершить сеанс связи" с переходом на локацию "Играть".
</p>
<p>
`Локация "Победа"`
</p>
<p>
Создайте локацию "Победа". В описании локации пишем: "Вы благополучно долетели до Земли. Хорошо, что вы связались с диспетчером и получили у него курс полёта."
</p>
<p>
`Локация "Проигрыш"`
</p>
<p>
Создайте локацию "Проигрыш". В описании пишем: "Лететь без курса полёта через пояс астероидов - чистой воды самоубийство. Вам не повезло и один из астероидов протаранил ваш корабль, так что на Земле вас так и не дождались."
</p>
<p>
Создайте действие "Начать сначала" с переходом на локацию "Начало".
</p>
<p>
Игра готова!
</p>
<tag name="image" src="https://i.ibb.co/5MdqckD/tut5-01.png">
</tag>
<p>
Итог: в этом уроке мы научились использовать условия.
</p>
</segment>
</segment>
<header head-level="h2" anchor="urok-shestoj-beriom-predmety">
<p>
Урок шестой. Берём предметы</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В текстовых играх часто применяются предметы. Для того, чтобы игрок всегда знал, какие предметы у него с собой, в QSP есть специальное окно инвентаря(с заголовком "Предметы"). Когда игрок берет предмет, тот появляется в инвентаре.
</p>
<p>
Для того, чтобы добавить предмет в инвентарь, используется оператор `ADDOBJ`, для того, чтобы удалить предмет из инвентаря, используется оператор `DELOBJ`.
</p>
<p>
Записывается так:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
ADDOBJ 'Название предмета'
<br/>DELOBJ 'Название предмета'
</code>
<segment>
<p>
Есть три основных способа брать предмет, рассмотрим каждый на примере.
</p>
<p>
Создайте локацию "Начало", с описанием "Игра про гномов." и действием с переходом на локацию "Играть". Отключите неиспользуемые окна - дополнительное описание и строку ввода.
</p>
<p>
Создайте локацию "Играть". В описании напишите:
</p>
</segment>
<code code-left-level="0" code-type="None">
Вы спасли гномьего короля от смерти в лапах тигра.
<br/> - Бери алмазов сколько захочешь, бери рубинов, сколько унесёшь, бери Меч Справедливости, он у нас один.
</code>
<segment>
<p>
Берем предметы без ограничений.
</p>
<p>
Напишем действие для того, чтобы брать алмазы. Создайте действие "Взять алмаз". В коде действия пишем:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
ADDOBJ 'Алмаз'
</code>
<segment>
<p>
Действие готово. Теперь, когда игрок выберет это действие, в инвентаре добавится предмет "Алмаз". Сколько раз нажмет, столько алмазов добавится, без ограничений по количеству.
</p>
<p>
Берем не более 5 предметов.
</p>
<p>
Напишем действие для того, чтобы брать рубины. По замыслу игры, игроку позволено взять только 5 рубинов. Создайте действие "Взять рубин". В коде действия пишем:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
IF Количество_Рубинов &lt; 5:
<br/>  ADDOBJ 'Рубин'
<br/>  Количество_Рубинов = Количество_Рубинов + 1
<br/>ELSE
<br/>  'Жадность не порок, но вы не можете унести больше, чем уже взяли.'
<br/>END
</code>
<segment>
<p>
В этом действии делается проверка на количество рубинов, которые уже взял игрок. Если количество рубинов меньше 5, то он может взять еще один рубин. Если нет, то выводим строку текста.
</p>
<p>
Обратите внимание на строку
</p>
</segment>
<code code-left-level="0" code-type="qsp">
Количество_Рубинов = Количество_Рубинов + 1
</code>
<segment>
<p>
Здесь переменная "Количество_Рубинов" увеличивается на 1 каждый раз, когда игрок берет рубин. Такую переменную называют "счетчиком". Пока игрок не взял ни одного рубина, в этой переменной будет значение 0. Когда игрок будет брать рубины, это значение будет увеличиваться, пока не достигнет максимального значения 5.
</p>
<p>
Берем только один предмет.
</p>
<p>
Напишем действие для того, чтобы взять меч. Это действие будет присутствовать на локации только в том случае, если игрок еще не взял меч. Поэтому мы не создадим действие как обычно, а напишем его в коде самой локации, "обернув" его в условие. Пишем в коде локации:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
IF Меч = 0:
<br/>  ACT 'Взять Меч Справедливости':
<br/>    ADDOBJ 'Меч Справедливости'
<br/>    Меч = 1
<br/>    GOTO $CURLOC
<br/>  END
<br/>END
</code>
<segment>
<p>
Переменная "Меч" принимает всего два значения: 0 и 1. Такую переменную назвают "флажком". Изначально в переменной "Меч", как и в любой другой числовой переменной, хранится значение 0. Условие "Меч = 0" выполняется, и действие "Взять Меч Справедливости" добавляется в список действий.
</p>
<p>
Рассмотрим подробно, что произойдет, когда игрок выберет это действие.
</p>
</segment>
<code code-left-level="4" code-type="qsp">
ADDOBJ 'Меч Справедливости'
</code>
<segment>
<p>
В инвентарь добавляется предмет "Меч Справедливости".
</p>
</segment>
<code code-left-level="4" code-type="qsp">
Меч = 1
</code>
<segment>
<p>
В переменную "Меч" записывается значение 1. Мы "установили флажок", теперь игра "помнит", что игрок взял меч.
</p>
</segment>
<code code-left-level="4" code-type="qsp">
GOTO $CURLOC
</code>
<segment>
<p>
Переход на текущую локацию. Заново выводится описание локации, заполняется список действий, и выполняется код локации. Условие "Меч = 0" не выполнится, и поэтому действие "Взять Меч Справедливости" не будет добавлено.
</p>
<p>
Итог: в этом уроке мы научились брать предметы тремя способами - без ограничений, с ограничением по количеству, и однократно.
</p>
</segment>
</segment>
<header head-level="h2" anchor="urok-sed_moj-primenenie-predmetov">
<p>
Урок седьмой. Применение предметов</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Основной способ сделать "применение" предмета в игре - создать действие, которое будет доступно только при наличии предмета в инвентаре. Рассмотрим на примере.
</p>
<p>
`Локация "Начало"`
</p>
<p>
Создайте локацию "Начало", с описанием "Игра про Дверь." и действием с переходом на локацию "Комната". Отключите строку ввода.
</p>
<p>
`Локация "Комната"`
</p>
<p>
Создайте локацию "Комната". В описании пишем: "Вы стоите в центре комнаты, заполненной грудами ненужного хлама. У дальней стены вы видите дверь."
</p>
<p>
Создайте действие "Подойти к двери" с переходом на локацию "Дверь".
</p>
<p>
Теперь сделаем взятие предмета. Предмет можно взять только один раз, поэтому используем третий способ из предыдущего урока. Пишем в коде локации:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
IF Ключ = 0:
<br/>  'На полу вы видите небольшой ключ.'
<br/>  ACT 'Взять ключ':
<br/>    Ключ = 1
<br/>    ADDOBJ 'Ключ'
<br/>    PL 'Вы взяли ключ.'
<br/>    GOTO $CURLOC
<br/>  END
<br/>END
</code>
<segment>
<p>
Обратите внимание, что строка "На полу вы видите небольшой ключ." находится внутри условия. Благодаря этому, она будет на экране до тех пор, пока игрок не возьмет ключ.
</p>
<p>
Также обратите внимание на строку
</p>
</segment>
<code code-left-level="0" code-type="qsp">
PL 'Вы взяли ключ.'
</code>
<segment>
<p>
PL - оператор вывода текста в окно дополнительного описания. При переходах между локациями дополнительное описание не очищается, поэтому в него удобно записывать результаты совершенных действий.
</p>
<p>
`Локация "Дверь"`
</p>
<p>
Создайте локацию "Дверь". В описании пишем: "Дверь заперта."
</p>
<p>
Создайте действие "Отойти от двери" с переходом на локацию "Комната".
</p>
<p>
Сделаем применение предмета. Пишем в коде локации:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
IF OBJ 'Ключ':
<br/>  ACT 'Открыть дверь ключом':
<br/>    DELOBJ 'Ключ'
<br/>    GOTO 'Победа'
<br/>  END
<br/>END
</code>
<segment>
<p>
Рассмотрим подробно. Условие "OBJ 'Ключ'" определяет, находится ли предмет "Ключ" в инвентаре. Действие "Открыть дверь ключом" будет доступно тогда, когда предмет "Ключ" находится в инвентаре.
</p>
<p>
Обратите внимание на строку
</p>
</segment>
<code code-left-level="0" code-type="qsp">
DELOBJ 'Ключ'
</code>
<segment>
<p>
После того, как мы открыли дверь, ключ нам больше не нужен, поэтому мы удаляем его из инвентаря.
</p>
<p>
`Локация "Победа"`
</p>
<p>
Создайте локацию "Победа" с описанием "Вы выбрались из комнаты."
</p>
<p>
Игра готова.
</p>
<tag name="image" src="https://i.ibb.co/RPxDthj/tut7-01.png">
</tag>
<p>
Итог: в этом уроке мы научились применять предметы в игре.
</p>
<p>
`Теперь вы овладели всеми основными приемами разработки игр на QSP, и уже можете начинать писать свои игры.`
</p>
<tag name="hr">
</tag>
<p>
Автор: `NEX`
</p>
<p>
27.02.2009 10:41</p>
</segment>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\011_lokalizatsija_qsp_0005.txt-light">
<header anchor="informarch_localization" head-level="h2">
<p>
Локализация классического плеера QSP версии 5.7.0</p>
</header>
<segment segment-class="for-head">
<quote>
<p>
Пишу на QSP полуигровой дипломный проект. Всё круто. Но научрука смущают пункты меню плеера вроде "квест", "игра". Понимаю, что можно поменять названия пунктов в файле языка "*.mo", но не понимаю как. По сему вопрос - Существуют ли способы создания своих файлов языка для интерфейса плеера? И если это как-то очевидно и я просмотрел, то заранее извиняюсь smile</p>
</quote>
<segment>
<p>
Этот вопрос на сайте нигде пока что не освещен, думаю, пора сделать спец. страничку, посвященную исходному коду и локализациям windows-плеера QSP, а также самой `qsp.dll`.
</p>
<p>
Ответ на вопрос, как модифицировать файлы локализации:
</p>
</segment>
<list list-type="ol-list">
<segment name="li">
<p>
<tag name="simple-string">
Качаем </tag>
<tag name="hyperlink" href="https://sourceforge.net/projects/poedit/">
poedit</tag>
<tag name="simple-string">
, устанавливаем.</tag>
</p>
</segment>
<segment name="li">
<p>
Берем файл с русской локализацией, папка `QSP-плеера/langs/ru/qspgui.mo`</p>
</segment>
<segment name="li">
<p>
Копируем в папку папка `poedit/bin`</p>
</segment>
<segment name="li">
<segment>
<p>
Заходим в эту папку и запускаем командную строку, в ней пишем</p>
</segment>
<code code-left-level="4" code-type="None">
msgunfmt qspgui.mo &gt; qspgui.po
</code>
</segment>
<segment name="li">
<p>
Редактируем `qspgui.po` в `poedit`</p>
</segment>
<segment name="li">
<p>
Сохраняем. При сохранении файл `qspgui.mo` сгенерируется автоматически(в настройках "по умолчанию" есть соответствующая галочка)</p>
</segment>
<segment name="li">
<p>
Берем полученный `qspgui.mo` и записываем его в папка `QSP-плеера/langs/ru/qspgui.mo`</p>
</segment>
</list>
<segment>
<p>
Автор заметки: `Nex`.
</p>
<p>
<tag name="simple-string">
Тема на форуме: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=164&Itemid=57">
"Локализация QSP"</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\012_analizator_koda_qsp_0006.txt-light">
<header anchor="informarch_analyzer_qsp" head-level="h1">
<p>
Анализатор кода QSP</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Анализатор выполняет проверку на двух уровнях:
</p>
</segment>
<list list-type="ol-list">
<segment name="li">
<p>
Проверка синтаксиса. Все ошибки, которые можно однозначно определить по соответствию синтаксическим правилам языка QSP.</p>
<p>
	`Пример:` незакрытые многострочные операторы, незакрытые скобки, неверное количество аргументов функции и т.д.
</p>
</segment>
<segment name="li">
<p>
Предупреждения. Предположения об ошибках, основанные на анализе структуры игры - переменные, локации, предметы, действия.</p>
<p>
	`Пример:` локации, на которые нет перехода, использование неинициализированных переменных, попытка удалить предмет, который нигде не добавляется, и т.д.
</p>
</segment>
</list>
<segment>
<p>
Ссылка на проект, для тех, кому интересно: http://code.google.com/p/qsp-analyser/
</p>
<p>
Главная ценность проекта - исходный код, который полностью открыт. Его я буду обновлять регулярно, по мере работы над проектом.
</p>
<p>
Внимание: анализатор работает только с файлом текстового формата (TXT2GAM). Поэтому для проверки вам придётся экспортировать игру в кугене.
</p>
<p>
Игра -&gt; Экспорт -&gt; Текстовый файл формата TXT2GAM.
</p>
<p>
<tag name="hyperlink" href="https://code.google.com/archive/p/qsp-analyser/downloads">
`Скачать анализатор со страницы релизов`</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="eksport-tekstovyh-konstant-v-csv-fajl-i-perevod">
<p>
Экспорт текстовых констант в CSV-файл и перевод</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Сделано для удобства перевода игры на другой язык. Работает так: открываем утилиту, выбираем исходный код квеста. Открываем вкладку "Конвертация". Жмем "Экспорт в CSV". Если в исходном файле нет ошибок, генерируется CSV-файл, в котором записана таблица из четырех колонок. В первой - номер строки таблицы и название локации, из которой взят текст. Во второй - исходный текст. В третьей - нужно вписать перевод. В четвертой можно писать любые комментарии, ее содержимое не учитывается.
</p>
<p>
CSV-файл можно редактировать во многих офисных программах. Точно он поддерживается программами OpenOffice Calc и MS Excel. Когда перевод готов, нажимаем кнопку "Сделать перевод, используя CSV". Сгенерируется файл с именем таким как у исходного квеста + указанный суффикс(пример: исходный квест "game.txt", CSV-файл "game.csv", файл перевода "game_tr.txt"). Получили переведенную игру.
</p>
<p>
Для чего это нужно? Во-первых, наглядное представление не даст пропустить непереведенных строк.
</p>
<p>
Во-вторых, можно будет поручить перевод человеку, не знакомому с языком QSP.
</p>
<p>
Ну и еще это может служить удобным средством для проверки орфографии, до тех пор пока она не будет-таки реализована в кугене.
</p>
</segment>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\013_polka_igr_0007.txt-light">
<header anchor="informarch_gameshelf" head-level="h1">
<p>
Полка игр</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">

</segment>
<header anchor="informarch_gameshelf_todo" head-level="h2">
<p>
Что должно быть реализовано в полке игр</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Обсуждали недавно с elmortem, каким бы хотелось видеть Classic-плеер в плане работы с играми. Вот к чему пришли.
</p>
<p>
В HTMLTads есть "полка игр" - страница, которая появляется при запуске плеера(т.е. не при открытии конкретной игры, а при самостоятельном запуске), на которой содержатся ссылки на игры, открытые когда-либо игроком. Просто и удобно, открыл плеер, тыкнул на название игры, игра запустилась. Не надо даже в меню лезть.
</p>
<p>
Вот такую "полку игр" хотелось бы видеть в Classic QSP, но этого - мало.
</p>
<p>
Времена медленного интернета прошли, приложения все теснее интегрируются с Web, поэтому:
</p>
<p>
Хотелось бы также видеть на "стартовой страничке" также список игр с сайта - Новые, Популярные, и т.д., в т.ч. список обновлений для уже установленных в системе игр, и ссылку на обновление версии плеера, если оно требуется. Возможно, это следует реализовать не отдельными списками, а одним с переключаемыми сортировками.
</p>
<p>
Возможно, к этому добавится что-то еще - например, ссылки на новости сайта, комментарии к играм или сообщения на форуме.
</p>
<p>
При такой интерактивной странице "Набор игрока"(напомню, он был введен временно) уже не будет нужен - будет просто инсталлятор плеера, в котором будет "стартовая страница", с которой можно будет загрузить и обновить любую игру одним кликом мышки.
</p>
<p>
"Набор игрока" будет упразднен, в будущем он заменится "Коллекциями игр", т.е. списками, составленными по какому-то критерию. Например, серия "Боевики", "Фэнтези", "РПГ", "Ужасы". Возможно, это будет реализовано через теги для игр, которые все еще в планах.
</p>
<p>
Разумеется, весь онлайн-контент нужно будет сделать с возможностью отключения в настройках. Одной галочки, пожалуй, будет достаточно. Само собой, при обновлении страницы он не должен блокировать доступ к списку локально загруженных игр.
</p>
</segment>
</segment>
<header anchor="informarch_gameshelf_pluses" head-level="h3">
<p>
Плюсы:</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
Игрок всегда в курсе выхода новых игр и обновлений плеера.</p>
</segment>
<segment name="li">
<p>
Любую игру, в которую он играл, можно сразу запустить одним кликом.</p>
</segment>
<segment name="li">
<p>
Публикация информации с сайта в плеере(новости, сообщения на форуме, комментарии к играм) привлечет дополнительное внимание игрока к сайту.</p>
</segment>
<segment name="li">
<p>
Процесс скачивания-запуска игры максимально упростится.</p>
</segment>
<segment name="li">
<p>
Обновить игру до последней версии станет очень просто, и не нужно будет следить за обновлениями - плеер сам будет предлагать обновить игру.</p>
</segment>
<segment name="li">
<p>
Можно будет примерно оценивать активную аудиторию игроков по статистике запросов со "стартовых страниц".</p>
</segment>
</list>
</segment>
</segment>
<header anchor="informarch_gameshelf_needs" head-level="h2">
<p>
Требования к играм для попадания в полку игр на Android-плеере</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Требования, которым должна соответствовать игра, чтобы у игрока была возможность нормально играть в нее через "полку игр".
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
Игра должна быть упакована в архив zip.</p>
</segment>
<segment name="li">
<p>
Главный(запускаемый) .qsp-файл должен находиться в корне архива, а не во вложенных папках.</p>
</segment>
<segment name="li">
<p>
На одном уровне с главным .qsp-файлом не должно находиться других .qsp-файлов</p>
</segment>
<segment name="li">
<p>
В архиве не должно быть папок и файлов с русскими буквами в имени.</p>
</segment>
</list>
<segment>
<p>
Автор: `Nex`
</p>
<p>
26.Сен.10 11:29:12
</p>
</segment>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\014_rasprostranjaemaja_standalon_sborka_na_klassike_0031.txt-light">
<header anchor="faq_24_02" head-level="h2">
<p>
24.2. Как сделать StandAlone-сборку на классическом плеере?</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
В:	Как сделать StandAlone-сборку на классическом плеере?
</p>
<p>
	Можно ли сделать игру так, чтобы играть без плеера?
</p>
<p>
	Как сделать пакетный файл запуска, чтобы игрок тыкал иконку `start` и сразу начинал играть?
</p>
<p>
О:
</p>
<p>
Непосредственно без плеера ни одна игра QSP не запустится.
</p>
<p>
Но если вам лень объяснять всем и каждому, что игры QSP запускаются на специальном плеере, что надо отдельно качать плеер, отдельно — игры, то есть специальная инструкция по упаковке и файла плеера и файла игры в самораспаковывающийся sfx-архив, который заменит привычный для игрока установщик.
</p>
<p>
Ниже будет ссылка на изначальную версию данной инструкции, мы же сейчас рассмотрим вариант распространяемой standalone-сборки, включающий как изначальную версию, так и работу с пакетным файлом .bat, который позволит игроку запускать игру одним кликом (прямо с рабочего стола).
</p>
<p>
Для того, чтобы проделать нижеследующие шаги, вам потребуется заранее установить на компьютер программу WinRAR. Она условно-бесплатная. После того, как установите WinRAR, выполните следующее:
</p>
</segment>
<list list-type="ol-list">
<segment name="li">
<p>
В первую очередь необходимо завести отдельную папку, назовём её "Standalone". Можете создать её прямо на рабочем столе, это папка, в которую мы скопируем все необходимые нам файлы, чтобы затем создать sfx-архив.</p>
</segment>
<segment name="li">
<p>
Если вы хотите добавить оригинальную иконку на сам sfx-архив и на ярлык, с которого будет запускаться игра, скопируйте файлы иконок в папку "Standalone". Далее в инструкции будет указано, что и где прописать, чтобы эти иконки задействовать.</p>
</segment>
<segment name="li">
<p>
Скопируйте игру и все сопутствующие ей файлы и папки в папку "Standalone". Например, файл игры называется "moonlight.qsp", он должен оказаться в папке "Standalone".</p>
</segment>
<segment name="li">
<p>
Создайте в папке "Standalone" папку "Player"</p>
</segment>
<segment name="li">
<p>
Скачайте архив с плеером и распакуйте в папку "Player" всё содержимое архива. Таким образом в папке "Player" будет "qspgui.exe" и другие файлы и папки.</p>
</segment>
<segment name="li">
<p>
Создаём в папке "Standalone" текстовый файл, называем его "Start", а вместо расширения ".txt" пишем расширение ".bat"</p>
</segment>
<segment name="li">
<segment>
<p>
Открываем файл "Start.bat" с помощью любого текстового редактора. В этом файле прописываем такую команду:</p>
</segment>
<code code-left-level="20" code-type="None">
start "Player/qspgui.exe" "moonlight.qsp"
</code>
<segment>
<p>
		start — это команда, запускающая исполняемый файл,
</p>
<p>
		первым аргументом указываем путь к исполняемому файлу, то есть к нашему плееру,
</p>
<p>
		вторым аргументом — путь к игре.
</p>
<p>
		Поскольку плеер лежит во вложенной папке, а файл игры в той же папке, что и "start.bat" можно указывать относительные пути. Но если вы точно знаете, в какие папки будут распакованы игра и плеер, можете указать и абсолютные пути.
</p>
</segment>
</segment>
<segment name="li">
<p>
Теперь в папке "Standalone" выделяем папку "Player", выделяем игру ("moonlight.qsp") и все сопутствующие ей файлы и папки, выделяем файл "start.bat", щёлкаем правой кнопкой мыши по любому из выделенных файлов и из всплывающего контекстного меню выбираем пункт "Добавить в архив..."</p>
</segment>
<segment name="li">
<p>
Откроется диалоговое окно по добавлению файлов в архив. Указываем имя архива. Можно написать например "moonline_setup".</p>
</segment>
<segment name="li">
<p>
На вкладке "Дополнительно" заходим в "параметры SFX".</p>
</segment>
<segment name="li">
<segment>
<p>
На вкладке "Общие" указываем путь для распаковки. Рекомендую указывать абсолютный путь, так как неизвестно, откуда игрок запустит ваш "установщик". Например, можно прописать такой путь:</p>
</segment>
<code code-left-level="8" code-type="None">
C:\QSP_Games\MoonLight
</code>
</segment>
<segment name="li">
<segment>
<p>
На вкладке "Дополнительно" можно добавить ярлык:</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
Нажимаем кнопку "Добавить ярлык...", откроетя диалоговое окно.</p>
</segment>
<segment name="li">
<p>
Отмечаем в списке "Место создания ярлыка" пункт "На рабочем столе".</p>
</segment>
<segment name="li">
<segment>
<p>
В поле "Имя файла для которого будет создан ярлык" пишем:</p>
</segment>
<code code-left-level="24" code-type="None">
start.bat
</code>
</segment>
<segment name="li">
<p>
В поле "Имя ярлыка" можно написать название игры ("MoonLight").</p>
</segment>
<segment name="li">
<p>
В поле "Значок ярлыка" прописываем абсолютный путь к файлу иконки, которую мы хотим увидеть на ярлыке (эта иконка лежит у нас в папке "Standalone").</p>
</segment>
<segment name="li">
<p>
Нажимаем "ОК".</p>
</segment>
</list>
</segment>
<segment name="li">
<p>
На вкладке "Текст и графика" можно прописать некоторые данные. Например, вы можете установить свой логотип, написать текст приветствия для игрока и заголовок окна. Если вы подготовили оригинальный значок/иконку для своего sfx-архива, на этой вкладке можно указать путь к файлу этого значка (эта иконка опять же у нас уже лежит в папке "Standalone").</p>
</segment>
<segment name="li">
<p>
На вкладке "Обновление" отмечаем пункты "извлечь и заменить файлы" и "перезаписывать файлы без запроса".</p>
</segment>
<segment name="li">
<p>
Нажимаем кнопку "ОК", и снова "ОК" в основном окне.</p>
</segment>
</list>
<segment>
<p>
В папке "Satndalone" должен появиться файл с расширением ".exe" ("moonline_setup.exe"). Остаётся только проверить, как данный "установщик" работает, и можно распространять игру среди друзей и знакомых.
</p>
</segment>
</segment>
<header anchor="link_24_02" head-level="h6">
<p>
23.2.  Как сделать StandAlone-сборку на классическом плеере?</p>
</header>
<segment segment-class="for-head">
<p>
<tag name="simple-string">
Смотреть ответ на ютубе: </tag>
<tag name="hyperlink" href="https://youtu.be/Ca4ynD_1BqQ">
https://youtu.be/Ca4ynD_1BqQ</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Genryzz. #3912 21.Фев.16 21:30:40: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=157&prc=25&Itemid=57#p23065">
как сделать пусковой файл?</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\020_konsol_nyj_qsp-pleer_0008.txt-light">
<header anchor="informarch_consoleplayer" head-level="h1">
<p>
Простой консольный QSP-плеер</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<code code-left-level="0" code-type="js">
/* Copyright (C) 2005-2010 Valeriy Argunov (nporep AT mail DOT ru) */
<br/>
<br/>#include "qsp.h"
<br/>#include &lt;stdio.h&gt;
<br/>#include &lt;stdlib.h&gt;
<br/>#include &lt;string.h&gt;
<br/>
<br/>void refresh_int(QSP_BOOL isRedraw)
<br/>{
<br/>    long i;
<br/>    QSP_CHAR *strVal, *imgPath;
<br/>    const QSP_CHAR *mainDesc = QSPGetMainDesc();
<br/>    const QSP_CHAR *varsDesc = QSPGetVarsDesc();
<br/>    // -------------------------------
<br/>    if (QSPIsMainDescChanged()) printf("%s\n", mainDesc);
<br/>    if (QSPIsVarsDescChanged()) printf("%s\n", varsDesc);
<br/>    if (QSPIsActionsChanged())
<br/>    {
<br/>        long actionsCount = QSPGetActionsCount();
<br/>        for (i = 0; i &lt; actionsCount; ++i)
<br/>        {
<br/>            QSPGetActionData(i, &amp;imgPath, &strVal);
<br/>            printf("%d. %s\n", i + 1, strVal);
<br/>        }
<br/>    }
<br/>}
<br/>
<br/>void msg(const QSP_CHAR *str)
<br/>{
<br/>    printf("%s\n", str);
<br/>}
<br/>
<br/>void init_callbacks()
<br/>{
<br/>    QSPSetCallBack(QSP_CALL_REFRESHINT, (QSP_CALLBACK)&refresh_int);
<br/>    QSPSetCallBack(QSP_CALL_SHOWMSGSTR, (QSP_CALLBACK)&msg);
<br/>}
<br/>
<br/>int main()
<br/>{
<br/>    QSPInit();
<br/>    char str[1000];
<br/>
<br/>    init_callbacks();
<br/>
<br/>    QSPLoadGameWorld((const char *)"chukcha.gam");
<br/>    QSPRestartGame(QSP_TRUE);
<br/>
<br/>    while (1)
<br/>    {
<br/>        scanf("%s", str);
<br/>        if (!strcmp(str, "quit"))
<br/>            break;
<br/>        int ind = atoi(str) - 1;
<br/>        if (ind &gt;= 0 &amp;&amp; ind &lt; QSPGetActionsCount())
<br/>        {
<br/>            QSPSetSelActionIndex(ind, QSP_FALSE);
<br/>            QSPExecuteSelActionCode(QSP_TRUE);
<br/>        }
<br/>    }
<br/>
<br/>    QSPDeInit();
<br/>    return 0;
<br/>}
</code>
</segment>
<header head-level="h3" anchor="qsphtxt">
<p>
qsp.h.txt</p>
</header>
<segment segment-class="for-head">
<code code-left-level="0" code-type="js">

<br/>/* Copyright (C) 2005-2010 Valeriy Argunov (nporep AT mail DOT ru) */
<br/>/*
<br/>* This library is free software; you can redistribute it and/or modify
<br/>* it under the terms of the GNU Lesser General Public License as published by
<br/>* the Free Software Foundation; either version 2.1 of the License, or
<br/>* (at your option) any later version.
<br/>*
<br/>* This library is distributed in the hope that it will be useful,
<br/>* but WITHOUT ANY WARRANTY; without even the implied warranty of
<br/>* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
<br/>* GNU Lesser General Public License for more details.
<br/>*
<br/>* You should have received a copy of the GNU Lesser General Public License
<br/>* along with this library; if not, write to the Free Software
<br/>* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
<br/>*/
<br/>
<br/>#ifndef QSP_H
<br/>    #define QSP_H
<br/>
<br/>    #ifdef _FLASH
<br/>        #include &lt;AS3.h&gt;
<br/>    #endif
<br/>
<br/>    #ifdef EXPORT
<br/>        #ifdef _WIN
<br/>            #define QSP_EXTERN __declspec(dllexport)
<br/>        #else
<br/>            #define QSP_EXTERN extern
<br/>        #endif
<br/>    #else
<br/>        #define QSP_EXTERN
<br/>    #endif
<br/>
<br/>    enum
<br/>    {
<br/>        QSP_ERR_DIVBYZERO = 100,
<br/>        QSP_ERR_TYPEMISMATCH,
<br/>        QSP_ERR_STACKOVERFLOW,
<br/>        QSP_ERR_TOOMANYITEMS,
<br/>        QSP_ERR_FILENOTFOUND,
<br/>        QSP_ERR_CANTLOADFILE,
<br/>        QSP_ERR_GAMENOTLOADED,
<br/>        QSP_ERR_COLONNOTFOUND,
<br/>        QSP_ERR_CANTINCFILE,
<br/>        QSP_ERR_CANTADDACTION,
<br/>        QSP_ERR_EQNOTFOUND,
<br/>        QSP_ERR_LOCNOTFOUND,
<br/>        QSP_ERR_ENDNOTFOUND,
<br/>        QSP_ERR_LABELNOTFOUND,
<br/>        QSP_ERR_NOTCORRECTNAME,
<br/>        QSP_ERR_QUOTNOTFOUND,
<br/>        QSP_ERR_BRACKNOTFOUND,
<br/>        QSP_ERR_BRACKSNOTFOUND,
<br/>        QSP_ERR_SYNTAX,
<br/>        QSP_ERR_UNKNOWNACTION,
<br/>        QSP_ERR_ARGSCOUNT,
<br/>        QSP_ERR_CANTADDOBJECT,
<br/>        QSP_ERR_CANTADDMENUITEM,
<br/>        QSP_ERR_TOOMANYVARS,
<br/>        QSP_ERR_INCORRECTREGEXP,
<br/>        QSP_ERR_CODENOTFOUND
<br/>    };
<br/>
<br/>    enum
<br/>    {
<br/>        QSP_WIN_ACTS,
<br/>        QSP_WIN_OBJS,
<br/>        QSP_WIN_VARS,
<br/>        QSP_WIN_INPUT
<br/>    };
<br/>
<br/>    enum
<br/>    {
<br/>        QSP_CALL_DEBUG, /* void func(const QSP_CHAR *str) */
<br/>        QSP_CALL_ISPLAYINGFILE, /* QSP_BOOL func(const QSP_CHAR *file) */
<br/>        QSP_CALL_PLAYFILE, /* void func(const QSP_CHAR *file, int volume) */
<br/>        QSP_CALL_CLOSEFILE, /* void func(const QSP_CHAR *file) */
<br/>        QSP_CALL_SHOWIMAGE, /* void func(const QSP_CHAR *file) */
<br/>        QSP_CALL_SHOWWINDOW, /* void func(int type, QSP_BOOL isShow) */
<br/>        QSP_CALL_DELETEMENU, /* void func() */
<br/>        QSP_CALL_ADDMENUITEM, /* void func(const QSP_CHAR *name, const QSP_CHAR *imgPath) */
<br/>        QSP_CALL_SHOWMENU, /* void func() */
<br/>        QSP_CALL_SHOWMSGSTR, /* void func(const QSP_CHAR *str) */
<br/>        QSP_CALL_REFRESHINT, /* void func(QSP_BOOL isRedraw) */
<br/>        QSP_CALL_SETTIMER, /* void func(int msecs) */
<br/>        QSP_CALL_SETINPUTSTRTEXT, /* void func(const QSP_CHAR *text) */
<br/>        QSP_CALL_SYSTEM, /* void func(const QSP_CHAR *str) */
<br/>        QSP_CALL_OPENGAMESTATUS, /* void func(const QSP_CHAR *file) */
<br/>        QSP_CALL_SAVEGAMESTATUS, /* void func(const QSP_CHAR *file) */
<br/>        QSP_CALL_SLEEP, /* void func(int msecs) */
<br/>        QSP_CALL_GETMSCOUNT, /* int func() */
<br/>        QSP_CALL_INPUTBOX, /* void func(const QSP_CHAR *text, QSP_CHAR *buffer, int maxLen) */
<br/>        QSP_CALL_DUMMY
<br/>    };
<br/>
<br/>    #ifdef _UNICODE
<br/>        #ifndef _FLASH
<br/>            typedef wchar_t QSP_CHAR;
<br/>        #else
<br/>            typedef unsigned short QSP_CHAR;
<br/>        #endif
<br/>        #define QSP_FMT2(x) L##x
<br/>        #define QSP_FMT(x) QSP_FMT2(x)
<br/>    #else
<br/>        typedef char QSP_CHAR;
<br/>        #define QSP_FMT(x) x
<br/>    #endif
<br/>
<br/>    typedef int QSP_BOOL;
<br/>
<br/>    #define QSP_TRUE 1
<br/>    #define QSP_FALSE 0
<br/>
<br/>    #ifndef _FLASH
<br/>        #ifdef __cplusplus
<br/>            typedef int (*QSP_CALLBACK)(...);
<br/>        #else
<br/>            typedef int (*QSP_CALLBACK)();
<br/>        #endif
<br/>    #else
<br/>        typedef struct
<br/>        {
<br/>            QSP_BOOL IsSet;
<br/>            AS3_Val ThisVal;
<br/>            AS3_Val FuncVal;
<br/>        } QSP_CALLBACK;
<br/>    #endif
<br/>
<br/>    #ifdef __cplusplus
<br/>    extern "C"
<br/>    {
<br/>    #endif
<br/>
<br/>    #ifndef _FLASH
<br/>
<br/>        QSP_EXTERN QSP_BOOL QSPIsInCallBack();
<br/>        QSP_EXTERN void QSPEnableDebugMode(QSP_BOOL isDebug);
<br/>        QSP_EXTERN void QSPGetCurStateData(QSP_CHAR **loc, int *actIndex, int *line);
<br/>        QSP_EXTERN const QSP_CHAR *QSPGetVersion();
<br/>        QSP_EXTERN const QSP_CHAR *QSPGetCompiledDateTime();
<br/>        QSP_EXTERN int QSPGetFullRefreshCount();
<br/>        QSP_EXTERN const QSP_CHAR *QSPGetQstFullPath();
<br/>        QSP_EXTERN const QSP_CHAR *QSPGetCurLoc();
<br/>        QSP_EXTERN const QSP_CHAR *QSPGetMainDesc();
<br/>        QSP_EXTERN QSP_BOOL QSPIsMainDescChanged();
<br/>        QSP_EXTERN const QSP_CHAR *QSPGetVarsDesc();
<br/>        QSP_EXTERN QSP_BOOL QSPIsVarsDescChanged();
<br/>        QSP_EXTERN QSP_BOOL QSPGetExprValue(const QSP_CHAR *str, QSP_BOOL *isString, int *numVal, QSP_CHAR *strVal, int strValBufSize);
<br/>        QSP_EXTERN void QSPSetInputStrText(const QSP_CHAR *str);
<br/>        QSP_EXTERN int QSPGetActionsCount();
<br/>        QSP_EXTERN void QSPGetActionData(int ind, QSP_CHAR **imgPath, QSP_CHAR **desc);
<br/>        QSP_EXTERN QSP_BOOL QSPExecuteSelActionCode(QSP_BOOL isRefresh);
<br/>        QSP_EXTERN QSP_BOOL QSPSetSelActionIndex(int ind, QSP_BOOL isRefresh);
<br/>        QSP_EXTERN int QSPGetSelActionIndex();
<br/>        QSP_EXTERN QSP_BOOL QSPIsActionsChanged();
<br/>        QSP_EXTERN int QSPGetObjectsCount();
<br/>        QSP_EXTERN void QSPGetObjectData(int ind, QSP_CHAR **imgPath, QSP_CHAR **desc);
<br/>        QSP_EXTERN QSP_BOOL QSPSetSelObjectIndex(int ind, QSP_BOOL isRefresh);
<br/>        QSP_EXTERN int QSPGetSelObjectIndex();
<br/>        QSP_EXTERN QSP_BOOL QSPIsObjectsChanged();
<br/>        QSP_EXTERN void QSPShowWindow(int type, QSP_BOOL isShow);
<br/>        QSP_EXTERN QSP_BOOL QSPGetVarValuesCount(const QSP_CHAR *name, int *count);
<br/>        QSP_EXTERN QSP_BOOL QSPGetVarValues(const QSP_CHAR *name, int ind, int *numVal, QSP_CHAR **strVal);
<br/>        QSP_EXTERN int QSPGetMaxVarsCount();
<br/>        QSP_EXTERN QSP_BOOL QSPGetVarNameByIndex(int ind, QSP_CHAR **name);
<br/>        QSP_EXTERN QSP_BOOL QSPExecString(const QSP_CHAR *str, QSP_BOOL isRefresh);
<br/>        QSP_EXTERN QSP_BOOL QSPExecCounter(QSP_BOOL isRefresh);
<br/>        QSP_EXTERN QSP_BOOL QSPExecUserInput(QSP_BOOL isRefresh);
<br/>        QSP_EXTERN QSP_BOOL QSPExecLocationCode(const QSP_CHAR *name, QSP_BOOL isRefresh);
<br/>        QSP_EXTERN void QSPGetLastErrorData(int *errorNum, QSP_CHAR **errorLoc, int *errorActIndex, int *errorLine);
<br/>        QSP_EXTERN const QSP_CHAR *QSPGetErrorDesc(int errorNum);
<br/>        QSP_EXTERN QSP_BOOL QSPLoadGameWorld(const QSP_CHAR *file);
<br/>        QSP_EXTERN QSP_BOOL QSPLoadGameWorldFromData(const char *data, int dataSize, const QSP_CHAR *file);
<br/>        QSP_EXTERN QSP_BOOL QSPSaveGame(const QSP_CHAR *file, QSP_BOOL isRefresh);
<br/>        QSP_EXTERN QSP_BOOL QSPSaveGameAsString(QSP_CHAR *strBuf, int strBufSize, int *realSize, QSP_BOOL isRefresh);
<br/>        QSP_EXTERN QSP_BOOL QSPOpenSavedGame(const QSP_CHAR *file, QSP_BOOL isRefresh);
<br/>        QSP_EXTERN QSP_BOOL QSPOpenSavedGameFromString(const QSP_CHAR *str, QSP_BOOL isRefresh);
<br/>        QSP_EXTERN QSP_BOOL QSPRestartGame(QSP_BOOL isRefresh);
<br/>        QSP_EXTERN void QSPSelectMenuItem(int ind);
<br/>        QSP_EXTERN void QSPSetCallBack(int type, QSP_CALLBACK func);
<br/>        QSP_EXTERN void QSPInit();
<br/>        QSP_EXTERN void QSPDeInit();
<br/>
<br/>    #else
<br/>
<br/>        QSP_EXTERN AS3_Val QSPIsInCallBack(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPEnableDebugMode(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetCurStateData(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetVersion(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetCompiledDateTime(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetFullRefreshCount(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetQstFullPath(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetCurLoc(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetMainDesc(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPIsMainDescChanged(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetVarsDesc(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPIsVarsDescChanged(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetExprValue(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPSetInputStrText(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetActionsCount(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetActionData(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPExecuteSelActionCode(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPSetSelActionIndex(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetSelActionIndex(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPIsActionsChanged(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetObjectsCount(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetObjectData(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPSetSelObjectIndex(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetSelObjectIndex(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPIsObjectsChanged(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPShowWindow(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetVarValuesCount(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetVarValues(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetMaxVarsCount(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetVarNameByIndex(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPExecString(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPExecCounter(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPExecUserInput(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPExecLocationCode(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetLastErrorData(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPGetErrorDesc(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPLoadGameWorld(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPLoadGameWorldFromData(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPSaveGame(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPSaveGameAsString(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPOpenSavedGame(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPOpenSavedGameFromString(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPRestartGame(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPSelectMenuItem(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPSetCallBack(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPInit(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPDeInit(void *param, AS3_Val args);
<br/>        QSP_EXTERN AS3_Val QSPReturnValue(void *param, AS3_Val args);
<br/>
<br/>    #endif
<br/>
<br/>    #ifdef __cplusplus
<br/>    }
<br/>    #endif
<br/>
<br/>#endif
<br/>
</code>
<segment>
<p>
Автор: `NTROPY`
</p>
<p>
12.05.2010 17:25
</p>
</segment>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\021_avtomatnoe_programmirovanie_0009.txt-light">
<header anchor="informarch_automateprogs" head-level="h1">
<p>
Автоматное прогарммирование в QSP</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Всем привет,
</p>
<p>
В этой статье хочу рассказать о новом подходе, структурировать программный код при написании игр на QSP.  Казалось бы, в QSP и так присутствует вполне логическая структура локации: описание локации, действия на локации, пользовательский код при посещении локации. Но так бывает, что для одной локации нужно выводить несколько различных описаний локации, тем более, если эта локация посещается не раз и в ней, по сюжету, происходят новые действия, появляются персонажи или меняются условия.
</p>
<p>
Какие могут быть варианты решения?
</p>
<p>
`Вариант 1.` В редакторе QSP нет ограничений по числу локаций, поэтому можно создать несколько вариантов одной и той же локаций на каждый новый случай. Получится список «комната1», «комната2», «комната3» и т.д. В каждой локации можно добавить уникальное действие, нового персонажа  или определенные условие при посещении.
</p>
<p>
`Вариант 2.` В одно локации «комната» в условии при посещении писать программный код учитывающий все возможные варианты которые могут происходить в локации. За частую, появляется много условий, и логическая составляющая кода усложняется на столько, что найти ошибку становиться очень проблематично.
</p>
<p>
У вас есть свое решение? Обязательно поделитесь. 😊
</p>
<p>
Рассмотрим плюсы и минусы этих вариантов.
</p>
</segment>
</segment>
<header head-level="h2" anchor="variant-1">
<p>
Вариант 1</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
+ Каждая локации подчиняется изначальной структуре заложенной в QSP. Описание локации в своем окне, действия в своем и код при посещении на месте.
</p>
<p>
+ Простота кода при посещении, только тот код который в данный момент нужен на локации, нет нагромождения условий.
</p>
<p>
- Увеличение числа локаций в дереве игры затрудняет ориентирование в редакторе.
</p>
<p>
- В каждой локации присутствуют однотипный (общий) код при посещении, действия на локации, что увеличивает размер игры. А также потребность исправления во всех локация однотипных участков, если вдруг потребуется их изменить или что-то добавить.
</p>
<p>
- В каждой локации будут уникальные переходы в действиях на смежные локации, которые также имеют свои «версии локации», что затрудняет навигацию по переходам между локациями. Т.е. в локации «комната1» будет действие «Выйти из комнаты»: goto «коридор1»  в локации «комната2» будет действие «Выйти из комнаты»: goto «коридор2» или может быть другой вариант и т.д. Таким образом, появляются ошибки: переходы могут либо совпасть, либо действие перехода никуда не ведет, либо отсутствует необходимое действие перехода совсем.
</p>
</segment>
</segment>
<header head-level="h3" anchor="reziume-po-variantu-1">
<p>
Резюме по варианту 1</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Неплохой подход при написании игры, но требует предварительной работы по разбивки всего сюжета на локации и в свою очередь действий внутри локации на серию локаций. А также необходимость в четком дереве (графе) переходов между локациями. Не наглядное представление, куда можно перейти из локации.
</p>
</segment>
</segment>
</segment>
<header head-level="h2" anchor="variant-2">
<p>
Вариант 2</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
+ Число локаций соответствует задумке автора, и если комната одна в доме, то и локация «комната» одна.
</p>
<p>
+ Весь код на локации со всеми действиями, условиями и персонажами в одном месте.
</p>
<p>
+ Возможность «программировать на лету». Т.е. по мере появления потребности в переменных, условиях, персонажах и т.п. вставляется новый код или модифицируется код написанный.
</p>
<p>
+ Вытекает из предыдущего плюса - широкое поле творчества, так как буквально все находиться в окне выполнение при посещении и тут полет фантазии ограничен только самой фантазией.
</p>
<p>
- Нагромождение кода в одном месте.
</p>
<p>
- И вытекающее из предыдущих плюсов и минусов, разобраться в коде, с каждым новым добавлением, становиться все сложнее, а вернуться к написанию игры через продолжительный перерыв - невозможно.
</p>
</segment>
</segment>
<header head-level="h3" anchor="reziume-po-variantu-2">
<p>
Резюме по варианту 2</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Такой подход к написанию игр выбирается в большинстве случаев из-за «программирования на лету», годиться лишь для написания небольших игр и за один подход, иначе игра просто остается недописанной.
</p>
<p>
Что же делать?
</p>
<p>
На просторах интернета я нашел интересный метод программирования, который как нельзя лучше подходит под наши нужды, красивого писания игр на QSP. Этот метод объединяет лучшие качества рассмотренных выше двух вариантов. Заключается он в дополнительной структуре программного кода, в результате чего программа выглядит сложенной из кирпичиков, однотипных блоков кода.
</p>
<p>
На рисунке изображено схематически что из чего следует.
</p>
<tag name="image" src="https://i.ibb.co/X55YkmB/shema.png">
</tag>
<p>
Проведем аналогии с QSP терминологией:
</p>
<p>
`Табл. Автоматы` – Перечень наших локаций то что мы видим в левой части QSP редактора.
</p>
<p>
`Табл. Описание автомата` – Описание на локации обратите внимание, описание зависит от состояния, т.е. у одной локации может быть несколько описаний локации.
</p>
<p>
`Табл. Описание состояния` – Состояния локации, где могу быть свой код при посещении см Процедура, Обратите внимание, переходы (переходы между состояниями или локациями или ещё точнее между стояниями локаций) в каждом состоянии индивидуальны.
</p>
<p>
`Табл. Описаний переходов` – Наши действия с переходом goto «новая локация». Здесь могут быть условия перехода на картинке изображено блоком Булева функция, а так же номер нового состояние локации куда мы перейдем по выбора этого действия.
</p>
<p>
Пока выглядит немного запутано, но рассмотрим программный код, написанный по этому методу на примере игры «Дом пустоты».
</p>
<tag name="image" src="https://i.ibb.co/2nXdbf1/red.png">
</tag>
<p>
В левой части мы видим перечень локаций. Каждая локация это наш автомат, который может иметь несколько состояний.
</p>
<p>
В окне выполнить при посещении мы видим некие блоки которые начинаются комментарием, затем идет `IF`, далее тело блока, и заканчивается `END`.
</p>
<p>
Так как локация спальня у нас одна, по сюжету ГГ может посещать её несколько раз, то в окне «Выполнить при посещении» пишем шаблон:
</p>
</segment>
<list list-type="ol-list">
<segment name="li">
<p>
Комментарий описывающий состояние автомата – для себя чтобы быстро найти нужное состояние локации.</p>
</segment>
<segment name="li">
<p>
Условие входа в локацию, здесь переменная sp будет отражать состояния локации спальня. Значение sp = 0 первое появление ГГ в спальне, значение =1 – ГГ вышел из спальни и сразу же вернулся, обратите внимание описание с первым посещением спальни поменялось.</p>
</segment>
<segment name="li">
<p>
Описание локации в нужном состоянии локации</p>
</segment>
<segment name="li">
<p>
Действия на входе в состояние локации, это может быть переопределение переменных, или другие функции которые должны выполниться при посещении, я для удобства разделили переопределение переменных и вынес их в верх тела шаблона над описанием локаций, а все функции идут ниже описания, но это не принципиально.</p>
</segment>
<segment name="li">
<p>
Переходы из локации. Здесь можно писать уникальные переходы или переходы появляющиеся по условию, а также если в локации есть стандартный набор действий то его можно вынести в соответствующее место и этот набор действий будет общим для всех состояний локации.</p>
</segment>
</list>
<segment>
<p>
Для удобства и наглядности может потребоваться ( и я настоятельно рекомендую применять) графическое представление.
</p>
<p>
На листке бумаги нужно нарисовать граф нашей игры. Где узлы обозначим их точками или кружочками будут означать состояния локации, а линии со стрелками между узлами будут означать переходы между состояниями локаций. В интернете полно программ позволяющих упростить рисование таких графов,  одна из подобных программ которой пользуюсь я Explain. Программка очень маленькая 1Мб, с минимальным, но вполне достаточным набором инструментов для наших целей.
</p>
<p>
Вот такой получился у меня граф для игры «Дом пустоты», (это только часть)
</p>
<tag name="image" src="https://i.ibb.co/hyJCpDY/graf.png">
</tag>
<p>
Хочу дать несколько советов.
</p>
</segment>
<list list-type="ol-list">
<segment name="li">
<p>
Посмотрите на мой пример, все состояния одной локации идут в столбик. Для локация «спальня» sp0, sp1,sp2 …, для локации «коридор» kor0, kor1, kor2 и.т.д. При таком расположении узлов можно сразу найти нужную локацию и все её состояния. Здесь sp0, sp1 это наше состояние  в коде можно увидеть if sp=0… if sp=1.</p>
</segment>
<segment name="li">
<segment>
<p>
У переходов есть направление, обозначается стрелочкой, если переход возможен обратно в исходное состояние, то нужно соединить 2 узла 2 раза сначала в одну сторону, а потом в другую.</p>
<p>
		Переходы лучше писать в теле шаблона сразу после условия входа в состояние:
</p>
</segment>
<code code-left-level="12" code-type="qsp">
IF sp=0: &amp; ! - текущее состояние локации спальня
<br/>     kor=0 &amp; ! - переменная отвечающая за состояние локации коридор
<br/>     *p ‘ ………
<br/>       …
<br/>    Exit
<br/>end
</code>
<segment>
<p>
		А ниже в списке действий на локации всегда есть возможность выйти в коридор безусловным переходом `gt «коридор»`.
</p>
<p>
		В локации коридор мы попадает сразу в блок- состояния коридора со значением `0`
</p>
</segment>
<code code-left-level="12" code-type="qsp">
IF kor=0: &amp; ! - текущее состояние локации коридор
<br/>    sp=1 &amp; ! - переменная отвечающая за состояние локации спальня
<br/>    zal=0 &amp; ! - состояние локации зал
<br/>    *p ‘ ………
<br/>         …
<br/>    Exit
<br/>end
</code>
<list list-type="ol-list">
<segment name="li">
<p>
Если в локации ГГ находит предмет или при переходе предмет теряется то удобно обозначать в тексте узла или перехода «+ Имя предмета» предмет добавлен в инвентарь  или «– Имя предмета» предмет удален из инвентаря. А также при использовании предмета «исп. Имя предмета»</p>
</segment>
</list>
</segment>
</list>
<segment>
<p>
Графом может пользоваться и сценарист без знания принципов программирования, так как будет наглядно видеть все цепочки сюжета, и не запутаться откуда и куда ГГ должен попасть в данный конкретный момент.
</p>
<p>
Какие ещё выгоды при таком системном подходе можно получить, например можно не особо сложно локализовать игру на другие языки.
</p>
<p>
Если весь текст  вынесен за пределы шаблона в отдельную локацию, по одной локации для каждого языка.
</p>
<p>
URL на программу Explain http://www.bestfree.ru/soft/graph/mindmap.php
</p>
<p>
Загрузить Explain с моей странички http://day0.narod.ru/stat/Explain.zip
</p>
<p>
URL картинки схема http://day0.narod.ru/stat/shema.PNG
</p>
<p>
URL картинки редактор   http://day0.narod.ru/stat/red.PNG
</p>
<p>
URL картинки граф  http://day0.narod.ru/stat/graf.PNG
</p>
<p>
URL граф игры "Дом пустоты" для программы Explain  http://day0.narod.ru/stat/dom8.txt
</p>
<p>
URL игры "Дом пустоты" http://day0.narod.ru/stat/b26.qsp
</p>
<p>
Автор: `HIMAN`
</p>
<p>
11.09.2011 21:06
</p>
</segment>
</segment>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\100_txt2gam_help_0010.txt-light">
<header anchor="informarch_txt2gam_manual" head-level="h1">
<p>
TXT2GAM. Краткое руководство</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Утилита "TXT2GAM" ("txt2gam.exe") предназначена для конвертирования текстовых файлов, написанных в специальном формате, в файлы QSP-игр `.qsp`. Таким образом вы можете создавать игры в обычном текстовом редакторе, а затем конвертировать их в приемлемые для плееров файлы.
</p>
<p>
<tag name="hyperlink" href="https://qsp.org/attachments/txt2gam011.zip">
Скачать утилиту</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h2" anchor="format-txt2gam">
<p>
Формат TXT2GAM</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Файлы в формате TXT2GAM — это обычные текстовые файлы, в которых мы размещаем код QSP, при этом данный код нужно записывать по определённым правилам.
</p>
<p>
Начало локации отмечается символом `#` (решётка/диез), после которого должен стоять пробел и название локации. Например так:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
# начало
</code>
<segment>
<p>
Конец локации обозначается символом `-` (дефис) в отдельной строке. После этого символа в той же строке могут идти любые символы, например, снова название локации:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
- начало
</code>
<segment>
<p>
Между началом и концом локации записывается обычный код QSP, как если бы вы его писали в поле "Выполнить при посещении" редактора Quest Generator. Вот пример кода в формате TXT2GAM с двумя локациями:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
# Начало
<br/>'It''s only test of new utility.'
<br/>'That is all.'
<br/>act 'Далее':
<br/>   goto 'next'
<br/>end
<br/>- (конец локации)
<br/>
<br/># next
<br/>$s='Это последняя локация примера.'
<br/>i=1
<br/>:loop
<br/>if i&lt;=len($s):
<br/>   *p $mid($s,i,1)
<br/>   wait 200
<br/>   i=i+1
<br/>   jump 'loop'
<br/>end
<br/>*nl &amp; 'Это всё.'
<br/>-
</code>
<segment>
<p>
Между локациями в таком файле может быть записан любой текст, он не попадёт в конечный файл игры. Поэтому вы можете помещать туда различные комментарии, команды препроцессора и другой сопроводительный текст.
</p>
<p>
Поскольку концом локации считается символ `-` в начале отдельно стоящей строки, могут возникнуть ошибки, если вы напишете команду, наподобие этой:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
-(x+23)
</code>
<segment>
<p>
Записанная в поле "Выполнить при посещении" редактора Quest Generator данная команда будет нормально работать в итоговой игре, однако если эту команду записать в файле формата TXT2GAM, конвертер посчитает её окончанием локации, и все последующие за данной командой строки вплоть до начала следующей локации будут проигнорированы.
</p>
</segment>
<code code-left-level="0" code-type="qsp">
# начало
<br/>"Какой-то код. Много-много кода
<br/>Этот код попадёт в локацию"
<br/>! пытаемся вывести произведение 45 и 9 умноженное на -1
<br/>-(45*9)
<br/>"А вот этот код не попадёт в локацию"
<br/>- начало (хотим, чтобы конец локации был здесь)
<br/>Все строки от -(45*9) будут проигнорированы
<br/>
<br/># локация 2
<br/>! какой-то код
<br/>- локация 2
</code>
<segment>
<p>
Если не закрыть локацию строкой начинающейся с `-`, новую локацию открыть будет нельзя, а значит строка, начинающаяся с символа `#` может вызвать ошибку "Неизвестное действие" в конечной игре:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
# начало
<br/>"Выводим текст"
<br/># локация 2
<br/>"Забыли закрыть локацию перед открытием новой"
<br/>- локация 2
</code>
<segment>
<p>
Внимание! Для формата TXT2GAM не предусмотрено редактирование базового описания и базовых действий. Поэтому при экспорте игры из Quest Generator в формат TXT2GAM будьте внимательны: все базовые описания и базовые действия будут экспортированы в основной код локаций. Если впоследствии вы импортируете игру обратно из TXT2GAM-файла в Quest Generator, то поля "Описание" и "Базовые действия" во всех локациях окажутся пустыми.
</p>
</segment>
</segment>
<header head-level="h2" anchor="ispol_zovanie-utility-txt2gam">
<p>
Использование утилиты TXT2GAM</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
TXT2GAM — это консольная утилита, т.е. она запускается командами из консоли, например из командной строки Windows. Ознакомиться с основными командами командной строки вы можете в обучающей статье </tag>
<tag name="hyperlink" href="https://sonikelf.ru/vvodnaya-statya-po-rabote-v-konsoli-chto-takoe-konsol-komandy-konsoli-i-prochee-takoe-raznoe-cmd/">
"Что такое консоль, команды и прочее такое разное — CMD"</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
Пример работы с утилитой:
</p>
</segment>
<code code-left-level="0" code-type="None">
txt2gam.exe game.txt game.qsp
</code>
<segment>
<p>
Здесь: `game.txt` — исходный файл вашей игры, написанный в формате TXT2GAM; `game.qsp` — конечный файл, в котором будет сохранена ваша игра.
</p>
<p>
Предположим, вы написали игру в текстовом редакторе, и теперь она у вас лежит в виде файла `game.txt` на диске "`D:`" в папке "`QSP\Games\myCoolGame`".
</p>
<p>
Для удобства скопируйте утилиту TXT2GAM (т.е. файл `txt2gam.exe`) в папку с игрой. Теперь для конвертирования игры вам нужно сделать следующее:
</p>
</segment>
<list list-type="ol-list">
<segment name="li">
<p>
Откройте консоль</p>
</segment>
<segment name="li">
<p>
Перейдите на диск "`D:`", введя команду `D:` в командной строке и нажав клавишу "Enter".</p>
</segment>
<segment name="li">
<p>
Перейдите в папку с вашей игрой с помощью команды `cd`. В нашем примере это делается так `cd "QSP\Games\myCoolGame"`</p>
</segment>
<segment name="li">
<segment>
<p>
Запустите утилиту TXT2GAM, указав в качестве параметров сначала исходный файл вашей игры (т.е. `game.txt`), а затем название файла, который хотите получить, например `myCoolGame.qsp`:</p>
</segment>
<code code-left-level="4" code-type="None">
txt2gam.exe game.txt myCoolGame.qsp
</code>
</segment>
</list>
<segment>
<p>
Утилита поддерживает полные пути к файлам, поэтому вы можете использовать одну утилиту для конвертирования разных игр:
</p>
</segment>
<code code-left-level="0" code-type="None">
txt2gam.exe "D:\QSP\Games\myCoolGame\game.txt" "D:\QSP\releases\myCoolGame\myCoolGame.qsp"
</code>
<segment>
<p>
Для получения дополнительной информации об утилите, запустите её в консоли без параметров:
</p>
</segment>
<code code-left-level="0" code-type="None">
txt2gam.exe
</code>
<segment>
<p>
Если указать ключ `u`, исходный файл будет обрабатываться как Unicode-файл (кодировка UCS-2 LE / UTF-16 LE):
</p>
</segment>
<code code-left-level="0" code-type="qsp">
txt2gam.exe game.txt myCoolGame.qsp u
</code>
</segment>
<header head-level="h2" anchor="dopolnitel_nye-vozmozhnosti-utility">
<p>
Дополнительные возможности утилиты</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">

</segment>
<header head-level="h3" anchor="ispol_zovanie">
<p>
Использование</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Общий вид команды для консоли:
</p>
</segment>
<code code-left-level="0" code-type="None">
txt2gam [txt file] [output file] [options]
</code>
</segment>
<header head-level="h3" anchor="optsii-options">
<p>
Опции. [Options]</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
a, A — режим ANSI. По-умолчанию утилита работает в режиме Unicode (UCS-2 / UTF-16).
</p>
<p>
u, U — режим Unicode (UCS-2 LE/ UTF-16 LE).
</p>
<p>
o, O — сохранить игру в старом формате (`.gam`). По умолчанию используется новый формат (`.qsp`).
</p>
<p>
s[char], S[char] — вместо [char] нужно указать символ, с которого начинаются ваши локации. Т.е. это символ, который вы можете использовать вместо `#`, если это необходимо.
</p>
<p>
e[char], E[char] — вместо [char] нужно указать символ, которым будет отмечаться конец локации. Т.е. это символ, который вы можете использовать вместо `-`, если это необходимо.
</p>
<p>
p[pass], P[pass] — вместо [pass] укажите пароль, который хотите установить на игру. По умолчанию `No`. Если пароль содержит пробелы, заключите его в кавычки.
</p>
<p>
t, T — извлечь строки из текста.
</p>
<p>
q, Q - извлечь q-строки из текста.
</p>
</segment>
</segment>
<header head-level="h3" anchor="primery-vyzova">
<p>
Примеры вызова:</p>
</header>
<segment segment-class="for-head">
<code code-left-level="0" code-type="None">
txt2gam.exe file.txt gamefile.qsp pMyPassword
<br/>txt2gam.exe file.txt gamefile.qsp
<br/>txt2gam.exe file.txt gamefile.qsp u
<br/>txt2gam.exe file.txt gamefile.qsp o pMyPassword
<br/>txt2gam.exe file.txt gamefile.qsp o e@ pMyPassword
<br/>txt2gam.exe file.txt gamefile.qsp u o p"My Password"
<br/>txt2gam.exe file.txt gamefile.qsp o
<br/>txt2gam.exe file.txt gamefile.qsp o e@
<br/>txt2gam.exe file.txt gamefile.qsp s@ e~
<br/>txt2gam.exe file.txt gamefile.qsp s@ e~ o
<br/>txt2gam.exe file.txt gamefile.qsp t u
</code>
</segment>
</segment>
<header head-level="h2" anchor="podkliuchenie-utility-k-tekstovomu-redaktoru">
<p>
Подключение утилиты к текстовому редактору</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
При разработке игр в текстовом редакторе, очень полезным может оказаться создание специального действия / кнопки для автоматической компиляции файла в `.qsp` и запуска плеера сразу с редактируемым файлом.
</p>
<p>
То есть пишете текст игры в редакторе, нажимаете некое сочетание клавиш и получаете запущенную в плеере игру.
</p>
<p>
<tag name="simple-string">
Данное руководство, на примере `</tag>
<tag name="hyperlink" href="http://www.emeditor.com">
EmEditor</tag>
<tag name="simple-string">
`а , описывает, как это сделать.
</tag>
</p>
<p>
Для начала, создайте папку (допустим, `D:\Games\QSP`), распаковав в неё базовый архив плеера (`qspgui.exe` + все `DLL`ки) и архив утилиты TXT2GAM.
</p>
<p>
Далее, создайте в этой папке (рядом с `qspgui.exe`, `txt2gam.exe`) файл `start.bat` со следующим содержимым:
</p>
</segment>
<code code-left-level="0" code-type="None">
txt2gam %1 %2
<br/>start qspgui %2
</code>
<segment>
<p>
Теперь нужно в редакторе добавить действие / кнопку, при нажатии на которую будет запущен файл `start.bat` с двумя аргументами - указанием исходного TXT файла и конечного `.qsp`-файла.
</p>
</segment>
<list list-type="ol-list">
<segment name="li">
<p>
Запустите EmEditor, выберите в меню `Tools / External Tools / Customize Tools...`</p>
</segment>
<segment name="li">
<p>
В появившемся окошке нажмите кнопку `New`.</p>
</segment>
<segment name="li">
<p>
В поле `Title` впишите название действия (например, "QSP").</p>
</segment>
<segment name="li">
<p>
В поле `Command` строку `D:\Games\QSP\start.bat`</p>
</segment>
<segment name="li">
<p>
В поле `Arguments` строку `"$(Path)" "$(Dir)\$(Filename).gam"` (сохраняя кавычки)</p>
</segment>
<segment name="li">
<p>
В поле `Initial Directory` строчку `D:\Games\QSP`</p>
</segment>
<segment name="li">
<p>
Затем поставьте флажок напротив `Save File`, и нажмите `OK`.</p>
</segment>
<segment name="li">
<p>
На панели инструментов появится новая кнопка с подписью "QSP", при нажатии на которую будут произведены требуемые действия.</p>
</segment>
</list>
<segment>
<p>
Теперь нужно назначить сочетание клавиш для кнопки.
</p>
</segment>
<list list-type="ol-list">
<segment name="li">
<p>
Выберите пункт меню `Help / Keyboard Map...`. В категории `External Tools` найдите пункт `QSP` (обычно, в самом низу) и щелкните по нему 2 раза.</p>
</segment>
<segment name="li">
<p>
Установите курсор в поле `Press New Shortcut Key` и нажмите желаемое сочетание клавиш (к примеру, F1). Станет доступной кнопка `Assign`. Нажимаем.</p>
</segment>
<segment name="li">
<p>
Далее жмём `OK` и пишем игры в формате TXT2GAM :-)</p>
</segment>
</list>
<segment>
<p>
Чтобы установить пароль на файл, создаваемый утилитой TXT2GAM, замените в файле `start.bat` строчку
</p>
</segment>
<code code-left-level="0" code-type="None">
txt2gam.exe %1 %2
</code>
<segment>
<p>
на
</p>
</segment>
<code code-left-level="0" code-type="None">
txt2gam.exe %1 %2 pMyPassword
</code>
<segment>
<p>
где `MyPassword` - устанавливаемый пароль. Для задания паролей с пробелами, строчка pMyPassword должна быть указана в кавычках:
</p>
</segment>
<code code-left-level="0" code-type="None">
txt2gam.exe %1 %2 "pMy Pass word"
</code>
</segment>
<header head-level="h3" anchor="primechaniia">
<p>
Примечания:</p>
</header>
<segment segment-class="for-head">
<list list-type="ol-list">
<segment name="li">
<p>
<tag name="simple-string">
В настоящий момент общепринятым расширением для текстовых файлов формата TXT2GAM можно считать `.qsps`. "Просто потому что" (с) </tag>
<tag name="hyperlink" href="https://github.com/gretmn102/QSP-VSCode#допустим-я-хочу-попробовать">
Pseudopod</tag>
<tag name="simple-string">
.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Существует утилита `qsp2txt` для конвертирования игр в обратную сторону — из файлов игр `.qsp` в текстовые файлы формата TXT2GAM. Исходная ссылка утеряна, можно скачать в </tag>
<tag name="hyperlink" href="https://mega.nz/folder/jXwXlSRJ#TF7P-soOJOWIC8MrBA-L1A">
архиве программ QSP от Aleks Versus</tag>
<tag name="simple-string">
.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Существовали разные </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=686&Itemid=57">
подсветки синтаксиса для `Notepad++` и `AkelPad`</tag>
<tag name="simple-string">
, но были утеряны.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Подсветка синтаксиса для Sublime Text входит в </tag>
<tag name="hyperlink" href="https://github.com/AleksVersus/JAD_for_QSP">
пакет JAD на QSP для Sublime Text</tag>
<tag name="simple-string">
.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Существует подсветка для </tag>
<tag name="hyperlink" href="https://qsp.org/components/com_agora/img/members/20/notepad-qsp.zip">
Notepad++ от Олегуса</tag>
<tag name="simple-string">
. С этой подсветкой ассоциируются текстовые файлы с расширением `.tqsp`, однако вы можете отредактировать файл подсветки, указав нужное вам расширение.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Werewolf разработал утилиту для конвертирования QSP-файла в текстовый формат (аналог `qsp2txt`), которая работает онлайн: </tag>
<tag name="hyperlink" href="https://codepen.io/srg-kostyrko/full/QWqdwxv">
https://codepen.io/srg-kostyrko/full/QWqdwxv</tag>
<tag name="simple-string">
. Так же он разработал специальные пакеты для конвертирования файлов в любую сторону: </tag>
<tag name="hyperlink" href="https://github.com/QSPFoundation/converters">
https://github.com/QSPFoundation/converters</tag>
<tag name="simple-string">
.</tag>
</p>
</segment>
</list>
</segment>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\101_rabota_v_tekstovom_redaktore_0011.txt-light">
<header anchor=" informarch_game_in_texteditor" head-level="h1">
<p>
Пишем QSP-игру в текстовом редакторе</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Для того, чтобы написать свой текстовый квест, понадобится любой текстовый редактор и программа </tag>
<tag name="hyperlink" href="#informarch_txt2gam_manual">
TXT2GAM</tag>
<tag name="simple-string">
. Для более удобного использования этой программы существует специальная оболочка </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_content&task=view&id=53&Itemid=56">
GAMConv</tag>
<tag name="simple-string">
, которой можно пользоваться для конвертирования кода уроков. Для проигрывания квеста понадобится </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_content&view=article&id=64&Itemid=56">
QSP-плеер</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
В примерах будут использоваться комментарии - строки, которые игрок не увидит и которые служат для того, чтобы можно было делать в коде игры различные заметки. Комментарий начинается с восклицательного знака «!».
</p>
<p>
Пример:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
! эта строка видна только создателю квеста, игрок её не увидит
</code>
</segment>
<header head-level="h2" anchor="urok-1-lokatsii-dejstviia-perehody">
<p>
Урок 1. Локации, Действия, Переходы</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Текстовый квест в QSP состоит из отдельных локаций (кадров, сцен, эпизодов), на которых могут выполняться различные игровые действия. Каждая локация имеет начало (тут же указывается имя локации), код локации (середину) и конец (знак «-», минус).
</p>
<p>
Пример:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
# Имя_локации
<br/>! тут идёт код локации
<br/>-
</code>
<segment>
<p>
Проигрывание квеста начинается с самой первой локации. Традиционно эта локация называется "Начало". Для того, чтобы вывести в игре текст, вы просто пишете строку в коде локации, заключённую в кавычки ('' или "").
</p>
<p>
Пример ("`1.txt`"):
</p>
</segment>
<code code-left-level="0" code-type="qsp">
# Начало
<br/>'Привет мир!'
<br/>-
</code>
<segment>
<p>
Сохраните эти строки в текстовый файл, отконвертируйте с помощью GamConv или напрямую через txt2gam и откройте получившийся квест в QSPGUI. В основном окне вы должны увидеть текст «Привет мир!».
</p>
<p>
Но это совсем не похоже на текстовый квест. Ведь если мы будем просто выводить текст, то у нас получится какая-то книга, а не игра.
</p>
<p>
Игра — это прежде всего интерактивность. От этого и название жанра Интерактивная Литература.
</p>
<p>
Чтобы добавить интерактивности давайте сделаем вторую локацию и дадим возможность игроку перейти из одной локации в другую. Для этого нужно создать на первой локации действие, которое будет осуществлять переход в другую локацию.
</p>
<p>
Пример ("`2.txt`"):
</p>
</segment>
<code code-left-level="0" code-type="qsp">
# Начало
<br/>'Привет мир!'
<br/>ACT 'Перейти в другую локацию':
<br/>    GOTO 'Вторая_локация'
<br/>END
<br/>-
<br/># Вторая_локация
<br/>'Вы только что совершили переход в другую локацию.'
<br/>'Этот текст начинается с новой строки.'
<br/>ACT 'Вернуться обратно': GOTO 'Начало'
<br/>-
</code>
<segment>
<p>
Вторая локация создаётся точно так же, как и первая. Как можно заметить, действие создаётся командой «ACT», после которой идёт название действия в виде заключённой в кавычки строки и двоеточие. После двоеточия пишутся инструкции которые игра выполнит при выборе игроком нашего действие. После одной или нескольких инструкций ставится команда «END», которая означает конец действия.
</p>
<p>
Если инструкция одна, то мы можем писать её сразу после двоеточия, на той же строке, в этом случае «END» ставить не обязательно (см. Вторая_локация).
</p>
<p>
В нашем случае инструкциями является переход на другую локацию. Он осуществляется командой «GOTO», после которой идёт имя новой локации, заключённой в кавычки. Как вы уже заметили, все строки в QSP заключены в кавычки ('' или ""), это специфика синтаксиса, которую необходимо соблюдать.
</p>
<p>
Отконвертировав этот пример, вы сможете походить по двум локациям.
</p>
<p>
Это основа всех квестов на QSP. Дальше мы попробуем не спеша сделать небольшой квест, в каждом новом уроке добавляя ему новые элементы, пока не охватим все возможности QSP.
</p>
</segment>
</segment>
<header head-level="h2" anchor="urok-2-peremennye-usloviia">
<p>
Урок 2. Переменные, Условия</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Пусть у нас будет игра из трёх локаций. В одной локации игрок сможет зарабатывать деньги, в другой - тратить их на различные предметы, в третьей - дарить эти предметы различным людям. К этим трём добавим ещё одну, стартовую, локацию, в которой будет объясняться задача игрока.
</p>
<p>
Напишем каркас.
</p>
<p>
Пример ("`3.txt`"):
</p>
</segment>
<code code-left-level="0" code-type="qsp">
# Начало
<br/>'   Ваша цель - зарабатывать деньги, покупать на них подарки и дарить своим близким.'
<br/>ACT 'Начать игру': GOTO 'Дом'
<br/>-
<br/># Работа
<br/>'   Порт находится на самой южной окраине города. Здесь постоянно загружаются и разгружаются различные суда. Рабочих рук не хватает и складской бригадир всегда рад заплатить деньги за помощь.'
<br/>ACT 'Идти домой': GOTO 'Дом'
<br/>ACT 'Идти в магазин': GOTO 'Магазин'
<br/>-
<br/># Магазин
<br/>'   Магазин небольшой, но тут обычно есть всё, что нужно простому горожанину. Витрины заставлены различными товарами. У кассы стоит полная женщина и хмуро смотрит на вас.'
<br/>ACT 'Идти домой': GOTO 'Дом'
<br/>ACT 'Идти в порт': GOTO 'Работа'
<br/>-
<br/># Дом
<br/>'   Дома всегда очень уютно. И вкусно пахнет едой. Мама, сидя в кресле, вяжет носки. Отец с вашим братом чинит скворечник. Сестра хлопочет на кухне. Дома всегда хорошо.'
<br/>ACT 'Идти в порт': GOTO 'Работа'
<br/>ACT 'Идти в магазин': GOTO 'Магазин'
<br/>-
</code>
<segment>
<p>
Откомпилируйте пример и проверьте как работает, походите по городу.
</p>
<p>
Теперь нам нужно добавить игроку деньги и механизм их зарабатывания. Деньги мы реализуем с помощью переменных. Переменные бывают двух типов: строковые, в которые можно записать любой текст, и числовые, куда можно записать любое целое число. В нашем случае мы будем пользоваться числовыми переменными. Чтобы присвоить переменной какое-либо значение, нужно написать её имя, поставить знак равно и указать значение, которое мы хотим записать в переменную.
</p>
<p>
Пример:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
Имя_переменной = 10
</code>
<segment>
<p>
Сам механизм зарабатывания денег будет у нас очень простым. Нужно будет перенести 3 ящика и тогда бригадир будет давать игроку 5 монет. Для этого нужно будет сделать ещё одну переменную, в которой будет указано число перенесённых игроком ящиков и если их 3, то добавлять игроку деньги, и очищать счётчик ящиков. Наш квест станет таким:
</p>
<p>
Пример ("`4.txt`"):
</p>
</segment>
<code code-left-level="0" code-type="qsp">
# Начало
<br/>'   Ваша цель - зарабатывать деньги, покупать на них подарки и дарить своим близким.'
<br/>ACT 'Начать игру': GOTO 'Дом'
<br/>-
<br/># Работа
<br/>'   Порт находится на самой южной окраине города. Здесь постоянно загружаются и разгружаются различные суда. Рабочих рук не хватает и складской бригадир всегда рад заплатить деньги за помощь.'
<br/>'   У вас &lt;&lt;Деньги&gt;&gt; монет.'
<br/>'   Вам нужно перенести &lt;&lt;3-Ящик&gt;&gt; ящика.'
<br/>ACT 'Идти домой': GOTO 'Дом'
<br/>ACT 'Идти в магазин': GOTO 'Магазин'
<br/>ACT 'Перенести ящик':
<br/>    Ящик = Ящик + 1
<br/>    IF Ящик = 3:
<br/>        Деньги = Деньги + 5
<br/>        Ящик = 0
<br/>    END
<br/>    GOTO 'Работа'
<br/>END
<br/>-
<br/># Магазин
<br/>'   Магазин небольшой, но тут обычно есть всё, что нужно простому горожанину. Витрины заставлены различными товарами. У кассы стоит полная женщина и хмуро смотрит на вас.'
<br/>'   У вас &lt;&lt;Деньги&gt;&gt; монет.'
<br/>ACT 'Идти домой': GOTO 'Дом'
<br/>ACT 'Идти в порт': GOTO 'Работа'
<br/>-
<br/># Дом
<br/>'   Дома всегда очень уютно. И вкусно пахнет едой. Мама, сидя в кресле, вяжет носки. Отец с вашим братом чинит скворечник. Сестра хлопочет на кухне. Дома всегда хорошо.'
<br/>'   У вас &lt;&lt;Деньги&gt;&gt; монет.'
<br/>ACT 'Идти в порт': GOTO 'Работа'
<br/>ACT 'Идти в магазин': GOTO 'Магазин'
<br/>-
</code>
<segment>
<p>
Для того, чтобы в тексте локации вывести значение переменной используется конструкция `'&lt;&lt;Имя_переменной&gt;&gt;'`. Обратите внимание в каждой локации выводится количество монет у игрока. К тому же, в локации «Порт» показывается количество ящиков, которое нужно перенести, чтобы получить деньги.
</p>
<p>
Ветвления в QSP задаются командой `IF`, после которой идёт условие и ставится двоеточие. Затем идут инструкции, которые выполняются, если условие верное и ставится завершающая команда `END`.
</p>
<p>
В нашем случае мы проверяем, равна ли переменная `Ящик` 3-м (все ли ящики перенесли). Если равна, то мы увеличиваем переменную «Деньги» на 5 (наш заработок) и сбрасываем переменную `Ящик` в 0, чтобы можно заново таскать ящики и зарабатывать деньги.
</p>
<p>
Чтобы текст игры обновился и игрок увидел новые значения переменных, нужно перейти на ту же локацию.
</p>
<p>
Отконвертируйте и запустите пример, теперь игрок сможет зарабатывать деньги переноской ящиков.
</p>
</segment>
</segment>
<header head-level="h2" anchor="urok-3-inventar_">
<p>
Урок 3. Инвентарь</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Теперь добавим игроку возможность покупать различные предметы в магазине и затем дарить. Для предметов очень хорошо подходит «Инвентарь». Теперь купленные предметы игрок сможет носить с собой и дарить своим близким, когда захочет.
</p>
<p>
Чтобы добавить предмет в инвентарь, есть команда `ADDOBJ`, после которой идёт имя предмета. А для того, чтобы удалить предмет, есть команда `DELOBJ`, после которой идёт имя удаляемого предмета.
</p>
<p>
Пример ("`5.txt`"):
</p>
</segment>
<code code-left-level="0" code-type="qsp">
# Начало
<br/>'   Ваша цель - зарабатывать деньги, покупать на них подарки и дарить своим близким.'
<br/>ACT 'Начать игру': GOTO 'Дом'
<br/>-
<br/># Работа
<br/>'   Порт находится на самой южной окраине города. Здесь постоянно загружаются и разгружаются различные суда. Рабочих рук не хватает и складской бригадир всегда рад заплатить деньги за помощь.'
<br/>'   У вас &lt;&lt;Деньги&gt;&gt; монет.'
<br/>'   Вам нужно перенести &lt;&lt;3-Ящик&gt;&gt; ящика.'
<br/>ACT 'Идти домой': GOTO 'Дом'
<br/>ACT 'Идти в магазин': GOTO 'Магазин'
<br/>ACT 'Перенести ящик':
<br/>    Ящик = Ящик + 1
<br/>    IF Ящик = 3:
<br/>        Деньги = Деньги + 5
<br/>        Ящик = 0
<br/>    END
<br/>    GOTO 'Работа'
<br/>END
<br/>-
<br/># Магазин
<br/>'   Магазин небольшой, но тут обычно есть всё, что нужно простому горожанину. Витрины заставлены различными товарами. У кассы стоит полная женщина и хмуро смотрит на вас.'
<br/>'   У вас &lt;&lt;Деньги&gt;&gt; монет.'
<br/>IF Деньги &gt;= 3:
<br/>    ACT 'Купить конструктор':
<br/>        Деньги = Деньги - 3
<br/>        ADDOBJ 'Конструктор'
<br/>        GOTO 'Магазин'
<br/>    END
<br/>END
<br/>IF Деньги &gt;= 5:
<br/>    ACT 'Купить плюшевого медведя':
<br/>        Деньги = Деньги - 5
<br/>        ADDOBJ 'Плюшевый медведь'
<br/>        GOTO 'Магазин'
<br/>    END
<br/>    ACT 'Купить вязальный набор':
<br/>        Деньги = Деньги - 5
<br/>        ADDOBJ 'Вязальный набор'
<br/>        GOTO 'Магазин'
<br/>    END
<br/>END
<br/>IF Деньги &gt;= 7:
<br/>    ACT 'Купить инструменты':
<br/>        Деньги = Деньги - 7
<br/>        ADDOBJ 'Инструменты'
<br/>        GOTO 'Магазин'
<br/>    END
<br/>END
<br/>ACT 'Идти домой': GOTO 'Дом'
<br/>ACT 'Идти в порт': GOTO 'Работа'
<br/>-
<br/># Дом
<br/>'   Дома всегда очень уютно. И вкусно пахнет едой. Мама, сидя в кресле, вяжет носки. Отец с вашим братом чинит скворечник. Сестра хлопочет на кухне. Дома всегда хорошо.'
<br/>'   У вас &lt;&lt;Деньги&gt;&gt; монет.'
<br/>ACT 'Идти в порт': GOTO 'Работа'
<br/>ACT 'Идти в магазин': GOTO 'Магазин'
<br/>-
</code>
<segment>
<p>
С помощью условий мы заранее проверяем, есть ли у игрока достаточно денег, чтобы купить тот или иной предмет. И если денег хватает - добавляем действие покупки этого предмета. Когда игрок выбирает действие купить что-либо, мы забираем у него монеты, добавляем в его инвентарь предмет и делаем переход на ту же локацию («Магазин»), чтобы вывелось обновлённое количество денег.
</p>
<p>
Следующим важным моментом будет механизм «дарения» предметов. Он будет реализован в локации «Дом».
</p>
<p>
Пример ("`6.txt`"):
</p>
</segment>
<code code-left-level="0" code-type="qsp">
# Начало
<br/>'   Ваша цель - зарабатывать деньги, покупать на них подарки и дарить своим близким.'
<br/>ACT 'Начать игру': GOTO 'Дом'
<br/>-
<br/># Работа
<br/>'   Порт находится на самой южной окраине города. Здесь постоянно загружаются и разгружаются различные суда. Рабочих рук не хватает и складской бригадир всегда рад заплатить деньги за помощь.'
<br/>'   У вас &lt;&lt;Деньги&gt;&gt; монет.'
<br/>'   Вам нужно перенести &lt;&lt;3-Ящик&gt;&gt; ящика.'
<br/>ACT 'Идти домой': GOTO 'Дом'
<br/>ACT 'Идти в магазин': GOTO 'Магазин'
<br/>ACT 'Перенести ящик':
<br/>    Ящик = Ящик + 1
<br/>    IF Ящик = 3:
<br/>        Деньги = Деньги + 5
<br/>        Ящик = 0
<br/>    END
<br/>    GOTO 'Работа'
<br/>END
<br/>-
<br/># Магазин
<br/>'   Магазин небольшой, но тут обычно есть всё, что нужно простому горожанину. Витрины заставлены различными товарами. У кассы стоит полная женщина и хмуро смотрит на вас.'
<br/>'   У вас &lt;&lt;Деньги&gt;&gt; монет.'
<br/>IF Деньги &gt;= 3:
<br/>    ACT 'Купить конструктор':
<br/>        Деньги = Деньги - 3
<br/>        ADDOBJ 'Конструктор'
<br/>        GOTO 'Магазин'
<br/>    END
<br/>END
<br/>IF Деньги &gt;= 5:
<br/>    ACT 'Купить плюшевого медведя':
<br/>        Деньги = Деньги - 5
<br/>        ADDOBJ 'Плюшевый медведь'
<br/>        GOTO 'Магазин'
<br/>    END
<br/>    ACT 'Купить вязальный набор':
<br/>        Деньги = Деньги - 5
<br/>        ADDOBJ 'Вязальный набор'
<br/>        GOTO 'Магазин'
<br/>    END
<br/>END
<br/>IF Деньги &gt;= 7:
<br/>    ACT 'Купить инструменты':
<br/>        Деньги = Деньги - 7
<br/>        ADDOBJ 'Инструменты'
<br/>        GOTO 'Магазин'
<br/>    END
<br/>END
<br/>ACT 'Идти домой': GOTO 'Дом'
<br/>ACT 'Идти в порт': GOTO 'Работа'
<br/>-
<br/># Дом
<br/>'   Дома всегда очень уютно. И вкусно пахнет едой. Мама, сидя в кресле, вяжет носки. Отец с вашим братом чинит скворечник. Сестра хлопочет на кухне. Дома всегда хорошо.'
<br/>'   У вас &lt;&lt;Деньги&gt;&gt; монет.'
<br/>IF OBJ 'Конструктор':
<br/>    ACT 'Подарить конструктор брату':
<br/>        DELOBJ 'Конструктор'
<br/>        ' - Вот тебе конструктор.'
<br/>        ' - Спасибо, брат.'
<br/>        DELACT 'Подарить конструктор брату'
<br/>    END
<br/>END
<br/>IF OBJ 'Плюшевый медведь':
<br/>    ACT 'Подарить медведя сестре':
<br/>        DELOBJ 'Плюшевый медведь'
<br/>        ' - Вот тебе плюшевый медведь.'
<br/>        ' - Спасибо, брат.'
<br/>        DELACT 'Подарить медведя сестре'
<br/>    END
<br/>END
<br/>IF OBJ 'Вязальный набор':
<br/>    ACT 'Подарить набор маме':
<br/>        DELOBJ 'Вязальный набор'
<br/>        ' - Вот тебе вязальный набор.'
<br/>        ' - Спасибо, сынок.'
<br/>        DELACT 'Подарить набор маме'
<br/>    END
<br/>END
<br/>IF OBJ 'Инструменты':
<br/>    ACT 'Подарить инструменты отцу':
<br/>        DELOBJ 'Инструменты'
<br/>        ' - Вот тебе инструменты.'
<br/>        ' - Спасибо, сын.'
<br/>        DELACT 'Подарить инструменты отцу'
<br/>    END
<br/>END
<br/>ACT 'Идти в порт': GOTO 'Работа'
<br/>ACT 'Идти в магазин': GOTO 'Магазин'
<br/>-
</code>
<segment>
<p>
Конструкция `IF OBJ 'имя_предмета'` проверяет, есть ли у игрока в инвентаре указанный предмет. В нашем случае мы проверяем наличие тех предметов, которые мы можем купить в магазине. И если у игрока есть такие предметы - создаём действие «дарения» этих предметов. Когда игрок совершит действие, мы заберем у него тот предмет, который он хочет подарить и выводим диалог благодарности за подарок. К тому же, мы используем команду `DELACT`, которой удаляем действие, указанное после этой команды.
</p>
</segment>
</segment>
<header head-level="h2" anchor="urok-4-nastrojki-formatirovanie">
<p>
Урок 4. Настройки, Форматирование</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В этом уроке рассмотрим, как сделать наш квест более привлекательным. В первую очередь следует настроить интерфейс так, чтобы в нём не оставалось ничего лишнего, отвлекающего от игры. Если вы сейчас запустите наш пример, то увидите, что мы не используем "поле дополнительного описания" (справа внизу) и "командную строку" (внизу). Чтобы они нам не мешали, их нужно отключить. Делается это следующим образом:
</p>
<p>
Пример ("`7.txt`"):
</p>
</segment>
<code code-left-level="0" code-type="qsp">
# Начало
<br/>SHOWSTAT 0
<br/>SHOWINPUT 0
<br/>-
</code>
<segment>
<p>
Мы вызываем инструкцию `SHOWSTAT` с параметром `0` для того, чтобы отключить "поле дополнительного описания". Если бы мы передали `1` (или число отличное от `0`), то поле было бы видимым. То же самое и с `SHOWINPUT` (командная строка). Так же мы можем отключить инвентарь - `SHOWOBJS`, и список действий - `SHOWACTS`.
</p>
<p>
Теперь нам нужно сделать так, чтобы наш текст был более подходящим для нашего квеста. Для этого есть 4 переменные.
</p>
<p>
Пример ("`8.txt`"):
</p>
</segment>
<code code-left-level="0" code-type="qsp">
# Начало
<br/>BCOLOR = RGB(0, 0, 0)
<br/>FCOLOR = RGB(255, 0, 0)
<br/>FSIZE = 14
<br/>$FNAME = 'Arial'
<br/>'Этот текст написан красным цветом, четырнадцатым размером и шрифтом Arial на чёрном фоне.'
<br/>-
</code>
<segment>
<p>
Цвет в QSP задаётся с помощью функции `RGB`, в которую мы передаём значения его отдельных компонент - красного (Red), зелёного (Green) и синего (Blue). Отсюда и название функции.
</p>
<p>
Если вы не знакомы с таким способом задания цветов, то вам может помочь программа MS Paint, которая входит в стандартную поставку Windows. Для этого запустите программу, щёлкните два раза по любому цвету в палитре (внизу) и затем нажмите кнопку "Определить цвет". Появится расширенная палитра, на которой можно выбрать нужный вам цвет. Под палитрой снизу будет 3 поля (Красный, Зелёный, Синий), значениями из этих полей вам и нужно заполнить функцию `RGB`.
</p>
<p>
Переменная `BCOLOR` устанавливает цвет заднего фона, `FCOLOR` - цвет текста.
</p>
<p>
Следует учесть, что если присвоить переменной цвета значение `0` (к примеру, `BCOLOR = 0`), то проигрыватель квестов заменит указанный цвет на цвет из настроек самого плеера, т.е. цвет фона `0` это прозрачный цвет.
</p>
<p>
Чтобы изменить размер текста, используется переменная `FSIZE`, шрифт текста задётся строковой переменной `$FNAME`.
</p>
<p>
Многие игроки не любят, когда автор задаёт свои визуальные параметры для текстовых квестов. "На вкус и цвет фломастеры разные", кто-то привык читать зелёные буквы на чёрном фоне, а кто-то предпочитает классический вариант чёрного на белом. У кого-то большой монитор - маленькие буквы читать на нём неудобно и т.д. Проигрыватель квестов QSP позволяет настроить такие параметры индивидуально для каждого игрока, но только в том случае, если автор игры не заменил их на свои. Поэтому рекомендуется с осторожностью менять эти настройки для вашего квеста.
</p>
<p>
Есть ещё один, способ сделать ваш текст внешне более привлекательным. Использование HTML. Язык гипертекстовой разметки документов очень хорошо подходит для этой цели. С помощью него можно не только задавать цвет, размер и шрифт текста, но и делать это для отдельных слов, фраз или даже букв, а так же позиционировать текст на экране. Например, можно расположить заголовки по центру строки, или справа. Для этого нужно переменной `USEHTML` задать значение `1` (или любое отличное от `0`). В следующем примере я приведу лишь небольшую часть возможностей, которых, впрочем, будет достаточно для оформления игры.
</p>
<p>
Пример ("`9.txt`"):
</p>
</segment>
<code code-left-level="0" code-type="qsp">
# Начало
<br/>USEHTML=1
<br/>BCOLOR = RGB(255, 255, 255)
<br/>'&lt;center&gt;&lt;font size="20" color="#FF0000" face="Times New Roman"&gt;&lt;b&gt;Текстовый квест&lt;/b&gt;&lt;/font&gt;&lt;/center&gt;&lt;br&gt;'
<br/>'   &lt;b&gt;Ваша цель&lt;/b&gt; - зарабатывать &lt;i&gt;деньги&lt;/i&gt;, покупать на них &lt;i&gt;подарки&lt;/i&gt; и дарить своим &lt;i&gt;близким&lt;/i&gt;.'
<br/>ACT '&lt;b&gt;Начать игру&lt;/b&gt;': GOTO 'Дом'
<br/>-
<br/># Работа
<br/>'&lt;center&gt;&lt;b&gt;Порт&lt;/b&gt;&lt;/center&gt;&lt;br&gt;'
<br/>'   Порт находится на самой южной окраине города. Здесь постоянно загружаются и разгружаются различные суда. Рабочих рук не хватает и складской бригадир всегда рад заплатить &lt;i&gt;деньги&lt;/i&gt; за помощь.'
<br/>'   У вас &lt;font size="16"&gt;&lt;b&gt;&lt;&lt;Деньги&gt;&gt;&lt;/b&gt;&lt;/font&gt; монет.'
<br/>'   Вам нужно перенести &lt;font size="16" color="#00AA00"&gt;&lt;b&gt;&lt;&lt;3-Ящик&gt;&gt;&lt;/b&gt;&lt;/font&gt; ящика.'
<br/>ACT 'Идти домой': GOTO 'Дом'
<br/>ACT 'Идти в магазин': GOTO 'Магазин'
<br/>ACT 'Перенести ящик':
<br/>    Ящик = Ящик + 1
<br/>    IF Ящик = 3:
<br/>        Деньги = Деньги + 5
<br/>        Ящик = 0
<br/>    END
<br/>    GOTO 'Работа'
<br/>END
<br/>-
<br/># Магазин
<br/>'&lt;center&gt;&lt;b&gt;Магазин&lt;/b&gt;&lt;/center&gt;&lt;br&gt;'
<br/>'   Магазин небольшой, но тут обычно есть всё, что нужно простому горожанину. Витрины заставлены различными товарами. У кассы стоит полная женщина и хмуро смотрит на вас.'
<br/>'   У вас &lt;font size="16"&gt;&lt;b&gt;&lt;&lt;Деньги&gt;&gt;&lt;/b&gt;&lt;/font&gt; монет.'
<br/>IF Деньги &gt;= 3:
<br/>    ACT 'Купить конструктор':
<br/>        Деньги = Деньги - 3
<br/>        ADDOBJ 'Конструктор'
<br/>        GOTO 'Магазин'
<br/>    END
<br/>END
<br/>IF Деньги &gt;= 5:
<br/>    ACT 'Купить плюшевого медведя':
<br/>        Деньги = Деньги - 5
<br/>        ADDOBJ 'Плюшевый медведь'
<br/>        GOTO 'Магазин'
<br/>    END
<br/>    ACT 'Купить вязальный набор':
<br/>        Деньги = Деньги - 5
<br/>        ADDOBJ 'Вязальный набор'
<br/>        GOTO 'Магазин'
<br/>    END
<br/>END
<br/>IF Деньги &gt;= 7:
<br/>    ACT 'Купить инструменты':
<br/>        Деньги = Деньги - 7
<br/>        ADDOBJ 'Инструменты'
<br/>        GOTO 'Магазин'
<br/>    END
<br/>END
<br/>ACT 'Идти домой': GOTO 'Дом'
<br/>ACT 'Идти в порт': GOTO 'Работа'
<br/>-
<br/># Дом
<br/>'&lt;center&gt;&lt;b&gt;Дом&lt;/b&gt;&lt;/center&gt;&lt;br&gt;'
<br/>'   Дома всегда очень уютно. И вкусно пахнет едой. Мама, сидя в кресле, вяжет носки. Отец с вашим братом чинит скворечник. Сестра хлопочет на кухне. Дома всегда хорошо.'
<br/>'   У вас &lt;font size="16"&gt;&lt;b&gt;&lt;&lt;Деньги&gt;&gt;&lt;/b&gt;&lt;/font&gt; монет.'
<br/>IF OBJ 'Конструктор':
<br/>    ACT 'Подарить конструктор брату':
<br/>        DELOBJ 'Конструктор'
<br/>        ' - Вот тебе конструктор.'
<br/>        ' - Спасибо, брат.'
<br/>        DELACT 'Подарить конструктор брату'
<br/>    END
<br/>END
<br/>IF OBJ 'Плюшевый медведь':
<br/>    ACT 'Подарить медведя сестре':
<br/>        DELOBJ 'Плюшевый медведь'
<br/>        ' - Вот тебе плюшевый медведь.'
<br/>        ' - Спасибо, брат.'
<br/>        DELACT 'Подарить медведя сестре'
<br/>    END
<br/>END
<br/>IF OBJ 'Вязальный набор':
<br/>    ACT 'Подарить набор маме':
<br/>        DELOBJ 'Вязальный набор'
<br/>        ' - Вот тебе вязальный набор.'
<br/>        ' - Спасибо, сынок.'
<br/>        DELACT 'Подарить набор маме'
<br/>    END
<br/>END
<br/>IF OBJ 'Инструменты':
<br/>    ACT 'Подарить инструменты отцу':
<br/>        DELOBJ 'Инструменты'
<br/>        ' - Вот тебе инструменты.'
<br/>        ' - Спасибо, сын.'
<br/>        DELACT 'Подарить инструменты отцу'
<br/>    END
<br/>END
<br/>ACT 'Идти в порт': GOTO 'Работа'
<br/>ACT 'Идти в магазин': GOTO 'Магазин'
<br/>-
</code>
<segment>
<p>
Автор: `ELMORTEM`
</p>
<p>
14.04.2010 15: 16
</p>
</segment>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\102_preprotsessor_0012.txt-light">
<header anchor="informarch_txt2gam_preprocessor" head-level="h1">
<p>
Тем, кто применяет TXT2GAM (использование препроцессора)</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
При написании игры без использования QGen, исходный текст не зашифрован и может редактироваться любым текстовым редактором.
</p>
<p>
Это также дает возможность обработать текстовый файл игры перед тем, как он будет превращен в QSP-файл - например, удалить отладочный код или неиспользуемые фрагменты текста, а также собрать один файл из нескольких мелких.
</p>
<p>
В мире программирования на Си эта возможность называется "препроцессинг" и выполняется утилитой cpp, которая идет в пакете с компиляторами C.
</p>
<p>
В нашем случае удобно использовать утилиту, которая не привязана к языку С и и может быть использована отдельно от компилятора — GPP для Win32.
</p>
<p>
Чтобы воспользоваться этим, нужно добавить в текст специальные инструкции и обработать текст утилитой GPP. После такой обработки текст уже не будет содержать инструкции и может быть преобразован в QSP-файл без ошибок.
</p>
</segment>
</segment>
<header head-level="h2" anchor="instruktsii-osnovnye">
<p>
Инструкции (основные)</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
`#mode quote` — отключает обработку символа "\" как служебного, рекомендуется поставить первой строчкой файла
</p>
<p>
`#define` &lt;имя&gt; — определить флажок, на который можно будет позже ссылаться
</p>
<p>
`#define` &lt;имя&gt; &lt;значение&gt; — определить значение, на которое можно будет позже ссылаться
</p>
<p>
`#undef` &lt;имя&gt; — удаление значения или флажка
</p>
<p>
`#ifdef` &lt;имя&gt; — если флаг или значение определены, то весь текст после этого условия до `#endif` или до `#else` будет выведен в итоговый файл
</p>
<p>
`#else` — окончание фрагмента, регулируемого инструкцией `#ifdef` - последующий текст выводится, если условие в `#ifdef` не выполнено
</p>
<p>
`#endif` — окончание фрагмента, регулируемого инструкцией `#ifdef` или `#else`
</p>
<p>
`#ifndef` — аналогично `#ifdef,` однако проверяется, что флаг или значение не определены - весь текст после этого условия до `#endif` или до `#else` будет выведен в итоговый файл
</p>
<p>
`#include` "&lt;имя файла&gt;" — в выходной файл вставляет текст из указанного файла (из той же папки) - если файл содержит инструкции, то он также будет обработан
</p>
<p>
Поскольку в `txt2gam`, по умолчанию, для обозначения начала локации используется символ "#", то важно, чтобы имена локаций не назывались по имени инструкции (`define`, `ifdef`, и т.п.). Также не стоит включать инструкции в комментарии и строки, лучше их записывать на отдельных строчках.
</p>
<p>
Доступны также и другие инструкции, о них можно узнать в документации или спросить на форуме.
</p>
<p>
Для запуска текста игры на обработку нужно открыть консоль и набрать команду:
</p>
<p>
gpp.exe &lt;входной файл&gt; -o &lt;выходной файл&gt;
</p>
<p>
Другие ключи запуска можно узнать, запустив как: gpp.exe --help
</p>
</segment>
</segment>
<header head-level="h2" anchor="primer-ispol_zovaniia">
<p>
Пример использования</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Исходный файл:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
#define HTML
<br/>
<br/># Start
<br/>
<br/>#ifdef HTML
<br/>USEHTML=1
<br/>#endif
<br/>
<br/>- Start
</code>
<segment>
<p>
После обработки в выходной файл запишется:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
# Start
<br/>
<br/>USEHTML=1
<br/>
<br/>- Start
</code>
<segment>
<p>
Если же убрать инструкцию `#define` - например, заменив на `#undef,` то после обработки в выходной файл запишется:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
# Start
<br/>
<br/>- Start
</code>
<segment>
<p>
То есть текст, регулируемый инструкцией `#ifdef,` был удален из конечного результата.
</p>
<p>
Прошу задавать вопросы на форуме.
</p>
<p>
Ссылки:
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="http://yumbrik.ru/gpp-2.24.o1.win32.zip">
Скачать GPP</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://files.nothingisreal.com/software/gpp/gpp.html">
Документация на английском</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://en.nothingisreal.com/wiki/GPP">
Домашний сайт GPP</tag>
</p>
</segment>
</list>
<segment>
<p>
АВТОР: `NTROPY`  
</p>
<p>
07.04.2010 18:47
</p>
</segment>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\103_txt2gam_for_linux_0013.txt-light">
<header anchor="informarch_forlinux" head-level="h1">
<p>
TXT2GAM. Сборка для Linux</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Исходники: </tag>
<tag name="hyperlink" href="https://github.com/QSPFoundation/txt2gam">
github/QSPFoundation/txt2gam</tag>
<tag name="simple-string">

</tag>
</p>
<p>
`Порядок сборки:`
</p>
</segment>
<list list-type="ol-list">
<segment name="li">
<p>
<tag name="simple-string">
Скачиваем все файлы с расширениями </tag>
<tag name="italic">
.c и </tag>
<tag name="simple-string">
.h и помещаем их в один каталог.</tag>
</p>
</segment>
<segment name="li">
<p>
Открываем ваш терминал(gnome-terminal, xfce4-terminal, konsole или какой у вас там).</p>
</segment>
<segment name="li">
<segment>
<p>
Пишем в консоли</p>
</segment>
<code code-left-level="4" code-type="None">
cd путь/до/директории/куда/скачали/файлы
</code>
</segment>
<segment name="li">
<segment>
<p>
Пишем в консоли</p>
</segment>
<code code-left-level="4" code-type="None">
gcc main.c coding.c locations.c memwatch.c text.c -o txt2gam
</code>
</segment>
<segment name="li">
<p>
Ждем, пока оно компилируется.</p>
</segment>
<segment name="li">
<p>
???</p>
</segment>
<segment name="li">
<p>
PROFIT</p>
</segment>
</list>
<segment>
<p>
Теперь можете запустить программу, набрав в консоли
</p>
</segment>
<code code-left-level="0" code-type="None">
./txt2gam
</code>
<segment>
<p>
из той директории, где лежит откомпилированный файл.
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\301_kalendar__po_metodu_schiota_julianskih_dnej_0014.txt-light">
<header anchor="informarch_calend_jul" head-level="h1">
<p>
Календарь по методу счёта Юлианский дней</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Календарь по рецепту `evp`. Синтетическая статья, основанная на </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=956&Itemid=57">
серии сообщений</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
Давным-давно были разработаны формулы для вычисления точной календарной даты из Юлианской даты. Юлианская дата — это число, показывающее, сколько точно прошло дней, начиная с полудня понедельника 24 ноября 4714 года до нашей эры.
</p>
<p>
<tag name="simple-string">
Для тех, кто интересуется теорией, на википедии есть замечательная </tag>
<tag name="hyperlink" href="https://ru.wikipedia.org/wiki/%D0%AE%D0%BB%D0%B8%D0%B0%D0%BD%D1%81%D0%BA%D0%B0%D1%8F_%D0%B4%D0%B0%D1%82%D0%B0">
статья, всё подробно разъясняющая</tag>
<tag name="simple-string">
. Нас же интересуют непосредственно формулы, и что мы из них можем получить.
</tag>
</p>
<p>
`evp` уже переложил все необходимые расчёты на QSP. Следующий код достаточно просто скопировать на отдельную локацию, и его можно тут же начать использовать. Для примера, будем считать, что данный код находится на локации `"calendar"`.
</p>
</segment>
<code code-left-level="0" code-type="qsp">
JDN = JDNStart + time/1440
<br/>hour = (time/60) MOD 24
<br/>minut = time MOD 60
<br/>weekday = (JDN MOD 7) + 1
<br/>
<br/>JDa = JDN + 32044
<br/>JDb = (4*JDa + 3)/146097
<br/>JDc = JDa - (146097*JDb/4)
<br/>JDd = (4*JDc + 3)/1461
<br/>JDe = JDc - 1461*JDd/4
<br/>JDm = (5*JDe + 2)/153
<br/>
<br/>day = JDe - (153*JDm+2)/5 + 1
<br/>month = JDm + 3 - 12*(JDm/10)
<br/>year = 100*JDb + JDd - 4800 + JDm/10
<br/>$hour = iif (hour &lt; 10, '0&lt;&lt;hour&gt;&gt;', '&lt;&lt;hour&gt;&gt;')
<br/>$minut = iif (minut &lt; 10, '0&lt;&lt;minut&gt;&gt;', '&lt;&lt;minut&gt;&gt;')
</code>
<segment>
<p>
В самом начале игры нам нужно задать переменные `JDNStart` и `time`. Именно эти переменные будут хранить точное значение времени в нашей игре.
</p>
<p>
`JDNStart` показывает, когда наша игра должна начаться. Эта переменная содержит число дней, прошедших с полудня понедельника 24 ноября 4714 года д.н.э и до начала нашей игры.
</p>
<p>
<tag name="simple-string">
К примеру, наша игра должна начаться 7 ноября 1917 года, в среду. Открываем </tag>
<tag name="hyperlink" href="https://promenade.imcce.fr/en/pages2/278.html">
калькулятор</tag>
<tag name="simple-string">
. Подставляем в нужные поля дату 7 ноября 1917, а время пишем 12 часов 00 минут 00 секунд. Юлианский день начинается с полудня! И получаем число 2421540. Точное, без дробной части, число дней.
</tag>
</p>
<p>
Это самое число и есть наш `JDNStart`, вот и записываем 2421540 в переменную.
</p>
<p>
А в переменную `time` мы записываем, соответственно, число минут, прошедших с начала стартового дня нашей игры (не от полудня, а от полуночи). Например, наша игра стартует в 15:37. Значит с начала дня прошло 15 часов 37 минут, и значит на старте игры мы должны в переменную `time` записать число `15*60+37`.
</p>
<p>
Итого мы будем иметь две строчки кода на самой первой локации в нашей игре, описывающие время:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
JDNStart=2421540
<br/>time=15*60+37
</code>
<segment>
<p>
Помимо `JDNStart` и `time` на самой первой локации нужно ещё прописать в отдельные массивы текстовое представление для дней недели и месяцев:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
$weekday[1] = 'Понедельник'
<br/>$weekday[2] = 'Вторник'
<br/>$weekday[3] = 'Среда'
<br/>$weekday[4] = 'Четверг'
<br/>$weekday[5] = 'Пятница'
<br/>$weekday[6] = 'Суббота'
<br/>$weekday[7] = 'Воскресенье'
<br/>$month[1] = 'Январь'
<br/>$month[2] = 'Февраль'
<br/>$month[3] = 'Март'
<br/>$month[4] = 'Апрель'
<br/>$month[5] = 'Май'
<br/>$month[6] = 'Июнь'
<br/>$month[7] = 'Июль'
<br/>$month[8] = 'Август'
<br/>$month[9] = 'Сентябрь'
<br/>$month[10] = 'Октябрь'
<br/>$month[11] = 'Ноябрь'
<br/>$month[12] = 'Декабрь'
</code>
<segment>
<p>
И вот теперь всё готово для того, чтобы мы могли пользоваться полноценным календарём в нашей игре.
</p>
<p>
Дальше всё просто. Каждый раз, когда мы совершаем действие, которое должно занять какое-то время, в коде этого действия необходимо предусмотреть изменение переменной `time`. Например:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
act 'Ехать в Смольный':
<br/>    time += 45
<br/>    gt 'smolny'
<br/>end
</code>
<segment>
<p>
Нажав на действие, мы изменим значение переменной `time`, т.е. переместимся во времени на 45 минут, и с помощью оператора `goto` переместимся на локацию `"smolny"`.
</p>
<p>
Чтобы увидеть то самое изменение времени на экране, мы должны просто вызвать код локации `"calendar"`, чтобы все значения пересчитались, а затем вывести нужные значения на экран. Например, так:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
gs 'calendar'
<br/>*nl $weekday[weekday] + ',' + day + $month[month] + ' ' + year + 'года' + '. ' + $hour + ':' + $minut
</code>
<segment>
<p>
Этот алгоритм хорошо работает на датах от 1 г. н.э. и дальше. Но если мы хотим его использовать для отображения дат до нашей эры, то нужно добавить вот эту строчку в самый конец локации `"calendar"`:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
$year_text = iif (year &lt; 1, '&lt;&lt;-year+1&gt;&gt; г. до н.э.', '&lt;&lt;year&gt;&gt; г.'))
</code>
<segment>
<p>
Это становится необходимым, если вы действительно хотите, чтобы отображение дат полностью соответствовало Григорианскому календарю. Дело тут в том, что алгоритм вычисляет астрономический счет лет, при котором за -1-м годом следует нулевой год, а затем 1-й год. В Григорианском же календаре принято, что первому году н.э. предшествовал 1-й год до н.э. Нулевого года в Григорианском календаре нет.
</p>
<p>
Для закрепления понимания того, как это всё работает, напишите несколько локаций:
</p>
<p>
`Локация "smolny"`
</p>
</segment>
<code code-left-level="0" code-type="qsp">
*nl'Смольный'
<br/>*nl $weekday[weekday] + ', ' + day + ' ' + $month[month] + ' ' + year + 'года' + '.  ' + $hour + ':' + $minut
<br/>    act 'Ехать на вокзал':
<br/>        time += 45
<br/>        gs 'calendar' 
<br/>        gt 'station'
<br/>    end
</code>
<segment>
<p>
`Локация "station"`
</p>
</segment>
<code code-left-level="0" code-type="qsp">
*nl'Вокзал'
<br/>*nl $weekday[weekday] + ', ' + day + ' ' + $month[month] + ' ' + year + 'года' + '.  ' + $hour + ':' + $minut
<br/>    act 'Ехать в Смольный':
<br/>        time += 45
<br/>        gs 'calendar' 
<br/>        gt 'smolny'
<br/>    end
<br/>    act 'Ехать в Москву (время в пути 1 сутки, 3 часа)':
<br/>        time += 1620
<br/>        gs 'calendar' 
<br/>        gt 'moscow'
<br/>    end
</code>
<segment>
<p>
`Локация "moscow"`
</p>
</segment>
<code code-left-level="0" code-type="qsp">
*nl'Москва'
<br/>*nl $weekday[weekday] + ', ' + day + ' ' + $month[month] + ' ' + year + 'года' + '.  ' + $hour + ':' + $minut
<br/>    act 'Ехать в Питер (время в пути 1 сутки, 3 часа 45 минут)':
<br/>        time += 1665
<br/>        gs 'calendar' 
<br/>        gt 'station'
<br/>    end
</code>
<segment>
<p>
В стартовой локации напишите этот код:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
! задаём начальное время
<br/>JDNStart=2421540
<br/>time=3*60+37
<br/>! прописываем в массив названия месяцев и дней недели
<br/>$weekday[1] = 'Понедельник'
<br/>$weekday[2] = 'Вторник'
<br/>$weekday[3] = 'Среда'
<br/>$weekday[4] = 'Четверг'
<br/>$weekday[5] = 'Пятница'
<br/>$weekday[6] = 'Суббота'
<br/>$weekday[7] = 'Воскресенье'
<br/>$month[1] = 'Январь'
<br/>$month[2] = 'Февраль'
<br/>$month[3] = 'Март'
<br/>$month[4] = 'Апрель'
<br/>$month[5] = 'Май'
<br/>$month[6] = 'Июнь'
<br/>$month[7] = 'Июль'
<br/>$month[8] = 'Август'
<br/>$month[9] = 'Сентябрь'
<br/>$month[10] = 'Октябрь'
<br/>$month[11] = 'Ноябрь'
<br/>$month[12] = 'Декабрь'
<br/>! пересчитываем значения времени
<br/>gs 'calendar'
<br/>! переносимся  в Смольный
<br/>gt 'smolny'
</code>
<segment>
<p>
Пробуйте запустить и следите за датой 🙂
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\302_game_time_0015.txt-light">
<header anchor="informarch_gametime" head-level="h1">
<p>
Игровое время [1.0]</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Иногда автору нужен учет игрового времени - например, чтобы поставить срок игроку на выполнение какого-либо задания.
</p>
<p>
Реализуется это таким образом:
</p>
<p>
Заводим переменную-счетчик. В ней время будет храниться в минутах - это удобнее всего.
</p>
<p>
Преобразовывать минуты в часы, дни нужно будет только при выводе:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
! 2440 минут = 1 день + 16 часов + 40 минут
<br/>время = 2440
<br/>
<br/>дни = время / (24*60)
<br/>часы = (время - дни*24*60) / 60
<br/>минуты = время - часы*60 - дни*24*60
<br/>*PL 'Время: &lt;&lt;дни&gt;&gt; день, &lt;&lt;часы&gt;&gt;:&lt;&lt;минуты&gt;&gt;.'
</code>
<segment>
<p>
<tag name="simple-string">
Пример реализации: </tag>
<tag name="hyperlink" href="https://qsp.org/attachments/time.qsp">
time.qsp</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Также см. </tag>
<tag name="hyperlink" href="#informarch_calend_jul">
Календарь по методу счёта Юлианских дней</tag>
<tag name="simple-string">

</tag>
</p>
<p>
Автор: `NEX`
</p>
<p>
18.03.2011 15:13</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\303_gibkij_plejlist_0016.txt-light">
<header anchor="informarch_flexible_playlist" head-level="h1">
<p>
Гибкий плейлист 1.0</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Код гибкого плейлиста для воспроизведения фоновой музыки.
</p>
<p>
Огромное спасибо Byte за помощь в доработке.
</p>
<p>
Идея возникла в ходе работы по озвучке "Лабиринта страха", поскольку все скрипты плейлистов, которые я нашел, были недостаточно гибкими - по сути любой скрипт нужно было полностью переделывать под себя.
</p>
<p>
После ряда эксперементов у меня получилось сделать код, который можно использовать в любом проекте.
</p>
<p>
В основе плейлиста лежит понятие темы - списка файлов, которые проигрываются один за другим. Количество тем в игре и файлов в теме не ограничено. Плейлист также запоминает текущий файл в теме при смене темы и при выключении музыки. Поддерживаеться изменение громкости.
</p>
<p>
Для использования плейлиста в игре нужно сделать следующее:
</p>
</segment>
<list list-type="ol-list">
<segment name="li">
<p>
В локацию-счетчик добавить код плеера (весь код из локации counter)</p>
</segment>
<segment name="li">
<p>
Сделать списки файлов в темах. Для этого нужно для каждой темы создать маcсив с именем $tracklist_название темы. То есть для темы default название массива должно быть $tracklist_default. Примеры списков можно найти в локации init_music.</p>
</segment>
<segment name="li">
<segment>
<p>
Осталось только включить музыку и инициировать тему. Для этого в код добавляем</p>
</segment>
<code code-left-level="4" code-type="qsp">
music_on=1
<br/>volume = 100
<br/>$music_theme = 'default'
</code>
</segment>
</list>
<segment>
<p>
Переменная `music_on` отвечает за включение/выключение плейлиста. Выключить плейлист можно также с помощью `$music_theme = ''`.
</p>
<p>
С помощью переменной `volume` изменяется громкость проигрывания.
</p>
<p>
В переменной `$music_theme` хранится название текущей темы. При ее изменении останавливается проигрывание текущей темы (при этом запоминается файл, на котором было остановлено проигрывание) и начинается прогрывание следующей.
</p>
<p>
Автор: `WEREWOLF`
</p>
<p>
06.04.2010 15:26
</p>
<p>
Оригинал статьи: https://qsp.org/index.php?option=com_content&amp;view=article&amp;id=79:-10&amp;catid=36:2009-02-19-06-11-21&amp;Itemid=76
</p>
<p>
<tag name="simple-string">
Скачать модуль гибкого плейлиста можно здесь: </tag>
<tag name="hyperlink" href="https://qsp.org/attachments/playlist.zip">
playlist.zip</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\304_ispol_zovanie_massivov_0017.txt-light">
<header anchor="informarch_usethemassive" head-level="h1">
<p>
Использование массивов</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Вкратце: в QSP есть возможность использовать массивы. Значит вместо одного значения одной переменной `x = 10`, можно сохранить несколько значение под одним именем, указывая в скобках после имени переменной код или индекс очередного значения вот так:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
x[0] = 10
<br/>x[1] = 12
<br/>x[2] = 9
</code>
<segment>
<p>
Это удобно тем, что вместо прямого указания номера индекса мы можем подставить значение какой-нибудь переменной. Так, мы можем, например, произвести вывод всех значений массива, используя всего лишь один цикл:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
loop local i=0 while i&lt;arrsize('x') step i+=1:
<br/>    *pl x[i]
<br/>end
</code>
<segment>
<p>
В качестве индекса или кода может использоваться и строка:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
сила['лебедь'] = 5
<br/>сила['рак'] = 3
<br/>$я = 'щука'
<br/>сила[$я] = 2
</code>
<segment>
<p>
Значок `"$"` показывает что переменная строковая.
</p>
<p>
Начиная с версии плеера 5.8.0 можно создавать многомерные массивы без использования строковых индексов:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
x = 1
<br/>y = 2
<br/>$ячейка[x,y] = "3х палубный"
<br/>$ячейка[(x+1),y] = "3х палубный"
<br/>$ячейка[(x+2),y] = "3х палубный"
</code>
<segment>
<p>
Даже если названия (имена) динамические, и их количество может отличаться в разных случаях, то для хранения информации об объекте игры, или персонаже, также можно использовать массив. Например, для случая с расстояниями до врагов:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
$я="Кузнецов"
<br/>$имя_персонажа[0]=$я
<br/>$имя_персонажа[1]="Иванов"
<br/>$имя_персонажа[2]="Петров"
<br/>$имя_персонажа[3]="Сидоров"
<br/>расстояние[$я,$имя_персонажа[1]] = 3
<br/>расстояние[$я,$имя_персонажа[2]] = 4
<br/>расстояние[$я,$имя_персонажа[3]] = 5
</code>
<segment>
<p>
В этом примере, зная имена персонажей можно получать и изменять расстояния между ними.
</p>
<p>
Также вместо имен можно использовать и их порядковые номера:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
расстояние2[1,2] = 6
<br/>расстояние2[2,3] = 7
<br/>расстояние2[1,4] = 8
</code>
<segment>
<p>
В этом примере у нас массив 2-х мерный. А измерений может быть и больше.
</p>
<p>
Автор: `Ntropy`
</p>
<p>
Отредактировал для соответствия версии библиотеке 5.8.0: Aleks Versus  
</p>
<p>
26.Июл.10 12:08:22
</p>
<p>
<tag name="simple-string">
Оригинал в теме: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=93&Itemid=57">
Подробности использования массивов, все вопросы сюда</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\305_dopolnenie_inventarja_0018.txt-light">
<header anchor="informarch_ia_lib_ntropy" head-level="h1">
<p>
Библиотечка дополняющая инвентарь 0.76</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Библиотечка для работы с инвентарём (`inventory_advanced.qsp`) + простой пример для демонстрации возможностей (`invadv_test.qsp`).
</p>
<p>
Вы можете добавлять и удалять предметы (деньги или еще что-то), при этом их количество будет верно отображаться в инвентаре. Например, добавили 15 шишек, а пишется "шишка (15 шт.)", заботу об этом берёт библиотечка.
</p>
<p>
Вы можете добавлять предметы в обход функций библиотечки, они не помешают её работе.
</p>
<p>
Для получения описания функций библиотечки откройте её файл (`inventory_advanced.qsp`) в QSP-плеере.
</p>
</segment>
</segment>
<header head-level="h3" anchor="opisanie">
<p>
Описание</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Локации могут вызываться как функции, так и как процедуры, например вызов func('ia_obj_count', 'шишки') возвращает количество шишек в инвентаре, а вызов процедуры gs 'ia_add_obj','шишки' добавляет одну шишку в инвентарь.
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
`ia_add_obj, &lt;предмет&gt;, [&lt;тип предмета&gt;]`</p>
<p>
    Функция для добавления предмета в инвентарь или увеличения счетчика на 1, тип предмета задает сокращение после количества, например "руб." или "шт."
</p>
</segment>
<segment name="li">
<p>
`ia_del_obj, &lt;предмет&gt;, [&lt;тип предмета&gt;]`</p>
<p>
    Функция уменьшения счетчика на 1 или для удаления предмета из инвентаря (если количество равно нулю), тип предмета задает сокращение после количества, например "руб." или "шт."
</p>
</segment>
<segment name="li">
<p>
`ia_obj_count, &lt;предмет&gt;, [&lt;количество&gt;]`</p>
<p>
    Функция для получения количества предметов или установки точного значения, если задано количество.
</p>
</segment>
<segment name="li">
<p>
`ia_obj_type, &lt;предмет&gt;`</p>
<p>
    Функция для получения типа предмета (сокращение указываемое после количества, например "руб." или "шт.") или задание этого сокращения.
</p>
</segment>
</list>
<segment>
<p>
При использовании библиотечки в своих проектах настаиваю на сохранении авторства.
</p>
<p>
Ntropy ( ...@yandex.ru) 18.06.2009
</p>
<p>
Автор: `NTROPY`
</p>
<p>
02.04.2010 12:50
</p>
<p>
Оригинал статьи: https://qsp.org/index.php?option=com_content&amp;view=article&amp;id=70:qsp-inventory-advanced-lib-076&amp;catid=36:2009-02-19-06-11-21&amp;Itemid=76
</p>
<p>
<tag name="simple-string">
Скачать модуль гибкого плейлиста можно здесь: </tag>
<tag name="hyperlink" href="https://qsp.org/attachments/inventory_advanced.zip">
inventory_advanced.zip</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\306_dejstvie_po_usloviju_0019.txt-light">
<header anchor="informarch_ifacts" head-level="h1">
<p>
Действие по условию</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Иногда требуется сделать, чтобы действие "появлялось" только при выполнении определенного условия.
</p>
<p>
Делается это так.
</p>
</segment>
<list list-type="ol-list">
<segment name="li">
<p>
Все действия, которые могут быть "отключены" по каким-либо условиям, переносим в область "Выполнить при посещении"</p>
</segment>
<segment name="li">
<p>
В конце каждого действия, в котором есть влияние на любое из этих условий(!), ставим "GOTO $CURLOC".</p>
</segment>
<segment name="li">
<p>
Помещаем действия внутрь соотв. блоков IF, с проверками на условия.</p>
</segment>
<segment name="li">
<p>
При написании кода "Выполнить при посещении" локации учитываем, что код будет выполняться более одного раза.</p>
</segment>
</list>
<segment>
<p>
Также внутрь блока IF удобно внести часть описания, относящуюся к показываемому действию.
</p>
<p>
`Пример:`
</p>
</segment>
<code code-left-level="0" code-type="qsp">
'Вы находитесь в пустой комнате.'
<br/>IF ключ=0:
<br/>    'На полу лежит ключ.'
<br/>    ACT 'Взять ключ':
<br/>        ключ = 1
<br/>        ADDOBJ 'ключ'
<br/>        GOTO $CURLOC
<br/>    END
<br/>END
</code>
<segment>
<p>
`Второй пример`. Допустим, в игре можно что-то покупать за деньги. Количество денег хранится в переменной "деньги". Когда денег становится мало, нам нужно, чтобы игроку были недоступны некоторые покупки. Если не выполнять проверку, то количество денег игрока уйдет в минус, и покупать можно будет бесконечно. Проверку можно реализовать двумя способами, на усмотрение автора.
</p>
<p>
Первый - действие по условию, как в предыдущем примере. Если условие не выполняется, то действие не показывается вообще. Игрок видит в списке действий только те вещи, на которые у него хватает денег.
</p>
</segment>
<code code-left-level="0" code-type="qsp">
IF деньги &gt;= 100:
<br/>    ACT 'Купить плащ (100)':
<br/>        деньги = деньги - 100
<br/>        PL 'Вы купили плащ за 100 монет.'
<br/>        ADDOBJ 'плащ'
<br/>        GOTO $CURLOC
<br/>    END
<br/>END
<br/>IF деньги &gt;= 10:
<br/>    ACT 'Купить хлеб (10)':
<br/>        деньги = деньги - 10
<br/>        PL 'Вы купили хлеб за 10 монет.'
<br/>        хлеб = хлеб + 1
<br/>        GOTO $CURLOC
<br/>    END
<br/>END
<br/>IF деньги &gt;= 200:
<br/>    ACT 'Купить меч (200)':
<br/>        деньги = деньги - 200
<br/>        PL 'Вы купили меч за 200 монет.'
<br/>        ADDOBJ 'меч'
<br/>        GOTO $CURLOC
<br/>    END
<br/>END
</code>
<segment>
<p>
Второй способ - условие внутри действия. При выполнении действия выполняется проверка, и если денег недостаточно, выдается соответствующее сообщение. Игрок видит весь список вещей, но купить может только те, на которые хватает денег.
</p>
</segment>
<code code-left-level="0" code-type="qsp">
ACT 'Купить плащ (100)':
<br/>    IF деньги &gt;= 100:
<br/>        деньги = деньги - 100
<br/>        PL 'Вы купили плащ за 100 монет.'
<br/>        ADDOBJ 'плащ'
<br/>        GOTO $CURLOC
<br/>    ELSE
<br/>        PL 'У вас нехватает денег.'
<br/>    END
<br/>END
<br/>ACT 'Купить хлеб (10)':
<br/>    IF деньги &gt;= 10:
<br/>        деньги = деньги - 10
<br/>        PL 'Вы купили хлеб за 10 монет.'
<br/>        хлеб = хлеб + 1
<br/>        GOTO $CURLOC
<br/>    ELSE
<br/>        PL 'У вас нехватает денег.'
<br/>    END
<br/>END
<br/>ACT 'Купить меч (200)':
<br/>    IF деньги &gt;= 200:
<br/>        деньги = деньги - 200
<br/>        PL 'Вы купили меч за 200 монет.'
<br/>        ADDOBJ 'меч'
<br/>        GOTO $CURLOC
<br/>    ELSE
<br/>        PL 'У вас нехватает денег.'
<br/>    END
<br/>END
</code>
<segment>
<p>
`Третий пример.`
</p>
<p>
Допустим, в игре для продвижения по сюжету нам нужно что-то узнать. Кто-то рассказывает нам, что в библиотеке замка есть потайной ход. Когда мы это узнали, то при посещении библиотеки у нас появится соответствующее действие. Пока игрок не выяснил про потайной ход, действие скрыто.
</p>
</segment>
<code code-left-level="0" code-type="qsp">
! Локация "Слепой старец"
<br/>'Старец усмехнулся. - Они лишили меня зрения, но память осталась при мне. Я расскажу тебе, как добраться до сокровищницы. В библиотеке есть потайной ход: загляни в книгу, четырнадцатую от окна на нижней полке.'
<br/>! Меняем состояние игры - отмечаем, что игрок узнал секрет.
<br/>потайной_ход = 1
<br/>
<br/>! Локация "Библиотека"
<br/>IF потайной_ход = 1:
<br/>    ACT 'Заглянуть в четырнадцатую книгу':
<br/>        GOTO 'Потайной ход'
<br/>    END
<br/>END
</code>
<segment>
<p>
Автор: `Nex`
</p>
<p>
26.Июл.11 06:51:46
</p>
<p>
<tag name="simple-string">
Оригинал в теме: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=348&Itemid=57">
Действие по условию</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\307_plavnoe_izmenenie_0020.txt-light">
<header anchor="informarch_transformation" head-level="h1">
<p>
Плавное изменение цвета фона [1.0]</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Плавное изменение цвета фона может придать Вашей игре больше атмосферности. Так же, это снизит напряжение на глаза при смене цвета фона (по сравнению с резким).
</p>
<p>
Функция будет называться `!coloring` и вызываться так:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
gs '!coloring',200,200,200
</code>
<segment>
<p>
Где три числа соответственно цвета RGB от 0 до 255.
</p>
<p>
Код локации `!coloring`
</p>
</segment>
<code code-left-level="0" code-type="qsp">
!Вызов функции с передачей 3-х аргументов, это 3 цвета RGB
<br/>!Рекомендуется посылать значения кратные 5
<br/>r2 = ARGS[0]    
<br/>g2 = ARGS[1]    
<br/>b2 = ARGS[2]
<br/>!Начало цикла
<br/>:!color        
<br/>!Всего 3 блока для каждого цвета. 
<br/>if r1 &lt; r2:        
<br/>    r1=r1 + 5    
<br/>!Значения должны быть кратные 5. Если хочется любые, то "+5" следует заменить на "+1" и "-5" на "-1"
<br/>elseif r1 &gt;r2:
<br/>    r1=r1 - 5
<br/>end
<br/>
<br/>if g1 &lt; g2:
<br/>    g1=g1 + 5    
<br/>elseif g1 &gt;g2:
<br/>    g1=g1 - 5
<br/>end
<br/>
<br/>if b1 &lt; b2:
<br/>    b1=b1 + 5
<br/>elseif b1 &gt;b2:
<br/>    b1=b1 - 5
<br/>end
<br/>!Установка цвета фона
<br/>bcolor = rgb(r1,g1,b1) 
<br/>!Проверка, достигнут ли нужный цвет?
<br/>if r1 = r2 and g1 = g2 and b1 = b2 :
<br/>    r1=r2
<br/>    g1=g2
<br/>    b1=b2
<br/>else:
<br/>    wait TIMEOFWAIT
<br/>    jump '!color'
<br/>end
</code>
<segment>
<p>
ВНИМАНИЕ!
</p>
<p>
Не забывайте, что нужно задать отличным от 0 TIMEOFWAIT и устанавливать цвет текста тёмным или светлым в зависимости от светлого-тёмного фона командой:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
fcolor (200,200,200)
</code>
<segment>
<p>
где в скобках цвета в RGB
</p>
<p>
Примечание: использование `WAIT` а не локации-счётчика `COUNTER` обусловлено тем, что подразумевается, что смена цвета будет происходить быстро (рекомендуемое время TIMEOFWAIT = 5). Если автор хочет сделать плавную смену дня и ночи, лучше будет воспользоваться `COUNTER`ом.
</p>
<p>
Автор: `ANTIPOD`
</p>
<p>
20.05.2011 09:23
</p>
<p>
<tag name="simple-string">
Оригинал статьи: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_content&view=article&id=112:2011-05-20-06-23-02&catid=36:2009-02-19-06-11-21&Itemid=76">
Плавное изменение цвета фона 1.0</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\308_otladchik_0021.txt-light">
<header anchor="informarch_debugger20" head-level="h1">
<p>
Отладчик 2.0 beta</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Позволяет в любое время выполнить произвольный кусок кода или просмотреть значения переменных из указанного списка.
</p>
<p>
Библиотечка была обновлена до версии 2.0beta
</p>
<p>
Порядок использования:
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
Распаковать архив в папку с игрой</p>
</segment>
<segment name="li">
<p>
Добавить в первую локацию команду: `addqst 'lib/debugger.qsp'`, для загрузки отладчика</p>
</segment>
<segment name="li">
<p>
Включить отладочный режим: `debug = 1`, для плеера</p>
</segment>
<segment name="li">
<p>
Добавить команду: `gs 'debugger_init'`, для включения отладчика</p>
</segment>
</list>
<segment>
<p>
Основным недостатком первой версии было то, что команды можно было вводить только через строку ввода. Вызов команд из кода был затруднен, и создание новых команд требовало знания структуры и принципа отладчика. Кроме того у части команд был не совсем удобный вызов. В новой версии я постарался решить все эти проблемы.
</p>
<p>
Для этого были сделаны следующие изменения:
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
добавлена возможность вызвать команду отладчика из кода (в предыдущей версии вызов команды был тесно связан с строкой ввода и сделать это было довольно проблематично)</p>
<p>
	например: `gs 'debugger_process', 'addvar test'`
</p>
</segment>
<segment name="li">
<p>
обавлена возможность ввести несколько команд одновреммено разделив их &amp; (в предыдущей версии была бы отработана только первая команда)</p>
<p>
	например: `addVar test &amp; test = 3 &amp; showVars`
</p>
</segment>
<segment name="li">
<p>
добавлена возможность ввода `&lt;&lt;` и `&gt;&gt;` (в предыдущей версии были проблемы с отображением и обработкой)</p>
</segment>
<segment name="li">
<p>
добавлена возможность запланировать выполнение команды отладчика - для этого необходимо добавить перед командой &gt;</p>
<p>
	например: `&gt;showVars gs 'test_loc' &gt;showVars`
</p>
<p>
	здесь команды `showVars` будут выполнены не сразу после ввода, а только когда код будет запущен через run
</p>
</segment>
<segment name="li">
<p>
в `addVar` и `delVar` теперь можно передавать несколько имен переменных разделенных пробелом</p>
<p>
	например: `addvar test[0] test[3] $test`
</p>
</segment>
<segment name="li">
<p>
в `run` вторым параметром можно передать название переменной с кодом для выполнения (похоже на вызов `load $var &amp; run`, только код не загружается в список команд)</p>
</segment>
<segment name="li">
<p>
добавлена команда clearVars для очистки списка переменных</p>
</segment>
<segment name="li">
<p>
добавлены команды для отслеживания логических выражений `addCond`, `delCond`, `showCond`, `clearCond` (об этом писал на форуме `invertercant`)</p>
<p>
	например: `addcond test1 &gt; test2 &amp; showcond`
</p>
</segment>
<segment name="li">
<p>
в `help` вторым параметром можно передать название команды для просмотра информации по ней</p>
</segment>
<segment name="li">
<p>
добавлены команды `createCommand`, `loadCommand`, `updateCommand` и `deleteCommand` для создания пользовательских команд</p>
<p>
	все параметры переданные после названия команды доступны в массиве `$debugger_args`
</p>
<p>
	в принципе с помощью `createCommand` можно перегрузить любую команду отладчика, но пользоваться этой возможностью нужно с осторожностью
</p>
</segment>
<segment name="li">
<p>
добавлен "визуальный" режим для тех, кто не хочет учить команды:)</p>
<p>
	для его использования при вызове `debugger_init` первым параметром передайте `1` в локацию-обработчик выбора предмета добавьте
</p>
<p>
	`if $selobj = 'Отладчик': menu '$visual_main'`
</p>
</segment>
</list>
<segment>
<p>
При запущенной игре, команды передаются через строку ввода. Первой стоит запустить команду: `help`
</p>
<p>
У команд в фигурных скобках указаны обязательные параметры, а в круглых необязательные.
</p>
</segment>
</segment>
<header head-level="h3" anchor="osnovnye-komandy-i-nastrojki">
<p>
Основные команды и настройки</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
`debugger {0 | 1}` - Включение/отключение отладчика</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
`showMode {msg | pl | p | </tag>
<tag name="italic">
pl | </tag>
<tag name="simple-string">
p}` - изменение режима вывода информации, по умолчанию msg</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
`autoShow {0 | 1} (msg | pl | p | </tag>
<tag name="italic">
pl | </tag>
<tag name="simple-string">
p)` - Включение/отключение автоматического показа кода после каждого изменения, с помощью третьего аргумента можно изменить режим вывода</tag>
</p>
</segment>
<segment name="li">
<p>
`help (название команды)` - список команд или информация об определенной команде</p>
</segment>
</list>
</segment>
<header head-level="h3" anchor="spisok-peremennyh-dlia-vyvoda">
<p>
Список переменных для вывода</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
`addVar {название переменной}` - добавление переменной в список отображения (можно указывать несколько переменных через пробел)</p>
</segment>
<segment name="li">
<p>
`delVar {название переменной}` - удаление переменной из списка отображения (можно указывать несколько переменных через пробел)</p>
</segment>
<segment name="li">
<p>
`showVars` - отображение списка переменных, зависит от режима вывода информации</p>
</segment>
<segment name="li">
<p>
`clearVars` - очистка списка переменных</p>
</segment>
</list>
</segment>
<header head-level="h3" anchor="spisok-logicheskih-vyrazhenij-dlia-vyvoda">
<p>
Список логических выражений для вывода</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
`addCond {название переменной}` - добавление логического выражения в список отображения</p>
</segment>
<segment name="li">
<p>
`delCond {название переменной}` - удаление логического выражения из списка отображения</p>
</segment>
<segment name="li">
<p>
`showCond` - отображение списка логических выражений, зависит от режима вывода информации</p>
</segment>
<segment name="li">
<p>
`clearCond` - очистка списка логических выражений</p>
</segment>
</list>
</segment>
<header head-level="h3" anchor="otladochnyj-kusochek-koda">
<p>
Отладочный кусочек кода</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
`run (название переменной)` - Выполнение набраного кода(по умолчанию после выполнения код очищается) или кода из определенной переменной</p>
</segment>
<segment name="li">
<p>
`clearCode` - Очистка набранного кода, по умолчанию вызывается при каждом выполнении кода</p>
</segment>
<segment name="li">
<p>
`show `- Отображение введенного кода, отображение зависит от режима, по умолчанию происходит очистка окна отображения, если не используется msg</p>
</segment>
<segment name="li">
<p>
`edit {номер строки} {строка кода}` - замена строки с определенным номером</p>
</segment>
<segment name="li">
<p>
`delete {номер строки}` - удаление строки с определенным номером</p>
</segment>
<segment name="li">
<p>
`delete {номер строки}-{номер строки}` - удаление группы строк</p>
</segment>
<segment name="li">
<p>
`insert {строка кода}` - вставка кода в начало</p>
</segment>
<segment name="li">
<p>
`insert {номер строки} {строка кода}` - вставка кода после определенной строки</p>
</segment>
</list>
</segment>
<header head-level="h3" anchor="sohranenie-i-zapis_-otladochnogo-koda">
<p>
Сохранение и запись отладочного кода</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
`save (название переменной)` - сохранение кода в переменную, если переменная не указана, выполняется автосохранение, по умолчанию автосохранение выполняется при каждом выполнении кода до его очистки</p>
</segment>
<segment name="li">
<p>
`load (название переменной)` - загрузка кода из переменной, если переменная не указана загружается автосохранение</p>
</segment>
</list>
<segment>
<p>
<tag name="simple-string">
Скачать отладчик: </tag>
<tag name="hyperlink" href="https://qsp.org/attachments/debugger2beta.zip">
debugger2beta.zip</tag>
<tag name="simple-string">

</tag>
</p>
<p>
Автор: `WEREWOLF`
</p>
<p>
05.04.2010 13:34</p>
</segment>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\309_tjanem_karty_iz_kollody_0022.txt-light">
<header anchor="informarch_randomizer" head-level="h1">
<p>
Выбор случайных вариантов - тянем карты из колоды [1.0]</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Если требуется выбрать случайный вариант однократно, то используется оператор RAND. Но если стоит задача сделать последовательный выбор случайных вариантов из заранее сформированного массива значений, то одним только RAND не обойтись. При каждом последующем выборе нужно будет "помнить", какие значения были уже выбраны.
</p>
<p>
Эта задача схожа с последовательным вытягиванием карт из колоды.
</p>
<p>
Решение, оформленное в виде пользовательской функции:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
! Запрашиваем длину массива
<br/>_length = ARRSIZE('$random')
<br/>! Если вариантов уже нет, возвращаем 'ERROR'
<br/>IF _length = 0:
<br/>    $RESULT = 'ERROR'
<br/>    EXIT
<br/>END
<br/>
<br/>! Выбираем из массива случайный элемент, соотв. длине массива
<br/>_variant = RAND(0, _length-1)
<br/>! Запоминаем результат
<br/>$RESULT = $random[_variant]
<br/>
<br/>! Удаляем отработанный элемент
<br/>KILLVAR '$random', _variant
</code>
<segment>
<p>
Тестовый пример использования:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
$random[0]='A'
<br/>$random[1]='B'
<br/>$random[2]='C'
<br/>$random[3]='D'
<br/>$random[4]='E'
<br/>$random[5]='F'
<br/>$random[6]='G'
<br/>
<br/>i = 1
<br/>:loop
<br/>    $rand_ = FUNC('Тянуть карту')
<br/>    'Шаг №&lt;&lt;i&gt;&gt;. Значение: &lt;&lt;$rand_&gt;&gt;'
<br/>    i = i + 1
<br/>IF i &lt;= 7:
<br/>    JUMP 'loop'
<br/>END
</code>
<segment>
<p>
<tag name="hyperlink" href="https://qsp.org/attachments/pullcard.qsp">
pullcard.qsp</tag>
<tag name="simple-string">

</tag>
</p>
<p>
Автор: `NEX`
</p>
<p>
29.05.2011 20:05
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\950_shablony_oformlenija_dlja_igr_0032.txt-light">
<header anchor="faq_22_01" head-level="h2">
<p>
22.1. Пишу несколько игр в Quest Navigator. Как сделать, чтобы у каждой игры было собственное оформление?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В: Пишу несколько игр в Quest Navigator. Как сделать, чтобы у каждой игры было собственное оформление?
</p>
<p>
О:
</p>
<p>
Чтобы сделать для каждой отдельной игры своё собственное оформление, в первую очередь разместите каждую игру в отдельной папке.
</p>
<p>
Теперь зайдите в папку с установленным Quest Navigator`ом и пройдите по пути "assets/skins". В этой папке лежат три шаблона:
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
classic</p>
</segment>
<segment name="li">
<p>
default</p>
</segment>
<segment name="li">
<p>
fantasy</p>
</segment>
</list>
<segment>
<p>
Любой из этих шаблонов вы можете поставить для своей игры, однако я рекомендую брать шаблон из папки "default", и работать в дальнейшем с ним.
</p>
<p>
Чтобы поставить на свою игру шаблон, зайдите в папку с этим шаблоном и скопируйте файл "gameAwesomium.html" и папку "skins" в папку со своей игрой. Теперь, когда вы будете открывать игру в Quest Navigator, к ней будет применяться оформление из этого шаблона.
</p>
<p>
Чтобы отредактировать оформление игры, вам потребуется отредактировать два основных файла:
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
gameAwesomium.html</p>
</segment>
<segment name="li">
<p>
skins/game.css</p>
</segment>
</list>
<segment>
<p>
Скопируйте файлы шаблона в папки для каждой отдельной игры, и вы сможете отредактировать для каждой из этих игр шаблон оформления отдельно.
</p>
</segment>
</segment>
<header anchor="link_22" head-level="h2">
<p>
22. Вопросы о Quest Navigator (v.0.0.28). Ссылки на внешние ресурсы</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<p>
Возможности Quest Navigator в плане HTML почти полностью повторяют возможности обычного браузера: http://htmlbook.ru
</p>
<p>
<tag name="simple-string">
Oliver. #5326 07.Июн.18 00:14:02: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=214&prc=25&Itemid=57#p26714">
Короче, есть фон, на котором изображены люди. Необходимо, чтобы при наведении на определённого человека, его изображение изменялось(хотя бы как-то выделялось). Весьма буду благодарен за помощь.</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Подсветка части изображения: </tag>
<tag name="hyperlink" href="http://seodnevnik.ru/sozdanie-sajtov/podsvetka-kartinki-ili-sozdanie-knopki-na-css.html">
статья на seodnevnik</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
cleep. #5125 29.Июл.17 12:24:52: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=206&prc=25&Itemid=57#p26061">
Возник такой вопрос: можно ли как-то на Quest Navigator-е, например, при нажатии на клавишу ESC вызвать меню паузы?</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
cleep. #5132 22.Авг.17 17:57:20: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=206&prc=25&Itemid=57#p26100">
Можете объяснит на примере, как в QN привязать к клавише какое-либо действие?</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
TEMP_USER. #5228 26.Фев.18 14:20:47: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=210&prc=25&Itemid=57#p26454">
quest navigator и qgen это разные вещи?</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Hessar. #5291 09.Апр.18 15:19:27: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=212&prc=25&Itemid=57#p26613">
можно ли подключить к игре библиотеку jQuery и как правильно использовать JavaScript для отображения в плеере? Что писать и куда? </tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
новичок. #5466 31.Янв.19 11:43:10: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=219&prc=25&Itemid=57#p27067">
еще такой вопрос. почему в навигаторе при pl описание выводится в основном окне</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Подробный разбор изменений дизайна в Quest Navigator: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=1067&Itemid=57">
тема на форуме qsp.su</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
<header anchor="link_22_01" head-level="h6">
<p>
22.1.  Пишу несколько игр в Quest Navigator. Как сделать, чтобы у каждой игры было собственное оформление?</p>
</header>
<segment segment-class="for-head">
<p>
<tag name="simple-string">
Смотреть ответ на ютубе: </tag>
<tag name="hyperlink" href="https://www.youtube.com/watch?v=1mMcOyG6_jc&t=18s">
https://www.youtube.com/watch?v=1mMcOyG6_jc&amp;</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
<header anchor="link_22_02" head-level="h6">
<p>
22.2.  Как подключить свой шрифт к игре?</p>
</header>
<segment segment-class="for-head">
<p>
<tag name="simple-string">
Смотреть ответ на ютубе: </tag>
<tag name="hyperlink" href="https://www.youtube.com/watch?v=1mMcOyG6_jc&t=414s">
https://www.youtube.com/watch?v=1mMcOyG6_jc&amp;</tag>
<tag name="simple-string">

</tag>
</p>
<p>
Подключение своего шрифта к игре: http://htmlbook.ru/css/font-face
</p>
<p>
<tag name="simple-string">
gribochek. #3756 12.Янв.16 13:26:27: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=151&prc=25&Itemid=57#p22462">
Если я выберу шрифт, то люди при скачивании его будут видеть опционально, или же мне придется закладывать шрифт в папку с игрой, и просьбой установить его?</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Aaaspavel. #4203 31.Мар.16 09:53:21: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=169&prc=25&Itemid=57#p23627">
задумка такая: к репутации гг привязать шрифт в навигаторе,  как это можно сделать?</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
<header anchor="link_22_03" head-level="h6">
<p>
22.3.  Пишу bcolor=rgb(255,200,200), но это не меняет цвет фона игры. Как изменить цвет фона из кода QSP?</p>
</header>
<segment segment-class="for-head">
<p>
<tag name="simple-string">
Смотреть ответ на ютубе: </tag>
<tag name="hyperlink" href="https://www.youtube.com/watch?v=xhRfyqNepr0&t=18s">
https://www.youtube.com/watch?v=xhRfyqNepr0&amp;</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
<header anchor="link_22_04" head-level="h6">
<p>
22.4.  Хочу прописать игре собственный вид курсора, как это сделать?</p>
</header>
<segment segment-class="for-head">
<p>
<tag name="simple-string">
Смотреть ответ на ютубе: </tag>
<tag name="hyperlink" href="https://www.youtube.com/watch?v=xhRfyqNepr0&t=182s">
https://www.youtube.com/watch?v=xhRfyqNepr0&amp;</tag>
<tag name="simple-string">

</tag>
</p>
<p>
Подключение своего курсора к игре: http://htmlbook.ru/css/cursor
</p>
<p>
<tag name="simple-string">
Aaaspavel. #4256 08.Апр.16 21:56:56: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=171&prc=25&Itemid=57#p23707">
при выполнении наведении курсора на определённые области курсор менялся на другие значки, к примеру с с разрешением (.ani)?</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
<header anchor="link_22_05" head-level="h6">
<p>
22.5.  Скопировал шаблон оформления в папку со своей игрой, но что с ним теперь делать?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Смотреть ответ на ютубе: </tag>
<tag name="hyperlink" href="https://www.youtube.com/watch?v=eB_BrqnD7Vw&t=18s">
https://www.youtube.com/watch?v=eB_BrqnD7Vw&amp;</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Iam. #4469 25.Июн.16 22:47:24: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=179&prc=25&Itemid=57#p24237">
Может кто-то на конкретном примере показать как перелопатить интерфейс?</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Macmep. #4737 31.Окт.16 13:34:16: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=190&prc=25&Itemid=57#p24810">
Собственно вопрос: как создать блок вывода действий? Что именно прописать в CSS?</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header anchor="link_22_06" head-level="h6">
<p>
22.6.  Как узнать, на каком плеере запущена игра: на классическом QSP, или на Quest Navigator?</p>
</header>
<segment segment-class="for-head">
<p>
<tag name="simple-string">
Смотреть ответ на ютубе: </tag>
<tag name="hyperlink" href="https://www.youtube.com/watch?v=xhRfyqNepr0&t=495s">
https://www.youtube.com/watch?v=xhRfyqNepr0&amp;</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
<header anchor="link_2_07" head-level="h6">
<p>
22.7.  Как вставить видео в игру на Навигаторе?</p>
</header>
<segment segment-class="for-head">
<p>
<tag name="simple-string">
Смотреть ответ на ютубе: </tag>
<tag name="hyperlink" href="https://www.youtube.com/watch?v=g367zg1P7PM&t=18s">
https://www.youtube.com/watch?v=g367zg1P7PM&amp;</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Deagle. #4829 05.Янв.17 19:26:21: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=194&prc=25&Itemid=57#p25042">
Подскажите, пожалуйста, как вставить видео в quest navigator?</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
<header anchor="link_22_08" head-level="h6">
<p>
22.8.  Как делать standalone-сборку на Навигаторе?</p>
</header>
<segment segment-class="for-head">
<p>
<tag name="simple-string">
Смотреть ответ на ютубе: </tag>
<tag name="hyperlink" href="https://www.youtube.com/watch?v=g367zg1P7PM&t=323s">
https://www.youtube.com/watch?v=g367zg1P7PM&amp;</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
<header anchor="link_22_09" head-level="h6">
<p>
22.9.  Где в Quest Navigator править размер окна с игрой?</p>
</header>
<segment segment-class="for-head">
<p>
<tag name="simple-string">
Смотреть ответ на ютубе: </tag>
<tag name="hyperlink" href="https://www.youtube.com/watch?v=g367zg1P7PM&t=502s">
https://www.youtube.com/watch?v=g367zg1P7PM&amp;</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
kosmosnash. #4475 27.Июн.16 01:12:06: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=180&prc=25&Itemid=57#p24255">
вопрос по Quest Navigator. Как можно сделать так, чтобы при разворачивании окна и (или) при изменении его размера сама игра тоже разворачивалась?</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Deagle. #4838 08.Янв.17 18:31:12: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=194&prc=25&Itemid=57#p25056">
А где в quest navigator править размер окна с игрой.</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
<header anchor="link_22_10" head-level="h6">
<p>
22.10.  Как выполнить JavaScript прямо из кода QSP?</p>
</header>
<segment segment-class="for-head">
<p>
<tag name="simple-string">
Смотреть ответ на ютубе: </tag>
<tag name="hyperlink" href="https://www.youtube.com/watch?v=g367zg1P7PM&t=763s">
https://www.youtube.com/watch?v=g367zg1P7PM&amp;</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
cleep. #5106 04.Июл.17 10:26:14: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=205&prc=25&Itemid=57#p25969">
Получается, что Quest Navigator поддерживает возможность включения Javascript-ов прямо в игре?</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
NickoAilus. #5364 10.Авг.18 16:31:18: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=215&prc=25&Itemid=57#p26826">
Есть ли тут знатоки Навигатора? Можно ли выполнять в нём запросы к JS? Можно ли заставить js-функцию возвращать нужное значение так, чтобы QSP его принял?</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\951_kak_podkljuchit__svoj_shrift_0033.txt-light">
<header anchor="faq_22_02" head-level="h2">
<p>
22.2. Как подключить свой шрифт к игре?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В: Как подключить свой шрифт к игре?
</p>
<p>
О:
</p>
<p>
Это делается через CSS. Используйте правило `@font-face`, чтобы импортировать шрифт в игру.
</p>
<p>
В файле "game.css" вашего шаблона пропишите подобное правило:
</p>
</segment>
<code code-left-level="4" code-type="css">
@font-face {
<br/>    font-family:Versus New; /* Устанавливаем имя шрифта */
<br/>    src:url(fonts/versus-new.ttf); /* Указываем путь к файлу со шрифтом */
<br/>}
</code>
<segment>
<p>
Применить шрифт можно, назначив стиль:
</p>
</segment>
<code code-left-level="4" code-type="css">
p {
<br/>    font-family:"Versus New"; /* применяем шрифт к абзацам */
<br/>}
</code>
<segment>
<p>
`src:url();` — это ссылка на файл шрифта. Ваш файл шрифта должен лежать на уровне файла "game.css" вашего шаблона, или во вложенной папке. Соответственно указываем относительный путь — относительно файла "game.css".
</p>
<p>
P.S.: К сожалению, данный способ по факту работает только в стандалон-сборке. А ещё придётся поэкспериментировать с форматом шрифта, так как замечено, что Навигатор не справляется с truetype-шрифтами, но неплохо ест opentype ttf и woff. Поэтому, если вы заметили, что ваш шрифт не работает в Навигаторе, попробуйте сконвертировать его в другие форматы и подключить их.
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\952_kak_izmenit__tsvet_fona_0034.txt-light">
<header anchor="faq_22_03" head-level="h2">
<p>
22.3. Пишу `bcolor=rgb(255,200,200)`, но это не меняет цвет фона игры. Как изменить цвет фона из кода QSP?</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
В: Пишу `bcolor=rgb(255,200,200)`, но это не меняет цвет фона игры. Как изменить цвет фона из кода QSP?
</p>
<p>
О:
</p>
<p>
Для этого придётся запустить JavaScript прямо из кода, используя специальный оператор `EXEC`:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
EXEC('JS:document.body.style.backgroundColor="#RRGGBB";')
</code>
<segment>
<p>
В качестве аргумента данному оператору передаётся строка текста. Левая часть — до двоеточия — показывает на тип выполняемой инструкции JS — JavaScript. Правая часть — после двоеточия — непосредственно инструкция на JavaScript, которая присваивает элементу `document.body` соответствующий цвет фона.
</p>
<p>
Вместо "#RRGGBB" необходимо указать цветовой код в шестнадцатеричной системе счисления, формата RGB.
</p>
<p>
Таким же образом можно менять цвет фона других элементов страницы прямо из кода QSP.
</p>
</segment>
</segment>
<header head-level="h3" anchor="pereneseno-iz-faq">
<p>
Перенесено из FAQ</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Чтобы изменить цвет фона в Quest Navigator, необходимо воспользоваться вот такой командой:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
EXEC('JS:document.body.style.backgroundColor="#RRGGBB";')
</code>
<segment>
<p>
, где вместо RR, GG и BB необходимо вписать красную, зелёную и синюю составляющую цвета в шестнадцатеричном формате. Например:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
! фон чёрного цвета
<br/>EXEC('JS:document.body.style.backgroundColor="#000000";')
<br/>! фон белого цвета
<br/>EXEC('JS:document.body.style.backgroundColor="#ffffff";')
<br/>! фон красного цвета
<br/>EXEC('JS:document.body.style.backgroundColor="#ff0000";')
<br/>! фон оранжевого цвета
<br/>EXEC('JS:document.body.style.backgroundColor="#ff8200";')
</code>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\953_izmenit__kursor_0035.txt-light">
<header anchor="faq_22_04" head-level="h2">
<p>
22.4. Хочу прописать игре собственный вид курсора, как это сделать?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В: Хочу прописать игре собственный вид курсора, как это сделать?
</p>
<p>
О:
</p>
<p>
Это можно сделать двумя способами. В файле "game.css" своего шаблона пропишите отдельный стиль для курсора:
</p>
</segment>
<code code-left-level="0" code-type="css">
.intCur {cursor: url(путь к файлу курсора/cursor.ani);}
</code>
<segment>
<p>
Путь до файла курсора нужно указывать относительно файла "game.css", то есть файл курсора (в данном примере "cursor.ani") должен лежать на одном уровне с файлом "game.css", либо во вложенной папке. Чтобы применить стиль курсора в своей игре, используйте класс:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
*pl "&lt;p class='intCur'&gt;Текст, при наведении на который курсор будет меняться на другой.&lt;/p&gt;"
</code>
<segment>
<p>
Второй способ — это прописать стиль курсора через атрибут style прямо в игре:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
*pl "&lt;p style='cursor: url('/путь к файлу курсора/cursor.ani');'&gt;Текст, при наведении на который курсор будет меняться на твой&lt;/p&gt;"
</code>
<segment>
<p>
В этом случае файл курсора должен лежать на одном уровне с игрой или во вложенной папке, и путь до файла курсора указывается относительно файла игры.
</p>
<p>
Примечание: твёрдого убеждения, что это будет работать у меня нет, я не проверял. Если есть уточнения по любому из этих способов пишите на `aleksversus@mail.ru`.
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\954_nastrojka_shablona_0036.txt-light">
<segment segment-class="for-soh">
<header anchor="faq_22_05" head-level="h2">
<p>
22.5. Скопировал шаблон оформления в папку со своей игрой, но что с ним теперь делать?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В: Скопировал шаблон оформления в папку со своей игрой, но что с ним теперь делать? Не пойму, что за что отвечает.
</p>
<p>
О:
</p>
<p>
!!! Ниже "Quest Navigator" называется просто Навигатором. Редактировать будем шаблон "default", предварительно скопированный в папку с игрой. Под словом "окно" далее понимается то, что понималось под словом окно в Классическом плеере, то есть визуальные блоки основного и дополнительного описаний, предметов и действий, а так же строка ввода. Непосредственно окно плеера, чтобы не путаться, будем называть страницей по аналогии со страницей в браузере.
</p>
<p>
/*
</p>
<p>
! в данной редакции (заголовки позволяют проследить на каких уровнях вложенности находятся блоки): 
</p>
<p>
! ==HEAD== заголовок первого уровня
</p>
<p>
! =head= заголовок второго уровня
</p>
<p>
! --head-- заголовок третьего уровня
</p>
<p>
! -head- заголовок четвёртого уровня
</p>
<p>
! ++head++ заголовок пятого уровня
</p>
<p>
! +head+ заголовок шестого уровня и ниже
</p>
<p>
*/
</p>
<p>
Чтобы отредактировать оформление игры, вам потребуется переработать два основных файла шаблона:
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
gameAwesomium.html</p>
</segment>
<segment name="li">
<p>
skins/game.css</p>
</segment>
</list>
<segment>
<p>
Давайте пробежимся по ключевым моментам, чтобы понять, что к чему.
</p>
<p>
Во-первых, чтобы наглядно видеть, где что располагается в вашем шаблоне, откройте в Quest Navigator такую игру, в которой есть вывод во все четыре окна: основного, дополнительного описаний, в окно предметов и в окно действий. Ещё не мешало бы, чтобы в этой игре можно было вызывать различные диалоговые окна, вроде пользовательского меню, окон `msg`, `$input` и других.
</p>
<p>
Откройте "gameAwesomium.html" в любом текстовом редакторе, а лучше в редакторе с подсветкой кода, например в SublimeText.
</p>
<p>
<tag name="simple-string">
/</tag>
<tag name="italic">
 В этом файле встречается заголовок первого уровня, но рассматривать его нужно не как заголовок первого уровня, а как более низкие заголовки, а для HTML-разметки, как сипсок. Поэтому здесь мы вынуждены пойти на хитрость и выделить данный фрагмент, как отдельную секцию </tag>
<tag name="simple-string">
/
</tag>
</p>
</segment>
</segment>
</segment>
<segment segment-class="for-soh">
<header head-level="h1" anchor="head">
<p>
HEAD</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">

</segment>
<header head-level="h4" anchor="podkliuchenie-css">
<p>
Подключение CSS</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В блоке "&lt;head&gt;...&lt;/head&gt;" вы увидите вот такую строку:
</p>
</segment>
<code code-left-level="4" code-type="html">
&lt;link type="text/css" href="skins/game.css" rel="stylesheet" /&gt;
</code>
<segment>
<p>
Как вы понимаете, это ссылка на таблицу стилей, которая используется в вашей игре. Вы можете добавить собственные файлы ".css", разместив их в той же папке "skins", например, или в любой другой папке на одном уровне с "gameAwesomium.html" или ниже, и прописать подобную ссылку на таблицу стилей. Например, я создал папку "avscss" и разместил в ней файл собственных стилей "coolstyle.css", значит мне нужно прописать в блоке "&lt;head&gt; ... &lt;/head&gt;" такую строчку:
</p>
</segment>
<code code-left-level="4" code-type="html">
&lt;link type="text/css" href="avscss/coolstyle.css" rel="stylesheet" /&gt;
</code>
<segment>
<p>
Вы можете (и будете) свободно редактировать файл "skins/game.css", вносить свои стили в него, это никак не запрещается.
</p>
</segment>
</segment>
<header head-level="h4" anchor="podkliuchenie-skriptov">
<p>
Подключение скриптов</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Далее идут строки, подгружающие JavaScript-файлы:
</p>
</segment>
<code code-left-level="4" code-type="html">
&lt;script type="text/javascript" src="../qsplib/js/core.js"&gt;&lt;/script&gt;
<br/>&lt;script type="text/javascript" src="../qsplib/js/coreAwesomium.js"&gt;&lt;/script&gt;
<br/>&lt;script type="text/javascript" src="../qsplib/js/QspLibAwesomium.js"&gt;&lt;/script&gt;
<br/>&lt;script type="text/javascript" src="../qsplib/js/api.js"&gt;&lt;/script&gt;
<br/>&lt;script type="text/javascript" src="../standalone_content/skins/js/game.js"&gt;&lt;/script&gt;
</code>
<segment>
<p>
Не изменяйте и не удаляйте данные строки, если не знаете в точности, что за что отвечает. Так же не меняйте порядок строк, ведь скрипты выполняются последовательно.
</p>
<p>
Чтобы добавить собственный файл скриптов, разместите его рядом с файлом "gameAwesomium.html" или во вложенной папке, и пропишите относительный путь в подобной строке. Например, я создал папку "avsscripts" и поместил в неё файл "alert.js", значит мне нужно добавить к строкам выше такую строку:
</p>
</segment>
<code code-left-level="4" code-type="html">
&lt;script type="text/javascript" src="avsscripts/alert.js"&gt;&lt;/script&gt;
</code>
<segment>
<p>
Сейчас мы не будем править скрипты, или писать свои. Приведённая информация только для ознакомления. Если вы не знакомы с JavaScript, пока эту часть лучше не трогать.
</p>
</segment>
</segment>
</segment>
</segment>
<segment segment-class="for-soh">
<header head-level="h1" anchor="body">
<p>
BODY</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Переходим к блоку "&lt;body&gt;...&lt;/body&gt;". Для этого блока в "skins/game.css" определены следующие настройки:
</p>
</segment>
<code code-left-level="4" code-type="css">
html, body { height: 100%; margin: 0px; padding: 0px; }
</code>
<segment>
<p>
Данную строку лучше не менять, иначе при вёрстке у вас могут возникнуть проблемы с расположением остальных блоков. А вот строку:
</p>
</segment>
<code code-left-level="4" code-type="css">
body { margin:0;    padding:0; }
</code>
<segment>
<p>
ниже по коду "skins/game.css" можно удалить, так как она частично дублирует предыдущую.
</p>
<p>
В блоке "&lt;body&gt;...&lt;/body&gt;" находится множество блоков div, которые и отвечают за отрисовывание всего оформления игры. Далее вместо того, чтобы произносить целиком "div с id (айди) skin-splashscreen-foreground", мы будем говорить просто "блок skin-splashscreen-foreground", и тому подобное. Поскольку вся оставшаяся часть HTML-кода состоит из блоков div, и так будет понятно, что мы говорим о блоках div.
</p>
</segment>
</segment>
<header head-level="h2" anchor="skin-splashscreen-foreground">
<p>
skin-splashscreen-foreground</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Два основных блока в "body" это "skin-splashscreen-foreground" и "skin-ui-wrapper". И для обоих основные стили прописаны непосредственно в "gameAwesomium.html". Это сделано для того, чтобы данные блоки отображались адекватно стилям ещё при загрузке страницы, даже если "skins/game.css" ещё не загрузился.
</p>
<p>
Если запустить игру в Навигаторе, мы увидим "skin-splashscreen-foreground" на короткое время в виде простого белого экрана, затем он "погаснет", а вместо него отобразится блок "skin-ui-wrapper". Эти два основных блока рекомендую сохранить, они сменяют друг-друга (это происходит за счёт скриптов), создавая привлекательный переход, к тому же "skin-ui-wrapper" содержит все остальные блоки оформления.
</p>
<p>
Непосредственно внутри блока "skin-splashscreen-foreground" вы можете разместить логотип или приветственную надпись, которые появятся на короткое время, сменившись экраном игры. (Рекомендую оставлять основной фон сплэшскрина белым)
</p>
</segment>
</segment>
<header head-level="h2" anchor="skin-ui-wrapper">
<p>
skin-ui-wrapper</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">

</segment>
<header head-level="h3" anchor="skin-back1">
<p>
skin-back1</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Далее мы будем рассматривать содержимое блока "skin-ui-wrapper". И первый блок, который нам тут встречается, это блок "skin-back1". Он пустой и служит для того, чтобы задавать затенение по краям страницы (а строго говоря он задаёт фон страницы). Все его стили задаются в "skins/game.css", таким образом вы легко можете отредактировать стилистику этого блока, чтобы задать собственную рамку по краям окна, или создать какой либо эффект на фоне, ну или просто удалите этот блок, если подобные эффекты вам не нужны. Удаление блока "skin-back1" не повлияет на работоспособность игры.
</p>
</segment>
</segment>
<header head-level="h3" anchor="skin-page">
<p>
skin-page</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Следующий блок — это блок "skin-page". Собственно это вся страница целиком, где размещены блоки окон основного, дополнительного описаний, окна предметов, действий и строки ввода. Нет явных скриптов, которые работают с блоком "skin-page", однако удалять его не рекомендуется. Особенностью данного блока является то, что он перекрывает собой блок "skin-back1" (оно и понятно, ведь для отрисовки фона страницы используется именно "skin-back1"). Поэтому, если вы стилизуете "skin-page" каким-нибудь фоном, этот фон перекроет видимость блока "skin-back1".
</p>
</segment>
</segment>
<header head-level="h4" anchor="skin-back2">
<p>
skin-back2</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В "skin-page" находится следующий блок, который мы рассмотрим, это блок "skin-back2". Это блок так называемого вторичного фона. Он снова растянут по всей ширине и высоте блока "skin-page", поэтому если поставить ему на фон сплошной цвет, это скроет видимость блока "skin-back1". Блок "skin-back2" нужен, чтобы отрисовать вертикальные полоски по краям окна в шаблоне "default". Если вы просто уберёте этот блок, функциональность игры не пострадает.
</p>
</segment>
</segment>
<header head-level="h4" anchor="skin-top-menu-wrapper">
<p>
skin-top-menu-wrapper</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Следующий за "skin-back2" блок — это блок "skin-top-menu-wrapper", который отвечает за включение верхнего меню. Верхнее меню — это полоска с кнопками управления игрой и включения/выключения звука. Эта полоска появляется в двух случаях:
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<segment>
<p>
если отключено окно предметов. Тогда стили блоку "skin-top-menu-wrapper" можно задавать через строку:</p>
</segment>
<code code-left-level="12" code-type="css">
body:not(.cover):not(.objs-visible) #skin-top-menu-wrapper
</code>
</segment>
<segment name="li">
<segment>
<p>
если размер страницы меньше 481px. Тогда стили блоку "skin-top-menu-wrapper" можно задавать через строку:</p>
</segment>
<code code-left-level="12" code-type="css">
body:not(.cover) #skin-top-menu-wrapper
</code>
</segment>
</list>
<segment>
<p>
Само собой вы можете написать общий стиль для обоих вариантов отображения.
</p>
<p>
Блок "skin-top-menu-wrapper" выводится со свойством "display:table;", а вложенные блоки соответсвенно со свойствами "display:table-row;" и "display:table-cell;". Это сделано для того, чтобы обеспечить соответствующее выравнивание элементов внутри блоков.
</p>
</segment>
</segment>
<header head-level="h5" anchor="skin-top-menu-row-skin-user1-skin-user2">
<p>
skin-top-menu-row, skin-user1, skin-user2</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Вложенный блок "skin-top-menu-row" нужен исключительно для того, чтобы создать аналог табличной строки, хотя и его вы можете стилизовать.
</p>
<p>
Блоки "skin-user1" и "skin-user2" играют роль ячеек таблицы и в "skins/game.css" стилизованы по минимуму.
</p>
</segment>
</segment>
<header head-level="h6" anchor="skin-user1-inner-skin-inv-toggle-skin-inv-caption">
<p>
skin-user1-inner, skin-inv-toggle, skin-inv-caption</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Блок "skin-user1-inner" служит контейнером для двух нижележащих блоков, обёрнутых в одну гиперссылку. Вспомогательный блок для размещения вложенных блоков в одну линию.
</p>
<p>
Нижележащие блоки, обёрнутые в ссылку — это блоки "skin-inv-toggle" и "skin-inv-caption", они располагаются в одну линию благодаря свойству "dysplay:inline-block;". При щелчке по любому из этих блоков выполняется JavaScript из гиперссылки:
</p>
</segment>
<code code-left-level="4" code-type="js">
skinToggleInv();
</code>
<segment>
<p>
Данную функцию вы можете найти в файле "skins/js/game.js", она отвечает за плавное появление и пропадание окна с предметами, когда мы щёлкаем по слову инвентарь. Само собой размер страницы должен быть 480px и меньше.
</p>
</segment>
</segment>
<header head-level="h6" anchor="skin-user-system-skin-user-music">
<p>
skin-user-system, skin-user-music</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В блоке "skin-user2" располагаются два блока "skin-user-system" и "skin-user-music", которые соответственно отвечают за отображение кнопок "управление игрой" ("меню плеера") и "управление музыкой". Блок "skin-user2" отображается даже когда страница больше 480 пикселей шириной. Если удалить этот блок, оставив только кнопки, кнопки сместятся в правый верхний угол и "провалятся" под слой, станут некликабельными, пока размер страницы превышает 480 пикселей.
</p>
</segment>
</segment>
</segment>
</segment>
<header head-level="h4" anchor="skin-right-column">
<p>
skin-right-column</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Блок "skin-right-column" занимает 30% от ширины страницы с правой стороны (при ширине страницы больше 480 пикселей). В этом блоке размещается окно предметов, а так же блок "skin-user2" (внизу), когда ширина страницы больше 480 пикселей.
</p>
</segment>
</segment>
<header head-level="h5" anchor="skin-right-column-background">
<p>
skin-right-column-background</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В блоке "skin-right-column", по аналогии со "skin-page", находится блок, создающий фон под блоком окна предметов, это блок "skin-right-column-background". Он отображается только при ширине страницы более 480 пикселей и включённом окне предметов.
</p>
</segment>
</segment>
<header head-level="h5" anchor="qsp-wrapper-objs">
<p>
qsp-wrapper-objs</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Следующий блок "qsp-wrapper-objs" является уже непосредственно блоком окна предметов. Он отображается и при ширине окна 480 пикселей, и выше, только меняет своё местоположение. Этот блок связан с различными скриптами, которые создают полосу прокрутки в окне предметов.
</p>
</segment>
</segment>
<header head-level="h6" anchor="qsp-scroller-objs-skin-inv-wrapper-skin-inv-top-qsp-inv">
<p>
qsp-scroller-objs, skin-inv-wrapper, skin-inv-top, qsp-inv</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Блок "qsp-scroller-objs" вложен в предыдущий и технически нужен для создания полосы прокрутки в окне предметов. Этот блок связан со скриптами полосы прокрутки. Следующий блок — блок "skin-inv-wrapper" — отвечает как раз за отображение предметов при изменении расширения. Именно с этим блоком работает скрипт, когда страница меньше 481 пикселя шириной, и мы щёлкаем по кнопке "Инвентарь".
</p>
<p>
В "skin-inv-wrapper" вложены два блока. "skin-inv-top" — декоративный блок, разграничивающий кнопку инвентаря и окно предметов при ширине страницы меньше 481 пикселя. А вот "qsp-inv" — очень важный блок. Именно в этот блок, при его наличии, Quest Navigator отправляет список предметов. Если вы планируете использовать окно предметов, удалять этот блок нельзя, а лучше сохранить все блоки вложенные в "qsp-wrapper-objs".
</p>
</segment>
</segment>
</segment>
</segment>
<header head-level="h4" anchor="skin-left-column">
<p>
skin-left-column</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Блок "skin-right-column" занимает 70% от ширины страницы с левой стороны (при ширине страницы больше 480 пикселей). В этом блоке размещаются: окно дополнительного описания, окно основного описания и окно действий. А так же разные вспомогательные блоки.
</p>
</segment>
</segment>
<header head-level="h5" anchor="skin-inv-bottom">
<p>
skin-inv-bottom</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Блок "skin-inv-bottom" — декоративный блок, нижняя горизонтальная полоска инвентаря, когда ширина страницы не превышает 480 пикселей. Эта полоска видна и когда инвентарь раскрыт, и когда он свёрнут.
</p>
</segment>
</segment>
<header head-level="h5" anchor="skin-wrapper-main-outer-qsp-wrapper-main-qsp-scroller-main">
<p>
skin-wrapper-main-outer, qsp-wrapper-main, qsp-scroller-main</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Блок "skin-wrapper-main-outer" является внешним контейнером для блоков всех окон (дополнительного и основного описания и действий). В него вложены блоки "qsp-wrapper-main" и "qsp-scroller-main", на основе которых построен скрипт, иммитирующий ios-подобный скроллбар.
</p>
<p>
А уже здесь размещены блоки:
</p>
</segment>
</segment>
<header head-level="h6" anchor="qsp-view">
<p>
qsp-view</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
"qsp-view" — отвечает за отображение окна предпросмотра (оператор `view`). [С этим блоком работают скрипты в api.js, однако его удаление не меняет функциональности оператора `view`.]
</p>
</segment>
</segment>
<header head-level="h6" anchor="qsp-vars">
<p>
qsp-vars</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
"qsp-vars" — отвечает за отображение окна дополнительного описания. В дефолтном шаблоне это окно отображается выше окна основного описания
</p>
</segment>
</segment>
<header head-level="h6" anchor="qsp-main">
<p>
qsp-main</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
"qsp-main" — отвечает за отображение окна основного описания. Этот блок нельзя удалять, однако вы можете вполне свободно стилизовать и настраивать его.
</p>
</segment>
</segment>
<header head-level="h6" anchor="qsp-acts">
<p>
qsp-acts</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
"qsp-acts" — отвечает за отображение окна действий.
</p>
</segment>
</segment>
</segment>
<header head-level="h5" anchor="qsp-input-line">
<p>
qsp-input-line</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Блок "qsp-input-line", а так же вложенные в него блоки, нужны для отображения и стилизации строки ввода, реализованной через поле "&lt;input&gt;".
</p>
</segment>
</segment>
</segment>
</segment>
</segment>
<header head-level="h2" anchor="dialogovye-okna">
<p>
Диалоговые окна</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Блоки диалоговых окон располагаются ниже блока "skin-page", чтобы при выведении на экран блоки диалоговых окон перекрывали блок "skin-page". Структура у всех диалоговых окон похожа, поэтому мы не будем подробно разбирать эти блоки.
</p>
</segment>
</segment>
<header head-level="h3" anchor="qsp-dialog-msg">
<p>
qsp-dialog-msg</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Блок "qsp-dialog-msg" служит для вывода на экран диалогового окна при выполнении оператора msg.
</p>
</segment>
</segment>
<header head-level="h3" anchor="qsp-dialog-input">
<p>
qsp-dialog-input</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Блок "qsp-dialog-input" служит для вывода на экран диалогового окна с полем ввода при выполнении функции $input.
</p>
</segment>
</segment>
<header head-level="h3" anchor="qsp-dialog-system-menu">
<p>
qsp-dialog-system-menu</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Блок "qsp-dialog-system-menu" служит для вывода на экран диалогового окна меню управления игрой. Это пункты "Загрузить|Сохранить|Заново|Другие игры".
</p>
</segment>
</segment>
<header head-level="h3" anchor="qsp-dialog-save-slots">
<p>
qsp-dialog-save-slots</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Блок "qsp-dialog-save-slots" служит для вывода диалогового окна со слотами сохранения.
</p>
</segment>
</segment>
<header head-level="h3" anchor="qsp-dialog-user-menu">
<p>
qsp-dialog-user-menu</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Блок "qsp-dialog-user-menu" отвечает за вывод всплывающего меню при выполнении оператора menu.
</p>
</segment>
</segment>
<header head-level="h3" anchor="qsp-dialog-view">
<p>
qsp-dialog-view</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Блок "qsp-dialog-view" отвечает за вывод блока с изображением (оператор view).
</p>
</segment>
</segment>
<header head-level="h3" anchor="qsp-dialog-error">
<p>
qsp-dialog-error</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Блок "qsp-dialog-error" отвечает за вывод сообщений об ошибках в коде QSP.
</p>
</segment>
</segment>
</segment>
</segment>
</segment>
<segment segment-class="for-soh">
<header head-level="h6" anchor="ps">
<p>
P.S.</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Такова в общих чертах структура шаблона "default". О том, как поставить шаблон оформления на свою игру читайте в соответствующем разделе </tag>
<tag name="hyperlink" href="#faq_22_01">
"шаблоны оформления для игр"</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
Вы можете перерабатывать и стилизовать шаблон по своему желанию и усмотрению, но делайте это постепенно, тестируя каждый изменённый кусочек. Я по очереди отключал и стилизовал блоки, когда подгонял шаблон для нужд "Вереницы миров", пока не добился нужного поведения. Необходимо учитывать поведение шаблона вместе со скриптами.
</p>
<p>
Так же вы можете перенести частично блоки из шаблона в код QSP. Их само собой можно будет выводить либо в основном либо в дополнительном описании, и вести себя они будут несколько иначе, чем если прописаны заранее в шаблоне, однако и так делать можно. Можно в принципе отказаться от всех окон, кроме окна основного описания, растянуть это окно на всю ширину страницы, и прямо из кода QSP формировать собственную разметку, причём эта разметка может всякий раз отличаться.
</p>
<p>
Возможностей море, если вы хорошо владеете HTML и CSS. Работа с JavaScript вам понадобится только тогда, когда вы захотите навешать на игру дополнительные функции, например различные горячие клавиши, управление с клавиатуры в принципе, анимации и т.д.
</p>
<p>
Quest Navigator в отличие от Классического плеера позволяет делать адаптивную вёрстку, то есть вёрстку подстраивающуюся под конкретное окно, а значит вы можете написать именно такую вёрстку, какая вам нужна и не беспокоиться о возможных отличиях в размере дисплеев, окон и т.д.
</p>
</segment>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\955_proverka_pleera_0037.txt-light">
<header anchor="faq_22_06" head-level="h2">
<p>
22.6. Как узнать, на каком плеере запущена игра: на классическом QSP, или на Quest Navigator?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В: Как узнать, на каком плеере запущена игра: на классическом QSP, или на Quest Navigator?
</p>
<p>
О:
</p>
<p>
На данный момент существует только костыльный способ, предложенный `newsash`:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
t=1
<br/>tort=0
<br/>if t _
<br/>    or _
<br/>    t:
<br/>    "Игра запущена на Quest Navigator"
<br/>else
<br/>    "Игра запущена на Классике"
<br/>end
</code>
<segment>
<p>
Данный способ работает благодаря разнице в интерпретации однострочной команды, разбитой на несколько строк.
</p>
<p>
В классическом плеере оператору условия передаётся имя переменной `tort`, тогда как в Quest Navigator это выражение
</p>
</segment>
<code code-left-level="4" code-type="qsp">
t or t
</code>
<segment>
<p>
, результат которого равен 1.
</p>
<p>
В самом Quest Navigator есть встроенная функция `$GETPLAYER`, которая позволяет получить название плеера, на котором запущена игра:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
$GETPLAYER("player")
</code>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\956_video_0038.txt-light">
<header anchor="faq_22_07" head-level="h2">
<p>
22.7. Как вставить видео в игру на Навигаторе?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В: Как вставить видео в игру на Навигаторе?
</p>
<p>
О:
</p>
<p>
<tag name="simple-string">
ВНИМАНИЕ!!! Перед прочтением нижеследующего текста рекомендуется ознакомиться с разделами </tag>
<tag name="hyperlink" href="#faq_22_01">
22.1. Шаблоны оформления для игр</tag>
<tag name="simple-string">
 и </tag>
<tag name="hyperlink" href="#faq_22_08">
"22.8. Stand-Alone сборка на Навигаторе"</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
ВНИМАНИЕ!!! Видео формата `mp4` не воспроизводятся в Навигаторе!
</p>
<p>
<tag name="simple-string">
Изначально заявлено, что Quest Navigator умеет воспроизводить видео, как обычный браузер (как это делается в браузере можно прочитать на сайте </tag>
<tag name="hyperlink" href="http://htmlbook.ru/html/video">
htmlbook.ru</tag>
<tag name="simple-string">
).
</tag>
</p>
<p>
Мы ожидаем, что вставка видео в игру мало чем будет отличаться от вставки изображений, поэтому, чтобы вставить видео в свою игру, мы пытаемся сделать следующее:
</p>
</segment>
<list list-type="ol-list">
<segment name="li">
<p>
Положить видеофайл в папку с игрой, или во вложенную папку.</p>
</segment>
<segment name="li">
<p>
Прописать в игре контейнер для видео с помощью тегов `&lt;video&gt;` и `&lt;source&gt;`.</p>
</segment>
</list>
<segment>
<p>
В первую очередь давайте рассмотрим второй пункт, ведь именно теги `&lt;video&gt;` и `&lt;source&gt;` выводят видео в нашей игре.
</p>
<p>
Тег `&lt;video&gt;` по сути представляет собой контейнер, внутри которого перечисляются источники, из которых браузер (а в нашем случае плеер) будет подгружать видеофайл. В общем виде в Quest Navigator видео в игру мы вставляем так:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
! открываем контейнер VIDEO
<br/>*p "&lt;video autoplay loop width='500px'&gt;"
<br/>    ! указываем источники видео, то есть пути к файлам в тегах SOURCE
<br/>    *p "&lt;source src='video/GeneveDrive.ogg' type='video/ogg;'&gt;"
<br/>    *p "&lt;source src='video/GeneveDrive.webm' type='video/webm;'&gt;"
<br/>! закрываем контейнер VIDEO
<br/>*pl "&lt;/video&gt;"
</code>
<segment>
<p>
Мы указываем несколько источников на случай, если один не будет воспроизводиться. Однако, это не обязательно. Quest Navigator прекрасно воспроизводит webM, поэтому достаточно использовать только один файл видео формата webM и только один источник соответственно в коде HTML.
</p>
<p>
Вот вроде бы и всё. В тегах `&lt;source&gt;` прописаны относительные пути, согласно первому пункту мы кладём в папку с игрой папку "video", в неё помещаем наши видеофайлы и ожидаем, что Quest Navigator будет эти видеофайлы воспроизводить. Однако данный способ не сработает. Вместо непосредственно видео мы увидим чёрный прямоугольник и (возможно) кнопки управления.
</p>
<p>
К сожалению, нам недостаточно просто положить видео в папку с игрой, Quest Navigator не будет его воспроизводить.
</p>
<p>
Мы можем указать абсолютный путь к видео, и тогда видео появится в Quest Navigator:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
*p "&lt;video autoplay loop width='500'&gt;"
<br/>    *p "&lt;source src='D:/QSPgames/myCoolGame/video/GeneveDrive.webm' type='video/webm;'&gt;"
<br/>*pl "&lt;/video&gt;"
</code>
<segment>
<p>
Однако этот вариант нам не подходит, ведь у каждого игрока игра будет лежать в разных местах на компьютере. Нам нужен вариант, когда мы можем свободно раздавать копии игры, не заботясь о путях. И к сожалению, это возможно только если мы будем распространять нашу игру в виде Standalone-сборки.
</p>
<p>
Тогда, поскольку наша игра будет располагаться относительно плеера по пути "assets\standalone_content\start.qsp", мы сможем размещать в папке "standalone_content" или во вложенных в неё папках наши видео и вызывать их из игры, когда захотим, используя относительные пути:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
*p "&lt;video autoplay loop width='500'&gt;"
<br/>    *p "&lt;source src='video/GeneveDrive.webm' type='video/webm;'&gt;"
<br/>*pl "&lt;/video&gt;"
</code>
<segment>
<p>
<tag name="simple-string">
Подробнее о том, как создавать Standalone-сборки игры для Quest Navigator читайте в разделе </tag>
<tag name="hyperlink" href="#faq_22_08">
"22.8. Как делать standalone-сборку на Навигаторе?"</tag>
<tag name="simple-string">
.
</tag>
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\957_standalone_0039.txt-light">
<header anchor="faq_22_08" head-level="h2">
<p>
22.8. Как делать standalone-сборку на Навигаторе?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В: Как делать standalone-сборку на Навигаторе?
</p>
<p>
	Независимая сборка на Quest Navigator
</p>
<p>
О:
</p>
<p>
! статья на QSP-wiki устарела 
</p>
<p>
<tag name="simple-string">
Нижеследующая инструкция будет актуальна, если вы уже начали разработку игры (или же закончили) и настроили шаблон оформления. В противном случае рекомендую создать шаблон оформления для игры по инструкции из раздела </tag>
<tag name="hyperlink" href="#faq_22_01">
"шаблоны оформления для игр"</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
Итак, у нас есть папка с игрой, которая называется, например, "myCoolGame", и в этой папке лежат:
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
файл игры (имя может быть любым, расширение ".qsp");</p>
</segment>
<segment name="li">
<p>
файл шаблона "gameAwesomium.html";</p>
</segment>
<segment name="li">
<p>
папка "skins" с содержимым;</p>
</segment>
<segment name="li">
<p>
файл "config.xml" (если нужен);</p>
</segment>
<segment name="li">
<p>
другие файлы и папки (кроме файлов с расширением ".qsp", такой файл должен быть только один. Если у вас несколько таких файлов, удалите те, которые не используются в игре, а те, которые подключаются с помощью команды "inclib", разместите в одной из вложенных папок).</p>
</segment>
</list>
<list list-type="ol-list">
<segment name="li">
<p>
Найдите на компьютере папку, в которую установлен Quest Navigator. Как правило она лежит по пути "C:\Program Files (x86)\QSP" (или "C:\Program Files\QSP" для 32-битных ОС) и называется "Quest Navigator".</p>
</segment>
<segment name="li">
<p>
Полностью скопируйте папку "Quest Navigator" в какое-нибудь другое место на вашем компьютере, например, на рабочий стол.</p>
</segment>
<segment name="li">
<p>
Откройте папку "Quest Navigator", в ней откройте папку "assets", а в ней — "standalone_content".</p>
</segment>
<segment name="li">
<p>
Удалите содержимое папки "standalone_content".</p>
</segment>
<segment name="li">
<p>
Скопируйте содержимое папки с вашей игрой (в нашем примере "myCoolGame") в папку "standalone_content".</p>
</segment>
</list>
<segment>
<p>
Вот и всё. Теперь в папке "Quest Navigator", размещённой на рабочем столе, находится полностью независимая сборка игры. При запуске плеера ("QuestNavigator.exe") из этой папки, ваша игра запустится автоматически. Эту папку можно распространять в виде архива, либо сделать инсталлятор.
</p>
<p>
<tag name="simple-string">
Смотри так же, как отредактировать файл настроек на </tag>
<tag name="hyperlink" href="https://wiki.qsp.org/help:fajl_nastroek_igry_v_quest_navigator">
wiki.qsp.su</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\958_razmer_okna_igry_0040.txt-light">
<header anchor="faq_22_09" head-level="h2">
<p>
22.9. Где в Quest Navigator править размер окна с игрой?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В: Где в Quest Navigator править размер окна с игрой? Например мне надо, чтобы игра изначально открывалась в разрешении 1280х720.
</p>
<p>
О: 
</p>
<p>
Для этого вам потребуется использовать файл настроек "config.xml". За основу можно взять уже существующий файл, который находится в папке с установленным Quest Navigator`ом в подпапке "assets\standalone_content". Скопируйте файл "config.xml" в папку с вашей игрой, откройте любым текстовым редактором и отредактируйте атрибуты.
</p>
<p>
Например, чтобы указать, что ваша игра должна изначально открываться в разрешении 1280х720, необходимо прописать соответствующие атрибуты `width` и `height`:
</p>
</segment>
<code code-left-level="4" code-type="html">
&lt;game title="Моя крутая Игра" resizeable="true" standalone="false" width="1280" height="720"/&gt;
</code>
<segment>
<p>
<tag name="simple-string">
О назначениях атрибутов и о том, какие значения они могут принимать по умолчанию, вы можете прочитать на QSP-wiki: </tag>
<tag name="hyperlink" href="https://wiki.qsp.org/help:fajl_nastroek_igry_v_quest_navigator">
wiki.qsp.su/файл настрое игры для Quest Navigator</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\959_vypolnenie_js_iz_qsp-koda_0041.txt-light">
<header anchor="faq_22_10" head-level="h2">
<p>
22.10. Как выполнить JavaScript прямо из кода QSP?</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В: Как выполнить JavaScript прямо из кода QSP?
</p>
<p>
О:
</p>
<p>
Для этого в QSP предусмотрен специальный оператор `EXEC`. Например, с помощью JavaScript поменяем цвет фона на бирюзовый:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
EXEC('JS:document.body.style.backgroundColor="#000041";')
</code>
<segment>
<p>
В качестве аргумента данному оператору передаётся строка текста. Левая часть — до двоеточия — показывает на тип выполняемой инструкции JS — JavaScript. Правая часть — после двоеточия — непосредственно инструкция на JavaScript, которая присваивает элементу `document.body` соответствующий цвет фона.
</p>
<p>
Подобным образом можно выполнять и другие инструкции JavaScript прямо из кода QSP, однако следует помнить, что JavaScript выполняется только на уровне оформления и никак не влияет на код и состояния самой игры.
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\960_instruktsija_po_smene_oformlenija_iz_koda_igry_0042.txt-light">
<header anchor="faq_22_11" head-level="h2">
<p>
22.11. Инструкция от Nex'а, позволяющая сменить оформление из кода игры</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
$BACKIMAGE в Навигаторе отключен, как и другие переменные оформления. Всё оформление в Навигаторе делается через HTML, CSS и Javascript.
</p>
<p>
Переключение фонов я делаю так.
</p>
</segment>
<list list-type="ol-list">
<segment name="li">
<p>
В CSS прописываю стили для классов элемента `BODY`. Каждому классу соответствует свой фон.</p>
</segment>
<segment name="li">
<p>
В Javascript-файле скина описываю функцию, которая меняет класс `BODY`.</p>
</segment>
<segment name="li">
<p>
В игре, при заходе на локацию, проверяю, какой нужен фон, и вызываю функцию Javascript. В элементе `BODY` меняется класс, а за ним меняется и фон.</p>
</segment>
</list>
<segment>
<p>
Помимо фона, точно таким же образом можно менять и расположение окон, отступы от границ окна и прочие вещи. Это позволяет, например, красиво оформить "обложку" - заглавный экран игры.
</p>
<p>
<tag name="simple-string">
Найти данную инструкцию и много полезных сообщений можно здесь: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=633&p=9&prc=25&Itemid=57#p19887">
Quest Navigator для Windows</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\961_modal_window_0043.txt-light">
<header anchor="faq_22_11" head-level="h2">
<p>
22.11. Модальное окошко с вариантами выбора</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В Quest Navigator Вы можете самостоятельно написать такое окошко, даже не прибегая к помощи JavaScript.
</p>
<p>
Далее следует готовое решение от `evp` с комментариями от `Aleks Versus`.
</p>
<p>
В игре:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
! не забываем включать html
<br/>USEHTML = 1
<br/>! следующая строка заставит плеер обратиться к элементу
<br/>!  с id openModal когда игрок щёлкнет по ссылке
<br/>*nl'&lt;a href="#openModal"&gt;Открыть диалог&lt;/a&gt;'
<br/>! в переменную $life в виде текста вносим код, который
<br/>! должен выполняться при выборе варианта "Жизнь"
<br/>$life = { 
<br/>    *pl 'код, выполняемый при выборе варианта "Жизнь"'
<br/>}
<br/>! соответственно в переменную $money — код, который
<br/>! должен выполняться при выборе варианта "Деньги"
<br/>$money = { 
<br/>    *pl 'код, выполняемый при выборе варианта "Кошелёк"'
<br/>} 
<br/>! выводим на экран "окошко", а вернее блок, стилизованный под окошко, с двумя кнопками
<br/>! общий блок/затенение
<br/>*p '&lt;div class="modalDialog" id="openModal"&gt;'
<br/>    ! окошко
<br/>    *p '&lt;div&gt;' 
<br/>        *p '&lt;p&gt;Жизнь или кошелёк?&lt;/p&gt;' 
<br/>        *p '&lt;button style="float: left;"&gt;&lt;a href="EXEC: dynamic $life"&gt;Жизнь&lt;/a&gt;&lt;/button&gt;' 
<br/>        *p '&lt;button style="float: right;"&gt;&lt;a href="EXEC: dynamic $money"&gt;Кошелёк&lt;/a&gt;&lt;/button&gt;' 
<br/>    *p '&lt;/div&gt;' 
<br/>*pl '&lt;/div&gt;'
</code>
<segment>
<p>
В game.css вашего шаблона:
</p>
</segment>
<code code-left-level="0">
/*
<br/>    данный стиль описывает внешний вид общего блока, играющего в т.ч. роль затенения
<br/>    (обратите внимание, на какую область в вашем шаблоне распространяется затенение)
<br/> */
<br/>.modalDialog { 
<br/>    position: fixed; 
<br/>    top: 0;    right: 0;    bottom: 0; left: 0; 
<br/>    background: hsla(0,0%,0%,0.8); 
<br/>    z-index: 50; /* выводится одним из верхних слоёв */
<br/>    opacity: 0; /* видимость на нуле, чтобы игрок не видел содержимое */
<br/>    -webkit-transition: opacity 400ms ease-in; /* обеспечивает плавное появление */
<br/>    pointer-events: none; /* скрывает блок от курсора мыши */
<br/>} 
<br/>/* 
<br/>    псевдокласс :target применяется к тому элементу
<br/>    к которому обратился браузер/плеер по нажатию на ссылку (по id)
<br/>*/
<br/>.modalDialog:target { 
<br/>    opacity: 1; /* видимость повышается до 100% */
<br/>    pointer-events: auto; /* с блоком снова может работать мышь */
<br/>} 
<br/>/* стилизация дочернего блока, т.е. непосредственно окошка */
<br/>.modalDialog &gt; div { 
<br/>    width: 400px; 
<br/>    position: relative; 
<br/>    margin: 10% auto; 
<br/>    padding: 5px 20px 13px 20px; 
<br/>    border-radius: 10px; 
<br/>    background: #fff; 
<br/>    background: -webkit-linear-gradient(#fff, #b8ecfb); 
<br/>}
</code>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\970_obnovlenie_do_5.7.0_0023.txt-light">
<header anchor="informarch_update570" head-level="h1">
<p>
Обновление QSP (5.7.0) и QGen (4.0.0b)</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
У нас много новостей.
</p>
<p>
Во-первых, QSP 5.7.0:
</p>
</segment>
<list list-type="ol-list">
<segment name="li">
<p>
Новое ключевое слово ELSEIF: теперь можно гораздо удобнее записывать условия со множественным выбором.</p>
</segment>
<segment name="li">
<p>
Новая функция LOC: проверяет существование указанной локации (аналогично OBJ для предметов).</p>
</segment>
<segment name="li">
<p>
Небольшое изменение функции DYNEVAL: теперь она выполняет код, возвращая значение, указанное в переменной RESULT/$RESULT.</p>
</segment>
<segment name="li">
<p>
Новые скобки для динамически исполняемого кода, поддерживающие вложенность.</p>
</segment>
<segment name="li">
<p>
Улучшена нумерация строк для сообщений об ошибках.</p>
</segment>
<segment name="li">
<p>
Улучшения оператора COPYARR: можно указывать начальный индекс и количество элементов для копирования.</p>
</segment>
<segment name="li">
<p>
Восстановлена передача аргументов от GT/XGT в обработчик $ONNEWLOC.</p>
</segment>
<segment name="li">
<p>
Кеширование операторов (фактически, частичная прекомпиляция кода).</p>
</segment>
<segment name="li">
<p>
Содержимое буфера обмена сохраняется при закрытии плеера.</p>
</segment>
<segment name="li">
<p>
Перевод интерфейса на немецкий.</p>
</segment>
</list>
<segment>
<p>
Также выпущена первая бета-версия QGen. По сравнению с последней альфа-версией:
</p>
</segment>
<list list-type="ol-list">
<segment name="li">
<p>
Улучшена стабильность работы.</p>
</segment>
<segment name="li">
<p>
Добавлена мультиязычность (пока что русский/английский).</p>
</segment>
<segment name="li">
<p>
Ключевые слова и краткие подсказки вынесены во внешний xml-файл.</p>
</segment>
<segment name="li">
<p>
Поддержка изменений в QSP 5.7.0</p>
</segment>
</list>
<segment>
<p>
Обновлен TXT2GAM: поддержка изменений в QSP 5.7.0
</p>
<p>
Улучшена справка по AeroQSP: https://qsp.org/misc/aero/help.htm
</p>
<p>
<tag name="simple-string">
Скачать всё можно на странице </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_content&view=article&id=57&Itemid=56">
"Разработчикам"</tag>
<tag name="simple-string">
. 
</tag>
</p>
<p>
Автор: `BYTE`
</p>
<p>
13.06.2010 22:39
</p>
<p>
Оригинал статьи: https://qsp.org/index.php?option=com_content&amp;view=article&amp;id=103&amp;catid=42</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\981_aeroqsp_0024.txt-light">
<header anchor="informarch_aeroqsp_wtfit" head-level="h1">
<p>
AeroQSP</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
`AeroQSP` - специальная версия плеера QSP на технологии Flash, позволяющая играть и локально, и в браузере.
</p>
<p>
<tag name="simple-string">
Отличия от </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_content&view=article&id=64&Itemid=56">
классической версии</tag>
<tag name="simple-string">
 плеера:
</tag>
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
Расширенные возможности графического оформления</p>
</segment>
<segment name="li">
<p>
Возможность играть в браузере</p>
</segment>
</list>
<segment>
<p>
<tag name="simple-string">
Проигрыватель AeroQSP для Windows: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_content&view=article&id=64&Itemid=56">
AeroQSP Shell</tag>
<tag name="simple-string">

</tag>
</p>
<p>
Исходный код: http://svn2.assembla.com/svn/qsp/trunk
</p>
<p>
Справка по AeroQSP: https://qsp.org/misc/aero/help.htm
</p>
<p>
Инструкция по использованию AeroQSP: https://qsp.org/misc/aero/readme.txt
</p>
<p>
<tag name="simple-string">
Тема для вопросов на форуме: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=14&Itemid=57">
AeroQSP: вопросы</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Набор шрифтов специально для разработки в AeroQSP: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=328&Itemid=57">
Набор swf-шрифтов и утилита для их тестирования</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Пакет для сборки stand-alone версий игр на AeroQSP: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_content&view=article&id=117&Itemid=56">
Stand-alone сборка игр на AeroQSP</tag>
<tag name="simple-string">

</tag>
</p>
<p>
Скриншот из игры "Город туманов":
</p>
<tag name="image" src="https://i.ibb.co/GFhTndG/cityofmist.png">
</tag>
<p>
Автор: `BYTE`
</p>
<p>
30.05.2011 22:21
</p>
</segment>
</segment>
<header head-level="h4" anchor="primechanie-aleks-versus">
<p>
Примечание Aleks Versus:</p>
</header>
<segment segment-class="for-head">
<quote>
<p>
<tag name="simple-string">
AeroQSP — плеер, работающий на устаревшей и отжившей своё технологии Flash. Adobe прекратила поддержку данной технологии, что означает, что AeroQSP стало невозможно использовать. Игры AeroQSP можно пробовать запустить на </tag>
<tag name="hyperlink" href="https://aleksversus.github.io/howdo_faq/articles/qspider_0004#qspider_0120">
qSpider</tag>
<tag name="simple-string">
, но это так же потребует танцев с бубнами. Лучше писать игры сразу для qSpider, не уповая на то, что он поддерживает AeroQSP.</tag>
</p>
</quote>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\982_aeroqsp_instr_0025.txt-light">
<header anchor="informarch_aeroqsp_instr" head-level="h1">
<p>
Инструкция по использованию AeroQSP совместно с Quest Generator</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment segment-class="for-head">
<list list-type="ol-list">
<segment name="li">
<p>
Скачиваем https://qsp.org/misc/aero/aerodev.zip</p>
</segment>
<segment name="li">
<p>
Скачиваем https://qsp.org/attachments/aeroshell.zip</p>
</segment>
<segment name="li">
<p>
Черновик документации по новым фичам - https://qsp.org/misc/aero/help.htm</p>
</segment>
<segment name="li">
<p>
В файле "run_flash.bat" из "aerodev.zip" редактируем путь к "AeroQSP.exe" - AEROQSP.</p>
</segment>
<segment name="li">
<p>
В QGen указываем вместо "qspgui.exe" - файл "run_flash.bat"</p>
</segment>
</list>
<segment>
<p>
Для игр нужно создавать отдельные папки - при запуске всё содержимое папки с игрой архивируется в ZIP и ссылка передается в "AeroQSP.exe".
</p>
<p>
При запуске "run_flash.bat" вручную, необходимо указывать полный путь к файлу с игрой (".qsp"). Например, run_flash.bat "d:\aero\file.qsp"
</p>
<p>
Для работы Aeroshell требуется предустановленный плагин Flash для Internet Explorer. Брать здесь: http://get.adobe.com/ru/flashplayer/otherversions
</p>
</segment>
</segment>
<header head-level="h4" anchor="primechanie-aleks-versus">
<p>
Примечание Aleks Versus:</p>
</header>
<segment segment-class="for-head">
<quote>
<p>
<tag name="simple-string">
AeroQSP — плеер, работающий на устаревшей и отжившей своё технологии Flash. Adobe прекратила поддержку данной технологии, что означает, что AeroQSP стало невозможно использовать. Игры AeroQSP можно пробовать запустить на </tag>
<tag name="hyperlink" href="https://aleksversus.github.io/howdo_faq/articles/qspider_0004#qspider_0120">
qSpider</tag>
<tag name="simple-string">
, но это так же потребует танцев с бубнами. Лучше писать игры сразу для qSpider, не уповая на то, что он поддерживает AeroQSP.</tag>
</p>
</quote>
<segment>
<p>
Следующий раздел перенесён из справочника по самым часто задаваемым вопросам.
</p>
</segment>
</segment>
</segment>
<header anchor="faq_24_01" head-level="h2">
<p>
24.1. Как сделать так, чтобы AeroQSP запускался прямо из Quest Generator?</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
В: Как сделать так, чтобы AeroQSP запускался прямо из Quest Generator?
</p>
<p>
О:
</p>
<p>
Всё довольно просто. Вам необходимо воспользоваться инструкцией по этой ссылке https://qsp.org/misc/aero/readme.txt
</p>
<p>
Если что-то не получается, от себя лично могу посоветовать следующее:
</p>
</segment>
<list list-type="ol-list">
<segment name="li">
<segment>
<p>
Скачайте все три архива по этим ссылкам:</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="https://qsp.org/attachments/aeroshell.zip">
AeroShell</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="https://qsp.org/misc/aero/aerodev.zip">
AeroDev</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="https://qsp.org/attachments/qgen400b1.zip">
QGen 4.0.0b</tag>
</p>
</segment>
</list>
</segment>
<segment name="li">
<p>
Распакуйте их содержимое в одну папку</p>
</segment>
<segment name="li">
<segment>
<p>
Откройте файл "run_flash.bat" с помощью любого текстового редактора, найдите строку, содержащую `SET AEROQSP=` и после знака равенства замените путь к файлу "AeroQSP.exe" просто на "AeroQSP.exe", так как сейчас файл плеера лежит в той же папке, что и "run_flash.bat". То есть теперь строка должна выглядеть так:</p>
</segment>
<code code-left-level="12" code-type="None">
SET AEROQSP=AeroQSP.exe
</code>
</segment>
<segment name="li">
<p>
Откройте Quest Generator, зайдите в меню "Утилиты", выберите пункт "Настройки...", откройте вкладку "Пути"</p>
</segment>
<segment name="li">
<p>
Здесь рядом с полем "Путь к плееру" нажмите на кнопку "Выбрать путь...". Откроется окно, которое будет предлагать вам указать на файл, который нужно использовать как плеер.</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Вместо типа файла "Файл плеера (</tag>
<tag name="italic">
.exe)", укажите "Все файлы (</tag>
<tag name="simple-string">
.*)". Вам станет доступным файл "run_flash.bat", нажмите на него и нажмите кнопку "открыть". После этого окно настроек можно закрывать нажатием "Ок".</tag>
</p>
</segment>
<segment name="li">
<p>
Создайте локацию, напишите на ней пару команд для проверки (чтоб выводился текст, действие, предмет и т.п.), затем сохраните игру в ОТДЕЛЬНОЙ папке</p>
</segment>
<segment name="li">
<p>
Запустите игру нажатием кнопки "Запустить игру" в Quest Generator или клавиши "F5" на клавиатуре. После того, как на экране пройдут различные команды, запустится оболочка AeroQSP. Убедитесь, что игра работает.</p>
</segment>
</list>
<segment>
<p>
Если оболочка AeroQSP не запустится, или запустится с чёрным экраном, обновите версию флеш-плеера
</p>
</segment>
</segment>
<header anchor="link_24_01" head-level="h6">
<p>
23.1.  Как сделать так, чтобы AeroQSP запускался прямо из Quest Generator?</p>
</header>
<segment segment-class="for-head">
<p>
<tag name="simple-string">
Смотреть ответ на ютубе: </tag>
<tag name="hyperlink" href="https://youtu.be/UqcQhd-HFzw">
https://youtu.be/UqcQhd-HFzw</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
NickoAilus. #5647 18.Май.19 10:50:55: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=226&prc=25&Itemid=57#p25202">
Что надо сделать с QGen, чтобы он заработал на AeroQSP?</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Инструкция по работе с AeroQSP: </tag>
<tag name="hyperlink" href="https://qsp.org/misc/aero/help.htm">
https://qsp.org/misc/aero/help.htm</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Инструкция по запуску AeroQSP из QGen: </tag>
<tag name="hyperlink" href="https://qsp.org/misc/aero/readme.txt">
https://qsp.org/misc/aero/readme.txt</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Запуск AeroQSP из Quest Generator: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=297&Itemid=57">
Тема на форуме QSP.su</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Stand-alone сборка на AeroQSP: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_content&view=article&id=117&Itemid=56">
статья на QSP.su</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Lisichka. #3849 05.Фев.16 00:51:59: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=154&prc=25&Itemid=57#p22877">
можно ли как-то в аэру добавить второе окно доп описания?</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Mira. #4952 28.Фев.17 22:49:27: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=199&prc=25&Itemid=57#p25311">
Создала на аеро свой хелоуворд, через standalone не работает, swf создается, грузится и черный экран дальше</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
BlooDwareN. #5182 10.Янв.18 22:00:22: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=208&prc=25&Itemid=57#p26298">
как установить AeroQSP!</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\983_aeroqsp_help_0026.txt-light">
<header anchor="informarch_aeroqsp_help" head-level="h1">
<p>
Справка по AeroQSP (в дополнение к основной справке QSP)</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Для всех элементов оформления рекомендуется использовать формат картинок PNG, с поддержкой альфа-канала (регулируемая прозрачность). Кроме этого, HTML-движок и оператор VIEW поддерживают анимированные GIF-файлы.
</p>
</segment>
</segment>
<header head-level="h2" anchor="obschie-parametry">
<p>
Общие параметры</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Здесь даётся список системных переменных для AeroQSP, которые отвечают за различные общие настройки.
</p>
<p>
`SCROLL_SPEED` — скорость скроллирования. Значение по-умолчанию: `20`.
</p>
<p>
`$UP_ARROW_IMAGE` — путь к изображению со стрелкой вверх (для скроллируемых элементов). Значение по-умолчанию: `""`.
</p>
<p>
`$DOWN_ARROW_IMAGE` — путь к изображению со стрелкой вниз (для скроллируемых элементов). Значение по-умолчанию: `""`.
</p>
<p>
`HIDE_SCROLL_ARROWS` — флаг, скрывать стрелки для скроллирования. Значение по-умолчанию: `0`.
</p>
<p>
`LCOLOR` — цвет ссылок по-умолчанию. Значение по-умолчанию: `RGB(0,0,255)`.
</p>
<p>
`FCOLOR` — цвет шрифта по-умолчанию. Значение по-умолчанию: `RGB(0,0,0)`.
</p>
<p>
`$FNAME` — название шрифта по-умолчанию. Значение по-умолчанию: `"_sans"`.
</p>
<p>
`FSIZE` — размер шрифта по-умолчанию. Значение по-умолчанию: `18`.
</p>
<p>
`$STYLESHEET` — набор CSS-стилей. Значение по-умолчанию: `""`.
</p>
<p>
`BCOLOR` — цвет фона. Значение по-умолчанию: `RGB(229,229,229,204)`.
</p>
<p>
`USEHTML` — флаг, использовать HTML для текста. Значение по-умолчанию: `0`.
</p>
<p>
`DISABLESHADE` — флаг, отключить затенение для WAIT и модальных окошек (INPUT, MSG, MENU). Значение по-умолчанию: `0`.
</p>
<p>
`DISABLESCROLL` — флаг, отключить автоскроллирование для основного / доп. описания. Значение по-умолчанию: `0`.
</p>
<p>
`DISABLEAUTOREF` — флаг, отключить автообновление экрана при показе модальных окошек (INPUT, MSG, MENU). Значение по-умолчанию: `0`.
</p>
<p>
`$NEWLOC_EFFECT` — название эффекта для перехода между локациями. Значение по-умолчанию: `""`.
</p>
<p>
`NEWLOC_EFFECT_TIME` — время эффекта для перехода между локациями (в миллисекундах). Значение по-умолчанию: `500`.
</p>
<p>
`NEWLOC_EFFECT_SEQ` — флаг, использовать последовательное наложение эффектов для перехода между локациями. Значение по-умолчанию: `0`.
</p>
</segment>
</segment>
<header head-level="h2" anchor="parametry-osnovnogo-ekrana">
<p>
Параметры основного экрана</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Здесь даётся список системных переменных для AeroQSP, которые отвечают за различные настройки основного экрана.
</p>
<p>
`$BACKIMAGE` — фоновая картинка для главного экрана. Значение по-умолчанию: `""`.
</p>
<p>
`$TOPIMAGE` — картинка, накладываемая поверх главного экрана. Значение по-умолчанию: `""`.
</p>
<p>
`INTEGRATED_ACTIONS` — флаг, использовать совмещенный с основным описанием список действий. Значение по-умолчанию: `0`.
</p>
</segment>
</segment>
<header head-level="h3" anchor="osnovnoe-opisanie">
<p>
Основное описание</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
`MAINDESC_X` — X-позиция основного описания. Значение по-умолчанию: `4`.
</p>
<p>
`MAINDESC_Y` — Y-позиция основного описания. Значение по-умолчанию: `4`.
</p>
<p>
`MAINDESC_W` — ширина основного описания. Значение по-умолчанию: `589`.
</p>
<p>
`MAINDESC_H` — высота основного описания. Значение по-умолчанию: `389`.
</p>
<p>
`$MAIN_FORMAT` — формат основного описания. служебное поле %TEXT%. Значение по-умолчанию: `"%TEXT%"`.
</p>
<p>
`$MAINDESC_BACKIMAGE` — фоновая картинка для основного описания. Значение по-умолчанию: `""`.
</p>
</segment>
</segment>
<header head-level="h3" anchor="dopolnitel_noe-opisanie">
<p>
Дополнительное описание</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
`STATDESC_X` — X-позиция дополнительного описания. Значение по-умолчанию: `596`.
</p>
<p>
`STATDESC_Y` — Y-позиция дополнительного описания. Значение по-умолчанию: `396`.
</p>
<p>
`STATDESC_W` — ширина дополнительного описания. Значение по-умолчанию: `200`.
</p>
<p>
`STATDESC_H` — высота дополнительного описания. Значение по-умолчанию: `200`.
</p>
<p>
`$STAT_FORMAT` — формат дополнительного описания. служебное поле %TEXT%. Значение по-умолчанию: `"%TEXT%"`.
</p>
<p>
`$STATDESC_BACKIMAGE` — фоновая картинка для дополнительного описания. Значение по-умолчанию: `""`.
</p>
</segment>
</segment>
<header head-level="h3" anchor="spisok-dejstvij">
<p>
Список действий</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
`ACTIONS_X` — X-позиция списка действий. Значение по-умолчанию: `4`.
</p>
<p>
`ACTIONS_Y` — Y-позиция списка действий. Значение по-умолчанию: `396`.
</p>
<p>
`ACTIONS_W` — ширина списка действий. Значение по-умолчанию: `589`.
</p>
<p>
`ACTIONS_H` — высота списка действий. Значение по-умолчанию: `169`.
</p>
<p>
`$ACTION_FORMAT` — формат действия. служебные поля %TEXT%, %IMAGE% (путь к файлу картинки). Значение по-умолчанию: `"&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;img src='%IMAGE%'/&gt;&lt;/td&gt;&lt;td style='width:100%;'&gt;%TEXT%&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"`.
</p>
<p>
`$SEL_ACTION_FORMAT` — формат выделенного действия. служебные поля %TEXT%, %IMAGE% (путь к файлу картинки). Значение по-умолчанию: `"&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;img src='%IMAGE%'/&gt;&lt;/td&gt;&lt;td style='width:100%;color:#0000FF;'&gt;%TEXT%&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"`.
</p>
<p>
`$ACTIONS_BACKIMAGE` — фоновая картинка для списка действий. Значение по-умолчанию: `""`.
</p>
</segment>
</segment>
<header head-level="h3" anchor="spisok-predmetov">
<p>
Список предметов</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
`OBJECTS_X` — X-позиция списка предметов. Значение по-умолчанию: `596`.
</p>
<p>
`OBJECTS_Y` — Y-позиция списка предметов. Значение по-умолчанию: `4`.
</p>
<p>
`OBJECTS_W` — ширина списка предметов. Значение по-умолчанию: `200`.
</p>
<p>
`OBJECTS_H` — высота списка предметов. Значение по-умолчанию: `389`.
</p>
<p>
`$OBJECT_FORMAT` — формат предмета. служебные поля %TEXT%, %IMAGE% (путь к файлу картинки). Значение по-умолчанию: `"&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;img src='%IMAGE%'/&gt;&lt;/td&gt;&lt;td style='width:100%;'&gt;%TEXT%&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"`.
</p>
<p>
`$SEL_OBJECT_FORMAT` — формат выделенного предмета. служебные поля %TEXT%, %IMAGE% (путь к файлу картинки). Значение по-умолчанию: `"&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;img src='%IMAGE%'/&gt;&lt;/td&gt;&lt;td style='width:100%;color:#0000FF;'&gt;%TEXT%&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"`.
</p>
<p>
`$OBJECTS_BACKIMAGE` — фоновая картинка для списка предметов. Значение по-умолчанию: `""`.
</p>
</segment>
</segment>
<header head-level="h3" anchor="stroka-vvoda">
<p>
Строка ввода</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
`USERINPUT_X` — X-позиция строки ввода. Значение по-умолчанию: `4`.
</p>
<p>
`USERINPUT_Y` — Y-позиция строки ввода. Значение по-умолчанию: `568`.
</p>
<p>
`USERINPUT_W` — ширина строки ввода. Значение по-умолчанию: `589`.
</p>
<p>
`USERINPUT_H` — высота строки ввода. Значение по-умолчанию: `28`.
</p>
</segment>
</segment>
<header head-level="h3" anchor="okno-izobrazheniia-view">
<p>
Окно изображения VIEW</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
`VIEW_X` — X-позиция области картинки для оператора VIEW. Значение по-умолчанию: `250`.
</p>
<p>
`VIEW_Y` — Y-позиция области картинки для оператора VIEW. Значение по-умолчанию: `150`.
</p>
<p>
`VIEW_W` — ширина области картинки для VIEW. Значение по-умолчанию: `300`.
</p>
<p>
`VIEW_H` — ширина области картинки для VIEW. Значение по-умолчанию: `300`.
</p>
<p>
`$VIEW_EFFECT` — название эффекта для показа/скрытия картинок через VIEW. Значение по-умолчанию: `""`.
</p>
<p>
`VIEW_EFFECT_TIME` — время эффекта для VIEW (в миллисекундах). Значение по-умолчанию: `500`.
</p>
<p>
`ALWAYS_SHOW_VIEW` — флаг, не скрывать картинку при клике на ней. Значение по-умолчанию: `0`.
</p>
<p>
`$INPUT_BACKIMAGE` — путь к фоновой картинке для диалога INPUT (задает размеры диалога). Значение по-умолчанию: `""`.
</p>
</segment>
</segment>
</segment>
<header head-level="h2" anchor="parametry-dialoga-vvoda-input">
<p>
Параметры диалога ввода INPUT</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Здесь даётся список системных переменных для AeroQSP, которые отвечают за различные настройки диалогового окна, вызываемого функцией `$INPUT`.
</p>
<p>
`INPUT_X` — X-позиция диалога INPUT (если X или Y меньше 0, то показывает диалог в позиции курсора мыши). Значение по-умолчанию: `200`.
</p>
<p>
`INPUT_Y` — Y-позиция диалога INPUT (если X или Y меньше 0, то показывает диалог в позиции курсора мыши). Значение по-умолчанию: `165`.
</p>
<p>
`$INPUT_FORMAT` — формат описания в диалоге INPUT. служебное поле %TEXT%. Значение по-умолчанию: `"%TEXT%"`.
</p>
<p>
`INPUT_TEXT_X` — X-позиция описания в диалоге INPUT. Значение по-умолчанию: `4`.
</p>
<p>
`INPUT_TEXT_Y` — Y-позиция описания в диалоге INPUT. Значение по-умолчанию: `4`.
</p>
<p>
`INPUT_TEXT_W` — ширина описания в диалоге INPUT. Значение по-умолчанию: `392`.
</p>
<p>
`INPUT_TEXT_H` — высота описания в диалоге INPUT. Значение по-умолчанию: `231`.
</p>
<p>
`INPUT_BAR_X` — X-позиция строки ввода в диалоге INPUT. Значение по-умолчанию: `4`.
</p>
<p>
`INPUT_BAR_Y` — Y-позиция строки ввода в диалоге INPUT. Значение по-умолчанию: `238`.
</p>
<p>
`INPUT_BAR_W` — ширина строки ввода в диалоге INPUT. Значение по-умолчанию: `312`.
</p>
<p>
`INPUT_BAR_H` — высота строки ввода в диалоге INPUT. Значение по-умолчанию: `28`.
</p>
<p>
`$INPUT_OK_IMAGE` — путь к картинке для кнопки OK в диалоге INPUT. Значение по-умолчанию: `""`.
</p>
<p>
`INPUT_OK_X` — X-позиция кнопки OK в диалоге INPUT. Значение по-умолчанию: `324`.
</p>
<p>
`INPUT_OK_Y` — Y-позиция кнопки OK в диалоге INPUT. Значение по-умолчанию: `239`.
</p>
<p>
`$INPUT_CANCEL_IMAGE` — путь к картинке для кнопки CANCEL в диалоге INPUT. Значение по-умолчанию: `""`.
</p>
<p>
`INPUT_CANCEL_X` — X-позиция кнопки CANCEL в диалоге INPUT. Значение по-умолчанию: `362`.
</p>
<p>
`INPUT_CANCEL_Y` — Y-позиция кнопки CANCEL в диалоге INPUT. Значение по-умолчанию: `239`.
</p>
<p>
`$INPUT_EFFECT` — название эффекта для показа/скрытия диалога INPUT. Значение по-умолчанию: `""`.
</p>
<p>
`INPUT_EFFECT_TIME` — время эффекта для INPUT (в миллисекундах). Значение по-умолчанию: `500`.
</p>
</segment>
</segment>
<header head-level="h2" anchor="parametry-dialoga-soobscheniia-msg">
<p>
Параметры диалога сообщения MSG</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Здесь даётся список системных переменных для AeroQSP, которые отвечают за различные настройки диалогового окна, вызываемого оператором `MSG`.
</p>
<p>
`$MSG_BACKIMAGE` — путь к фоновой картинке для диалога MSG (задает размеры диалога). Значение по-умолчанию: `""`.
</p>
<p>
`MSG_X` — X-позиция диалога MSG (если X или Y меньше 0, то показывает диалог в позиции курсора мыши). Значение по-умолчанию: `200`.
</p>
<p>
`MSG_Y` — Y-позиция диалога MSG (если X или Y меньше 0, то показывает диалог в позиции курсора мыши). Значение по-умолчанию: `165`.
</p>
<p>
`$MSG_FORMAT` — формат описания в диалоге MSG. служебное поле %TEXT%. Значение по-умолчанию: `"%TEXT%"`.
</p>
<p>
`MSG_TEXT_X` — X-позиция описания в диалоге MSG. Значение по-умолчанию: `4`.
</p>
<p>
`MSG_TEXT_Y` — Y-позиция описания в диалоге MSG. Значение по-умолчанию: `4`.
</p>
<p>
`MSG_TEXT_W` — ширина описания в диалоге MSG. Значение по-умолчанию: `392`.
</p>
<p>
`MSG_TEXT_H` — высота описания в диалоге MSG. Значение по-умолчанию: `231`.
</p>
<p>
`$MSG_OK_IMAGE` — путь к картинке для кнопки OK в диалоге MSG. Значение по-умолчанию: `""`.
</p>
<p>
`MSG_OK_X` — X-позиция кнопки OK в диалоге MSG. Значение по-умолчанию: `186`.
</p>
<p>
`MSG_OK_Y` — Y-позиция кнопки OK в диалоге MSG. Значение по-умолчанию: `239`.
</p>
<p>
`$MSG_EFFECT` — название эффекта для показа/скрытия диалога MSG. Значение по-умолчанию: `""`.
</p>
<p>
`MSG_EFFECT_TIME` — время эффекта для MSG (в миллисекундах). Значение по-умолчанию: `500`.
</p>
</segment>
</segment>
<header head-level="h2" anchor="parametry-meniu-menu">
<p>
Параметры меню MENU</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Здесь даётся список системных переменных для AeroQSP, которые отвечают за различные настройки всплывающего меню, которое появляется при использовании оператором `MENU`.
</p>
<p>
`FIXED_SIZE_MENU` — флаг, использовать фиксированную высоту всплывающего меню. Значение по-умолчанию: `0`.
</p>
<p>
`MENU_PADDING` — отступ списка меню. Значение по-умолчанию: `4`.
</p>
<p>
`MENU_BORDER` — толщина границы меню. Значение по-умолчанию: `1`.
</p>
<p>
`MENU_BORDER_COLOR` — цвет границы меню. Значение по-умолчанию: `RGB(64,64,64,150)`.
</p>
<p>
`$MENU_BACKIMAGE` — путь к фоновой картинке для всплывающего меню (задает размеры меню при FIXED_SIZE_MENU). Значение по-умолчанию: `""`.
</p>
<p>
`MENU_X` — X-позиция всплывающего меню (если X или Y меньше 0, то показывает меню в позиции курсора мыши). Значение по-умолчанию: `-1`.
</p>
<p>
`MENU_Y` — Y-позиция всплывающего меню (если X или Y меньше 0, то показывает меню в позиции курсора мыши). Значение по-умолчанию: `-1`.
</p>
<p>
`$MENU_FORMAT` — формат пункта всплывающего меню. служебные поля %TEXT%, %IMAGE% (путь к файлу картинки). Значение по-умолчанию: `"&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;img src='%IMAGE%'/&gt;&lt;/td&gt;&lt;td style='width:100%;'&gt;%TEXT%&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"`.
</p>
<p>
`$SEL_MENU_FORMAT` — формат выделенного пункта всплывающего меню. служебные поля %TEXT%, %IMAGE% (путь к файлу картинки). Значение по-умолчанию: `"&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;img src='%IMAGE%'/&gt;&lt;/td&gt;&lt;td style='width:100%;color:#0000FF;'&gt;%TEXT%&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"`.
</p>
<p>
`MENU_LIST_X` — X-позиция элементов списка меню (при FIXED_SIZE_MENU). Значение по-умолчанию: `4`.
</p>
<p>
`MENU_LIST_Y` — Y-позиция элементов списка меню (при FIXED_SIZE_MENU). Значение по-умолчанию: `4`.
</p>
<p>
`MENU_LIST_W` — ширина списка меню. Значение по-умолчанию: `153`.
</p>
<p>
`MENU_LIST_H` — высота списка меню (при FIXED_SIZE_MENU). Значение по-умолчанию: `123`.
</p>
<p>
`$MENU_EFFECT` — название эффекта для показа/скрытия всплывающего меню. Значение по-умолчанию: `""`.
</p>
<p>
`MENU_EFFECT_TIME` — время эффекта для MENU (в миллисекундах). Значение по-умолчанию: `500`.
</p>
</segment>
</segment>
<header head-level="h2" anchor="spisok-effektov-dlia-newloc_effect-view_effect-input_effect-msg_effect-menu_effect">
<p>
Список эффектов (для $NEWLOC_EFFECT, $VIEW_EFFECT, $INPUT_EFFECT, $MSG_EFFECT, $MENU_EFFECT)</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
fade</p>
</segment>
<segment name="li">
<p>
quake</p>
</segment>
<segment name="li">
<p>
blur</p>
</segment>
<segment name="li">
<p>
h_blinds</p>
</segment>
<segment name="li">
<p>
v_blinds</p>
</segment>
<segment name="li">
<p>
l_slide</p>
</segment>
<segment name="li">
<p>
r_slide</p>
</segment>
<segment name="li">
<p>
u_slide</p>
</segment>
<segment name="li">
<p>
d_slide</p>
</segment>
<segment name="li">
<p>
iris</p>
</segment>
<segment name="li">
<p>
photo</p>
</segment>
<segment name="li">
<p>
pixels</p>
</segment>
<segment name="li">
<p>
rotate</p>
</segment>
<segment name="li">
<p>
v_squeeze</p>
</segment>
<segment name="li">
<p>
h_squeeze</p>
</segment>
<segment name="li">
<p>
zoom</p>
</segment>
<segment name="li">
<p>
wipe1</p>
</segment>
<segment name="li">
<p>
wipe2</p>
</segment>
<segment name="li">
<p>
wipe3</p>
</segment>
<segment name="li">
<p>
wipe4</p>
</segment>
</list>
</segment>
<header head-level="h2" anchor="podderzhka-html">
<p>
Поддержка HTML</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Текущая версия HTML-движка ориентирована на использование стилей, а не простых аттрибутов элементов.
</p>
<p>
Поддерживаемые теги:
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
DIV</p>
</segment>
<segment name="li">
<p>
TABLE</p>
</segment>
<segment name="li">
<p>
TR</p>
</segment>
<segment name="li">
<p>
TD</p>
</segment>
<segment name="li">
<p>
TH</p>
</segment>
<segment name="li">
<p>
CENTER</p>
</segment>
<segment name="li">
<p>
A</p>
</segment>
<segment name="li">
<p>
IMG</p>
</segment>
<segment name="li">
<p>
BR</p>
</segment>
<segment name="li">
<p>
P</p>
</segment>
<segment name="li">
<p>
B</p>
</segment>
<segment name="li">
<p>
I</p>
</segment>
<segment name="li">
<p>
U</p>
</segment>
<segment name="li">
<p>
FONT</p>
</segment>
<segment name="li">
<p>
SPAN</p>
</segment>
<segment name="li">
<p>
LI</p>
</segment>
<segment name="li">
<p>
OL</p>
</segment>
<segment name="li">
<p>
UL</p>
</segment>
</list>
<segment>
<p>
Поддерживаемые свойства:
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
width (проценты, пиксели)</p>
</segment>
<segment name="li">
<p>
height (только пиксели)</p>
</segment>
<segment name="li">
<p>
position ("absolute")</p>
</segment>
<segment name="li">
<p>
left (пиксели)</p>
</segment>
<segment name="li">
<p>
top (пиксели)</p>
</segment>
<segment name="li">
<p>
border</p>
</segment>
<segment name="li">
<p>
border-width</p>
</segment>
<segment name="li">
<p>
border-style</p>
</segment>
<segment name="li">
<p>
border-color</p>
</segment>
<segment name="li">
<p>
display ("inline")</p>
</segment>
<segment name="li">
<p>
float ("left")</p>
</segment>
<segment name="li">
<p>
text-align ("left", "right", "center")</p>
</segment>
<segment name="li">
<p>
vertical-align ("top", "middle", "bottom")</p>
</segment>
<segment name="li">
<p>
font-family</p>
</segment>
<segment name="li">
<p>
font-size</p>
</segment>
<segment name="li">
<p>
font-style</p>
</segment>
<segment name="li">
<p>
font-weight</p>
</segment>
<segment name="li">
<p>
leading</p>
</segment>
<segment name="li">
<p>
letter-spacing</p>
</segment>
<segment name="li">
<p>
margin-left</p>
</segment>
<segment name="li">
<p>
margin-right</p>
</segment>
<segment name="li">
<p>
text-decoration</p>
</segment>
<segment name="li">
<p>
text-indent</p>
</segment>
<segment name="li">
<p>
color</p>
</segment>
<segment name="li">
<p>
padding</p>
</segment>
<segment name="li">
<p>
padding-left</p>
</segment>
<segment name="li">
<p>
padding-top</p>
</segment>
<segment name="li">
<p>
padding-right</p>
</segment>
<segment name="li">
<p>
padding-bottom</p>
</segment>
<segment name="li">
<p>
background-color</p>
</segment>
<segment name="li">
<p>
background-image</p>
</segment>
</list>
</segment>
<header head-level="h2" anchor="vstraivaemye-shrifty">
<p>
Встраиваемые шрифты</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
AeroQSP поддерживает встраивание шрифтов в игру. Для этого необходимо swf-файл со встроенным шрифтом положить в zip-архив игры (в любую папку). Использование встроенного шрифта аналогично использованию обычного системного шрифта - там, где необходимо, указывается его имя. При наличии в архиве игры хотя бы одного встроенного шрифта, использование системных шрифтов запрещено.
</p>
</segment>
</segment>
<header head-level="h2" anchor="zvuki-i-muzyka">
<p>
Звуки и музыка</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Поддерживается воспроизведение MP3-файлов.
</p>
</segment>
</segment>
<header head-level="h2" anchor="fajl-konfiguratsii">
<p>
Файл конфигурации</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Конфигурация игры дополнительно настраивается в файле "config.xml", который необходимо разместить в архиве рядом с qsp-файлом. Пример файла "config.xml":
</p>
</segment>
<code code-left-level="0" code-type="html">
&lt;game width="504" height="680" title="Чашка кофе"/&gt;
</code>
<segment>
<p>
Здесь:
</p>
<p>
`width` — указывает ширину экрана игры в пикселях
</p>
<p>
`height` — указывает высоту экрана игры в пикселях
</p>
<p>
`title` — название игры (отображается в заголовке окна)
</p>
<p>
Кодировка файла - `UTF-8`.
</p>
<p>
PS: По умолчанию размер экрана игры `800x600` пикселей.
</p>
</segment>
</segment>
<header head-level="h4" anchor="primechanie-aleks-versus">
<p>
Примечание Aleks Versus:</p>
</header>
<segment segment-class="for-head">
<quote>
<p>
<tag name="simple-string">
AeroQSP — плеер, работающий на устаревшей и отжившей своё технологии Flash. Adobe прекратила поддержку данной технологии, что означает, что AeroQSP стало невозможно использовать. Игры AeroQSP можно пробовать запустить на </tag>
<tag name="hyperlink" href="https://aleksversus.github.io/howdo_faq/articles/qspider_0004#qspider_0120">
qSpider</tag>
<tag name="simple-string">
, но это так же потребует танцев с бубнами. Лучше писать игры сразу для qSpider, не уповая на то, что он поддерживает AeroQSP.</tag>
</p>
</quote>
</segment>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\984_standalone_aeroqsp_0027.txt-light">
<header anchor="informarch_standalone_aeroqsp" head-level="h1">
<p>
Stand-alone сборка игр на AeroQSP</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
Этот пакет предназначен для сборки Flash-приложений, включающих в себя плеер AeroQSP и игру.
</p>
<p>
Для сборки готового Flash-приложения в формате .swf, автору требуется предоставить архив игры в формате .aqsp, и "фон" - картинку в формате .png, которая будет показана во время загрузки swf-файла.
</p>
<p>
Инструкция по использованию:
</p>
</segment>
<list list-type="ol-list">
<segment name="li">
<p>
Скачать и установить Java - http://www.java.com/ru/</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Скачать и распаковать архив </tag>
<tag name="hyperlink" href="https://qsp.org/tools/upload/aero-build-stand-alone.zip">
aero-build-stand-alone.zip</tag>
<tag name="simple-string">
 в любую папку, например "D:\aerobuild".</tag>
</p>
</segment>
<segment name="li">
<p>
В эту же папку("D:\aerobuild") положить файл игры в формате .aqsp, он должен называться "game.aqsp"</p>
</segment>
<segment name="li">
<p>
В эту же папку("D:\aerobuild") положить "фон" - картинку в формате .png, он должен называться "background.png"</p>
</segment>
<segment name="li">
<p>
Запустить файл "build-stand-alone.cmd"</p>
</segment>
</list>
<segment>
<p>
При успешной сборке, в папке появится файл "AeroQSP_standalone.swf".
</p>
<p>
aero-build-stand-alone.zip, 61 мегабайт.
</p>
<p>
Автор: `NEX`
</p>
<p>
27.07.2011 14:41
</p>
</segment>
</segment>
<header head-level="h4" anchor="primechanie-aleks-versus">
<p>
Примечание Aleks Versus:</p>
</header>
<segment segment-class="for-head">
<quote>
<p>
<tag name="simple-string">
AeroQSP — плеер, работающий на устаревшей и отжившей своё технологии Flash. Adobe прекратила поддержку данной технологии, что означает, что AeroQSP стало невозможно использовать. Игры AeroQSP можно пробовать запустить на </tag>
<tag name="hyperlink" href="https://aleksversus.github.io/howdo_faq/articles/qspider_0004#qspider_0120">
qSpider</tag>
<tag name="simple-string">
, но это так же потребует танцев с бубнами. Лучше писать игры сразу для qSpider, не уповая на то, что он поддерживает AeroQSP.</tag>
</p>
</quote>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\985_aeroqsp_uchebnik_0028.txt-light">
<header anchor="informarch_aeroqspguide" head-level="h1">
<p>
Учебник по AeroQSP и QGen</p>
</header>
<segment segment-class="for-head">
<quote>
<p>
Примечание Aleks Versus: это статья об устаревшем плеере AeroQSP; данный плеер больше не работает в связи с прекращением поддержки и распространения Adobe Flash Player; статья представлена для ознакомительных целей, так как в ней достаточно полно отражены основные принципы написания игр на QSP.</p>
</quote>
<segment>
<p>
В этом учебнике рассмотрены основные приемы программирования на языке QSP с использованием AERO Shell (QSP плеер на flash). Пособие ориентировано в первую очередь на тех авторов, которые только начинают знакомство с языком, но может быть частично полезно и тем, кто переходит на разработку под AERO с «классического» плеера. Следует помнить, что это разные варианты плеера, хотя и совместимые, но не полностью.
</p>
<p>
Для работы вам потребуются два приложения: собственно проигрыватель AERO, в котором будет запускаться ваша программа (далее «плеер» или «проигрыватель») и утилита редактирования `.qsp` файла - QGen (далее «редактор»).
</p>
<p>
Начнем с ознакомления с их интерфейсом. Откройте редактор. Слева вы видите окно со списком локаций. Если вы еще не начинали никакого проекта, оно должно быть пустым. Если там что-то есть, можно начать заново, нажав "Ctr+N" или выбрав пункт меню "Игра &gt; Новая".
</p>
<p>
Давайте создадим первую локацию и заодно узнаем, что это за зверь и зачем он нужен. Для создания локации нажмите "F7" или кликните на большой зеленый крестик в левой части верхнего меню. Вы увидите диалог, который предложит ввести название локации. Назовем ее "Начало".
</p>
<p>
Теперь, в главном окне должно появиться разбитое на четыре части поле. Сверху-слева «Описание:», правее «Выполнить при посещении:» и снизу два окошка озаглавленные «Базовые действия:». Основным инструментом является поле «Выполнить при посещении:». Остальные два носят вспомогательную функцию и лучше даже не приучаться их использовать – это может немного облегчить процесс поначалу, но затем сделает ваш код менее стройным и более фрагментированным. Далее мы будем писать код исключительно в окошке «Выполнить при посещении:». Вы можете смело развести его границы на максимум и забыть про остальные поля.
</p>
<p>
Сверху над полем «Выполнить при посещении» вы можете увидеть ярлычок-закладку с названием локации. Если вы откроете несколько локаций одновременно, то все они появятся там в виде подобных ярлычков, нажимая на которые вы сможете видеть код выбранной локации.
</p>
<p>
Что же такое эта самая «локация»? Если вы немного владеете английским, то вероятно уже поняли, что это калька с английского "location" – т.е. "место". Такое название появилось благодаря принятой в "IF" (Interactive Fiction, Интеракивная Литература) практике разбиения кода на отдельные части, в каждой из которых находится кусок кода отвечающий за функционирования той или иной зоны игрового мира. Однако, не стоит путаться и воспринимать слово "локация" прямо. Следует понимать, что это всего лишь отдельный кусок программы который может выполнять абсолютно любую функцию.
</p>
<p>
Фактически вы можете написать всю игру, даже довольно большую, в пределах одной локации. Тем не менее, разбиение кода игры на несколько (иногда десятки и сотни) локаций позволяет упростить процесс написания и модификации кода игры. Благодаря отдельным локациям, мы можем работать с каждым куском кода отдельно.
</p>
<p>
Чтобы начать ознакомление с интерфейсом проигрывателя, нам надо написать программу, которую мы могли бы в нем запустить. Отдавая дань традиции, принятой в большинстве пособий по программированию для начинающих, давайте заставим программу выводить на экран фразу `"Hello world"`.
</p>
<p>
Сделать это очень просто. Напишите в первой строчке следующее:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
'Hello world!'
</code>
<segment>
<p>
Как вы можете видеть, программа автоматически нумерует строки кода. Это сделано для удобства и систематизации кода. Кроме того, если в коде будет ошибка, то в сообщении об ошибке программа скажет, в какой именно локации и строке этой локации возникла проблема.
</p>
<p>
Тем временем, наша первая программа уже готова. Сохраните ее под любым подходящим вам именем, но не забудьте положить в отдельную папку (это необходимо для правильной работы AERO Shell). При первом сохранении, программа предложит вам назначить пароль для своего проекта. Этот пароль теоретически позволяет защитить свой код от посягательств чужих грязных лап, но на практике вскрывается за 5 минут. Так что просто оставьте поле пароля пустым и нажмите "ОК".
</p>
<p>
Теперь программу можно запустить прямо здесь, не выходя из редактора. Для этого необходимо нажать "F5" или кнопку в виде синей стрелки в верхнем меню. Если вы еще не указывали редактору путь к проигрывателю, то он попросит вас сделать это.
</p>
<p>
И, если все было сделано верно, то после короткой заставки "QSP" перед вами должен появиться серый экран с надписью `"Hello world!"` в верхнем углу. Это значит, что наша программа работает, а мы можем пока рассмотреть интерфейс проигрывателя.
</p>
<p>
Тут все так же довольно просто. Сверху есть ниспадающее меню всего с двумя пунктами «Игра» и «Помощь». Содержимое пунктов так же не блещет разнообразием. Если нажать «Esc», то выйдет меню сохранения игры. Да, QSP позволяет сохранять игру практически в любой момент, без каких либо специальных усилий со стороны автора самой игры – эта возможность вшита в оболочку.
</p>
<p>
Основное пространство разделено на пять частей. В самом большом поле, находящемся сверху и слева мы можем наблюдать наше приветствие миру. Это главное окно описаний.
</p>
<p>
Справа от него находится меню инвентаря. Оно предназначено для демонстрации предметов, находящихся в распоряжении игрока, но часто используется креативными игрописателями как боковое меню (мы безусловно рассмотрим обе эти возможности в ходе наших уроков). Так как никаких предметов инвентаря мы не создавали, то это окно будет пустым.
</p>
<p>
Сразу под главным окном описаний расположено окно действий. Это основное меню, в котором можно выбирать варианты из имеющегося списка действий при помощи мышки или соответствующей цифры на клавиатуре. Опять же, мы не задавали никаких вариантов для меню действий, поэтому оно останется пустым.
</p>
<p>
Еще ниже, расположена строка ввода. Если вы ткнете туда мышкой, то появится курсор и можно будет набрать какой-нибудь текст. Этот вариант используется преимущественно для так называемых «парсерных» игр, где управление происходит при помощи текста вводимого игроком. Но рассматривать способы создания парсерных игр в этом руководстве мы не будем, так что о строке ввода вы можете пока забыть.
</p>
<p>
В правом нижнем углу осталось еще одно свободное поле. Это поле дополнительного описания. Обычно оно используется для вывода текущего состояния или характеристик персонажа, но, как и остальные поля, может быть использовано другими, порой неожиданными, способами.
</p>
<p>
Следует понять, что хотя у всех указанных полей и есть довольно четко очерченная основная функция, вы можете использовать их так, как удобно вам и нужно для целей вашей игры. Более того, размер и расположение данных полей не являются неизменными. Вы спокойно сможете переместить или отключить любое из них в коде игры. Вы даже можете задать свои собственные поля, если это потребуется. То что вы видите – просто удобный шаблон, который может подойти для среднестатистической игры в жанре "IF".
</p>
<p>
Сейчас наша «игра» выглядит пустой, серой и неинтересной, так что плеер можно закрыть и вернуться в редактор. Давайте сделаем что-то более серьезное. Но для начала разберем уже имеющуюся программу.
</p>
<p>
Как вы можете видеть, слова заключенные в одинарные кавычки выделены зеленым цветом. Цветовая разметка кода в QGen сделана для вашего удобства и она действительно помогает читать код. Забегая слегка вперед, скажем, что переменные в коде будут иметь черный цвет, операторы – синий, а текст комментариев – серый.
</p>
<p>
Если вы напишите слова `Hello world` без кавычек, они останутся черными и при попытке выполнить программу, плеер выдаст ошибку, так как не воспринимает эти слова как [выражение]. Слова, заключенные в кавычки, являются выражением – т.е. воспринимаются не как осмысленный код, а как некое значение, с которым программа будет работать. Например, текст, который нужно вывести на главный экран.
</p>
<p>
Одинарные и двойные кавычки работают одинаково. Выражения 'Hello world!' и "Hello world!" будут интерпретироваться одинаково. Но что будет, если мы заходим вывести на экран такую фразу например: «Программа сказала "Hello world!"»?
</p>
<p>
Если использовать только двойные кавычки, то программа нас не поймет.
</p>
<p>
Код `"Программа сказала: "Hello world!" "` будет интерпретироваться неверно.
</p>
<p>
Но если мы будем использовать разные виды кавычек, то внешние кавычки будут восприняты, как границы выражения, а внутренние – как его составная часть.
</p>
<p>
Поэтому код 'Программа сказала: "Hello world!" ' программа воспримет правильно.
</p>
<p>
Вы можете сделать наоборот и поменять местами двойные и одинарные кавычки:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
"Программа сказала: 'Hello world!' "
</code>
<segment>
<p>
Так тоже будет верно. Попробуйте запустить все эти варианты программы в плеере, чтобы посмотреть что получится.
</p>
<p>
Но давайте перейдем к более интересным вещам и попробуем создать настоящую игру. Процесс этот не слишком быстрый, но чрезвычайно увлекательный. Я шаг за шагом приведу вам пример разработки несложной игры, в которой будут задействованы все самые распространенные возможности QSP. Не стесняйтесь модифицировать код приведенных здесь примеров и экспериментировать с ним по ходу чтения руководства.
</p>
<p>
Итак, начнем новый проект с чистого листа. Первым делом, снова создадим локацию под названием «Начало». Это будет стартовая локация игры. Я задумал воплотить в интерактивном тексте обычную московскую квартиру и представить главным героем игры программиста-фрилансера. Эта концепция уже дает нам основание для создания нескольких локаций. Давайте, не мудрствуя лукаво, сделаем по одной локации на каждое помещение в квартире.
</p>
<p>
Создаем новые локации под названиями: «Комната», «Коридор», «Ванная», «Туалет» и «Кухня». Теперь, у нас суммарно есть целых шесть локаций, но все они пустые и никак не соединены между собой. Займемся этим.
</p>
<p>
Начнем с комментария. Если вы поставите восклицательный знак в начале строки, то вся строка следующая за ним окрасится в серый цвет. Это текст комментария, который программа не пытается интерпретировать. Он нужен только для того, чтобы оставить пояснения в тексте кода, в качестве напоминания себе самому, или же разъяснения тем, кто будет разбирать ваш код позднее.
</p>
<p>
Откроем локацию «Начало» и напишем там комментарий:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
! Это стартовая локация, в которой начинается игра
</code>
<segment>
<p>
Не самый нужный комментарий, но сойдет. Кстати, если вам нужно будет сделать комментарием несколько строк кода то, вовсе не обязательно ставить ! в начале каждой строки. Можно сделать вот так:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
!'Тут комментарий
<br/>
<br/>И его продолжение
<br/>
<br/>И еще немного'
</code>
<segment>
<p>
Таким образом вы закомментировали все выражение целиком (т.е. все то что было заключено в кавычки, сразу после восклицательного знака). Учтите, что восклицательный знак обозначает комментарий, лишь если стоит первым символом в строке. В остальных случаях, не заключенный в кавычки ! эквивалентен утверждению «не равно». Т.е. код `a ! b` , например, означает, что переменная «а» не равна по значению переменной «b». Никакими комментариями тут и не пахнет.
</p>
<p>
Но вернемся к игре.
</p>
<p>
Следом за комментарием, с новой строки напишем следующее:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
'МОЯ ПЕРВАЯ ИГРА'
<br/>
<br/>ACT 'Начать игру':
<br/>    GT 'Комната'
<br/>END
</code>
<segment>
<p>
Что делает первая строка должно быть понятно и так. А вот суть строчек идущих за ней интереснее. Мы только что создали первое действие. Оператор `ACT` собственно и говорит о том, что перед нами действие. Выражение, следующее сразу за ним в кавычках – это название действия, так, как его увидит игрок. Двоеточие тоже необходимо – оно означает, что весь код идущий дальше вплоть до закрывающего оператора относится к тому, что надо будет сделать, если игрок выберет данное действие в меню. `END` в конце — это и есть тот самый закрывающий оператор. Он указывает то место, в котором заканчивается код, относящийся к действию «Начать игру».
</p>
<p>
Между ними идет строчка, в которую уместилась собственно суть действия. Оператор `GT` это сокращение от `GOTO` (вы можете писать и целиком, программа поймет). Как легко поймет любой знакомый с английским читатель, это команда перехода куда-то. Куда? На другую локацию, название которой и следует сразу за оператором. Помните мы создали локацию «Комната»? Так вот, это действие заставит программу перейти к тому куску кода, который находится в локации «Комната». Можно условно считать, что это герой игры переместился в комнату своей квартиры.
</p>
<p>
Если запустить код сейчас, то вы увидите слова «МОЯ ПЕРВАЯ ИГРА» в виде заголовка в главном окне описаний и пункт «Начать игру» в меню действий. Теперь, нажав на него, мы можем переместиться в «комнату». Но что это? Перед нами девственно чистый экран! Ну разумеется, ведь локация «Комната», к которой перешла программа, абсолютно пуста.
</p>
<p>
Давайте исправим это и создадим краткие описания для всех помещений и переходы между ними. Пусть из комнаты, ванной, туалета и кухни можно будет попасть в коридор, а из коридора в любую другую локацию кроме начальной.
</p>
<p>
Напишем в соответствующих локациях код:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
'КОМНАТА'
<br/>
<br/>ACT 'Идти в коридор':
<br/>    GT 'Коридор'
<br/>END
</code>
<code code-left-level="0" code-type="qsp">
'ВАННАЯ'
<br/>
<br/>ACT 'Идти в коридор':
<br/>    GT 'Коридор'
<br/>END
</code>
<code code-left-level="0" code-type="qsp">
'ТУАЛЕТ'
<br/>
<br/>ACT 'Идти в коридор':
<br/>    GT 'Коридор'
<br/>END
</code>
<code code-left-level="0" code-type="qsp">
'КУХНЯ'
<br/>
<br/>ACT 'Идти в коридор':
<br/>    GT 'Коридор'
<br/>END
</code>
<segment>
<p>
И наконец для коридора:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
'КОРИДОР'
<br/>
<br/>ACT 'Идти в комнату':
<br/>    GT 'Комната'
<br/>END
<br/>
<br/>ACT 'Идти в ванную':
<br/>    GT 'Ванная'
<br/>END
<br/>
<br/>ACT 'Идти в туалет':
<br/>    GT 'Туалет'
<br/>END
<br/>
<br/>ACT 'Идти на кухню':
<br/>    GT 'Кухня'
<br/>END
</code>
<segment>
<p>
Вуаля! Теперь у нас есть целая виртуальная однокомнатная квартира, по которой можно бродить до бесконечности. Запустите плеер и проверьте как это работает.
</p>
<p>
Надоедает такое занятие, конечно, мгновенно. На самом деле, не умея делать ничего кроме переходов по локациям, уже можно создать игру. Но арсенал, который предоставляет нам QSP, неизмеримо больше – иначе не стоило бы и огород городить. Так что мы не остановимся на достигнутом и попробуем оживить пространство.
</p>
<p>
Как насчет индивидуальных описаний каждой зоны?
</p>
<p>
Это проще простого. Можно просто добавить в наш код описания, как мы уже делали раньше. Например, для комнаты пусть это будет так:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
'Захламленное помещение размером 3x4 метра. Эта комната не знала ремонта со дня новоселья. Да и уборки тут не было уже очень-очень давно. Но зато тут есть главное – рабочий компьютер с выходом в Интернет, спальное место и тумбочка, в которой лежат деньги! '
</code>
<segment>
<p>
Добавьте это описание в локацию «Комната» и место сразу станет немного интересней. Попробуйте сами придумать описание для остальных помещений. А после этого, мы двинемся дальше.
</p>
<p>
Итак, мы написали, что в тумбочке лежат деньги. Обманывать нехорошо, так что придется их туда положить. Как это сделать?
</p>
<p>
Для этого надо будет использовать один из важнейших инструментов QSP (да и программирования в целом) – так называемые «переменные». Умное определение переменной вы найдете в справке по QSP, а я просто покажу, как это работает. Итак, в наш игровой мир должно прийти неизбежное зло – деньги. Создадим переменную `деньги`. В отличие от некоторых других языков программирования, в QSP нам не надо объявлять переменные заранее. Любая переменная, значение которой не было указано раньше, считается существующей, но равной нулю. Так что мы можем сразу переходить к коду.
</p>
<p>
Назовем деньги, которые лежат в кармане героя игры, просто «деньги», а те что отложены в тумбочку «заначка». Это собственно и будут наши переменные. Сейчас они обе равны нулю – денег нет. Чтобы в заначке что-то было надо добавить такой код:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
заначка = 100
</code>
<segment>
<p>
Таким образом, мы присвоим переменной «заначка» значение `100`. В мире игры же это будет значить, что в тумбочке лежит сто рублей. Но вот вопрос, куда поместить этот код? Раз тумбочка стоит в комнате, кажется логичным, что в локации комната нам и надо записать нашу заначку. На самом деле это не совсем так, но давайте попробуем сделать так. Вставьте код заначки в комнату.
</p>
<p>
Для игрока пока что ничего не изменилось – у него нет возможности увидеть значение переменных сами по себе. Но игра-то знает, что в заначке есть сто рублей. Как сделать их доступными для игрока? Например, создав подходящее действие! Пишите в локации «комната»:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
ACT 'Заглянуть в тумбочку':
<br/>    ' В тумбочке лежит &lt;&lt;заначка&gt;&gt; руб.'
<br/>END
</code>
<segment>
<p>
Теперь опробуйте, что получилось. Как видите вместо слова `&lt;&lt;заначка&gt;&gt;`, игра выдает цифру `100`. Как это получается? Очень просто. Если вы заключите переменную в такие скобки `&lt;&lt; &gt;&gt;`, то в тексте на этом месте отразится текущее значение переменной.
</p>
<p>
Но зачем нам заначка, из которой нельзя немножечко взять? Незачем! Давайте обеспечим нашему герою такую возможность. Для этого придется переделать код на более сложный:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
ACT 'Заглянуть в тумбочку':
<br/>    ' В тумбочке лежит &lt;&lt;заначка&gt;&gt; руб.'
<br/>    CLA
<br/>    IF заначка &gt; 0:
<br/>        ACT 'Взять денег':
<br/>            a = $input('Сколько взять?')
<br/>            IF a &gt; заначка:
<br/>                msg 'Первый закон подлости: нельзя взять из тумбочки больше денег, чем туда было положено!'
<br/>                GT $curloc
<br/>            ELSE
<br/>                деньги = деньги + a
<br/>                заначка = заначка - a
<br/>                GT $curloc
<br/>            END
<br/>        END
<br/>    END
<br/>    ACT 'Закрыть тумбочку':
<br/>        GT $curloc
<br/>    END
<br/>END
</code>
<segment>
<p>
Ух как сложно все сразу стало! Ну ничего, сейчас разберемся. Давайте по порядку.
</p>
<p>
Первое неизвестное – оператор `CLA`. Тут все просто – это команда "очистить список действий". Как только мы выберем действие «Заглянуть в тумбочку», у нас пропадет само это действие и действие «выйти в коридор» - т.е. все, что имелось в списке действий. Между прочим, действия, если нужно, можно удалять и по одному. Для этого надо использовать команду такого типа: `DELACT 'Заглянуть в тумбочку'`. Но сейчас нам проще снести весь список действий целиком.
</p>
<p>
Дальше идет не совсем понятная строчка `IF заначка &gt; 0:` — это команда с проверкой условия. Для проигрывателя она означает следующее: ЕСЛИ значение переменной `заначка` больше нуля, немедленно сделай все, что следует после двоеточия и вплоть до закрывающего оператора END. Как видите, это похоже на действие, только тут игроку не надо ничего выбирать. Программа сама проверяет условие и если условие верно, делает то что требуется.
</p>
<p>
Между `IF` и закрывающим его `END` идет действие «Взять денег». Таким образом, если заначка будет равна 0, то мы просто не увидим этого действия, т.к. условие не будет выполнено. И действительно, как можно взять деньги, которых нет?
</p>
<p>
Еще одна непонятная строчка `a = $input('Сколько взять?')` — тут дело обстоит следующим образом: `a` — это переменная. Точно такая же, как `заначка`. Но в данном случае, вместо того чтобы указать ее значение в коде, мы предоставляем выбор игроку. Оператор `$input` делает вот что: он выводит отдельное окошко, в котором пишет выражение, следующее за ним в кавычках. Кроме того, в окошке можно ввести текст. В данном случае – это должно быть число рублей, которые игрок хочет взять из тумбочки.
</p>
<p>
Дальше идет еще один `IF`, который проверяет, не захотел ли игрок захапать больше, чем есть. Если сумма, которую он пытается взять, больше, чем заначка, ему выводится предупреждение. А зачем там стоит оператор `msg`? Он позволяет вывести текст не в главном окне описаний, а в отдельном всплывающем окошке. Причем исполнение программы прервется до тех пор, пока игрок не нажмет на галочку, подтверждающую, что он прочел наше послание. Иногда это бывает удобно.
</p>
<p>
За посланием идет известное нам `GT`, но с каким-то непонятным `$curloc` да еще и без кавычек. Что это? Ведь мы не делали локации с таким названием? `$curloc` указывает на текущую локацию. В данном случае `$curloc = 'Комната'`. Мы могли бы написать и так и так – результат один и тот же. Просто я решил показать еще одну возможность и слегка сэкономить на печатных знаках.
</p>
<p>
И снова упираемся в неизвестность. `else` это такой интересный оператор, который используется вместе с `IF`. Все что идет ДО него, исполняется когда условие `IF` верно. Если же условие `IF` не верно, то выполняется то, что идет после `else` и до закрывающего его `END`. В данном случае, если игрок пытается взять из заначки не слишком много денег, то ему позволяется это сделать. Следующие две строки как раз это и обеспечивают. Строка `деньги = деньги + a` расшифровывается легко. Мы устанавливаем переменную `деньги` на значение равное нынешнему (имеющиеся деньги) + значение `а` (это количество денег, которые берет себе из заначки игрок).
</p>
<p>
При первом подходе к тумбочке деньги равны нулю, так что мы могли бы написать просто деньги = a. Но в таком варианте, когда игрок возьмет деньги второй раз, все, что у него было до этого, сгорит и значение денег снова придет к только что взятому количеству. Формула деньги = деньги + а позволяет нам не упустить те деньги которые уже есть у персонажа, когда бы он ни полез в тумбочку.
</p>
<p>
Аналогичная формула уменьшает значение денег оставшихся в заначке.
</p>
<p>
Запустите программу и попробуйте несколько раз взять деньги из тумбочки. Вы заметили? Что-то работает не правильно. Денег в заначке остается столько же, хотя мы честно прописали все условия. Неужели деньги не получается взять? А как узнать? Мы ведь нигде не видим, сколько денег есть в кармане.
</p>
<p>
Давайте проверим. Добавьте в локацию вот такой код:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
PL 'В кармане: &lt;&lt;деньги&gt;&gt; руб.'
</code>
<segment>
<p>
Оператор `PL` выведет наше выражение не в основном окне описаний, а в дополнительном. Так мы узнаем, сколько денег в кармане у героя. Попробуйте запустить программу снова и взять денег из тумбочки.
</p>
<p>
Сначала все выглядит нормально, но потом становится даже хуже, чем прежде. Строки с количеством денег в кармане громоздятся одна на другую, в кармане денег все прибывает, но в тумбочке по-прежнему сторублевая заначка. Не расстраивайтесь. Мы сейчас все поправим.
</p>
<p>
Для начала разберемся с дополнительным описанием. Дело в том, что при переходе на новую локацию через оператор `GT` у нас очищается основное окно описаний. Потому описания не громоздятся одно на другое, и даже фраза про деньги в тумбочке исчезает, если мы ее закрыли. Но дополнительное окно описаний само по себе не очищается. Иногда это удобно, но нам надо, чтобы там была всегда только одна строчка – та которая указывает на реальное состояние карманов героя.
</p>
<p>
Нам на помощь придет оператор `CLR`. Добавьте его перед `PL`, и все станет хорошо. `CLR` очищает окно дополнительного описания. Кстати, если вам понадобится вычистить основное окно, то можно использовать оператор `*CLR`. То же самое, но со звездочкой.
</p>
<p>
Однако это не решает проблемы бесконечных денег в тумбочке. Приятно конечно, но не совсем честно. Почему деньги прибавляются, но заначка не убавляется?
</p>
<p>
На самом-то деле убавляется: наш код `заначка = заначка - a` работает верно. Почему тогда денег остается `100` рублей? Тут надо понять как работает `GT`. Сразу после того как мы взяли денег из тумбочки, программа возвращает нас на ту же локацию и прогоняет весь имеющийся на ней код заново. А какая строка есть в этом коде? Верно: `заначка = 100`. Программа честно считает, что заначка должна снова равняться `100`, и исполняет приказ. Уменьшенную только что сумму заначки она снова приравнивает к стартовому значению.
</p>
<p>
Чтобы избавиться от этой досадной штуки, можно придумать много способов, но самый простой – перенести условие о стартовом размере заначки в начальную локацию. Ведь сколько бы мы ни бродили по квартире, в начальную локацию нам никак не попасть. А значит и код ее будет выполнен только на старте и уже не помешает нашим коварным планам по ходу игры.
</p>
<p>
Теперь все должно работать правильно. Проверьте. И заодно насладитесь тем, как при достижении заначкой порога `0` рублей, у нас исчезает действие «взять деньги». А теперь задание на самостоятельную работу: используя полученные только что знания, добавьте в меню действие позволяющее перекладывать деньги обратно из кармана в заначку. Если урок усвоен, у вас все должно получиться.
</p>
<p>
Теперь в игре уже даже есть, чем заняться. Поздравляю. Хотя этого мало и мы будем наполнять саму игру дальше, давайте вернемся ненадолго к началу и добавим пару штрихов.
</p>
<p>
У программистов бытует такая шуточная задачка: «Буратине дали три яблока. Одно яблоко Буратина съел. Сколько яблок осталось у Буратины?» Правильный ответ: «Хрен его знает, сколько яблок было у него до того, как ему дали еще три». Тут есть важная мораль, и звучит она так: обнуляйте переменные. Когда вам надо начинать с чистого листа, на помощь приходит замечательный оператор `KILLALL`. Он позволяет стереть значения всех имеющихся переменных и объекты из инвентаря. Давайте поставим такую строчку в начальной локации. Если нам потом захочется в конце нашей игры сделать вариант «начать сначала» и `GT «Начало»`. Тогда у нашего героя не окажется в кармане миллиона, заработанного в предыдущей игре.
</p>
<p>
И еще. Негоже герою быть безымянным – страна должна знать своих героев. И тут мы узнаем, что оказывается переменные могут иметь не только числовое, но и текстовое значение!
</p>
<p>
Правда такие переменные обозначаются немного иначе – перед ними стоит знак `$`. Мы можем сделать так, например: `$name = 'Вася'`. Но это не имеет особого смысла. Почему бы просто не писать в нужном месте «Вася», если уж мы решили что героя зовут именно так? Переменная тут не нужна.
</p>
<p>
Зато, благодаря текстовой переменной, мы можем предложить игроку самому назвать своего героя! Вы можете и сами догадаться, как это сделать, но я подскажу. Мы просто слегка изменим код действия «начать игру» в стартовой локации:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
ACT 'Начать игру':
<br/>    $name = $input('Представьтесь, пожалуйста.')
<br/>    GT 'Комната'
<br/>END
</code>
<segment>
<p>
Теперь игрок может ввести любое нравящееся ему имя, а мы можем использовать это имя, где захотим по ходу игры (при помощи конструкции `&lt;&lt;$name&gt;&gt;`).
</p>
<p>
Но что если игрок ошибется и оставит поле для имени пустым? Это не вызовет сбоя в программе, конечно, но там, где мы вставим в игру имя героя, будет красоваться пустое место. А это некрасиво. Давайте добавим проверочное условие.
</p>
</segment>
<code code-left-level="0" code-type="qsp">
ACT 'Начать игру':
<br/>    $name = $input('Представьтесь, пожалуйста.')
<br/>    IF $name = '':
<br/>        $name = 'Хакер'
<br/>    END
<br/>    GT 'Комната'
<br/>END
</code>
<segment>
<p>
Т.е. если имя будет равно пустой строке, то игра будет величать героя прозвищем «Хакер». Внимательно следите за наличием `$` в названии текстовой переменной. Если вы напишете `name = 'Вася'`, то программа выдаст ошибку!
</p>
<p>
Ну вот, можно возвращаться снова к игре.
</p>
<p>
Пожалуй, стоит завести в квартире кота. Кот это хорошо. Мы, конечно, могли бы дать возможность игроку самому выбрать имя кота – мы это уже умеем. Но для целей этого руководство будет полезен другой подход. Давайте сделаем так, чтобы имя кота случайно выбиралось из трех вариантов. Например «Пушок», «Слоупок» и «Йцукен».
</p>
<p>
Тут то у нас и появится повод изучить сразу две важные вещи – работу рандомайзера и понятие о «массивах». Итак, массивы - что это такое? Фактически, мы уже с ними работаем. Каждая переменная является элементом массива. Массив – это множество переменных, с одним и тем же именем, но разными индексами. Поясню на примере.
</p>
<p>
Вот у нас есть три имени для кота. Мы забьем их в массив, вот таким образом:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
$кот[1] = 'Пушок'
<br/>$кот[2] = 'Слоупок'
<br/>$кот[3] = 'Йцукен'
</code>
<segment>
<p>
Как видите, мы имеем просто три текстовые переменные. Но на самом деле это три элемента единого массива $кот. Кстати, если мы напишем, например `$кот = 'Слоупок'`, то это будет полностью эквивалентно по значению коду `$кот[0] = 'Слоупок'`. Просто ноль тут опускается за ненадобностью. Каждая переменная без численного индекса автоматом считается нулевой переменной одноименного массива.
</p>
<p>
Но зачем городить огород, спросите вы? А как обычно, для упрощения себе жизни. Массивы могут быть невероятно полезны в этом смысле. И вот вам живой пример. Как создать случайный шанс выпадения любого из трех имен котов в начале игры?
</p>
<p>
Для этого достаточно в начальной локации прописать такой код:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
кличка = RAND (1,3)
</code>
<segment>
<p>
Оператор `RAND` случайным образом выберет число от `1` до `3` – именно этот диапазон мы указали ему в скобках. Теперь в любом месте игры, для указания клички кота, мы можем написать конструкцию вида `&lt;&lt;$кот[кличка]&gt;&gt;`. И никакой возни с `IF/else` и так далее!
</p>
<p>
Давайте-ка изучим возможности инвентаря, используя нашего замечательного именного кота. Условия такие: кот программиста настолько ленив, что не собирается передвигаться сам. Он привык, чтобы его носили на руках. Реализуем кота, как объект, который изначально находится в коридоре, который можно таскать с собой и положить в любом другом месте. А потом обратно взять и снова таскать. И так пока не надоест.
</p>
<p>
Задачка не такая простая, как кажется, но мы справимся. Итак, для начала нам нужно положить кота в коридоре. Для этого достаточно добавить туда его описание. Но если описание будет задано жестко, то даже если мы унесем кота, он, судя по описанию, будет оставаться в коридоре.
</p>
<p>
Придется применить команду `IF`.  Переменная «где_кот» будет задавать местонахождение кота. Если она равна `0` – значит кот на руках у хозяина. А для каждой комнаты мы определим свое число – если `кот =` числу комнаты, значит кот в этой комнате. Пусть коридору соответствует число `1`.
</p>
<p>
Тогда в локации «Коридор» надо прописать:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
IF кот = 1: ' На полу вальяжно развалился кот &lt;&lt;$кот[кличка]&gt;&gt;'
</code>
<segment>
<p>
Заметьте, что тут мы используем не обычную конструкцию `IF` – все в одну строчку и без оператора `END`. Это упрощенный вариант, который мы можем использовать в тех случаях, когда требуется выполнение одного единственного условия. Кстати такой же вариант возможен и для `ACT`. Но это не обязательно:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
IF кот = 1:
<br/>    ' На полу вальяжно развалился кот &lt;&lt;$кот[кличка]&gt;&gt;'
<br/>END
</code>
<segment>
<p>
Вариант, приведенный выше, тоже сработает.
</p>
<p>
Теперь надо скопировать эту строчку во все локации, только каждой присвоить свой уникальный номер. При желании вы можете поменять описание, чтобы лежащий кот вписывался в окружающую среду. На кухне он может лежать у миски, а в комнате, к примеру, греться лежа на мониторе.
</p>
<p>
Кстати, что мы упускаем? Верно! Надо поставить в начальной локации условие `кот = 1`. Иначе кот не окажется в коридоре. Между прочим, используя уже полученные знания, вы можете написать условие, по которому кот будет стартовать в случайной локации. Считайте это домашним заданием.
</p>
<p>
Но как же взять его на ручки?
</p>
<p>
В каждой локации, где может оказаться кот, нам придется вставить подобный код:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
IF кот = 1:
<br/>    ACT 'Взять кота за шкварник':
<br/>        кот = 0
<br/>        ADDOBJ 'Кот &lt;&lt;$кот[кличка]&gt;&gt;'
<br/>        DELACT 'Взять кота за шкварник'
<br/>    END
<br/>END
</code>
<segment>
<p>
Естественно, номер локации должен совпадать со значением кота. Команда `ADDOBJ` – добавляет предмет, с соответствующим названием в инвентарь. Теперь мне достаточно сообщить вам, что для удаления из инвентаря используется команда `DELOBJ`, и вы сможете сами прописать вторую часть: возможность положить кота обратно.
</p>
<p>
Если все получилось, то вы просто обязаны наградить себя чем-нибудь вкусненьким. Коты знают толк в поощрениях! От себя добавлю, что для того чтобы класть кота можно было использовать не только условие вида `IF кот = 0`, но и условие `IF OBJ 'Кот &lt;&lt;$кот[кличка]&gt;&gt;'`. Практически любую задачу можно решить многими путями. Не приучайте себя к шаблонам – ищите оптимальный вариант для каждого случая. Это отличная зарядка для ума.
</p>
<p>
Итак, мы можем таскать с собой кота. А можем и не таскать. Но интерактивности что-то маловато. К счастью, этому горю несложно помочь. Время познакомиться с концепцией всплывающего меню и локаций-обработчиков.
</p>
<p>
Локация-обработчик — это вариант служебной локации. Т.е. такой, которая уж точно не является никаким «местом» в мире игры, а просто выполняет какую-то вспомогательную функцию. Существует много вариантов локаций-обработчиков, но мы начнем с «локации обработчика выбора предметов». Напишите в самом начале стартовой локации вот такой код:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
$ONOBJSEL = 'выбор_объекта'
</code>
<segment>
<p>
Это команда, которая означает следующее: как только игрок выделит мышкой любой объект в инвентаре, программа должна в фоновом режиме перейти к локации под названием «выбор_объекта». Что значит в фоновом режиме?
</p>
<p>
Как вы помните, команда `GT` стирает все, что написано в главном окне описания, а так же удаляет все действия, после чего переходит к выполнению кода новой локации. Но есть способы перейти к новой локации помягче. Если вместо `GT` вы напишете `XGT`, то описание, имевшееся в главном окне, не будет стерто при переходе на новую локацию. Есть и еще более мягкий способ, который я называю «фоновым». Он задается командой `GS` (от полной формы `GOSUB`). В этом случае, ничего не стирается и перехода на новую локацию фактически не происходит – оставаясь на прежней локации, программа одновременно выполняет действия указанные на локации, куда ее отправили. Выполнение кода текущей локации при этом не прерывается.
</p>
<p>
Т.е. если вы поставите какой-то код после `GT`, программа до него просто не доберется, перескочив на новую локацию. А вот `GS` можно ставить сколько угодно, программа выполнит то, что ей предписано там, и будет продолжать выполнять код текущей локации. Собственно вот такую форму перевода и использует оператор `$ONOBJSEL`, только не по команде игрока, а автоматически, каждый раз когда выделяется любой предмет в инвентаре.
</p>
<p>
Понятно, что теперь нам нужно создать локацию «выбор_объекта» (вообще вы можете назвать ее как угодно). Сделайте это и напишите в новой локации вот такой код:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
IF $selobj = 'Кот &lt;&lt;$кот[кличка]&gt;&gt;':
<br/>    $кошак[0] = 'Осмотреть:осмотр_кота'
<br/>    $кошак[1] = 'Погладить:погладь_кота'
<br/>    $кошак[2] = 'Положить:полож_кота'
<br/>    menu '$кошак'
<br/>    unsel
<br/>END
</code>
<segment>
<p>
Мы только что создали всплывающее меню для объекта. Что говорит плееру приведенный выше код? Он говорит, что если в данный момент выделен объект "кот", то надо сделать меню. Собственно само меню задается командой `menu '$кошак'`, но само по себе оно будет пустым. Массив `$кошак`, идущий перед вызовом меню, – это список вариантов, которые данное меню будет предоставлять.
</p>
<p>
Как видите, элементам массива приписаны довольно странные выражения. Поясним. То что идет перед двоеточием, это название пункта меню, которое будет видно игроку. То что идет после двоеточия, это название локации, на которую надо будет перейти в фоновом режиме при выборе данного пункта меню. Так как локаций с этими названиями нет, то меню будет работать с ошибкой. Создайте локации под названиями: «осмотр_кота» , «погладь_кота» и «полож_кота». Теперь ошибки не будет – запустите программу и посмотрите, как это работает.
</p>
<p>
Естественно, при клике на пункты меню ничего не будет происходить. Все потому, что локации котоые мы создали, — пустые. Там нечего выполнять. Но вы можете это исправить сами. Просто напишите в этих локациях, что должно произойти в результате осмотра, поглаживания или водружения кота обратно на пол. Заметьте, теперь можно обойтись без специального действия в каждой локации. Кота можно положить обратно в любой локации, прямо через всплывающее меню!
</p>
<p>
Правда вот незадача… положить то кота мы можем. И даже можем заставить его исчезнуть из инвентаря. Но как программа узнает, ГДЕ мы его положили? Разочарую вас – сама по себе она этого делать не станет, и нам придется что-то придумать. Это не слишком сложно.
</p>
<p>
Давайте рассмотрим проблему. Когда мы кладем кота, то должны дать переменной «кот» значение отличное от нуля. Если мы пишем код в самой локации через `ACT`, то тут нет никакой проблемы – мы просто ставим цифру, которую назначили для этой локации. Но если кот кладется через меню, то это может происходить, где угодно. Т.е. нам надо решить ту же задачу, но для общего случая.
</p>
<p>
В каждой локации напишите подобный код: `лока = 1`. Естественно единичка — это будет для коридора. Для других комнат присвойте переменной «лока» другие значения-номера. Теперь локация «полож_кота» может выглядеть примерно так:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
DELOBJ 'Кот &lt;&lt;$кот[кличка]&gt;&gt;'
<br/>кот = лока
<br/>GT $curloc
</code>
<segment>
<p>
С тем, как работает этот код, вы легко разберетесь самостоятельно.
</p>
<p>
Ах, да. При рассмотрении меню мы упустили оператор `unsel`. Прямого отношения к меню он не имеет, а просто дает программе команду снять выделение с объекта. Если бы выделение не снималось, меню стало бы «одноразовым», и игроку самому приходилось бы придумывать как снять выделение с кота. Это можно сделать, выделив другой предмет, но у нас он пока только один. Так что не насилуйте мозги своих будущих игроков и не забывайте ставить оператор unsel на действия с объектами.
</p>
<p>
Давайте потренируемся со служебными локациями еще немного и рассмотрим «локацию обработчик перехода на новую локацию». Чтобы создать ее, напишите в начале стартовой локации код:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
$ONNEWLOC = 'переход'
</code>
<segment>
<p>
И соответственно создайте служебную локацию под названием «переход». На этой локации мы можем задавать события, которые будут происходить при посещении каждой новой локации. Давайте с помощью нее, мы реализуем для нашего героя возможность проголодаться.
</p>
<p>
Добавьте на локацию «переход» вот такой код:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
CLR
<br/>голод = голод + 1
<br/>IF голод &gt; 10:
<br/>    PL 'Вы проголодались!'
<br/>END
</code>
<segment>
<p>
В результате, при каждом переходе между локациями (кроме фоновых переходов), к значению переменной `голод` будет добавляться единичка. И когда `голод` увеличится до `11+`, в окне дополнительных описаний будет появляться фраза «Вы проголодались!». А `CLR` в самом начале, нужно нам для того, чтобы эта фраза не размножалась.
</p>
<p>
Только вот беда, это будет затирать наше сообщение о количестве денег в кармане! Но это не беда. Давайте перенесем код `PL 'В кармане: &lt;&lt;деньги&gt;&gt; руб.'` из локации «Комната» в локацию «переход». Лучше всего поставить ее после `CLR` и перед проверкой на голод. Тогда сначала будет отражаться количество денег, а потом (если проголодался) предупреждение о голоде.
</p>
<p>
Кстати отслеживать такие переменные, как количество денег, здоровье персонажа и т.п. лучше всего именно при каждом переходе на новую локацию. Это практичнее чем вставлять такой код на каждой локации, где значение может измениться – их ведь может быть очень много!
</p>
<p>
Ну а раз герой может проголодаться, значит ему нужно научиться и питаться. Добавить на кухне холодильник с продуктами, плиту и программу приготовления еды вы сможете сами. Дам только одну подсказку – когда герой поест, надо обнулить или снизить на какое-то значение переменную «голод». Впрочем, вы наверняка догадались об этом сами. Вообще, теперь у вас есть достаточно инструментов, которые позволят нарастить функционал игры, настолько, насколько позволит ваша фантазия.
</p>
<p>
Конечно, мы перечислили здесь не все операторы, но ухватив главное, остальное вам уже нетрудно будет почерпнуть из файла справки.
</p>
<p>
Тем не менее, у нас остался еще один большой не разобранный кусок – красивости. QSP способно и на них, а оболочка AERO и вовсе затачивалась на мультимедийные эффекты. Конечно, это те эффекты, которых можно ожидать от текстовой игры, но в этих рамках они на высоте.
</p>
<p>
Итак, во-первых, QSP поддерживает html-теги. Т.е. фактически вы можете верстать игру как веб-страницу, используя блочную или табличную разметку, картинки, звуки, гиперссылки и т.п. Html поддерживается не полностью, но в достаточном объеме – полный список можно найти в файле справки по AERO Shell.
</p>
<p>
Применять html мы в рамках данного руководства вас учить не будем, остановимся только на основных, либо специфических моментах. По самому же языку разметки html в сети есть более чем достаточно руководств.
</p>
<p>
Для того, чтобы игра понимала html, необходимо в начальной локации поставить такую строчку: `USEHTML = 1`. Соответственно, если вы захотите в какой-то момент отключить поддержку html, то нужно будет написать `USEHTML = 0`.
</p>
<p>
Как вставлять html код? Он будет читаться прямо по ходу любых текстовых выражений. Например, мы можем слегка отредактировать заголовок игры, используя CSS стили:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
'&lt;div style="font-size: 30px; font-family:georgia; font-weight:bold; text-align:center; color:#ff0000"&gt;МОЯ ПЕРВАЯ ИГРА&lt;/div&gt;'
</code>
<segment>
<p>
Как видите, html теги используются здесь прямо в выражении (внутри кавычек). Т.е. надо понимать, что плеер воспринимает html не как собственный код QSP, а как разметку самого текста. Тем не менее, можно делать всякие хитрые вещи. Например, вставить в текст описания гипертекстовую ссылку, которая будет активировать действие.
</p>
<p>
Давайте предположим, что мы хотим сделать в коридоре криво висящую картину, которую можно будет поправить. Идем в локацию «Коридор» и вставляем туда такой текст описания:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
IF картина = 0:
<br/>    ' На стене висит &lt;a href="exec:GS ''поправь''"&gt;картина&lt;/a&gt; в дешевой пластиковой раме. Картина слегка перекошена.'
<br/>else
<br/>    ' На стене идеально ровно висит картина в дешевой пластиковой раме.'
<br/>END
</code>
<segment>
<p>
<tag name="simple-string">
Собственно кусок `exec:GS </tag>
<tag name="tt">
поправь</tag>
<tag name="simple-string">
` в ссылке href, это команда отправиться в локацию «поправь». Создайте эту локацию с кодом:
</tag>
</p>
</segment>
<code code-left-level="0" code-type="qsp">
картина = 1
<br/>msg 'Непорядок! Надо бы поправить.'
<br/>GT $curloc
</code>
<segment>
<p>
Заметьте, что мы перешли на «поправь» мягко, через `GS`, так что команда `$curloc` будет относиться к локации «Комната».
</p>
<p>
При помощи html и CSS вы можете сделать со шрифтами и картинками очень многое. Язык QSP, тем не менее, имеет и собственные операторы для работы с мультимедиа. Давайте перейдем теперь к ним и настроим интерфейс игры так, как нам этого хочется.
</p>
<p>
Во-первых, было бы неплохо отключить строку ввода – мы ведь не используем ее в программе, так что она просто маячит без толку на виду.
</p>
<p>
Для этого можно в стартовой локации прописать условие: `SHOWINPUT 0`. Это скроет строку ввода. Но для первой локации было бы неплохо скрыть и другие вспомогательные поля – дополнительное описание и список предметов. Они ведь там не нужны, верно? Так что добавим еще:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
SHOWSTAT 0
<br/>SHOWOBJS 0
</code>
<segment>
<p>
Но тут возникает проблема. В первой то локации нам вспомогательные поля не нужны, а вот в остальных – очень даже. Но теперь, пока мы их не включим специально, эти поля не будут отражаться. Так что модифицируем немножко код действия «начало игры»:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
ACT 'Начать игру':
<br/>    $name = $input ('Представьтесь пожалуйста.')
<br/>    IF $name = '':
<br/>        $name = 'Хакер'
<br/>    END
<br/>    SHOWSTAT 1
<br/>    GT 'Комната'
<br/>END
</code>
<segment>
<p>
Так мы сможем включить окно дополнительных описаний при начале игры. А вот окно с предметами хорошо было бы включать только тогда, когда у нас появляются какие-либо предметы. Давайте тогда в локации «переход» добавим условие:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
IF countobj &gt; 0:
<br/>    SHOWOBJS 1
<br/>else
<br/>    SHOWOBJS 0
<br/>END
</code>
<segment>
<p>
Функция `countobj` считает количество предметов в инвентаре. Соответственно, наш `IF` будет проверять, есть ли в инвентаре хотя бы один предмет и когда надо включать/выключать показ окошка инвентаря.
</p>
<p>
Теперь, если вы запустите и проверите наши изменения, то увидите странную вещь. С одной стороны, поля которые мы убрали, остаются пустыми, но разметка никуда не делась! Дело в том, что AERO Shell размечает экран при помощи фоновой картинки. Те линии, которые мы принимаем за разметку окошек, на самом деле просто статичная картинка и она не отражает никаких изменений. В AERO Shell, если вы хотите обозначить границы различных зон, вам придется делать это самостоятельно. Размеры и координаты каждого поля так же придется устанавливать в коде.
</p>
<p>
Давайте этим займемся. Экран игры по умолчанию имеет размер 800х600 пикселей. Причем, хотя вы можете увеличивать или уменьшать размер окна, оно будет всеми силами сохранять именно эту пропорцию. Так что мы можем воспринимать размер 800х600 как абсолютный. При желании вы можете создать новую подложку для окна игры, с разметкой по зонам или без оной, целиком. Для этого найдите или создайте желаемую фоновую картинку соответствующего размера и назовите ее, например, `фон.jpg` (для теста вполне подойдет какой-нибудь wallpaper). Плеер поддерживает и другие распространенные графические форматы, так что вы можете использовать к примеру `.gif` (даже анимированный) либо, как это рекомендуется разработчиком, `.png` с поддержкой прозрачности слоев.
</p>
<p>
Создайте непосредственно в директории с файлом игры папку «`content`» и положите фоновый рисунок туда. Осталось добавить на стартовую локацию код:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
$BACKIMAGE = 'content/фон.jpg'
</code>
<segment>
<p>
Запустите программу и посмотрите что получилось.
</p>
<p>
Для удобства, давайте зададим фон каждой из нужных нам зон. Для этого вам понадобятся четыре небольших картинки (например, в формате `.jpg`). Картинки будут использоваться как фон, и они будут заполнять все выделенное пространство как плитка, так что нам хватит однотонных квадратов 50х50 пикселей. Запустите какую-нибудь программу для рисования и сделайте картинки соответствующего размера, залитые цветами. Например: бежевым, светло-коричневым и бледно-желтым. Подберите цвета так, чтобы они не резали глаз в качестве фона под текстом.
</p>
<p>
Назовем наши файлы «`беж.jpg`», «`кор.jpg`» и «`жел.jpg`» и сложим их в папку «`content`». Теперь можно стереть строчку `BACKIMAGE` и добавить на стартовую локацию код:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
$MAINDESC_BACKIMAGE = 'content/жел.jpg'
<br/>$STATDESC_BACKIMAGE = 'content/жел.jpg'
<br/>$ACTIONS_BACKIMAGE = 'content/кор.jpg'
<br/>$OBJECTS_BACKIMAGE = 'content/беж.jpg'
</code>
<segment>
<p>
Он замостит соответствующие поля созданными нами квадратиками. Точно так же вы можете поместить туда любое другое изображение. Благодаря цветной маркировке мы сможем видеть какое место реально занимает каждое из наших полей.
</p>
<p>
Если вы запустите программу, то увидите, что отключенные поля просто отсутствуют (на их месте серый фон), а включенные лежат ровно в тех рамках, которые установлены программой по умолчанию. Нас это не слишком устраивает, так что давайте поиграемся с размерами полей.
</p>
<p>
Начнем со стартовой локации, где у нас всего два поля: основное и список действий. Нужно чтобы они занимали все свободное пространство. Как сказано выше, размер окна игры составляет 800х600 пикселей. Исходя из этого, нам надо задать ширину главного поля, а так же ширину и высоту списка действий:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
MAINDESC_W = 800
<br/>ACTIONS_H = 200
<br/>ACTIONS_W = 800
</code>
<segment>
<p>
Теперь все выглядит аккуратнее, но нам нужно будет вставить в код строчки для изменения размеров на случай каждого появления и исчезновения нового поля. Например так (в стартовой локации):
</p>
</segment>
<code code-left-level="0" code-type="qsp">
ACT 'Начать игру':
<br/>    ! $name = input 'Представьтесь пожалуйста.'
<br/>    IF $name = '':
<br/>        $name = 'Хакер'
<br/>    END
<br/>    SHOWSTAT 1
<br/>    ACTIONS_W = 590
<br/>    GT 'Комната'
<br/>END
</code>
<segment>
<p>
И так (в обработчике перехода на новую локацию):
</p>
</segment>
<code code-left-level="0" code-type="qsp">
IF countobj &gt; 0:
<br/>    SHOWOBJS 1
<br/>    MAINDESC_W = 590
<br/>else
<br/>    SHOWOBJS 0
<br/>    MAINDESC_W = 800
<br/>END
</code>
<segment>
<p>
Теперь размеры всех полей будут динамически изменяться и заполнять весь экран игры.
</p>
<p>
Вы можете задавать подложки и для других полей, например для окошек `msg`, `input` или `menu` – соответствующие команды можно найти в справке по AERO Shell.
</p>
<p>
А что если нам хочется добавить картинки посерьезнее? Например, чтобы вместо описания комнаты, выводилась ее фотография? Попробуйте найти подходящую картинку или просто сфотографируйте свою комнату на цифровой аппарат. Поместите файл с изображением комнаты в папку «`content`».
</p>
<p>
Теперь, нам надо решить, куда поместить изображение комнаты. Можно конечно сделать так:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
$MAINDESC_BACKIMAGE = 'content/комната.jpg'
</code>
<segment>
<p>
Но результат будет не очень хорошим. С постоянным изменением ширины главного поля вы не сможете толком подогнать изображение комнаты под размер и оно будет «тайлиться» или резаться. Кроме того, вам придется делать что-то, чтобы эта картинка отображалась только в локации «Комната» а не во всех подряд.
</p>
<p>
Более изящным решением будет оформить картинку при помощи CSS и html. Вы можете даже создать свои HTML или CSS шаблоны для всех полей и окон плеера, при помощи таких операторов серии `$xxxxxx_FORMAT` (вы найдете их список в справке). Вот например простейший html шаблон-таблица для основного окна описаний:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
$MAIN_FORMAT='&lt;table&gt;&lt;tr&gt;&lt;td&gt;%TEXT%&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'
</code>
<segment>
<p>
Вместо `%TEXT%` программа будет подставлять в шаблон тот текст, который задан в каждой локации для основного окна описаний. Сам шаблон написан на html, но о том, как это правильно сделать, вам лучше расскажут профильные руководства.
</p>
<p>
Есть правда у QSP еще несколько собственных операторов для работы с изображениями, которые могут оказаться полезны. Если вы хотите сделать более красивые переходы между локациями, вам поможет инструмент эффектов перехода. Добавьте на стартовую локацию строчку:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
$NEWLOC_EFFECT = 'fade'
</code>
<segment>
<p>
Тогда смена локации будет происходить не мгновенно, а изображение новой локации будет постепенно проступать сквозь старую. Поэкспериментируйте с разными эффектами, такими как:
</p>
</segment>
<code code-left-level="4" code-type="None">
quake
<br/>blur
<br/>h_blinds
<br/>v_blinds
<br/>l_slide
<br/>r_slide
<br/>u_slide
<br/>d_slide
<br/>iris
<br/>photo
<br/>pixels
<br/>rotate
<br/>v_squeeze
<br/>h_squeeze
<br/>zoom
<br/>wipe1
<br/>wipe2
<br/>wipe3
<br/>wipe4
</code>
<segment>
<p>
Если вы хотите чтобы эффект происходил быстрее или медленнее, то его скорость можно настроить оператором NEWLOC_EFFECT_TIME. Например, такая вот строчка растянет время эффекта перехода до 2-х секунд:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
NEWLOC_EFFECT_TIME = 2000
</code>
<segment>
<p>
Вы можете сменить эффект перехода на новый в любом месте кода, просто добавив новый `$NEWLOC_EFFECT`. Он сменит собой ранее установленный эффект перехода. А такая строчка отключит эффекты перехода вообще:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
$NEWLOC_EFFECT = ''
</code>
<segment>
<p>
Вы можете добавлять перечисленные эффекты не только к основному окну игры но и ко всплывающим окошкам, таким как msg, input, menu и view. Операторы, нужные для этого перечислены в справке. Принцип их работы полностью аналогичен описанному выше.
</p>
<p>
А вот еще одна опция, пожалуй, даже более нужная. Предположим, что вы хотите, чтобы при открытии меню объекта «кот» нам демонстрировалась картинка кота. Для начала надо будет найти подходящую картинку, конечно. Сохраните ее в папку «content».
</p>
<p>
Теперь можно слегка изменить код в локации обработчике выбора предметов:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
IF $selobj = 'Кот &lt;&lt;$кот[кличка]&gt;&gt;':
<br/>    view 'content/кот.jpg'
<br/>    $кошак[0] = 'Осмотреть:осмотр_кота'
<br/>    $кошак[1] = 'Погладить:погладь_кота'
<br/>    $кошак[2] = 'Положить:полож_кота'
<br/>    menu '$кошак'
<br/>    unsel
<br/>END
</code>
<segment>
<p>
Оператор `view` демонстрирует картинку, поверх всего остального, прямо по центру. Если кликнуть по картинке, она исчезнет. Но, на случай если игрок об этом не догадается, можно добавить в нужном месте другой оператор `view`, без аргументов. Это закроет демонстрируемую картинку автоматически. Вы так же можете задать местоположение и размеры картинки через операторы: `VIEW_X` (координата Х), `VIEW_Y` (координата Y), `VIEW_W` (ширина) и `VIEW_H` (высота).
</p>
<p>
Домашнее задание: сделайте так, чтобы изображение кота демонстрировалось не в момент открытия меню, а при нажатии пункта «осмотреть». Выберите более подходящее место и размер для изображения.
</p>
<p>
А мы, раз уж взялись за кота, попробуем организовать ему еще и голос. В QSP имеются операторы и для работы с аудио файлами. В первую очередь это `play`..
</p>
<p>
Если у вас вдруг завалялся звуковой файл с кошачьим мяуканьем, поместите его в папку «`content`» и сделайте так:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
IF $selobj = 'Кот &lt;&lt;$кот[кличка]&gt;&gt;':
<br/>    play 'content/кот.mp3'
<br/>    $кошак[0] = 'Осмотреть:осмотр_кота'
<br/>    $кошак[1] = 'Погладить:погладь_кота'
<br/>    $кошак[2] = 'Положить:полож_кота'
<br/>    menu '$кошак'
<br/>    unsel
<br/>END
</code>
<segment>
<p>
Тогда, при открытии кошачьего меню раздастся мяуканье.
</p>
<p>
Вы можете использовать оператор `play` любым удобным образом, например, чтобы создать плей-лист с фоновой музыкой.
</p>
<p>
Оператор `play` поддерживает изменение громкости проигрывания в % отношении. Например, если вы хотите, чтобы кот в приведенном выше примере мяукал вполовину тише, то можно это записать так:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
play 'content/кот.mp3',50
</code>
<segment>
<p>
Здесь 50 – это 50% громкости.
</p>
<p>
Несколько звуковых файлов (а точнее до 32х) могут проигрываться одновременно. Если вам нужно выключить один из них, то тут подойдет оператор `close`. Например так:
</p>
</segment>
<code code-left-level="0" code-type="qsp">
close 'content/кот.mp3'
</code>
<segment>
<p>
Остановить все проигрываемые звуковые файлы еще проще – для этого достаточно написать `CLOSE ALL`.
</p>
<p>
Объема операторов и приемов программирования, которые мы освоили, вполне должно хватить для написания собственной игры. Не бойтесь комбинировать, экспериментировать и находить неординарные решения. С вопросами, которые не получится решить самостоятельно, смело обращайтесь в сообщество QSP на официальном форуме или канале в дискорде.
</p>
<p>
Удачи!
</p>
<p>
Автор: `MASTERSET`
</p>
<p>
23.04.2010 00:27
</p>
<p>
Мелкие правки: `Aleks Versus`
</p>
<p>
19.07.2022 00:13
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\986_ne_rabotaet_atribut_v_aeroqsp_0044.txt-light">
<header anchor="faq_13_06" head-level="h2">
<p>
13.6. В AeroQSP не работает атрибут</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
В: В AeroQSP не работает атрибут.
</p>
<p>
Например, `border=1`, `bgcolor=#557700`.
</p>
<p>
О:
</p>
<p>
AeroQSP ориентирован на работу со стилями, поэтому для стилизации различных элементов пользуйтесь возможностями CSS.
</p>
<p>
Собственную таблицу стилей можно вписать в переменную `$STYLESHEET`. Вот пример из игры "Один в снегах" от `Lisichk`и:
</p>
</segment>
<code code-left-level="4" code-type="css">
$STYLESHEET='
<br/>    .main { 
<br/>        position:absolute; 
<br/>        height:330px; 
<br/>        width:500px; 
<br/>        left:0px; 
<br/>        text-align:center; 
<br/>    } 
<br/>    .stat1 { 
<br/>        position:absolute;
<br/>        height: 600px; 
<br/>        width: 210px; 
<br/>        top:50;
<br/>        right:650;
<br/>        text-align:center; 
<br/>    } 
<br/>    .stat2 { 
<br/>        position:absolute;
<br/>        height: 600px;
<br/>        width: 200px;
<br/>        left:750px;
<br/>        top:50;
<br/>        text-align:center; 
<br/>    }
<br/>    .roof {
<br/>        position:absolute;
<br/>        width:400px;
<br/>        top:5px;
<br/>        left:440px;
<br/>        text-align:center;
<br/>    }
<br/>    .radio {
<br/>        position:absolute;
<br/>        width:300px;
<br/>        height: 50px;
<br/>        top:300px;
<br/>        left:800px;
<br/>        text-align:center;
<br/>    }'
</code>
<segment>
<p>
Стили для отдельного элемента можно прописать в атрибуте `style`:
</p>
</segment>
<code code-left-level="4" code-type="qsp">
*p "&lt;div style='color:#333333;width:350px;border:12;'&gt;Текст внутри блока&lt;/div&gt;"
</code>
<segment>
<p>
<tag name="simple-string">
Все поддерживаемые свойства перечисленны в сводной справке по AeroQSP </tag>
<tag name="hyperlink" href="https://qsp.org/misc/aero/help.htm">
https://qsp.org/misc/aero/help.htm</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header anchor="link_13_06" head-level="h6">
<p>
13.6. В AeroQSP не работает атрибут</p>
</header>
<segment segment-class="for-head">
<p>
<tag name="simple-string">
Смотреть ответ на ютубе: </tag>
<tag name="hyperlink" href="https://www.youtube.com/watch?v=TCve-b6AQMs&t=18s">
https://www.youtube.com/watch?v=TCve-b6AQMs&amp;</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Storm. #2828 10.Май.15 18:33:19: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=113&prc=25&Itemid=57#p19941">
В классическом плеере и в Quest Navigator`е свойство "border" работает, а в Aero нет.</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Вета. #3784 24.Янв.16 14:50:18: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=152&prc=25&Itemid=57#p22645">
как в аере задать ячейке таблицы цвет? С bgcolor не работает что-то...</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
DeathSpace. #4212 02.Апр.16 13:52:20: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=169&prc=25&Itemid=57#p23639">
перевожу игру на AeroQSP но не показывает таблицы который были в классической версии плеера</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
DeathSpace. #4313 01.Май.16 02:05:59: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=173&prc=25&Itemid=57#p23838">
Ребят кто знает как в AeroQSP строить таблицы?</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\987_ne_rabotaet_giperssylka_v_aeroqsp_0045.txt-light">
<header anchor="faq_13_07" head-level="h2">
<p>
13.7. Не работает гиперссылка в AeroQSP</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
В: Не работает гиперссылка в AeroQSP.
</p>
<p>
Гиперссылка не появляется, или её область смещена.
</p>
<p>
О:
</p>
<p>
Будьте очень аккуратны, когда работаете с блоками в AeroQSP. Необходимо помнить, что вся HTML-разметка должна выводиться одной строкой, особенно блоковые элементы, такие как `DIV` или заголовки.
</p>
</segment>
<code code-left-level="4" code-type="qsp">
! нельзя: 
<br/>*pl '&lt;div&gt;.........&lt;/div&gt;' 
<br/>*pl '&lt;div&gt;.........&lt;/div&gt;' 
<br/>! можно 
<br/>*p '&lt;div&gt;.........&lt;/div&gt;' 
<br/>*p '&lt;div&gt;.........&lt;/div&gt;'
<br/>
<br/>! нельзя 
<br/>'&lt;div&gt;.........&lt;/div&gt;' 
<br/>'&lt;div&gt;.........&lt;/div&gt;' 
<br/>! можно 
<br/>$args[0]+='&lt;div&gt;.........&lt;/div&gt;' 
<br/>$args[0]+='&lt;div&gt;.........&lt;/div&gt;'
<br/>*pl $args[0]
</code>
<segment>
<p>
Смещение областей гиперссылок происходит из-за того, что HTML-рендерер AeroQSP не игнорирует символы преформатирования в HTML, и обрабатывает их по-своему.
</p>
</segment>
</segment>
<header anchor="link_13_07" head-level="h6">
<p>
13.7. Не работает гиперссылка в AeroQSP</p>
</header>
<segment segment-class="for-head">
<p>
<tag name="simple-string">
Смотреть ответ на ютубе: </tag>
<tag name="hyperlink" href="https://www.youtube.com/watch?v=TCve-b6AQMs&t=221s">
https://www.youtube.com/watch?v=TCve-b6AQMs&amp;</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
folkextreme. #4534 20.Июл.16 14:45:03: </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=40&p=182&prc=25&Itemid=57#p24397">
примерно в области, выделенной красным, некликабельны ссылки</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\990_obzory_qsp-compo_2010_0029.txt-light">
<header anchor="informarch_compo10" head-level="h1">
<p>
Обзоры игр QSP Compo 2010</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Обзоры взяты из темы </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=49&Itemid=57">
Обсуждение игр QSP-Compo 2010: Дневник странника</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
<tag name="simple-string">
Комментарии и обсуждения </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=49&Itemid=57">
там же</tag>
<tag name="simple-string">
.
</tag>
</p>
<p>
Часть обзоров содержит спойлеры, особенно об этом предупреждает uux.
</p>
</segment>
</segment>
<header head-level="h2" anchor="obzory-ajenty">
<p>
Обзоры `Ajent`ы</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=49&p=1&Itemid=57#p488">
ссылка</tag>
<tag name="simple-string">

</tag>
</p>
<p>
Итак, я поиграла во все игры. 
</p>
</segment>
</segment>
<header head-level="h3" anchor="kolobok">
<p>
Колобок</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Чёрный юмор. Я не поклонница такого жанра, но... весело, почему нет ) Верю, что многим понравится. 
</p>
</segment>
</segment>
<header head-level="h3" anchor="1812">
<p>
1812</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
О противнике либо плохо, либо ничего. ) Но я же честная. Мне очень понравилось. Даже несмотря на то, что я набрала только одно очко, как выяснилось. 
</p>
<p>
     Самое замечательное в игре - это музыка. Если бы не она, то такой атмосферы вряд ли бы удалось добиться. За время игры, она ни разу у меня не вылетела и не проглючила. Ну и удовольствие от процесса я получила большое.  
</p>
<p>
     Считаю, что это лучшая игра Горафа на сегодняшний день. (Потому что все его Блуды и Сары мне не нравятся)  
</p>
</segment>
</segment>
<header head-level="h3" anchor="villa">
<p>
Вилла</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Не знаю даже. Сначала заинтриговало и было очень интересно. Но вдруг игра закончилась. Даже не успев начаться. Аню я так и не увидела. Что у гг с Ритой вообще не поняла. Нет, то есть поняла, что девушка бунтует, потому что гг не хочет на ней жениться. Но вот как с ней помириться не поняла точно. Ну и вообще непонятно зачем там были все эти люди, если хватило одной Камиллы и больного, для прохождения, в смысле. 
</p>
<p>
Наверное автор закладывал туда какой-то смысл, но я его увы не уловила, по указанной выше причине - игра закончилась слишком рано и неожиданно. 
</p>
</segment>
</segment>
<header head-level="h3" anchor="kurtuaznaia-ballada">
<p>
Куртуазная баллада</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
На мой взгляд лучшая игра из четырёх. Играла с великим удовольствием. Жаль только, что попались баги. Правда не критичные для игры. Ну и ещё жаль, что нет фоновой музыки и никак нельзя пробиться к Моргане, а я так хотела сделать её дамой сердца своего героя.  
</p>
<p>
Но вообще играла часа 4 наверное. И при этом весь канал и все родные могли наблюдать мои вопли восторга.  
</p>
<p>
Правда, супер!
</p>
</segment>
</segment>
</segment>
<header head-level="h2" anchor="obzory-yandexxa">
<p>
Обзоры `Yandexx`а</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=49&p=1&Itemid=57#p490">
ссылка</tag>
<tag name="simple-string">

</tag>
</p>
<p>
Ради мирового баланса захотелось отписаться и мне. 
</p>
</segment>
</segment>
<header head-level="h3" anchor="kurtuaznaia-ballada">
<p>
Куртуазная Баллада</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Текстовая РПГ, и от этого я сразу становлюсь грустной пандой  
</p>
<p>
Не знаю, как прочие, но я вообще не понимаю смысла Текстовых ЭрПеГе. 
</p>
<p>
Кстати игра лицензирована по GNU GPL, а вот картинки откуда, они свободного распространения? 
</p>
</segment>
</segment>
<header head-level="h3" anchor="la-villa-esperance">
<p>
La Villa Esperance</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Клик, клик, клик и почти никакой интерактивности. Увы, выключил через 10 минут. 
</p>
<p>
И ведь я вижу что много труда вложено в эти две игры, но всё оно как-то в никуда...  
</p>
</segment>
</segment>
<header head-level="h3" anchor="kolobok">
<p>
Колобок</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Шикарная игра, я реально много ржал в голос  Классный трешачок, озвучка сильно доставляет. Картинки тоже жгут. Правда сюжет немножко сдаёт к середине игры. Можно было лучше, но -- так держать, больше трешу и угару! 
</p>
</segment>
</segment>
<header head-level="h3" anchor="chashka-kofe">
<p>
Чашка кофе</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Здесь я почему-то ожидал большего... Больше интерактивности, больше отсутствия фентези (но это лично мой выкрутас). Слишком много каких-то мистических сущностей, скрытого смысла. Загадки решались методом перетыкать всё на всём... Не в обиду, но сильно не впечатлился. 
</p>
</segment>
</segment>
<header head-level="h3" anchor="1812">
<p>
1812</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Вот это настоящий квест. Ну, другого от человека, который играл ещё в текстовухи Скотта Адамса, ожидать и не стоит  Гулять по заброшенному поместью, копаться во всяких вещах, наблюдать флешбеки -- одно удовольствие, спасибо. Правда подвал явно для галочки сделан, и как-то в общем сумбурно заканчивается. Пиши ещё, Гор 
</p>
</segment>
</segment>
</segment>
<header head-level="h2" anchor="obzory-nonata">
<p>
Обзоры Ноната</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=49&p=1&Itemid=57#p494">
ссылка</tag>
<tag name="simple-string">

</tag>
</p>
<p>
Отыграл в три игры. А высказаться решил о `La Villa Esperance`, а то про неё комментарии какие-то так себе. В игре действительно приходится вроде бы крайне много тупо кликать, но в то же время возможность выбора у игрока есть сразу по двум принципиальным направлениям - по физическому миру (типа, куда пойти?) и по психологическому (наподобие: смириться или бороться?). Напомнило психологические тесты... Я не такой знаток игр, но, по-моему, получилась редкость. 
</p>
<p>
Постоянное тупое кликание воспринималось мною как обычная жизненная суета - ведь тоже много времени и сил уходит на скучные заурядные действия. Надеть штаны, снять штаны, надеть штаны, снять штаны... И так каждый день! 
</p>
<p>
Я тоже далеко не всех персоналий обошёл, но никакой неожиданности от концовки не получил. Потому что у меня к тому времени игра уже явно за середину перевалила. Видимо, очень активно действовал от лица главного героя во все стороны. Получается, не столько игра меня вела, сколько я сам вёлся в игре (а то видал я такие игры, где автор игры всё за меня разжевал, да ещё в рамках одного-единственного сюжета!). 
</p>
<p>
Недостаток игры вижу в том, что концовки слишком обобщающие. Надо было их сделать как в игре "Сталкер: Зов Припяти". Там, в зависимости от случившегося выбора в игре - свой мини-финал (составная часть финала). А то, например, я на Риту тратиться не стал (глубоко чужды мне угрызения по поводу недовольства женщин мною) - но в конце всё равно, вроде как, она того это! Ну да, пускай даже это и психологически верно, однако сюжетно-то как!? 
</p>
<p>
Можно было бы и так навернуть, чтоб игру нельзя было закончить, пока не сделан психологический выбор по всем возможностям. Я, например, и на шефа не стал тратиться. И тоже, видимо, всё в итоге утряслось прекрасно.
</p>
</segment>
</segment>
<header head-level="h2" anchor="obzory-sidana-rejdana">
<p>
Обзоры Сидана Рейдана</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=49&p=2&Itemid=57#p511">
ссылка</tag>
<tag name="simple-string">

</tag>
</p>
<p>
Итак... Я почти день ждал наступления благого времени "не поздно", но, видимо, повстречать мне его не удастся. По крайней мере, сейчас, в полночь по киевскому. 
</p>
<p>
Начну в хронологическом порядке того, как я эти игры рассматривал. 
</p>
</segment>
</segment>
<header head-level="h3" anchor="1812">
<p>
1812</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
...Мои злостные лапы, по привычке писать нынешние датировки, едва не нарекли сию игру как "2812". Кошмаръ ТМ. 
</p>
<p>
<tag name="simple-string">
Признаться, квест меня порадовал тем, что он, собственно, квест. Сумбурно сказал, но, думаю, мысль вы поняли.  Кто-то здесь </tag>
<tag name="italic">
просмотрел логи</tag>
<tag name="simple-string">
 многоуважаемый Yandexx совершенно верно заметил, что "Гулять по заброшенному поместью, копаться во всяких вещах, наблюдать флешбеки -- одно удовольствие, спасибо."
</tag>
</p>
<p>
Да, совершенно верно, одно удовольствие. Да, совершенно верно, спасибо. 
</p>
<p>
Разумеется, мои патриотические чувства несколько задело то, что я мародёрствую от лица солдата наполеоновской армии (кто сказал "Хохол"?!), но, ради авторской мысли такое можно стерпеть. История, тихая, размеренная - просто шикарна, навязчиво преследовавший глав.персонажа по коридорам шёпот а-ля Penumbra (кто был знаком с сиим шедевром - поймёт) создали удивительно страшноватую атмосферу. Предо мною достойный пример того, как нужно создавать атмосферу... 
</p>
<p>
Правда, я, похоже, не полностью прошёл игру - не успел\не сумел попасть в Галерею - а оттого, как мне кажется, упустил крайне важные сюжетные детали. Ну да ничего, вот, свободный часок, рванём ещё раз. 
</p>
<p>
Порадовала сцена с призраком (не знаю, как ещё можно назвать это явление) - каюсь, первые секунд 15 соображал по теме "шо такое случилось и как отсюда убежать", прежде чем дотумкал вновь разжечь потушенный факел. 
</p>
<p>
Личностная оценка - 4 из 5, как на данном конкурсе. Чего-то всё таки не хватило. Но, чего-то всегда не хватает, так что в любом случае, аплодирую стоя. 
</p>
<p>
P.S. А девушку можно было-бы и похоронить  
</p>
<p>
Следуем далее... 
</p>
</segment>
</segment>
<header head-level="h3" anchor="kurtuaznaia-ballada">
<p>
Куртуазная Баллада.</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Сказать пока нечего - этот проект, как и "Хранитель Старграда", требует пристального внимания и не одного часа изучения. Займёмся позже, ибо времени мало. Времени всегда мало, но тут я открыл... 
</p>
</segment>
</segment>
<header head-level="h3" anchor="la-villa-esperance">
<p>
La Villa Esperance.</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
...и пропал. 
</p>
<p>
Этот проект тоже требует пристального внимания, и не одного часа изучения, но он подлец заставил меня оторвать пару получасиков от других насущных дел. 
</p>
<p>
Что я могу сказать, чтобы не спойлерить? 
</p>
<p>
Сильно. 
</p>
<p>
Успел пройти только несколько сюжетных линий различных персонажей, ибо времени за ББ не так уж и много, а, как вы помните, этот великий негодяй MasterSet прям таки изводит обладателей КПК своими проектами. Кнопочная система, понимаете ли... Самое смешное, что у моего зверька есть хард-клавиатура, но и на нажатия тех же цифр игра не реагирует. Nuff said в печальном смысле этого словосочетания. 
</p>
<p>
А, не, нет, не enought, или как там... Хочу что-то сказать про сюжет, но не могу придумать ничего политкорректного в плане спойлеров. 
</p>
<p>
Как там нас учил художник - Belissimo? 
</p>
<p>
Отведённых автором 7-и дней, из-за которых здесь разгорелась определённая дискуссия... тьфу, Раду вспомнил... так вот, разгорелась дискуссия, меня совершенно не смутили - пройти ещё раз историю счёл за честь. Конечно, малость неприятно, что обрываются начатые сюжетные линии персонажей, но наверстать упущенное - не проблема. 
</p>
<p>
А теперь о неприятном. Есть баг. Кажись, их там чуть больше, но этот въелся в память хорошо. 
</p>
<p>
Пример: я прихожу к Камилле с разговором о больном. Например, выбираю вариант о необходимости медицинского наблюдения, и т.д. Затем появляется вертолёт, и последующая за ним мизансцена об эвакуации. 
</p>
<p>
Так вот. 
</p>
<p>
Когда бы я не попытался обратиться к Камилле в следующий раз, наш разговор разворачивается с её фразы, "похоже, это и вертолёт" - ну, или как-то так - и затем опять, та же мизансцена. Опять я выбегаю на улицу, опять вертолёт забирает больного. И так до бесконечности. Ощущение, будто там подземный госпиталь О_о 
</p>
<p>
Выбирал ещё какой-то вариант о "тяге к жизни", и там была та же фенька - лишь только разговор возобновлялся с соответствующего моему выбору момента. Небольшой баг, но... 
</p>
<p>
Вилле с чистой совестью и без оглядки  на иные проекты,(их авторы - не обижайтесь! Если вообще снизойдёте обижаться на моё мнение) ставлю заслуженное (как на мой избалованный взгляд) 5. Личностное, как вы помните, да-да. 
</p>
</segment>
</segment>
<header head-level="h3" anchor="kolobok">
<p>
Колобок.</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Речь `Narrator`а не слышал по простой причине - QSP.ce не производит звуков. Но и так, на протяжении сюжета, в голове вертелось лишь "Майн гот" с плохеньким русским акцентом. Что тут сказать, кроме "ёкарный бабай"? Мило. Соответствует суровым аксиомам нашего смутного времени всемирного культурного Декаданса. Фух, как загнул - сам не понял. 
</p>
</segment>
</segment>
<header head-level="h3" anchor="chashka-kofe">
<p>
Чашка кофе.</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Пока только играю. Кроме "ну-ка, ну-ка..." - сказать пока нечего.
</p>
</segment>
</segment>
</segment>
<header head-level="h2" anchor="obzory-master-seta">
<p>
Обзоры `Master Set`а</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=49&p=2&Itemid=57#p552">
ссылка</tag>
<tag name="simple-string">

</tag>
</p>
<p>
Ну, вставлю и я свои пять копеек. 
</p>
</segment>
</segment>
<header head-level="h3" anchor="kolobok">
<p>
«КОЛОБОК»</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Из представленных на конкурс игр,  эта мне понравилась меньше всего. Очевидно стеб, и насколько я понял стеб еще и над тем, о чем я не в теме. Так что не оценил. 
</p>
<p>
Черный юмор я вообще очень ценю и уважаю, но за время игры желания улыбнуться, не то что посмеяться от души, не возникло ни разу. Низкое качество юмора, для любой стебной игры это уже приговор. Но есть у нее и другие недостатки. 
</p>
<p>
Нумеро уно: предельная линейность – сюжетные рельсы просто чугуниевые. Вся интерактивность игры построена на решении головоломок в стиле потыкай все возможное и соедини предметы. 
</p>
<p>
Отсюда же растут ноги и у второго недостатка игры: дичайшая нелогичность действий. Да, бред бывает порой гениальным, но это должен быть бред остроумный или атмосферный. В задачках же, которые ставит перед нами «колобок», мы видим бред попросту бредовый. Чего например стоит одна только домовая мышка, которой как болгаркой можно выпилить дверь? А какой несправедливой кажется невозможность зарубить лису топором, при том что зайца можно легко разделать обычной вилкой? 
</p>
<p>
Впрочем, есть в игре позитивные моменты: озвучка сделана с душой. Ну и текст, в целом, довольно грамотный. Иллюстрировали игру авторы видимо самостоятельно. Картинки конечно выполнены коряво, но по общей атмосфере игры это вполне в кассу. Кроме того, на фоне иллюстраций из следующей игры (1812), они выглядят прямо таки шедевром художественной мысли. 
</p>
<p>
Резюме: поиграть можно, так как игра короткая и вы пройдете ее раньше чем надоест. 
</p>
<p>
Оценка: 3/5 
</p>
</segment>
</segment>
<header head-level="h3" anchor="1812">
<p>
«1812»</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Первое, что бросается в глаза при виде этого творения – дизайн. На ум тут же приходят незабвенные труды Артемия Татьяновича Лебедева, посвященные его благородной но безнадежной борьбе с… даже не знаю как слова подобрать. Потому что грубо-говоря, сказать не решаюсь, а мягко говоря – нет слов. 
</p>
<p>
Я не эксперт по URQ играм, но есть у меня подозрение, что уши такого подхода к игровому интерфейсу лежат именно в урке. Но это не оправдание! Реализован же на URQ приятный глазу «interstate». Значит можно сделать нормально, если захотеть!  Да и QSP, даже классический, дает нам, слава Байту, достаточно возможностей чтобы не плодить убожество. 
</p>
<p>
К фееричному дизайну добавляется еще и иллюстративный материал. Благо его совсем мало, но это АдЪ, господа. Сущий АдЪ!!! И если в стебном Колобке, нечто подобное еще могло бы быть уместно, то в такой игре как 1812 – никаким боком. 
</p>
<p>
Так что, же? 1812 – плохая игра? 
</p>
<p>
Как ни странно, но нет. Если забыть о раскладке интерфейса, верстке текста и иллюстрациях, как о кошмарном сне, то в остальном игру можно без зазрения совести назвать достойной. 
</p>
<p>
Литературный язык у автора растет откуда положено. Правда очень много чисто грамматических ошибок, но это не самое страшенное что может случиться с игрой. 
</p>
<p>
Сама по себе игра это классический набор головоломок с поиском и комбинацией предметов. В отличие от ранее упомянутого «колобка», комбинации эти достаточно логичны, чтобы выполнять их с первой-второй попытки, а не путем кликанья по всему чему можно. 
</p>
<p>
Попутно основному сюжету, нам дают флешбеки, приоткрывающие драматическую историю заброшенного поместья. И тут все в общем выглядит на своем месте. Логично, целостно, красиво. 
</p>
<p>
Игра озвучена, и, хвала всем богам, озвучка далеко не так ужасна, как графическое оформление. Единственно, напрягают шепоты привидения. Во-первых однообразны, во-вторых мало понятны, но это бы все ладно… В конце концов, чего еще ждать от призрачных шепотов? Но есть разрыв в логике. Наш протагонист их либо не слышит вовсе, либо напрочь игнорирует. В итоге становится непонятно – а зачем они тогда вообще? Самого-то игрока ими не напугаешь, а пугаться «изнутри роли» тоже вроде бы не с чего – изнутри роли этих звуков попросту нет. 
</p>
<p>
Солюшена к игре, как это рекомендуется регламентом конкурса, приложено не было. Как следствие я залип на моменте где гаснет факел. Не найдя никакой возможности продолжить игу, я без особых сожалений ее выключил.  Во-первых, не фанат жанра, а интрига сюжета достаточно прозрачна и особо не интригует. Во-вторых, я по-видимому прошел почти до конца, так как в списке достижений уже выполнил все пункты, кроме «выспаться». 
</p>
<p>
Резюме: играть обязательно, но с скрепя сердце. И трижды окропив глаза святой водой, во избежание… 
</p>
<p>
Оценка: 4/5 (было бы 5, если бы не кошмарное оформление) 
</p>
</segment>
</segment>
<header head-level="h3" anchor="chashka-kofe">
<p>
«ЧАШКА КОФЕ»</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Тут первым в глаза тоже бросается дизайн, но уже с совсем противоположным знаком, чем в предыдущей игре. Надо отдать Адженте должное – она умеет делать красиво.  Интерфейс удобный, оформление милое, верстка не мозолит глаз. А казалось бы, ну ведь те же самые объекты, указанные цветным гипертекстом в массиве текста. Но контраст с «1812» прямо таки разительный. 
</p>
<p>
Вообще игра сделана очень качественно. По ходу чтения не заметил ни единой ошибки, а для такого объема текста это победа. Боюсь что в моих собственных играх, ситуация намного жестче – и это при том что на коррекцию текстов было убито изрядное время. В общем, респект. 
</p>
<p>
Литературный язык тоже вполне на уровне, не лучше и не хуже чем в «1812». Разве что с фирменной «плюшевой сказочностью» вместо чернухи. Игровой процесс, опять же, классическое решение задачек с комбинированием предметов. Не везде комбинации очевидны, не везде есть подсказки, но в целом ни затыков как в «1812», ни бредятины как в «Колобке» не наблюдается. 
</p>
<p>
Так что прицепиться к игре с претензиями практически невозможно. Ну, разве что попенять за страшное слово «эльфийка» или посетовать на то, что желтый значок помощи уж больно теряется в листве – красный был бы заметнее. 
</p>
<p>
Поиграл с удовольствием, однако второй раз играть желания не возникло. Есть подозрение, что рельсы там не менее чугуниевые чем в «Колобке». Но это именно подозрение. Во-первых, благодаря тому, что задачки решаются не кликаньем, а думаньем,  а во-вторых, там явно все же есть некоторые развилки. Очевидно, они влияют на сюжет незначительно, только как разные пути решения, но проверить это можно только пройдя игру заново или закопавшись в код. Ни того ни другого желания не возникает. 
</p>
<p>
Резюме: Не длинная и не короткая. Не сложная и не легкая. Безликой не назовешь, но и не откровение. В целом, приятная игра, без явных недостатков и с явными достоинствами.  На фоне общего уровня русской IF – весьма хорошо. 
</p>
<p>
Оценка: 5/5
</p>
</segment>
</segment>
</segment>
<header head-level="h2" anchor="obzory-uuxa">
<p>
Обзоры `uux`а</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=49&p=3&Itemid=57#p760">
ссылка1</tag>
<tag name="simple-string">
, </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=49&p=3&Itemid=57#p776">
ссылка2</tag>
<tag name="simple-string">
, </tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=49&p=3&Itemid=57#p780">
ссылка3</tag>
<tag name="simple-string">

</tag>
</p>
<p>
Начинаю потихоньку выкладывать свои обзоры. Пока - три игры (обозрены в том порядке, в каком я в них играл). Оценки - по десятибалльной шкале.
</p>
<p>
`ВНИМАНИЕ!!! Обзоры содержат массовые спойлеры.`
</p>
</segment>
</segment>
<header head-level="h3" anchor="kurtuaznaia-ballada-avtor---masterset">
<p>
Куртуазная баллада, автор - MasterSet</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Эта игра является вторым произведением от `MasterSet`а, с которым я ознакомился. Данная игра является текстовой РПГ. Поскольку до этого я играл в "Хранителя Старграда" того же автора, которая также является текстовой РПГ, то в этом обзоре я поневоле буду их сравнивать между собой. 
</p>
<p>
В отличие от "Хранителя", который навел на меня скуку смертную с первых же ходов, от "Баллады" я получил немало удовольствия (хотя, как я уже не раз говорил, РПГ - не мое). В чем тут дело - не знаю. Возьмем, например, битвы. Вроде бы в "Хранителе" и хитрая боевая система была, требующая определенной тактики, а поди ж ты - в отношении меня все эти ухищрения автора пропали втуне. В "Балладе" же, наоборот, бои (с точки зрения игрока) упрощены донельзя - знай щелкай по ссылкам "Атакуй/защищайся" да читай результаты. Единственное интелелектуальное усилие, которое требуется от игрока - старатся не ввязываться в поединки с врагами, которые заведомо сильнее. И тем не менее мне они доставили удовольствие. Плюс каждый ход сопровождается паузой, в течение которой слышны звуки боя, вопли врагов и т. п. - обычно меня такие вещи раздражают, но почему-то не в данном случае. 
</p>
<p>
Я долго размышлял на тему того, каким образом "Балладе" удалось добиться такой популярности среди меня, и, честно говоря, однозначного ответа найти не смог. Вместо него - сплошные мои домыслы. 
</p>
<p>
Видимо, `MasterSet`у удалось добиться такого баланса между сложностью прохождения, разнообразием игрового мира и количеством решаемых в каждый конкретный момент времени задач, который оказался почти идеальным для одного отдельно взятого игрока (меня). От огромных объемов игровых пространств глаза были готовы разбежаться, но автор сразу же позаботился о том, чтобы у меня было, чем заняться. Так я и шел - от задания к заданию, от замка к замку, от турнира к турниру - пока в конце концов не обнаружил с удивлением, что незаметно пролетели пара с гаком часов, а я добился-таки места у Круглого Стола. И пусть (впрочем, в полном соответствии с жанром РПГ) неписи не балуют разнообразием реакций, города тоже несильно отличаются друг от друга, а получаемые задания в подавляющем своем большинстве имеют вид "сходи туда-то, набей харю тому-то" - игра при всех своих больших размерах все-таки не настолько велика, чтобы это стало по-настоящему раздражать. 
</p>
<p>
Очень порадовало оформление - как графическое, так и акустическое (намеренно не касаюсь вопросов копирайта, ибо по ряду причин ненавижу эту тему). С серьезными багами не встретился, хотя кое-какая мелочь присутствует. Из забавных: в ходе игры ГГ постоянно обращается к разнообразным владельцам замков с предложениями помощи. Обычно, если у них нет подходящего задания, они отвечают что-то типа, мол, спасибо, но для таких заданий нужен рыцарь покруче, чем ты. А ГГ им отвечает - ну, надеюсь, со временем Ваше мнение изменится. Ближе к концу владельцы начинают отвечать - мол, у меня в поместье теперь благодаря тебе все так замечательно, что единственное, в чем ты можешь мне помочь - это бухнуть со мной за компанию. Ответ же нашего ГГ не меняется и, честно говоря, звучит, как недоброе пророчество. 
</p>
<p>
Из неоднозначных вещей: по ходу игры наш рыцарь обрастает свитой разных прихлеба... э-э, помощников. Однако, что удивительно, в боях они не заступаются за него. Еще понятно - на рыцарском турнире, но почему, скажем, огромный волкодав не помогает мне в стычке с этими самыми волками? И совсем было хотел я возмутиться по этому поводу, но потом представил себе, как бы могла выглядеть битва при участии в ней спутников ГГ, и невольно осекся. Подозреваю, что я первый стал бы в этом случае брюзжать по поводу чересчур замороченного геймплея. В общем, эту фичу автору если и стоит вводить, то очень осторожно и хорошенько подумав заранее, а также постараться обкатать ее на тестерах и действовать сообразно с их мнением. 
</p>
<p>
Несколько утомляет навигация. Особенно большие затруднения испытывал я, когда развозил по замкам спасенных мною девиц. Дело усугублялось тем, что они произносили имя своего родового поместья только один раз, и я его тут же забывал, а записывать было лениво (да и воообще, скажите, где вы видели рыцаря с блокнотом в руках?) Было бы неплохо предусмотреть возможность повторно спросить дам, куда их везти. Я уж не говорю о том, что они могли бы и сами начинать верещать - типа, куда едешь, придурок, к черту на рога - когда ГГ двигается не туда. 
</p>
<p>
Вот в чем игре точно есть куда совершенствоваться, так это в вычитке текста. Опечаток масса, особенно же "радует" периодическое (и при этом достаточно частое) обращение неписей к главному герою "сер" - вероятно, это производное от старинного русского глагола "серить". Добро бы этим обращением грешили только крестьяне и прочая неграмотная шушера - нет, и куртуазнобалладной знати такое обращение не чуждо. (Кстати, об обращении: когда игра предложила мне представиться и пояснила, что обращение "сэр" будет добавляться автоматически, я, недолго думая, ввел ", русский неопределенный артикль из трех букв". Впоследствии каждое обращение ко мне со стороны персонажей приносило мне дополнительную маленькую радость, пусть и характеризующую меня не с самой лучшей стороны). 
</p>
<p>
Подводя итог, скажу, что "Баллада" честно заработала шесть баллов из десяти, соответствующие статусу добротного произведения по моей шкале. И, пожалуй, это лучшая игра `MasterSet`а на текущий момент. 
</p>
</segment>
</segment>
<header head-level="h3" anchor="la-villa-esperance-avtor---masterset">
<p>
La Villa Esperance, автор - MasterSet</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Попытки ГГ открыть глаза в начале игры напомнили мультик про Масяню и инстинкт валенок. Пожалуй, это впечатление от "Виллы" так и осталось самым положительным. 
</p>
<p>
Судите сами. Более чем прозрачные намеки на ночную езду за рулем в пьяном виде моментально развеяли все загадки, которые мог таить в себе сюжет. Таким образом, вся интрига игры свелась к общению с персонажами. Но, увы, они не смогли скрасить мой досуг - уж больно незамысловаты. В западной ИЛ часто можно услышать призыв "show, don't tell". Смысл этого призыва - в том, что гораздо эффективнее раскрыть перед игроком характер персонажа через его поступки и слова, чем просто дать ему характеристику. В "Вилле" главный герой настолько подробно рассказывает об отличительных особенностях большинства персонажей и своих отношениях с ними, что практически не оставляет места игроку для самостоятельного исследования их характера. Мало того, что взаимодействие с неписями происходит предсказуемо до неприличия, так еще и глобальные цели этого взаимодействия остаются в густом тумане (единственное исключение - тяжелобольной). Рассеять этот туман можно было бы, судя по всему, перепройдя игру энное количество раз, но такого желания как-то не возникло. Охотно верю, что за всем за этим стоит глубокая психологическая подоплека, но, не в обиду автору, я все воспринял как набор банальностей. 
</p>
<p>
Текст игры вычитан так себе. Имеются также заметные баги (например, после пожелания коматозному пациенту квалифицированной медицинской помощи игра стала вываливаться в сцену с отлетающим вертолетом при каждой попытке обратиться к Камилле). 
</p>
<p>
По совокупности игра получает пять баллов. От более низкой оценки ее спасло лишь красивое (хоть и заимствованное) оформление. 
</p>
</segment>
</segment>
<header head-level="h3" anchor="kolobok-avtory---rono-graisl-i-elmortem">
<p>
Колобок, авторы - Rono Graisl и elmortem</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Над сказкой про Колобка изощрялись многие, и вот вам еще один вариант. Хотя такая интерпертация народного произведения лично мне не очень близка, ее вполне можно признать свежей и оригинальной. Плюс, на высочайшем уровне по степени "шлифовки" находится текст (по-моему, никаких ошибок в нем нет вообще), а также озвучка, напоминающие аудиокниги моего детства. Иллюстрации, может быть, и на любителя, но в общий стиль произведения вписываются отлично. 
</p>
<p>
По эпизод с зайцем включительно у меня вообще не было никаких претензий. А вот дальше... 
</p>
<p>
Про волка. Первое, что бросается в глаза (правда, эта мысль мне пришла после прочтения финала произведения) - серый хищник у нас что, совсем недоумок, чтобы совать уже готового к употреблению Колобка в горячую печь? Далее, некоторые затруднения вызвала задачка с блокированием зверя в его логове, поскольку мне сразу подумалось, что по-хорошему надо бы заблокировать еще и окна, а возможностей для этого как-то не предусмотрено. Неплохо было бы в описании домика волка отметить, что окна у него были маленькие, прямо-таки бойницы. А заодно поправить и иллюстрацию к данному эпизоду (на ней окно изображено размером чуть ли не с дверь; конечно, торчащая из него волчья лапа намекает на еще бОльшие размеры законного хозяина домика - но тогда вообще непонятно, как он там мог размещаться и вообще входить-выходить). Наконец, в рамках все тех же мыслей о том, как запереть волка, я хотел связать его веревкой, пока он спит. Понятно, что это в планы авторов игры не входило и веревка нужна в другом месте, но уж хотя бы более осмысленная реакция на это действие, чем просто "не получается использовать предмет", была бы весьма уместна. 
</p>
<p>
Про медведя. Здесь авторам стоило бы несколько подробнее остановиться на образе косолапого и добиться большей психологической убедительности в изображении его неврастеником. (По-другому назвать персонажа, повесившегося из-за, прямо скажем, мелких неприятностей, назвать не могу). Если бы Маше из сказки про трех медведей попались звери с таким характером, она бы не только сама бы спаслась, но и обеспечила бы свою семью медвежатиной на всю зиму и теплыми шкурами. Далее, удивила возросшая подвижность Колобка - у зайца ему, чтобы взобраться на табурет, потребовалось прислонить к нему веник, а в медвежьей берлоге он лихо заскакивает на него с пола. Даже если сделать скидку на то, что это результат тренировки - все-таки и табуретки у медведя, наверное, размером поболее будут, чем у зайца. Ну и, наконец, топор после завершения эпизода лучше убирать из инвентаря - иначе в финальной сцене возникает недоумение и раздражение из-за невозможности зарубить им лисицу. 
</p>
<p>
Тот же самый топор помог выявить, пожалуй, единственную техническую недоработку игры: попытка соединения предметов, когда их в инвентаре меньше двух, ведет в тупик. Игра упорно требует второй предмет, которого нет, как, судя по всему, нет и возможности выйти из этого режима. 
</p>
<p>
Вышеупомянутые недостатки не позволили "Колобку" преодолеть один балл, разделяющий в моем представлении добротную и отличную игру - я оценил его на 6+. В то же время, забегая вперед, скажу, что это, на мой взгляд, лучшая игра нынешнего конкурса.
</p>
</segment>
</segment>
<header head-level="h3" anchor="chashka-kofe-avtor---ajenta-arrow">
<p>
Чашка кофе, автор - Ajenta Arrow</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Прежде всего хочу отметить красивое оформление игры. Что касается содержательной части, то "Чашка" сделана в аджентином духе - фэнтезийная сказка с упором на магию. После линейного пролога с минимумом загадок главная героиня перенеслась в параллельный мир, в котором ее (и меня вместе с ней) усиленно принялись грузить разнообразными сведениями о местных расах и хитросплетениях отношений между ними. Не знаю, о чем размышляла ГГ, пока на нее выливались тонны информации; я же думал, говоря словами поэта - куртуазного маньериста: "Мне-то что за дело до этих подозрительных людей (эльфов, вампиров и кто там есть еще)?" Впрочем, первая политинформация оказалась сравнительно недолгой, и мы с ГГ принялись за одну из тех задач, которые автор так любит вставлять в свои игры - занялись сбором магических артефактов по указке. Причем в данном случае "указка" была подана столь трогательно-наивно, что я чуть не прослезился от умиления. Надо же, двойник нашей ГГ в параллельном мире (далее - ДГГ) не только старательно записала подробнейшую инструкцию по поиску своего сверхсекретного тайника в дневник и выложила дневник на стол, но и еще заботливо вырвала все лишние странички, чтобы читающий, не дай Бог, не запутался! А какой милой детской неискушенностью отдает святая уверенность ДГГ в том, что найти тайник по этой инструкции может она и только она, а также ее просьба к врагам не беспокоиться! Я еще понимаю, если бы для поиска требовалась какая-нибудь личная вещь ДГГ - хотя бы локон ее волос, ну, или там информация некая, известная только ей одной... Кстати, еще большее удивление, чем наивность ДГГ, у меня вызвало отсутствие желания у Чарли и придворного мага Фламиуса самим пошукать тайник. Неужели не хватило соображения разобраться с инструкцией? (Правда, справедливости ради, я на этом задании тоже порылся и смог продвинуться дальше только благодаря помощи автора). Впрочем, дальнейшие события укрепили мои подозрения относительно умственных способностей этой парочки... Но не буду забегать вперед. 
</p>
<p>
После обнаружения искомого артефакта мы с ГГ занялись тем, чем и положено заниматься героям-недомагам (пардон, в данном случае героиня не недо-, а просто не маг) в играх Адженты: стали сравнительно легко и непринужденно щелкать задачки, перед которыми, как утверждалось, до нас спасовали значительно более опытные волшебники. К этому моменту у меня в мозгу образовалась не каша даже, а плотный слипшийся ком из отрывочных сведений об устройстве параллельного фэнтези-мира, его политической системе и т. д. и т. п., и задачки я решал, просто перебирая доступные варианты/артефакты, благо, их было немного. Постепенно-постепенно я докликался до кульминации игры, которая поразила меня до глубины души. Вкратце поясню ее фабулу при помощи аналогии. 
</p>
<p>
...К девочке-ромашке при выходе из школы подкатывает главный хулиган района Колян, который за неделю до этого уже посягал на ее девичью честь. 
</p>
<p>
- Слышь, Манька, - говорит он, затаптывая ботинком папиросу, - что неделю назад было - так это все фигня, сорвался я просто. Я тебя на самом деле люблю чистой любовью и даже жениться на тебе хочу. Вот приходи сегодня в полночь на пустырь, тока колечек золотых с собой побольше захвати - мы из них обручальное выбирать будем. Я, кстати, не один буду - нам кореша мои помогут выбрать, какое кольцо лучше... 
</p>
<p>
Девушка бежит домой в смятенных чувствах и обращается за советом к маме, как поступить. А мама говорит: 
</p>
<p>
-Конечно,иди! А я пойду с тобой и возьму с собой книжку - уголовный кодекс. 
</p>
<p>
Вот примерно по такому сценарию и развивался центральный эпизод всей игры. Причем у нашей ГГ хотя бы все-таки мелькнули сомнения насчет того, что ей просто вешают на уши фиалки. А вот принц Чарльз с придворным магом... Чарльзу с такими замашками надо не государством командовать, а отправляться в табачную лавку вслед за своим коллегой и однотитульником Флоризелем. Ну, а Фламиусу можно порекомендовать интеллектуально необременительный труд на свежем воздухе. 
</p>
<p>
Напоследок - несколько слов о тексте. Он оставил впечатление некоторой небрежности - по крайней мере, "ашыпки" в нем встречаются с незавидной регулярностью. И да: кофе все-таки "он", а не "оно" (разве что автор хотела подчеркнуть, что такова особенность речи ее ГГ - но тогда надо было сделать это более внятно). Встречаются также перлы изящной словесности - приведу парочку (курсив везде мой): 
</p>
<p>
"Павлускони, - догадалась я." (При том, что данный персонаж был представлен нашей ГГ почти сразу по прибытии в параллельный мир). 
</p>
<p>
"- Людям не место рядом с вампирами, - брезгливо отошёл от жертвы Леарг, - даже таким мерзким, как ты." (Т. е. вообще-то вампиры любят всякую мерзость, если только это не людишки). 
</p>
<p>
Прошу прощения у автора за излишне, пожалуй, ехидный тон моего обзора. Но давайте сравним "Чашку" с победителем прошлого QSP-Compo, "Неожиданным приключением". При примерно равном уровне, скажем так, эмоциональных притязаний в "Чашке" хуже обстоят дела с интерактивностью, внятностью игрового мира, качеством загадок и текста. Обидно видеть, как не лишенный таланта и старания автор топчется на месте... 
</p>
<p>
Оценка: 5 баллов.
</p>
<p>
И последний обзор. Спойлеров по-прежнему море. 
</p>
</segment>
</segment>
<header head-level="h3" anchor="1812-avtor---goraph">
<p>
1812, автор - Goraph</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Самое, пожалуй, удивительное в "1812" - это практически парсерные ощущения от менюшной игры. В чем тут дело, сразу и не сформулируешь - вроде какой-то запредельной интерактивности и моря возможностей повзаимодействовать с окружающим миром в ней нет. Наверное, сыграло свою роль место действия и основное занятие персонажа - все-таки лазанье по лабиринтам в поисках сокровищ знакомо, наверное, каждому любителю парсерной ИЛ, собственно, именно с этого и начинался жанр. Я с удовольствием занялся привычной деятельностью, даже несмотря на то, что произведение временами демонстрировало все признаки того, что делалось наспех. Безусловно, распахнутые "настержь" двери и "подюжины" подсвечников временами резали глаз, раздражали одноразовые реакции (например, непреходящая радость ГГ по поводу возможности утолить жажду из поюзанного кувшина после того, как он усосал несколько бутылок вина в погребе, а также его готовность снова и снова жрать капусту, когда он уже вроде наелся до отвала), и слегка бесила невозможность выполнения действий, казавшихся очевидными (скажем, разгрести осколки в зале, обернув руку шторой). И да, еще один бросившийся в глаза ляп, на этот раз стилистический - вряд ли бы наполеоновский солдат 1812 года стал называть современный ему предмет мебели "сервантом начала XIX века". По крайней мере лично у меня никогда не возникало поползновений мысленно обратиться подобным высокопарным образом к своему столу на работе, сделанному где-то в начале 2000-х. 
</p>
<p>
И все-таки все эти недостатки воспринимались как мелочи. И дело здесь не только в том, что имеющиеся в игре загадки во многом искупали эти огрехи. Просто автору удалось могучим плечом раздвинуть границы банального кейв кроула, добившись вроде бы невозможного - создания игры, совершенно не похожей на его предыдущие произведения и в то же время узнаваемой. Он также сумел соединить практически несоединимое: бесшабашный и безграничный цинизм французского мародера, массу отсылок к русскому фольклору, развеселые аллюзии на всем известные произведения - и жутковатую атмосферу заброшенного дома (за которую в ответе, кстати, далеко не только звуковое оформление, хотя его роль и значительна). Давненько не припомню произведения, которое, с одной стороны, заставляло меня поеживаться, а с другой - периодически улыбаться или даже смеяться в голос. 
</p>
<p>
...Я бродил по особняку, открывая все новые закоулки, подбирая ценные вещи и подспудно чувствуя, что замысел произведения выходит за рамки банального стяжательства. Казалось, каждая новая комната приближает меня к разгадке какой-то жуткой тайны, а буквально за следующим углом меня будет ждать ТАКОЕ... Потом я достиг самой очевидной концовки и с негодованием отверг ее как чересчур банальную, восстановился и продолжил играть. Потом я зашел в тупик. Потом обратился к автору. И вот тут меня ждал облом - автор посоветвал внимательнее глянуть на версию игры и подтвердил мои худшие опасения - отвергнутая мной самая очевидная концовка на самом деле и является единственной. Постигшее меня разочарование не позволило оценить игру выше, чем на пять баллов. 
</p>
<p>
Очень хочется поиграть в законченную версию. Увы, учитывая все обстоятельства, прогнозы вырисовываются малоутешительные: подозреваю, что игра будет дописана в далеком будущем и, скорее всего, на "Твибоксе". Но я все равно буду ждать...
</p>
</segment>
</segment>
</segment>
<header head-level="h2" anchor="obzory-nexa">
<p>
Обзоры `Nex`а</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=49&p=3&Itemid=57#p784">
ссылка</tag>
<tag name="simple-string">

</tag>
</p>
<p>
Поиграл во все игры конкурса. 
</p>
<p>
Про колобка говорить не буду - я его тестировал. 
</p>
<p>
Из оставшихся четырех игр, во всех были ошибки русского языка, опечатки и пр., но, впрочем, это не испортило впечатления. Багов встречено не было, разве только в игре "1812" периодически появлялись загадочные сообщения об ошибках, но это скорее всего из-за использования устаревшей версии плеера(5.6.2). 
</p>
</segment>
</segment>
<header head-level="h3" anchor="chashka-kofe">
<p>
Чашка кофе</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Зря, зря я порадовался доступности онлайн-версии, и запустил игру, кликнув по ссылке - как оказалось, игра запускается по той ссылке, "ужимаясь" до границ окна браузерной вкладки. Это "сжатие" сделало шрифт слишком мелким, и добавило мне напрягов, плюсом к прочим огрехам интерфейса. 
</p>
<p>
Пока я продирался сквозь неудобный интерфейс и многословные вступления, к тому моменту, как ГГ должна была искать тайник, все желание играть пропало, и я выключил игру. 
</p>
<p>
Все случившиеся до упомянутого момента события предсказуемы настолько, насколько это возможно, мотивации бросаться спасать миры почему-то не возникло. 
</p>
</segment>
</segment>
<header head-level="h3" anchor="la-villa-esperance">
<p>
La Villa Esperance</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Та же история. Сюжет этой визуальной новеллы настолько же избит и предсказуем, как и в игре Адженты - приключения коматозника в собственном подсознании. Разгадать, "кто я и зачем я тут" было проще простого, а желания исследовать этот замкнутый картонный мирок не возникло. После первого знакомства с обитателями особняка за завтраком, выключил игру. 
</p>
</segment>
</segment>
<header head-level="h3" anchor="1812">
<p>
1812</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Прошел с удовольствием, насчет "реальности" концовки сомнений не возникло - табличка "счет" вполне внятно описывает список доступных целей. Более того, я считаю, что именно в таком виде игра и остается полноценным, законченным произведением, ничего здесь не нужно "дописывать". 
</p>
</segment>
</segment>
<header head-level="h3" anchor="kurtuaznaia-ballada">
<p>
Куртуазная баллада</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Ах! Эту игру я не осилил и с пятой попытки, и намерен к ней еще вернуться - игра бросает вызов, и я с удовольствием принимаю его. 
</p>
<p>
Все к месту, все в меру, и судя по моим впечатлениям(далеко в игре я пока что не продвинулся, увы), мы получили первую полноценную текстовую РПГ в РИЛ. 
</p>
<p>
Браво, Master Set! 
</p>
<p>
Подводя итоги, сравнивая эти игры с играми QSP-Compo 2009, могу сказать, что прогресс есть, но незначительный, и больше в плане техники и оформления, чем в повествовательной части. 
</p>
<p>
Впрочем, судить о прогрессе игр на QSP или в РИЛ, только по конкурсным играм QSP-Compo, было бы неверно - значительная часть игр выпускается на других конкурсах, и вообще вне конкурсов. 
</p>
<p>
Поздравляю `Master Set`а с удачным дебютом, желаю нам побольше новых игр и новых авторов
</p>
</segment>
</segment>
</segment>
</segment>
</file>
<file path="D:\my\projects\howdo_faq\[source]\ИнформАрхив QSP\999_zakladki_0030.txt-light">
<header anchor="informarch_bookmarks" head-level="h1">
<p>
Подборка ссылок на различные ресурсы, справки и статьи</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">

</segment>
<header head-level="h2" anchor="ofitsial_nyj-sajt-qsp">
<p>
Официальный сайт QSP</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="hyperlink" href="https://qsp.org">
QSP.ORG</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h2" anchor="nasha-gruppa-vo-vkontakte">
<p>
Наша группа во Вконтакте</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="hyperlink" href="https://vk.com/qsplayer">
vk.com/qsplayer</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h2" anchor="programmy">
<p>
Программы</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Основные репозитории QSP: </tag>
<tag name="hyperlink" href="https://github.com/QSPFoundation">
GitHub/QSPFoundation</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="pleery-redaktory-konvertery-analizatory">
<p>
Плееры, редакторы, конвертеры, анализаторы</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
ПРОГРАММЫ (не все, архив Aleks Versus): </tag>
<tag name="hyperlink" href="https://mega.nz/folder/jXwXlSRJ#TF7P-soOJOWIC8MrBA-L1A">
MEGA.nz/Programms</tag>
<tag name="simple-string">

</tag>
</p>
<p>
Сюда входят:
</p>
<p>
Плееры:
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
Quest Soft Player (classic v.5.8.0, 5.7.0),</p>
</segment>
<segment name="li">
<p>
Quest Navigator v.0.0.28</p>
</segment>
<segment name="li">
<p>
QSPider (qSpider) v.0.12.0</p>
</segment>
<segment name="li">
<p>
Qqsp, QSP для Pocketbook, QSP CE и др.</p>
</segment>
</list>
<segment>
<p>
Редакторы:
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
Quest Generator (QGen) v.4.0.0</p>
</segment>
<segment name="li">
<p>
Редактор сохранений QSPSaveEditor 0.3.7</p>
</segment>
</list>
<segment>
<p>
QSP-Анализатор — программа для анализа кода
</p>
<p>
Конвертеры:
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
TXT2GAM (v.0.11)</p>
</segment>
<segment name="li">
<p>
GamConv</p>
</segment>
</list>
<segment>
<p>
Пакет для Sublime Text: билдер + подсветка синтаксиса.
</p>
</segment>
</segment>
</segment>
<header head-level="h2" anchor="txt2gam--qsp2txt--converters">
<p>
TXT2GAM | QSP2TXT | Converters</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">

</segment>
<header head-level="h3" anchor="paket-qsp-konverterov">
<p>
Пакет qsp-конвертеров</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="hyperlink" href="https://www.npmjs.com/package/@qsp/converters">
www.npmjs.com/qsp-converters</tag>
<tag name="simple-string">

</tag>
</p>
<p>
Пакет для работы с текстовым и бинарным форматом qsp от Werewolf. Если кому-то захочется поиграться - там специально сделано что IO операции не часть пакета (чтобы его можно было в браузере(qspider) и в nodejs использовать), поэтому четние/запись файла нужно делать средствами nodejs.
</p>
</segment>
</segment>
<header head-level="h3" anchor="qsp---txt">
<p>
qsp -&gt; txt</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Утилита `Werewolf`а для конвертирования QSP-файла в текстовый файл формата TXT2GAM
</p>
<p>
<tag name="simple-string">
 </tag>
<tag name="hyperlink" href="https://codepen.io/srg-kostyrko/full/QWqdwxv">
codepen.io/qsp@txt2gam-converster</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
</segment>
<header head-level="h2" anchor="pleer--razlichnye-versii-pleerov--players">
<p>
Плеер | Различные версии плееров | Players</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
На официальном сайте:
</p>
<p>
<tag name="simple-string">
	</tag>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_content&view=article&id=64&Itemid=87">
https://qsp.org/index.php?...&amp;Itemid=87</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h2" anchor="quest-player-fork-ot-seedhartha-dlia-android--pleer-dlia-android">
<p>
Quest Player fork от SeedHartha для Android | Плеер для Андроид</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Репозиторий: </tag>
<tag name="hyperlink" href="https://github.com/seedhartha/QuestPlayer">
GitHub/seedhartha/QuestPlayer</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Релизные версии: </tag>
<tag name="hyperlink" href="https://github.com/seedhartha/QuestPlayer/releases">
GitHub/seedhartha/QuestPlayer/releases</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h2" anchor="spravka--videouroki">
<p>
Справка | Видеоуроки</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Видео-уроки и другая справочная информация в видеоформате по QSP: </tag>
<tag name="hyperlink" href="https://www.youtube.com/c/aleksversus">
youtube.com/aleksversus</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h2" anchor="spravka--spravochnik-kak-sdelat_">
<p>
Справка | Справочник "Как сделать?"</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="hyperlink" href="https://aleksversus.github.io/howdo_faq">
Онлайн-версия справочника по самым часто задаваемым вопросам из темы "Как сделать?" на форуме qsp.su</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Офлайн-версию справочника можно скачать здесь: </tag>
<tag name="hyperlink" href="https://github.com/AleksVersus/howdo_faq/releases">
GitHub/howdo_faq/releases</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h2" anchor="spravka--wikiqsporg">
<p>
Справка | wiki.qsp.org</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Официальная справка: </tag>
<tag name="hyperlink" href="https://wiki.qsp.org">
wiki.qsp.org</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Резервная копия официальной справки на 20 июня 2022 года: </tag>
<tag name="hyperlink" href="https://mega.nz/folder/vG4XzSoZ#gf0jU0FFdWHpgJnN8eAaGA">
MEGA.nz/official_helpful</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h2" anchor="examples--primery">
<p>
Examples | Примеры</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Некоторые примеры: диалоги, как делать меню, календарь (время), работа с предметами, простые примеры, события по таймеру, шкалы и прогресс-бары
</p>
<p>
<tag name="hyperlink" href="https://mega.nz/folder/rfAllKzR#rssaaJSs4tpGA_tUbaCCQw">
MEGA.nz/Example</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h2" anchor="igry">
<p>
Игры</p>
</header>
<segment segment-class="for-head">
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
Архив Крема (не только QSP-игры): </tag>
<tag name="hyperlink" href="https://db.crem.xyz/game">
db.crem.xyz/game</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Архив игр в библиотеке РИЛ (не полный): </tag>
<tag name="hyperlink" href="http://rilarhiv.ru/qsp.htm">
rilarhiv/qsp-game</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Игры QSP-Compo 2022: </tag>
<tag name="hyperlink" href="https://disk.yandex.ru/d/pT_rzlnpiLrb8A">
На Яндекс-Диске</tag>
<tag name="simple-string">
, </tag>
<tag name="hyperlink" href="https://drive.google.com/file/d/1k_arFi0zjEVjYp8fUNu-KIctbVAAJVhm/view">
На Google-диске</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Игры на QSP. Не все, но многие. Архив Aleks Versus: </tag>
<tag name="hyperlink" href="https://mega.nz/folder/7XgTQKqT#P4q_86iTd0mZulCWw-Vq9w">
MEGA.nz/QSP-Game All</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="verenitsa-mirov-ili-vyvody-iz-zakona-merfi">
<p>
Вереница миров, или Выводы из закона Мерфи</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="simple-string">
книга-игра Ольги Голотвиной, реализованная на qSpider: </tag>
<tag name="hyperlink" href="https://aleksversus.github.io/merphy_law">
aleksversus.github.io/merphy_law</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h3" anchor="demka-pleera-qspider">
<p>
Демка плеера qSpider</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Демонстрация работы qSpider онлайн. Три игры:
</p>
<p>
Сказочка на ночь, Куртуазная баллада, Город туманов
</p>
<p>
<tag name="hyperlink" href="https://qspfoundation.github.io/qspider">
qspfoundation.github.io/qspider</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
</segment>
<header head-level="h2" anchor="qspider--pleer">
<p>
qSpider | Плеер</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
Отличается от классического плеера возможностью полноценно работать с HTML, назначать горячие клавиши, размещать игру онлайн у себя на сайте и другими интересными плюшками.
</p>
<p>
<tag name="simple-string">
Основной репозиторий qSpider — нового плеера от Werewolf: </tag>
<tag name="hyperlink" href="https://github.com/QSPFoundation/qspider">
GitHub/QSPFoundation/qspider</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Страница релизов нового плеера qSpider от Werewolf: </tag>
<tag name="hyperlink" href="https://github.com/QSPFoundation/qspider/releases">
GitHub/QSPFoundation/qspider/releases</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Демка с тремя играми: </tag>
<tag name="hyperlink" href="https://qspfoundation.github.io/qspider">
qspfoundation.github.io/qspider</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Статья по работе с плеером: </tag>
<tag name="hyperlink" href="https://m.vk.com/@qsplayer-qspider-v-0120-svodnaya-statya?context=author_page_date&ref=author_page">
vk.com/qSpider v.0.12.0</tag>
<tag name="simple-string">
, </tag>
<tag name="hyperlink" href="https://discord.com/channels/373163463842725891/994958390524657685/994967462871306280">
medium/qSpider v.0.12.0</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Видеоурок по работе с плеером: </tag>
<tag name="hyperlink" href="https://youtu.be/bEjRzTDsPp4">
https://youtu.be/bEjRzTDsPp4</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h2" anchor="instrument-dlia-postroeniia-polnogo-grafa-knig-igr-ot-larkin">
<p>
Инструмент для построения полного графа книг игр от Larkin</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
<tag name="hyperlink" href="https://quest-book.ru/forum/topic/3776">
quest-book.ru/forum/topic/3776</tag>
<tag name="simple-string">

</tag>
</p>
<p>
<tag name="simple-string">
Необходимо зайти на </tag>
<tag name="hyperlink" href="https://discord.gg/KYCXC2R2W6">
сервер интерактивной литературы в дискорде</tag>
<tag name="simple-string">
 и затем пройти по этой ссылке: </tag>
<tag name="hyperlink" href="https://discord.com/channels/373163463842725891/373188009715040266/997120867769253939">
discord/getGraphTool</tag>
<tag name="simple-string">

</tag>
</p>
</segment>
</segment>
<header head-level="h2" anchor="temy-i-stat_i-s-razlichnymi-resheniiami-na-qsp-forum-qsporg">
<p>
Темы и статьи с различными решениями на QSP (форум QSP.org)</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=316&Itemid=57">
F.A.Q общие вопросы и некоторые примеры</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=956&Itemid=57">
Календарь по методу счёта Юлианских дней</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_content&view=article&id=79:-10&catid=36:2009-02-19-06-11-21&Itemid=76">
Гибкий плейлист 1.0</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_content&view=article&id=70:qsp-inventory-advanced-lib-076&catid=36:2009-02-19-06-11-21&Itemid=76">
Библиотечка, дополняющая инвентарь</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=348&Itemid=57">
Действие по условию</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=164&Itemid=57">
Локализация классического плеера QSP v.5.7.0</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=861&Itemid=57">
Настройка окошек классического плеера с помощью qspgui.cfg</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://ifwiki.ru">
IFWiki о русской интерактивной литературе (текстовых играх)</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="https://urq.plut.info/texts">
Библиотека URQ</tag>
</p>
</segment>
</list>
</segment>
<header head-level="h2" anchor="o-litsenziiah">
<p>
О лицензиях</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="simple-string">
О лицензии OFL: </tag>
<tag name="hyperlink" href="http://ru.wikipedia.org/wiki/OFL">
http://ru.wikipedia.org/wiki/OFL</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="https://creativecommons.org/licenses/?lang=ru">
Лицензия Creative Commons, она же CC, и ее разновидности</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="https://qsp.org/index.php?option=com_agora&task=topic&id=398&Itemid=57">
Что такое Royalty-Free</tag>
</p>
</segment>
</list>
</segment>
<header head-level="h2" anchor="pisatel_stvo">
<p>
Писательство</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="https://www.timuroki.ink/thewritingdead">
Пишите живее! Бесплатный курс по защите ваших текстов от словесной мертвечины</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="https://web.archive.org/web/20161012025424/http://www.audag.org/?p=1521">
Семинар по общим вопросам. Стенограмма-2</tag>
</p>
</segment>
</list>
</segment>
<header head-level="h2" anchor="besplatnaia-grafika-dlia-igr">
<p>
Бесплатная графика для игр</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="https://color.adobe.com/ru/explore/most-popular/?time=month">
Подборка цветовой гаммы (палитры) для оформления. Огромное количество сочетаний цветов.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="https://play.google.com/store/apps/details?id=com.macaw">
Real Colors</tag>
<tag name="simple-string">
. Готовые палитры, но, кроме того, оно умеет снять фото (или взять картинку из галереи) и сгенерить палитру на его основе.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Разложить картинку на цвета (для подбора палитры): </tag>
<tag name="hyperlink" href="http://www.cssdrive.com/imagepalette/index.php">
http://www.cssdrive.com/imagepalette/index.php</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Онлайн-сервис по подбору и созданию иконок. </tag>
<tag name="hyperlink" href="https://iconcrafts.com">
https://iconcrafts.com</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="https://pixabay.com/">
https://pixabay.com/</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://www.clker.com">
FREE CLIP ART YOU CAN USE FOR ANYTHING YOU LIKE</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="https://www.wpclipart.com">
https://www.wpclipart.com</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://www.tineye.com">
http://www.tineye.com</tag>
<tag name="simple-string">
 - поиск изображений по фрагменту либо отредактированному изображению. Полезно, если нужно установить автора или найти картинку в полном масштабе.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Сборник фотографий с лицензией CC0 (полностью свободная для любого использования): </tag>
<tag name="hyperlink" href="http://www.pexels.com">
http://www.pexels.com</tag>
</p>
</segment>
<segment name="li">
<segment>
<p>
Бесплатные тайлы для бэкграунда:</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="http://www.grsites.com/archive/textures">
http://www.grsites.com/archive/textures</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://patterns.ava7.com">
http://patterns.ava7.com</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://bgpatterns.com">
http://bgpatterns.com</tag>
</p>
</segment>
</list>
</segment>
</list>
</segment>
<header head-level="h2" anchor="besplatnye-shrifty">
<p>
Бесплатные шрифты</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="simple-string">
Отличный сайт со свободными шрифтами: </tag>
<tag name="hyperlink" href="http://openfontlibrary.org">
http://openfontlibrary.org</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Ещё, конечно же, вот: </tag>
<tag name="hyperlink" href="http://www.google.com/webfonts">
http://www.google.com/webfonts</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Бесплатные шрифты от ParaType - </tag>
<tag name="hyperlink" href="http://www.paratype.ru/public/">
http://www.paratype.ru/public</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://infogra.ru/hires/2012/03/11/1lyi6Fo.png">
Схема подборки шрифта</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Сборник хороших русскоязычных шрифтов: </tag>
<tag name="hyperlink" href="http://fonts4web.ru">
http://fonts4web.ru</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
36 бесплатных кириллических шрифтов </tag>
<tag name="hyperlink" href="https://te-st.ru/2015/02/20/free-cyrillic-fonts">
https://te-st.ru/2015/02/20/free-cyrillic-fonts</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Топ моноширинных шрифтов </tag>
<tag name="hyperlink" href="https://freebiesupply.com/blog/top-monospace-fonts-for-developers">
https://freebiesupply.com/blog/top-mono … evelopers</tag>
</p>
</segment>
</list>
</segment>
<header head-level="h2" anchor="besplatnye-zvuki-i-muzyka-dlia-igr">
<p>
Бесплатные звуки и музыка для игр</p>
</header>
<segment segment-class="for-head">
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="http://tunguskagrooves.com">
"Tunguska Electronic Music Society"</tag>
<tag name="simple-string">
 - мелодичная инструментальная и электронная музыка, лицензия CC.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://www.newgrounds.com/audio">
портал Флэш-игр "Newgrounds"</tag>
<tag name="simple-string">
 - огромное количество разнообразной музыки, написанной в основном для игр, вся распространяется по лицензии CC-BY-NC-SA.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Большая коллекция бесплатных звуков </tag>
<tag name="hyperlink" href="https://www.freesound.org/">
https://www.freesound.org/</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
AudioMicro - </tag>
<tag name="hyperlink" href="http://www.audiomicro.com/free-royalty-free-music">
бесплатная музыка</tag>
<tag name="simple-string">
 и </tag>
<tag name="hyperlink" href="http://www.audiomicro.com/free-sound-effects">
звуковые эффекты</tag>
<tag name="simple-string">
, которые предоставляются по принципу "Royalty-free".</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://incompetech.com/m/c/royalty-free">
incompetech</tag>
<tag name="simple-string">
 - Каталог музыки, распространяемой по лицензии CC-BY. Есть сортировки по жанрам и настроению.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://musopen.org">
http://musopen.org</tag>
<tag name="simple-string">
 - Музыка, перешедшая в общественное достояние.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://allsoundsaround.com">
http://allsoundsaround.com</tag>
<tag name="simple-string">
 - лицензия указана для каждого файла;</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://wav-library.net">
http://wav-library.net</tag>
<tag name="simple-string">
 - пишут что "все файлы свободны от авторских прав";</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://download-sounds.ru">
http://download-sounds.ru</tag>
<tag name="simple-string">
 - все файлы проверенные, свободны от авторских прав.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Нашёл канал с хорошей "фоновой" музыкой, всё бесплатно для любого использования. </tag>
<tag name="hyperlink" href="https://www.youtube.com/user/CHUKImusic/about">
https://www.youtube.com/user/CHUKImusic/about</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="simple-string">
Бесплатные </tag>
<tag name="hyperlink" href="https://soundslibmp3.ru">
звуки</tag>
<tag name="simple-string">
 для видеомонтажа в самых популярных форматах wav, mp3, ogg.</tag>
</p>
</segment>
</list>
</segment>
<header head-level="h2" anchor="platnye-royalty-free-zvuki-i-muzyka-dlia-igr">
<p>
Платные Royalty-Free звуки и музыка для игр</p>
</header>
<segment segment-class="for-head">
<segment>
<p>
В этой теме собираем ссылки на ресурсы, на которых есть платные звуки и музыка, которые можно легально использовать в своих играх, распространяемые по принципу Royalty-Free. Желательно давать краткое описание к ссылке.
</p>
</segment>
<list list-type="ul-list">
<segment name="li">
<p>
<tag name="hyperlink" href="http://www.stockmusicsite.com">
Stock Music Site</tag>
<tag name="simple-string">
 -  Музыка, в т.ч. спец. раздел музыки для игр, и звуковые эффекты.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://twune.myshopify.com">
Twune</tag>
<tag name="simple-string">
 - Студия музыки для игр, продажа готовых треков и разработка на заказ.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://www.premiumbeat.com">
Premium Beat</tag>
<tag name="simple-string">
 - Большой и удобный каталог музыки и звуковых эффектов.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://www.stockmusic.com">
StockMusic.com</tag>
<tag name="simple-string">
 - Большой каталог музыки из звуковых эффектов. Сортировки по жанрам, инструментам, настроению.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://www.neosounds.com">
NEO Sounds</tag>
<tag name="simple-string">
 - Каталог музыки и звуковых эффектов. Сортировки по жанрам, инструментам, настроению, тематике.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://www.jamendo.com/en/search">
Jamendo</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://www.audiomicro.com">
AudioMicro</tag>
<tag name="simple-string">
 - Большой каталог музыки и звуковых эффектов. Есть сортировка по жанрам, с уточнением по тегам.</tag>
</p>
</segment>
<segment name="li">
<p>
<tag name="hyperlink" href="http://www.musicmediatracks.com">
musicmedia tracks</tag>
<tag name="simple-string">
 - Каталог музыки, с сортировкой по жанрам и настроению.</tag>
</p>
</segment>
</list>
</segment>
</segment>
</file>
</folder>
