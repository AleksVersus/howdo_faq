<?xml version="1.0" encoding="utf-8"?>
<FictionBook xmlns="http://www.gribuser.ru/xml/fictionbook/2.0" xmlns:l="http://www.w3.org/1999/xlink">
 <description>
  <title-info>
   <genre>ref_ref</genre>
   <genre>comp_programming</genre>
   <author>
    <first-name>Алексей</first-name>
    <middle-name>Олегович</middle-name>
    <last-name>Шпак</last-name>
   </author>
   <book-title>Статьи по программированию на QSP</book-title>
   <annotation>
    <p>Сборник статей по программированию на QSP. Новости, эссе, теория.</p>
    <p>редакция от <strong>2023.3.6 г.</strong></p>
   </annotation>
   <date value="2023-3-6">24 августа 2021</date>
   <coverpage>
    <image l:href="#cover.png"/></coverpage>
   <lang>ru</lang>
  </title-info>
  <document-info>
   <author>
    <first-name>Aleks</first-name>
    <last-name>Versus</last-name>
   </author>
   <program-used>build_fb2.py, FictionBook Editor Release 2.6.6</program-used>
   <date value="2023-3-6">2023-3-6</date>
   <id>5b03c14f-7c11-4306-8c20-291b6b9e72cf</id>
   <version>2.0</version>
   <history>
    <p>1.0 — создание файла</p>
    <p>2.0 — полное обновление файла</p>
   </history>
  </document-info>
 </description>
 <body><section><section id="soderzhanije"><title>Содержание</title><p>*. <a l:href="#preobrazovanije_tipov_qsp"><p><code>Преобразование типов в QSP</code></p>
</a></p>
<p>*. <a l:href="#novoje_v_rabote_massivov"><p><code>Новое в работе массивов в QSP 5.8.0</code></p>
</a></p>
<p>*. <a l:href="#whats_news"><p><code>Что нового в QSP 5.8.0</code></p>
</a></p>
<p>*. <a l:href="#qspider_0120"><p><code>qSpider 0.12.0</code></p>
</a></p>
<p>*. <a l:href="#classic_cfg"><p><code>Содержимое qspgui.cfg для QSP v.5.7.0</code></p>
</a></p>
<p>*. <a l:href="#gosub_func_args"><p><code>Операторы, функции, аргументы. GOSUB, FUNC, ARGS</code></p>
</a></p>
</section><section id="preobrazovanije_tipov_qsp"><title>Преобразование типов в QSP</title><section id="post_scriptum_articles_0001"><p>
Эта статья поможет вам разобраться в таком сложном вопросе, как преобразование типов в операции присвоения, или в выражениях.
</p>
<p>
<p><code>В QSP существует всего два типа значений: числовой и текстовый. Числовой означает любое целочисленное число в пределах от </code></p>
<code><p><code>-2147483648</code></p>
</code><p><code> до </code></p>
<code><p><code>2147483647</code></p>
</code><p><code>; а текстовый — любую строку текста (нет, на самом деле любую. Ограничения для строк — 2 Гб текста).
</code></p>
</p>
<p>
Вот как выглядят такие значения:
</p>
<p><code>! числовые значения
</code></p>
<p><code>123
</code></p>
<p><code>345
</code></p>
<p><code>999
</code></p>
<p><code>
</code></p>
<p><code>!текстовые значения
</code></p>
<p><code>"строка текста"
</code></p>
<p><code>'Ещё одна строка текста'
</code></p>
<p><code>"Третья строка текста"
</code></p>
<p>
Для хранения значений мы используем переменные или массивы. И точно так же массивы и переменные (далее просто — переменные) бывают двух типов.
</p>
<p>
<p><code>Чтобы записать в числовую переменную числовое значение, мы просто пишем имя переменной, знак </code></p>
<code><p><code>=</code></p>
</code><p><code> и число:
</code></p>
</p>
<p><code>box=13
</code></p>
<p>
<p><code>Чтобы записать в текстовую переменную текстовое значение, перед именем переменной мы обязательно ставим знак </code></p>
<code><p><code>$</code></p>
</code><p><code>.
</code></p>
</p>
<p><code>$text='Текстовое значение'
</code></p>
<p>
Если мы попытаемся записать в текстовую переменную числовое значение, плеер автоматически преобразует число в текст, и в текстовой переменной окажется текстовое значение:
</p>
<p><code>$text=123
</code></p>
<p><code>
</code></p>
<p><code>! эквивалентно
</code></p>
<p><code>
</code></p>
<p><code>$text=$str(123)
</code></p>
<p>
Если мы попытаемся присвоить числовой переменной текстовое значение, плеер попытается преобразовать текстовое значение в числовое, но если преобразование невозможно, на экране появится ошибка.
</p>
<p><code>box='134'         & ! тип будет преобразован, а в box запишется число 134
</code></p>
<p><code>cell='non cifer' & ! тип не будет преобразован, плеер выдаст ошибку 101
</code></p>
<p><code>
</code></p>
<p><code>! не эквивалентно
</code></p>
<p><code>
</code></p>
<p><code>box=val('134')          & ! строка преобразуется в число, в box запишется число 134
</code></p>
<p><code>cell=val('non cifer') & ! строка не преобразуется в число, в cell запишется 0
</code></p>
<p><code>
</code></p>
<p><code>! только для команды 2 не удастся выполнить преобразование типа
</code></p>
<p>
Всё становится гораздо интереснее, если мы имеем дело не с отдельными значениями, а с выражениями.
</p>
<p>
Например, если мы попытаемся сложить два числа, то результатом сложения будет третье число:
</p>
<p><code>123+456 & ! результатом будет число 579
</code></p>
<p>
Если мы попытаемся «сложить» две строки, то мы их просто «склеим» (в программировании это называется конкатенация):
</p>
<p><code>"Hello"+"World" & ! результатом будет строка "HelloWorld"
</code></p>
<p>
Но что будет, если мы попытаемся сложить число и строку?
</p>
<p>
А тут произойдёт вот что.
</p>
<p>
Если хотя бы одно из значений в выражении — числовое, плеер попытается все значения преобразовать в числовые и вычислить выражение:
</p>
<p><code>123+"456" & ! результатом будет число 579
</code></p>
<p>
Если преобразование не удастся, то выполняется конкатенация:
</p>
<p><code>123+"d456" & ! результатом будет строка 123d456
</code></p>
<p>
Строки можно только «складывать» или сравнивать, поэтому если вы попытаетесь проделать с ними какие-то другие штуки, плеер выдаст ошибку о несоответствии типов данных:
</p>
<p><code>"Hello"-"World" & ! плеер выдаст ошибку 101
</code></p>
<p>
Однако, если возможно преобразование всех строк в числа, то можно сделать так:
</p>
<p><code>"4560"/"3"*"9" & ! результатом будет число 13680
</code></p>
<p>
Таким образом, плеер обязательно преобразует тип к необходимому, если это возможно, особенно для операций присвоения.
</p>
<p>
Вам не нужно строго следить за тем, какие типы значений вы используете в выражениях, однако старайтесь избегать выражений, в которых математические операции применяются к строкам.
</p>
<p>
<p><code>Старайтесь не использовать строковые и числовые значения в одном выражении, либо приводите их к требуемому типу с помощью функций </code></p>
<code><p><code>$str</code></p>
</code><p><code> и </code></p>
<code><p><code>val</code></p>
</code><p><code>:
</code></p>
</p>
<p><code>$str(1234) & ! преобразует число в строку
</code></p>
<p><code>! если получает строку, возвращает строку
</code></p>
<p><code>$str("string")
</code></p>
<p><code>
</code></p>
<p><code>val("1234") & ! преобразует строку в число
</code></p>
<p><code>! если не может преобразовать в число, возвращает ноль
</code></p>
<p><code>val("string")
</code></p>
<p>
Не забывайте пользоваться подвыражениями, если нужно вставить значение в строку:
</p>
<p><code>health=100
</code></p>
<p><code>max_health=350
</code></p>
<p><code>*pl "Здоровье: <<health>>/<<max_health>>."
</code></p>
<title>P.S.:</title><p>
Данную статью вы можете найти так же и на других ресурсах:
</p>
<p>*. <a l:href="http://aleksversus.narod.ru/index/preobrazovanie_tipov_v_qsp/0-53"><p><code>мой_сайт/преобразование_типов_в_QSP</code></p>
</a></p>
<p>*. <a l:href="https://aleksversus.medium.com/преобразование-типов-в-qsp-8eec585f93e2"><p><code>medium/Преобразование типов в QSP</code></p>
</a></p>
<p>*. <a l:href="https://vk.com/@qsplayer-preobrazovanie-tipov-v-qsp"><p><code>vk.com/Преобразование типов в QSP</code></p>
</a></p>
<p>*. <a l:href="https://ifhub.club/2020/09/23/preobrazovanie-tipov-v-qsp.html"><p><code>ifhub.club/Преобразование типов в QSP</code></p>
</a></p>
</section></section><section id="novoje_v_rabote_massivov"><title>Массивы уже не те</title><section id="chto-mozhno-i-nuzhno-sdelat_"><p></p>
<title>Как ведут себя массивы сейчас</title><p>
Начать следует с того, что в «классическом» плеере версии 5.7.0 и ниже, а так же в Quest Navigator 0.0.28 и AeroQSP, в одном элементе массива можно хранить как текстовое, так и числовое значение. Вот как это выглядит:
</p>
<p><code>$mass[0]="яблоко"
</code></p>
<p><code>mass[0]=12
</code></p>
<p><code>$mass[1]="груша"
</code></p>
<p><code>mass[1]=45
</code></p>
<p>
При этом мы спокойно можем получить и числовое, и текстовое значение по указанному индексу:
</p>
<p><code>*pl $mass[1]
</code></p>
<p><code>*pl mass[1]
</code></p>
<p>
Правда это создаёт ряд дополнительных трудностей. Например, каков будет размер массива в нашем примере?
</p>
<p><code>arrsize('$mass')
</code></p>
<p><code>arrsize('mass')
</code></p>
<p>
<p><code>В обоих случаях </code></p>
<code><p><code>arrsize</code></p>
</code><p><code> выдаст ответ </code></p>
<code><p><code>2</code></p>
</code><p><code>. И нам может показаться, что так и должно быть, ведь скорее всего мы имеем дело с двумя массивами: текстовым и числовым. Но на самом деле массив один. Ведь если мы будем добавлять только текстовые значения, размер «числовой части» массива так же увеличится.
</code></p>
</p>
<p><code>$mass[0]="яблоко"
</code></p>
<p><code>mass[0]=12
</code></p>
<p><code>$mass[1]="груша"
</code></p>
<p><code>mass[1]=45
</code></p>
<p><code>$mass[2]="слива"
</code></p>
<p><code>$mass[3]="апельсин"
</code></p>
<p><code>
</code></p>
<p><code>arrsize('$mass')
</code></p>
<p><code>arrsize('mass')
</code></p>
<p>
<p><code>В этом примере оба </code></p>
<code><p><code>arrsize</code></p>
</code><p><code> вернут </code></p>
<code><p><code>4</code></p>
</code><p><code>. Это показывает, что мы имеем дело с одним и тем же массивом, который позволяет под одним индексом хранить элементы двух типов, а если мы не задали какой-то элемент явно, то его значение будет значением по умолчанию. Для числовых элементов значение по умолчанию </code></p>
<code><p><code>0</code></p>
</code><p><code>, для текстовых — </code></p>
<code><p><code>""</code></p>
</code><p><code> (пустая строка).
</code></p>
</p>
<p>
Такое поведение массива весьма просто представить в виде таблицы:
</p>
<p><code>|  индекс  | значение в | значение в |
</code></p>
<p><code>| элемента |   $mass    |    mass    |
</code></p>
<p><code>|----------|------------|------------|
</code></p>
<p><code>|     0    |  'яблоко'  |     12     |
</code></p>
<p><code>|----------|------------|------------|
</code></p>
<p><code>|     1    |  'груша'   |     45     |
</code></p>
<p><code>|----------|------------|------------|
</code></p>
<p><code>|     2    |  'слива'   |            |
</code></p>
<p><code>|----------|------------|------------|
</code></p>
<p><code>|     3    | 'апельсин' |            |
</code></p>
<p>
Для удобства восприятия мы не внесли в таблицу значения элементов, которые не были явно заданы. Однако, как было сказано выше, при попытке использовать значения этих элементов, мы получим значения по умолчанию. В данном случае для числовых элементов это будут нули.
</p>
<p>
Может показаться, что такое поведение массива не только правильно, но и удобно, поскольку позволяет использовать одно имя для хранения и текстовых и числовых значений. Некоторые авторы, знающие о таком поведении, делали, например, такие вещи:
</p>
<p><code>|  индекс  |  значение в   | значение в |
</code></p>
<p><code>| элемента |    $unit      |    unit    |
</code></p>
<p><code>|----------|---------------|------------|
</code></p>
<p><code>|     0    |  'пехотинец'  |    300     |
</code></p>
<p><code>|----------|---------------|------------|
</code></p>
<p><code>|     1    |  'гвардеец'   |    670     |
</code></p>
<p><code>|----------|---------------|------------|
</code></p>
<p><code>|     2    |   'лучник'    |   1500     |
</code></p>
<p><code>|----------|---------------|------------|
</code></p>
<p><code>|     3    | 'артиллерист' |     10     |
</code></p>
<p>
То есть в одном массиве хранили и наименования юнитов, и их количество.
</p>
<p>
Однако данным способом Вы могли пользоваться, только когда явно указывали числовой индекс элемента массива. Если написать такой код:
</p>
<p><code>$mass[]="яблоко"
</code></p>
<p><code>mass[]=12
</code></p>
<p><code>$mass[]="груша"
</code></p>
<p><code>mass[]=45
</code></p>
<p><code>
</code></p>
<p><code>arrsize('$mass')
</code></p>
<p><code>arrsize('mass')
</code></p>
<p>
<p><code>— уверенность в том, какое значение вернёт </code></p>
<code><p><code>arrsize</code></p>
</code><p><code> пропадает.
</code></p>
</p>
<cite>
<p>
Для тех, кто ещё не знает: пустые квадратные скобки после имени массива означают, что мы хотим работать с последним элементом массива, и нам не важен его номер.
</p>
</cite>
<p>
И тут происходит интересная штука. В момент, когда мы пытаемся последнему элементу присвоить значение, плеер создаёт новый элемент указанного типа и уже ему присваивает значение. Таким образом каждая такая команда генерирует в массиве элементы обоих типов, но лишь одному присваивается значение:
</p>
<p><code>|  индекс  | значение в | значение в |
</code></p>
<p><code>| элемента |   $mass    |    mass    |
</code></p>
<p><code>|----------|------------|------------|
</code></p>
<p><code>|     0    |  'яблоко'  |            |
</code></p>
<p><code>|----------|------------|------------|
</code></p>
<p><code>|     1    |            |     12     |
</code></p>
<p><code>|----------|------------|------------|
</code></p>
<p><code>|     2    |  'груша'   |            |
</code></p>
<p><code>|----------|------------|------------|
</code></p>
<p><code>|     3    |            |     45     |
</code></p>
<p>
<p><code>Мы снова не вписали в таблицу значения элементов, которые не задавали, однако </code></p>
<code><p><code>mass[0]</code></p>
</code><p><code> и </code></p>
<code><p><code>mass[2]</code></p>
</code><p><code> вернут нам нули, если мы попробуем их использовать, а </code></p>
<code><p><code>$mass[1]</code></p>
</code><p><code> и </code></p>
<code><p><code>$mass[3]</code></p>
</code><p><code> вернут пустые строки (это соответствует их значениям по умолчанию).
</code></p>
</p>
<p>
<p><code>Таким образом оба </code></p>
<code><p><code>arrsize</code></p>
</code><p><code> вернут нам значение </code></p>
<code><p><code>4</code></p>
</code><p><code>, хотя мы явно задавали только два числовых и два текстовых элемента.
</code></p>
</p>
<title>Как массивы будут себя вести</title><p>
Новая версия плеера ещё не вышла, но всё ниже следующее будет работать в ней так. (Уже работает в плеере qSpider)
</p>
<p>
Теперь под одним индексом можно хранить либо только текстовое, либо только числовое значение. Мы своего рода объединили столбцы нашей таблицы:
</p>
<p><code>|  индекс  | значение в | значение в |                |  индекс  |   значение в   |
</code></p>
<p><code>| элемента |   $mass    |    mass    |                | элемента | $mass или mass |
</code></p>
<p><code>|----------|------------|------------|            \   |----------|----------------|
</code></p>
<p><code>|     0    |  'яблоко'  |            |  -----------\  |     0    |    'яблоко'    |
</code></p>
<p><code>|----------|------------|------------|              \ |----------|----------------|
</code></p>
<p><code>|     1    |            |     12     |              / |     1    |       12       |
</code></p>
<p><code>|----------|------------|------------|  -----------/  |----------|----------------|
</code></p>
<p><code>|     2    |  'груша'   |            |            /   |     2    |    'груша'     |
</code></p>
<p><code>|----------|------------|------------|                |----------|----------------|
</code></p>
<p><code>|     3    |            |     45     |                |     3    |       45       |
</code></p>
<p>
Это означает, что код:
</p>
<p><code>$mass[]="яблоко"
</code></p>
<p><code>mass[]=12
</code></p>
<p><code>$mass[]="груша"
</code></p>
<p><code>mass[]=45
</code></p>
<p><code>
</code></p>
<p><code>arrsize('$mass')
</code></p>
<p><code>arrsize('mass')
</code></p>
<p>
будет работать так же, как и работал. Т.е. каждая операция присвоения создаёт новый элемент в массиве, которому мы присваиваем либо строку, либо текст. И в данном случае мы создадим четыре разных элемента массива, два из которых будут текстового типа, два — числового.
</p>
<p>
Немного по-другому поведёт себя наш изначальный код:
</p>
<p><code>$mass[0]="яблоко"
</code></p>
<p><code>mass[0]=12
</code></p>
<p><code>$mass[1]="груша"
</code></p>
<p><code>mass[1]=45
</code></p>
<p><code>
</code></p>
<p><code>arrsize('$mass')
</code></p>
<p><code>arrsize('mass')
</code></p>
<p>
<p><code>Здесь, присвоив элементу сначала текстовое, а затем числовое значение, мы «затрём» изначальное текстовое значение числовым. В результате работы этого кода мы получим массив из двух элементов, и оба элемента будут числовыми — </code></p>
<code><p><code>arrsize</code></p>
</code><p><code> вернёт </code></p>
<code><p><code>2</code></p>
</code><p><code> в обеих командах.
</code></p>
</p>
<p>
Чтобы закрепить новые знания, рассмотрим другой наш пример:
</p>
<p><code>$mass[0]="яблоко"
</code></p>
<p><code>mass[0]=12
</code></p>
<p><code>$mass[1]="груша"
</code></p>
<p><code>mass[1]=45
</code></p>
<p><code>$mass[2]="слива"
</code></p>
<p><code>$mass[3]="апельсин"
</code></p>
<p><code>
</code></p>
<p><code>arrsize('$mass')
</code></p>
<p><code>arrsize('mass')
</code></p>
<p>
<p><code>Здесь, как и в предыдущем примере, числовые значения «затрут» текстовые для элементов </code></p>
<code><p><code>0</code></p>
</code><p><code> и </code></p>
<code><p><code>1</code></p>
</code><p><code>, а в элементах </code></p>
<code><p><code>2</code></p>
</code><p><code> и </code></p>
<code><p><code>3</code></p>
</code><p><code> будут текстовые значения. Соответственно обе команды </code></p>
<code><p><code>arrsize</code></p>
</code><p><code> вернут значение </code></p>
<code><p><code>4</code></p>
</code><p><code>.
</code></p>
</p>
<p>
В виде таблицы мы можем представить это так:
</p>
<p><code>|  индекс  |   значение в   |
</code></p>
<p><code>| элемента | $mass или mass |
</code></p>
<p><code>|----------|----------------|
</code></p>
<p><code>|     0    |       12       |
</code></p>
<p><code>|----------|----------------|
</code></p>
<p><code>|     1    |       45       |
</code></p>
<p><code>|----------|----------------|
</code></p>
<p><code>|     2    |     'слива'    |
</code></p>
<p><code>|----------|----------------|
</code></p>
<p><code>|     3    |    'апельсин'  |
</code></p>
<p>
<p><code>Если мы попытаемся использовать текстовые значения элементов </code></p>
<code><p><code>0</code></p>
</code><p><code> и </code></p>
<code><p><code>1</code></p>
</code><p><code>, то получим значения по-умолчанию, то есть — </code></p>
<code><p><code>""</code></p>
</code><p><code> (пустые строки). Аналогично, если мы попытаемся использовать числовые значения элементов </code></p>
<code><p><code>2</code></p>
</code><p><code> и </code></p>
<code><p><code>3</code></p>
</code><p><code>, то получим числовые значения по-умолчанию — </code></p>
<code><p><code>0</code></p>
</code><p><code> (нули).
</code></p>
</p>
<p>
Возможно пока Вы этого не заметили, но это очень масштабное изменение, которое потребует от некоторых авторов существенно изменить свои привычки в программировании на QSP.
</p>
<title>Что можно и нужно сделать</title><p>
Автор этой статьи уже ощутил на себе вес изменений в работе массивов.
</p>
<p>
<p><code>Протестировав «Вереницу миров или выводы из закона Мёрфи» на плеере qSpider, который уже использует новую версию библиотеки, я (не без помощи </code></p>
<strong><p><code>Werewolf</code></p>
</strong><p><code>`а и </code></p>
<strong><p><code>Byte</code></p>
</strong><p><code>`а) обнаружил ошибки логики в коде, которые скрадывались в плеерах версии 5.7.0. именно благодаря тому, что под одним индексом в массиве можно было хранить и текстовое, и числовое значение. К счастью, эти ошибки легко поправить.
</code></p>
</p>
<p>
Если Вы где-либо использовали запись в массив под одним индексом и числовых и текстовых значений, Вам так же следует исправить это. Особенно критично исправить в проектах, разработка которых затянется на ближайшие год-два.
</p>
<p>
Предложенный пример, где названия и количество юнитов хранились в одном массиве, больше работать не будет.
</p>
<p><code>|  индекс  |  значение в   | значение в |
</code></p>
<p><code>| элемента |    $unit      |    unit    |
</code></p>
<p><code>|----------|---------------|------------|
</code></p>
<p><code>|     0    |  'пехотинец'  |    300     |
</code></p>
<p><code>|----------|---------------|------------|
</code></p>
<p><code>|     1    |  'гвардеец'   |    670     |
</code></p>
<p><code>|----------|---------------|------------|
</code></p>
<p><code>|     2    |   'лучник'    |   1500     |
</code></p>
<p><code>|----------|---------------|------------|
</code></p>
<p><code>|     3    | 'артиллерист' |     10     |
</code></p>
<p><code>
</code></p>
<p><code>!!!       так делать нельзя           !!!
</code></p>
<p>
И наш совет таков: не используйте и текстовые, и числовые значения элементов в одном массиве. Лучше завести два массива. Отдельно для текстовых и числовых значений:
</p>
<p><code>$unit_name[0]='пехотинец'
</code></p>
<p><code>unit_count[0]=337
</code></p>
<p>
Помимо изменений в массивах нас ждёт ещё целый ряд изменений, но они менее глобальны, и о них мы поговорим в следующих статьях.
</p>
<p>
Всем успехов в написании игр, и не бойтесь кажущейся сложности!
</p>
<p>
Памятка по изменениям в работе массивов:
</p>
image: https://i.ibb.co/BgY5GMm/N-Stg0hc-V1-U.jpg<p>
Статья написана по мотивам:
</p>
<p>*. <p><code>статьи </code></p>
<strong><p><code>Pseudopod</code></p>
</strong><p><code>`а </code></p>
<a l:href="https://trello.com/c/z9AbJa8O/18-одновременное-использование-arri-и-arri"><p><code>trello.com/.../одновременное-использование-arri-и-arri</code></p>
</a></p>
<p>*. <p><code>и поста </code></p>
<strong><p><code>Byte</code></p>
</strong><p><code>`а </code></p>
<a l:href="https://qsp.org/index.php?option=com_agora&task=topic&id=1290&Itemid=57"><p><code>qsp.org/index.php...&Itemid=57</code></p>
</a></p>
<p>
Статья доступна и на других ресурсах:
</p>
<p>*. <a l:href="http://aleksversus.narod.ru/index/massivy_uzhe_ne_te/0-54"><p><code>мой сайт/Массивы уже не те</code></p>
</a></p>
<p>*. <a l:href="https://vk.com/@qsplayer-massivy-uzhe-ne-te"><p><code>vk.com/Массивы уже не те</code></p>
</a></p>
<p>*. <a l:href="https://ifhub.club/2020/10/17/massivy-uzhe-ne-te-ili-izmenenie-v-logike-raboty-massivov-v-qsp.html"><p><code>ifhub.club/Массивы уже не те</code></p>
</a></p>
</section></section><section id="chto-eschio"><title>Что нового в QSP</title><section id="bol_she-argumentov-dlia-funktsij"><p>
<p><code>Пока готовится выход нового плеера версии 5.8.0 (или выше), мы решили рассказать о грядущих нововведениях. Всё (или почти всё), что будет представлено в этой статье, вы уже можете пощупать в плеере </code></p>
<a l:href="https://qsp.org/index.php?option=com_agora&task=topic&id=1291&Itemid=57"><p><code>"qSpider" от Werewolf`а</code></p>
</a><p><code>.
</code></p>
</p>
<title>Изменение в работе массивов</title><p>
<p><code>Это, пожалуй, самое основное из грядущих изменений, и о нём мы подробно писали в статье </code></p>
<a l:href="#novoje_v_rabote_massivov"><p><code>"Массивы уже не те"</code></p>
</a><p><code>. Здесь же изложим кратко.
</code></p>
</p>
<p>
Теперь в массиве будет нельзя под одним индексом хранить и текстовое и числовое значение. Если вы запишете в ячейку числовое значение, а потом запишете в ту же ячейку текстовое значение, текстовое значение затрёт числовое.
</p>
<p>
<p><code>При этом, если вы попытаетесь получить из ячейки со строковым значением числовое значение, плеер вернёт значение по-умолчанию, то есть </code></p>
<code><p><code>0</code></p>
</code><p><code>. И наоборот: если попытаться из ячейки с числовым значением получить строковое, плеер вернёт пустую строку.
</code></p>
</p>
<p>
Примеры:
</p>
<p><code>! версия 5.7.0
</code></p>
<p><code>mass[1]=123
</code></p>
<p><code>$mass[1]='string'
</code></p>
<p><code>*pl mass[1]  & ! выведет число 123
</code></p>
<p><code>*pl $mass[1] & ! выведет строку 'string'
</code></p>
<p><code>! версия 5.8.0 и выше
</code></p>
<p><code>mass[1]=123
</code></p>
<p><code>$mass[1]='string' & ! затирает числовое значение
</code></p>
<p><code>*pl mass[1]  & ! попытка доступа к числовому значению вернёт 0
</code></p>
<p><code>*pl $mass[1] & ! выведет строку 'string'
</code></p>
<title>Многомерные массивы</title><p>
Чтобы организовать многомерный массив, в плеерах версии 5.7.0 (и более ранних) приходилось использовать текстовые индексы. Например:
</p>
<p><code>! работает в плеерах любых версий:
</code></p>
<p><code>$unit_coords["3,1"]="Пехотинец"
</code></p>
<p><code>$unit_coords["2,7"]="Артилерист"
</code></p>
<p><code>$unit_coords["10,0"]="Танк"
</code></p>
<p>
Но в новых версиях плеера (начиная с 5.8.0 и выше) можно не использовать текстовые индексы, а указывать несколько нужных значений через запятую:
</p>
<p><code>! версия 5.8.0 и выше
</code></p>
<p><code>$unit_coords[3,1]="Пехотинец"
</code></p>
<p><code>$unit_coords[2,7]="Артилерист"
</code></p>
<p><code>$unit_coords[10,0]="Танк"
</code></p>
<p>
Это намного упрощает работу с многомерными массивами.
</p>
<title>Изменения в работе логических операторов и функций</title><p>
<p><code>Все мы знаем, что QSP не поддерживает булевые (логические) типы данных, а вместо них в плеерах версии 5.7.0. использовались числа </code></p>
<code><p><code>0</code></p>
</code><p><code> и </code></p>
<code><p><code>-1</code></p>
</code><p><code>. 
</code></p>
</p>
<p>
<p><code>Здесь </code></p>
<code><p><code>0</code></p>
</code><p><code> означало Ложь (False), а </code></p>
<code><p><code>-1</code></p>
</code><p><code> означало Правду (</code></p>
<code><p><code>True</code></p>
</code><p><code>). Соответственно и все логические операции возвращали нам эти значения. 
</code></p>
</p>
<p>
Например:
</p>
<p><code>! версия 5.7.0
</code></p>
<p><code>*pl (3>2 and 4>3) & ! AND вернёт -1
</code></p>
<p><code>*pl (3>2 or 4>3) & ! OR вернёт -1
</code></p>
<p><code>*pl no 0 & ! NO вернёт -1
</code></p>
<p><code>*pl (3<2 and 4>3) & ! AND вернёт 0
</code></p>
<p><code>*pl (3<2 or 4<3) & ! OR вернёт 0
</code></p>
<p><code>*pl no -1 & ! NO вернёт 0
</code></p>
<p>
<p><code>В новых версиях плеера все логические операции будут возвращать </code></p>
<code><p><code>1</code></p>
</code><p><code> в случае Правды (</code></p>
<code><p><code>True</code></p>
</code><p><code>), и </code></p>
<code><p><code>0</code></p>
</code><p><code> в случае Лжи (</code></p>
<code><p><code>False</code></p>
</code><p><code>):
</code></p>
</p>
<p><code>! версия 5.8.0 и выше
</code></p>
<p><code>*pl (3>2 and 4>3) & ! AND вернёт 1
</code></p>
<p><code>*pl (3>2 or 4>3) & ! OR вернёт 1
</code></p>
<p><code>*pl no 0 & ! NO вернёт 1
</code></p>
<p><code>*pl (3<2 and 4>3) & ! AND вернёт 0
</code></p>
<p><code>*pl (3<2 or 4<3) & ! OR вернёт 0
</code></p>
<p><code>*pl no -1 & ! NO вернёт 0
</code></p>
<p>
<p><code>Соответственно и различные функции, возвращавшие "логические" значения, будут возвращать либо </code></p>
<code><p><code>1</code></p>
</code><p><code> (Правда, </code></p>
<code><p><code>True</code></p>
</code><p><code>), либо </code></p>
<code><p><code>0</code></p>
</code><p><code> (Ложь, </code></p>
<code><p><code>False</code></p>
</code><p><code>):
</code></p>
</p>
<p><code>! версия 5.7.0
</code></p>
<p><code>addobj "Отвёртка"
</code></p>
<p><code>*pl obj("Отвёртка") & ! OBJ вернёт -1
</code></p>
<p><code>*pl obj("Оттка") & ! OBJ вернёт 0
</code></p>
<p><code>
</code></p>
<p><code>*pl isnum("123") & ! ISNUM вернёт -1
</code></p>
<p><code>*pl isnum("12d") & ! ISNUM вернёт 0
</code></p>
<p><code>! версия 5.8.0 и выше
</code></p>
<p><code>addobj "Отвёртка"
</code></p>
<p><code>*pl obj("Отвёртка") & ! OBJ вернёт 1
</code></p>
<p><code>*pl obj("Оттка") & ! OBJ вернёт 0
</code></p>
<p><code>
</code></p>
<p><code>*pl isnum("123") & ! ISNUM вернёт 1
</code></p>
<p><code>*pl isnum("12d") & ! ISNUM вернёт 0
</code></p>
<p>
<p><code>Ещё одно изменение в работе логических операций заключается в том, что теперь они на самом деле будут логическими. Да, оказывается в плеерах версий 5.7.0 и старше операции </code></p>
<code><p><code>AND</code></p>
</code><p><code>, </code></p>
<code><p><code>OR</code></p>
</code><p><code>, </code></p>
<code><p><code>NO</code></p>
</code><p><code> не были логическими — они были побитовыми. Это означает, что данные операции могли выполнять сравнение чисел по отдельным битам и возвращать результат этого сравнения.
</code></p>
</p>
<p>
Например:
</p>
<p><code>! версия 5.7.0
</code></p>
<p><code>*pl (3 and 2) & ! AND вернёт 2
</code></p>
<p><code>*pl (4 or 6) & ! OR вернёт 6
</code></p>
<p><code>*pl no 7 & ! NO вернёт -8
</code></p>
<p>
<p><code>Теперь же, не имеет значения, какое число мы передаём логическому оператору. Если это число отлично от нуля, логический оператор будет воспринимать его как </code></p>
<code><p><code>1</code></p>
</code><p><code>, то есть Правду (</code></p>
<code><p><code>True</code></p>
</code><p><code>).
</code></p>
</p>
<p><code>! версия 5.8.0 и выше
</code></p>
<p><code>*pl (3 and 2) & ! AND вернёт 1
</code></p>
<p><code>*pl (4 or 6) & ! OR вернёт 1
</code></p>
<p><code>*pl no 7 & ! NO вернёт 0
</code></p>
<p>
<p><code>И это логично, ведь именно по такому принципу и работали операторы проверки условия </code></p>
<code><p><code>if</code></p>
</code><p><code> и </code></p>
<code><p><code>elseif</code></p>
</code><p><code>. Если этим операторам передавалось значение отличное от </code></p>
<code><p><code>0</code></p>
</code><p><code>, то это означало, что условие верно (Правда, </code></p>
<code><p><code>True</code></p>
</code><p><code>).
</code></p>
</p>
<p><code>! одинаково для всех версий плеера:
</code></p>
<p><code>if 0:
</code></p>
<p><code>    *pl "условие выполнено"
</code></p>
<p><code>else
</code></p>
<p><code>    *pl "условие не выполнено"
</code></p>
<p><code>end
</code></p>
<p><code>
</code></p>
<p><code>if 3:
</code></p>
<p><code>    *pl "условие выполнено"
</code></p>
<p><code>else
</code></p>
<p><code>    *pl "условие не выполнено"
</code></p>
<p><code>end
</code></p>
<title>Аргументы, передаваемые с операторами GOTO и XGOTO</title><p>
<p><code>Теперь аргументы (параметры, данные), передаваемые с операторами </code></p>
<code><p><code>GOTO</code></p>
</code><p><code> и </code></p>
<code><p><code>XGOTO</code></p>
</code><p><code>, и которые мы можем получить из массива </code></p>
<code><p><code>ARGS</code></p>
</code><p><code> на локации, однозначно можно будет использовать в действиях, созданных на этой локации.
</code></p>
</p>
<p>
Раньше это тоже можно было делать, однако в плеере присутствовал досадный баг, который периодически ломал всё это дело. Этот баг исправили, и теперь всё прекрасно работает:
</p>
<p><code># локация_1
</code></p>
<p><code>goto "локация_2","текст"
</code></p>
<p><code>--локация_1
</code></p>
<p><code>
</code></p>
<p><code># локация_2
</code></p>
<p><code>act "Действие":
</code></p>
<p><code>    *pl $args[0]
</code></p>
<p><code>end
</code></p>
<p><code>--локация_2
</code></p>
<p>
<p><code>Обратите внимание, </code></p>
<code><p><code>ARGS</code></p>
</code><p><code> ведёт себя на текущей локации, как обычный глобальный массив. Т.е., если вы изменяете значения </code></p>
<code><p><code>ARGS</code></p>
</code><p><code> в одном из действий, эти же значения будут использоваться в других действиях.
</code></p>
</p>
<p><code># локация_1
</code></p>
<p><code>goto "локация_2","из аргументов"
</code></p>
<p><code>--локация_1
</code></p>
<p><code>
</code></p>
<p><code># локация_2
</code></p>
<p><code>act "Действие - 1":
</code></p>
<p><code>    *pl $args[0]
</code></p>
<p><code>    $args[0]="Из действия 1"
</code></p>
<p><code>end
</code></p>
<p><code>act "Действие - 2":
</code></p>
<p><code>    *pl $args[0]
</code></p>
<p><code>    $args[0]="Из действия 2"
</code></p>
<p><code>end
</code></p>
<p><code>--локация_2
</code></p>
<title>DISABLESUBEX больше нет</title><p>
<p><code>Системная переменная </code></p>
<code><p><code>DISABLESUBEX</code></p>
</code><p><code> была предназначена для того, чтобы отключать обработку вложенных выражений. Например, если вы хотели вывести строку, в которой присутствуют вложенные выражения, без изменений, вы могли воспользоваться данной переменной:
</code></p>
</p>
<p><code>! в версии 5.7.0
</code></p>
<p><code>health=100
</code></p>
<p><code>*pl "Здоровье <<health>>" & ! выведет строку 'Здоровье 100'
</code></p>
<p><code>disablesubex=1
</code></p>
<p><code>*pl "Здоровье <<health>>" & ! выведет строку 'Здоровье <<health>>'
</code></p>
<p><code>disablesubex=0
</code></p>
<p><code>*pl "Здоровье <<health>>" & ! выведет строку 'Здоровье 100'
</code></p>
<p>
В плеерах более новых версий это не сработает:
</p>
<p><code>! в версии 5.8.0 и выше
</code></p>
<p><code>health=100
</code></p>
<p><code>*pl "Здоровье <<health>>" & ! выведет строку 'Здоровье 100'
</code></p>
<p><code>disablesubex=1
</code></p>
<p><code>*pl "Здоровье <<health>>" & ! выведет строку 'Здоровье 100'
</code></p>
<p><code>disablesubex=0
</code></p>
<p><code>*pl "Здоровье <<health>>" & ! выведет строку 'Здоровье 100'
</code></p>
<p>
Чтобы вывести строку с подвыражениями без обработки таких вложенных выражений в новых версиях плеера, можно использовать фигурные скобки:
</p>
<p><code>! одинаково работает во всех версиях плеера
</code></p>
<p><code>health=100
</code></p>
<p><code>*pl "Здоровье <<health>>"    & ! выведет строку 'Здоровье 100'
</code></p>
<p><code>*pl {Здоровье <<health>>}    & ! выведет строку 'Здоровье <<health>>'
</code></p>
<p><code>*pl "Здоровье <<health>>"    & ! выведет строку 'Здоровье 100'
</code></p>
<title>Изменения в работе неявного оператора</title><p>
<p><code>Неявный оператор — это оператор, который мы не указываем. В 5.7.0 он делал примерно то же, что делал и оператор </code></p>
<code><p><code>*pl</code></p>
</code><p><code>. То есть выводил на экран значение, добавляя после этого значения перевод строки:
</code></p>
</p>
<p><code>! работает в плеерах любых версий
</code></p>
<p><code>*pl 456
</code></p>
<p><code>*pl "text"
</code></p>
<p><code>
</code></p>
<p><code>! эквивалентно:
</code></p>
<p><code>
</code></p>
<p><code>456        & ! здесь для вывода используется неявный оператор
</code></p>
<p><code>"text"    & ! и здесь для вывода используется неявный оператор
</code></p>
<p>
<p><code>Если мы вызывали какую-то функцию, но она не возвращала никакого результата, неявный оператор, как и оператор </code></p>
<code><p><code>*pl</code></p>
</code><p><code>, выводил на экран пустую строку и добавлял к ней перевод строки:
</code></p>
</p>
<p><code># loc1
</code></p>
<p><code>"Строка текста"
</code></p>
<p><code>func('foo')
</code></p>
<p><code>"Строка текста"
</code></p>
<p><code>--loc1
</code></p>
<p><code>
</code></p>
<p><code># foo
</code></p>
<p><code>N=R*L
</code></p>
<p><code>--foo
</code></p>
<p>
Вот что мы увидим на экране в плеерах версии 5.7.0:
</p>
<p><code>Строка текста
</code></p>
<p><code>
</code></p>
<p><code>Строка текста
</code></p>
<p>
В новых версиях плеера, если неявный оператор не получит никакого значения от функции, он просто ничего не будет делать. Вот что мы увидим на экране в плеерах версии 5.8.0 и выше:
</p>
<p><code>Строка текста
</code></p>
<p><code>Строка текста
</code></p>
<title>Неявный вызов пользовательских функций</title><p>
<p><code>В плеерах версии 5.7.0 и более ранних вы могли написать собственную функцию и затем вызвать её без возвращения результата, используя оператор </code></p>
<code><p><code>GOSUB</code></p>
</code><p><code>, или с возвращением результата, используя функцию </code></p>
<code><p><code>FUNC</code></p>
</code><p><code>. В плеерах версии 5.8.0 и выше эта возможность конечно же сохраняется.
</code></p>
</p>
<p>
Пример:
</p>
<p><code>! работает во всех версиях плеера
</code></p>
<p><code># start
</code></p>
<p><code>gosub 'proced'            & ! вызов без возвращения результата
</code></p>
<p><code>*pl func('foo',23,45)    & ! вызов с возвращением результата
</code></p>
<p><code>--start
</code></p>
<p><code>
</code></p>
<p><code># proced
</code></p>
<p><code>act "Action":
</code></p>
<p><code>    *pl 'text'
</code></p>
<p><code>end
</code></p>
<p><code>--proced
</code></p>
<p><code>
</code></p>
<p><code># foo
</code></p>
<p><code>result=args[0]+args[1]
</code></p>
<p><code>--foo
</code></p>
<p>
Однако в плеерах версии 5.8.0 и выше вы можете использовать сокращённую запись вызова таких функций:
</p>
<p><code>! работает только в 5.8.0 и выше
</code></p>
<p><code># start
</code></p>
<p><code>@proced            & ! вызов без возвращения результата
</code></p>
<p><code>*pl @foo(23,45)    & ! вызов с возвращением результата
</code></p>
<p><code>--start
</code></p>
<p><code>
</code></p>
<p><code># proced
</code></p>
<p><code>act "Action":
</code></p>
<p><code>    *pl 'text'
</code></p>
<p><code>end
</code></p>
<p><code>--proced
</code></p>
<p><code>
</code></p>
<p><code># foo
</code></p>
<p><code>result=args[0]+args[1]
</code></p>
<p><code>--foo
</code></p>
<p>
<p><code>То есть вместо того, чтобы использовать явное указание оператора gosub или функции </code></p>
<code><p><code>func</code></p>
</code><p><code>, можно писать символ </code></p>
<code><p><code>@</code></p>
</code><p><code>, а после него без пробелов записывать название локации. Само название вызываемой таким образом локации/функции так же не должно содержать пробелов.
</code></p>
</p>
<p>
Если такой функции нужно передать значения, после названия локации ставим скобки и перечисляем нужные аргументы.
</p>
<title>Новая функция ARRITEM</title><p>
<p><code>Функция </code></p>
<code><p><code>ARRITEM</code></p>
</code><p><code> возвращает значение указанной ячейки массива. Это новая функция, и введена она по большей части для того, чтобы упразднять подвыражения при использовании </code></p>
<code><p><code>DYNAMIC</code></p>
</code><p><code>/</code></p>
<code><p><code>DYNEVAL</code></p>
</code><p><code>.
</code></p>
</p>
<p>
Примеры:
</p>
<p><code>massive[123]=256
</code></p>
<p><code>! работает в любой версии плеера:
</code></p>
<p><code>xvar = massive[123]
</code></p>
<p><code>
</code></p>
<p><code>! работает только в 5.8.0 и выше:
</code></p>
<p><code>xvar = arritem('massive',123)
</code></p>
<p>
<p><code>Обе команды присваивают переменной </code></p>
<code><p><code>xvar</code></p>
</code><p><code> значение из ячейки </code></p>
<code><p><code>123</code></p>
</code><p><code> массива </code></p>
<code><p><code>'massive</code></p>
</code><p><code>', однако во втором случае мы указываем название в виде строкового значения. Таким образом мы, не прибегая к помощи </code></p>
<code><p><code>DYNAMIC</code></p>
</code><p><code>/</code></p>
<code><p><code>DYNEVAL</code></p>
</code><p><code> можем динамически формировать названия массива при получении значения.
</code></p>
</p>
<p><code>! $stringarray[345]='text out'
</code></p>
<p><code>$mass[0]='string'
</code></p>
<p><code>$mass[1]='array'
</code></p>
<p><code>*pl $arritem('$'+$mass[0]+$mass[1],345)
</code></p>
<p>
<p><code>Так же </code></p>
<code><p><code>ARRITEM</code></p>
</code><p><code> позволяет получить значение из ячейки с текстовым индексом:
</code></p>
</p>
<p><code>$mass["text index"]="text string"
</code></p>
<p><code>*pl $arritem('$mass','text index')
</code></p>
<title>KILLVAR удаляет по текстовому индексу</title><p>
<p><code>В плеерах версии 5.7.0 и ниже оператор </code></p>
<code><p><code>KILLVAR</code></p>
</code><p><code> умел удалять элементы массивов только по числовому индексу:
</code></p>
</p>
<p><code>! работает в плеерах любых версий
</code></p>
<p><code>$mass[0]='строка 0'
</code></p>
<p><code>$mass[1]='строка 1'
</code></p>
<p><code>$mass[2]='строка 2'
</code></p>
<p><code>$mass["text index"]='строка 3'
</code></p>
<p><code>$mass[4]='строка 4'
</code></p>
<p><code>
</code></p>
<p><code>! удаление по числовому индексу
</code></p>
<p><code>killvar '$mass',2
</code></p>
<p><code>*pl $mass[2] & ! выведет на экран строку 'строка 3'
</code></p>
<p>
<p><code>В плеерах версии 5.8.0 и выше </code></p>
<code><p><code>KILLVAR</code></p>
</code><p><code> умеет удалять элементы массивов не только по числовому, но и по текстовому индексу:
</code></p>
</p>
<p><code>! работает только в 5.8.0 и выше
</code></p>
<p><code>$mass[0]='строка 0'
</code></p>
<p><code>$mass[1]='строка 1'
</code></p>
<p><code>$mass[2]='строка 2'
</code></p>
<p><code>$mass["text index"]='строка 3'
</code></p>
<p><code>$mass[4]='строка 4'
</code></p>
<p><code>
</code></p>
<p><code>! удаление по числовому индексу
</code></p>
<p><code>killvar '$mass','text index'
</code></p>
<p><code>*pl $mass[3] & ! выведет на экран строку 'строка 4'
</code></p>
<title>Операторы ADDQST и KILLQST переименованы</title><p>
<p><code>В плеерах версии 5.7.0 (за исключением Quest Navigator) используются операторы </code></p>
<code><p><code>ADDQST</code></p>
</code><p><code> и </code></p>
<code><p><code>KILLQST</code></p>
</code><p><code>. В плеерах более новых версий (5.8.0 и выше) данные операторы заменены на </code></p>
<code><p><code>INCLIB</code></p>
</code><p><code> и </code></p>
<code><p><code>FREELIB</code></p>
</code><p><code> соответственно.
</code></p>
</p>
<p>
<code><p><code>INCLIB</code></p>
</code><p><code> добавляет локации из подключаемого модуля QSP к основной игре.
</code></p>
</p>
<p>
<code><p><code>FREELIB</code></p>
</code><p><code> удаляет все локации ранее подключённых модулей QSP из основной игры.
</code></p>
</p>
<p><code>inclib 'module.qsp'
</code></p>
<p><code>inclib 'drive.qsp'
</code></p>
<p><code>inclib 'base.qsp'
</code></p>
<p><code>freelib
</code></p>
<title>Изменение в работе оператора SET</title><p>
<p><code>Для явного объявления переменных в QSP используется оператор </code></p>
<code><p><code>SET</code></p>
</code><p><code>. В плеерах версии 5.7.0 и ниже с помощью этого оператора вы могли объявить лишь одну переменную:
</code></p>
</p>
<p><code>! работает в плеерах любых версий
</code></p>
<p><code>set mass=45
</code></p>
<p>
<p><code>Если требовалось объявить несколько переменных, приходилось писать несколько команд </code></p>
<code><p><code>SET</code></p>
</code><p><code>:
</code></p>
</p>
<p><code>! работает в плеерах любых версий
</code></p>
<p><code>set mass=45 & set daz=65 & set zaz=79
</code></p>
<p><code>! эквивалентно:
</code></p>
<p><code>mass=45 & daz=65 & zaz=79
</code></p>
<p>
В плеерах версии 5.8.0. и выше вы можете объявить несколько переменных одной командой:
</p>
<p><code>! работает в 5.8.0 и выше:
</code></p>
<p><code>set mass, daz, zaz = 45, 65, 79
</code></p>
<p>
<p><code>Обратите внимание на форму записи. Здесь лишь один знак </code></p>
<code><p><code>=</code></p>
</code><p><code>. Переменные и их значения перечислены через запятую соответственно слева и справа от знака </code></p>
<code><p><code>=</code></p>
</code><p><code>.
</code></p>
</p>
<p>
<p><code>Более того. С помощью оператора </code></p>
<code><p><code>SET</code></p>
</code><p><code> вы можете не только назначать переменным определённые значения, но и присваивать значения других переменных:
</code></p>
</p>
<p><code>! работает в 5.8.0 и выше:
</code></p>
<p><code>set a, b, c = x, y, z
</code></p>
<p>
В том числе и менять значения переменных местами не прибегая к помощи третьей переменной:
</p>
<p><code>! работает в 5.8.0 и выше:
</code></p>
<p><code>set j,y=y,j
</code></p>
<p>
<p><code>Само собой, как и в плеерах версии 5.7.0, оператор </code></p>
<code><p><code>SET</code></p>
</code><p><code> указывать не обязательно:
</code></p>
</p>
<p><code>! работает в 5.8.0 и выше:
</code></p>
<p><code>mass, daz, zaz = 45, 65, 79
</code></p>
<p><code>a, b, c = x, y, z
</code></p>
<p><code>j,y=y,j
</code></p>
<title>Новый оператор LOCAL</title><p>
<p><code>В плеерах версии 5.8.0 и выше, а так же в Quest Navigator появился новый оператор, который позволяет объявить указанные переменные локальными для отдельного блока кода (локации, действия, код в </code></p>
<code><p><code>DYNAMIC</code></p>
</code><p><code>/</code></p>
<code><p><code>DYNEVAL</code></p>
</code><p><code>). После того, как блок кода выполнен, значения переменных восстанавливаются к предыдущим:
</code></p>
</p>
<p><code># start
</code></p>
<p><code>i=99
</code></p>
<p><code>*pl i
</code></p>
<p><code>gosub 'foo'
</code></p>
<p><code>*pl i
</code></p>
<p><code>--start
</code></p>
<p><code>
</code></p>
<p><code># foo
</code></p>
<p><code>local i
</code></p>
<p><code>i=45
</code></p>
<p><code>*pl i
</code></p>
<p><code>--foo
</code></p>
<p>
Можно объявить локальную переменную и сразу присвоить ей значение:
</p>
<p><code>local i=45
</code></p>
<p>
Можно объявить сразу несколько локальных переменных:
</p>
<p><code>! объявляем локальные переменные 
</code></p>
<p><code>local i, j, k
</code></p>
<p><code>! объявляем локальные переменные и присваиваем им значения
</code></p>
<p><code>local f, d, $g = 123, 45, 'string'
</code></p>
<p>
<p><code>Обратите внимание на последнюю форму записи. Сначала мы перечисляем объявляемые переменные через запятую, затем ставим один знак </code></p>
<code><p><code>=</code></p>
</code><p><code>, а после него перечисляем через запятую значения, которые хотим присвоить переменным. Неправильно делать такую запись:
</code></p>
</p>
<p><code>! Данная строчка кода вызовет ошибку "Несоответствие типов данных":
</code></p>
<p><code>local f=123, d=45, $g='string'
</code></p>
<title>Изменения в работе функций INSTR, ARRCOMP, ARRPOS</title><p>
<p><code>Необязательные аргументы функций </code></p>
<code><p><code>INSTR</code></p>
</code><p><code>, </code></p>
<code><p><code>ARRCOMP</code></p>
</code><p><code> и </code></p>
<code><p><code>ARRPOS</code></p>
</code><p><code> в плеерах 5.8.0 и выше, а так же в Quest Navigator переставлены в конец. В плеерах версии 5.7.0. и ниже эти аргументы шли в начале.
</code></p>
</p>
<p>
Примеры для версий плеера 5.7.0 и ниже:
</p>
<p><code>! поиск подстроки в строке, начиная с 7го символа
</code></p>
<p><code>instr(7,"В корзине 23 красных и 47 синих яблок.", "красн")
</code></p>
<p><code>! поиск среди элементов массива элемента, который содержит число 23, начиная с 13 элемента
</code></p>
<p><code>arrpos(13,'mass',23)
</code></p>
<p><code>! поиск среди элементов массива элемента, который соответствует регулярному выражению, начиная с пятого элемента
</code></p>
<p><code>arrcomp(5,'$objectbox','\S{2}\s\S{6}')
</code></p>
<p>
Те же самые примеры для плееров версии 5.8.0 и выше и Quest Navigator`а:
</p>
<p><code>! поиск подстроки в строке, начиная с 7го символа
</code></p>
<p><code>instr("В корзине 23 красных и 47 синих яблок.", "красн",7)
</code></p>
<p><code>! поиск среди элементов массива элемента, который содержит число 23, начиная с 13 элемента
</code></p>
<p><code>arrpos('mass',23,13)
</code></p>
<p><code>! поиск среди элементов массива элемента, который соответствует регулярному выражению, начиная с пятого элемента
</code></p>
<p><code>arrcomp('$objectbox','\S{2}\s\S{6}',5)
</code></p>
<title>Новый оператор цикла LOOP</title><p>
<p><code>В плеерах версий 5.7.0 и старше, для организации циклов приходилось использовать метки. Начиная с версии 5.8.0. у нас появляется отдельный оператор циклов </code></p>
<code><p><code>LOOP</code></p>
</code><p><code>. Вот как он записывается в общем виде:
</code></p>
</p>
<p><code>! многострочная форма:
</code></p>
<p><code>LOOP [команды 1] WHILE [условие] STEP [команды 2]:
</code></p>
<p><code>    [команды 3]
</code></p>
<p><code>END
</code></p>
<p><code>! однострочная форма:
</code></p>
<p><code>LOOP [команды 1] WHILE [условие] STEP [команды 2]: [команды 3]
</code></p>
<p>
Здесь, как вы видите, есть целых три ключевых слова:
</p>
<p>*. <code><p><code>LOOP</code></p>
</code><p><code> — это ключевое слово объявляет, что начинается цикл, оно обязательно. После </code></p>
<code><p><code>LOOP</code></p>
</code><p><code> могут идти некоторые однострочные операторы. Например, здесь мы можем объявить локальные переменные, которые будут считаться локальными только для данного цикла.</code></p>
</p>
<p>*. <code><p><code>WHILE</code></p>
</code><p><code> — после этого ключевого слова должно стоять условие, и пока выполняется это условие, цикл тоже будет выполняться.</code></p>
</p>
<p>*. <code><p><code>STEP</code></p>
</code><p><code> — это ключевое слово не является обязательным, однако оно удобно, чтобы перечислить однострочные операторы, не относящиеся напрямую к телу цикла. Например, здесь можно указать изменение счётчика.</code></p>
</p>
<p>
<p><code>Непосредственно тело цикла, то есть его основные команды пишутся после двоеточия. Для однострочной формы — в той же строке, что и </code></p>
<code><p><code>loop</code></p>
</code><p><code>, а для многострочной формы — в последующих строках сразу после двоеточия. Многострочную форму необходимо завершать ключевым словом </code></p>
<code><p><code>END</code></p>
</code><p><code>.
</code></p>
</p>
<p>
Несколько примеров:
</p>
<p><code>! выведет на экран таблицу умножения на 12
</code></p>
<p><code>loop local i=1 while i<11 step i+=1:
</code></p>
<p><code>    *pl "12 * <<i>> = <<12*i>>"
</code></p>
<p><code>end
</code></p>
<p><code>! поиск всех позиций элементов массива, содержащих число 3
</code></p>
<p><code>loop local i,pos,true=0,-1,1 while true:
</code></p>
<p><code>    pos=arrpos('mass',3,pos+1)
</code></p>
<p><code>    if (pos<>-1 and i<>pos) or pos=0:
</code></p>
<p><code>        i=pos
</code></p>
<p><code>        *pl "mass[<<pos>>] = 3"
</code></p>
<p><code>    else
</code></p>
<p><code>        true=0
</code></p>
<p><code>    end
</code></p>
<p><code>end
</code></p>
<p><code>! нарезаем неповторяющиеся символы из строки
</code></p>
<p><code>$string='long long long string'
</code></p>
<p><code>loop while len($string)>0:
</code></p>
<p><code>    $a=$mid($string,1,1)
</code></p>
<p><code>    if arrpos('$letters',$a)=-1:
</code></p>
<p><code>        $letters[]=$a
</code></p>
<p><code>    end
</code></p>
<p><code>    if len($string)>1:
</code></p>
<p><code>        $string=$mid($string,2)
</code></p>
<p><code>    else
</code></p>
<p><code>        $string=''
</code></p>
<p><code>    end
</code></p>
<p><code>end
</code></p>
<p><code>*pl
</code></p>
<p><code>! выводим на экран
</code></p>
<p><code>loop local i,s=0,arrsize('$letters') while i<s step i+=1:
</code></p>
<p><code>    *p $letters[i]+", "
</code></p>
<p><code>end
</code></p>
<title>Изменения в чтении длинных строк, разбитых на несколько</title><p>
<p><code>Для того, чтобы разбивать длинные строки на несколько (для удобства чтения) в QSP используется сочетание символов </code></p>
<code><p><code>" _"</code></p>
</code><p><code> (пробел и символ нижнего подчёркивания). В плеерах версии 5.7.0 и ниже (кроме Quest Navigator 0.0.28) при разборе данной конструкции движок оставлял строки, как есть. Для примера возьмём такую конструкцию:
</code></p>
</p>
<p><code>if t _
</code></p>
<p><code>or _
</code></p>
<p><code>t:
</code></p>
<p>
<p><code>В плеерах версии 5.7.0 символы преформатирования будут исключены, при интерпретации, а строка, разбитая с помощью </code></p>
<code><p><code>" _"</code></p>
</code><p><code> будет объединена, как есть, то есть будет равнозначна строке:
</code></p>
</p>
<p><code>if tort:
</code></p>
<p>
<p><code>В плеерах же версии 5.8.0 и выше данная строка будет объединена с добавлением пробела вместо каждого сочетания </code></p>
<code><p><code>" _"</code></p>
</code><p><code>, то есть будет равнозначна строке:
</code></p>
</p>
<p><code>if t or t:
</code></p>
<p>
Данное отличие в прочтении строк используется, как костыль, чтобы отличить классический плеер версии 5.7.0 от Quest Navigator версии 0.0.28:
</p>
<p><code>t=1
</code></p>
<p><code>tort=0
</code></p>
<p><code>if t _
</code></p>
<p><code>    or _
</code></p>
<p><code>    t:
</code></p>
<p><code>    "Игра запущена на Quest Navigator"
</code></p>
<p><code>else
</code></p>
<p><code>    "Игра запущена на Классике"
</code></p>
<p><code>end
</code></p>
<title>Изменения в работе функции RAND</title><p>
<p><code>В плеерах версии 5.7.0 и ниже второй параметр функции </code></p>
<code><p><code>RAND</code></p>
</code><p><code> по умолчанию был </code></p>
<code><p><code>0</code></p>
</code><p><code>. Например, если вы указывали число </code></p>
<code><p><code>100</code></p>
</code><p><code> в качестве аргумента функции </code></p>
<code><p><code>RAND</code></p>
</code><p><code>, то эта функция возвращала случайное число от </code></p>
<code><p><code>0</code></p>
</code><p><code> до </code></p>
<code><p><code>100</code></p>
</code><p><code>. В плеерах версии 5.8.0 и выше, а так же в Quest Navigator, второй параметр по умолчанию равен </code></p>
<code><p><code>1</code></p>
</code><p><code>. То есть если вы укажете лишь одно число, например </code></p>
<code><p><code>100</code></p>
</code><p><code>, функция </code></p>
<code><p><code>RAND</code></p>
</code><p><code> вернёт случайное значение от </code></p>
<code><p><code>1</code></p>
</code><p><code> до </code></p>
<code><p><code>100</code></p>
</code><p><code>.
</code></p>
</p>
<p><code>RAND(100) & ! в 5.7.0 вернёт значение от 0 до 100
</code></p>
<p><code>RAND(100) & ! в 5.8.0 вернёт значение от 1 до 100
</code></p>
<p><code>
</code></p>
<p><code>RAND(10) & ! в 5.7.0 вернёт значение от 0 до 10
</code></p>
<p><code>RAND(10) & ! в 5.8.0 вернёт значение от 1 до 10
</code></p>
<p><code>
</code></p>
<p><code>RAND(5) & ! в 5.7.0 вернёт значение от 0 до 5
</code></p>
<p><code>RAND(5) & ! в 5.8.0 вернёт значение от 1 до 5
</code></p>
<p><code>
</code></p>
<p><code>RAND(0) & ! в 5.7.0 вернёт значение 0
</code></p>
<p><code>RAND(0) & ! в 5.8.0 вернёт значение от 1 до 0
</code></p>
<p><code>
</code></p>
<p><code>RAND(1) & ! в 5.7.0 вернёт значение от 0 до 1
</code></p>
<p><code>RAND(1) & ! в 5.8.0 вернёт значение 1
</code></p>
<title>Повышение приоритета функций LOC и OBJ</title><p>
<p><code>В плеерах версии 5.7.0 (и ниже) у функций </code></p>
<code><p><code>LOC</code></p>
</code><p><code> и </code></p>
<code><p><code>OBJ</code></p>
</code><p><code> приоритет был ниже, чем у операций сравнения. Это могло быть неочевидным для выражений такого рода:
</code></p>
</p>
<p><code>(obj 'Отвёртка'=obj 'Верёвка')
</code></p>
<p>
<p><code>Кажется, что данное выражение должно выполняться так: проверяется наличие предмета "Отвёртка", проверяется наличие предмета "Верёвка", и лишь потом значения сравниваются. Однако в 5.7.0 у операции сравнения приоритет выше, чем у </code></p>
<code><p><code>OBJ</code></p>
</code><p><code>. Поэтому сначала выполняется операция сранения, и лишь потом функция </code></p>
<code><p><code>OBJ</code></p>
</code><p><code>. Таким образом в плеерах версии 5.7.0 данное выражение всегда возвращает </code></p>
<code><p><code>0</code></p>
</code><p><code>.
</code></p>
</p>
<p>
<p><code>В плеерах версии 5.8.0 (и выше) приоритет у функций </code></p>
<code><p><code>OBJ</code></p>
</code><p><code> и </code></p>
<code><p><code>LOC</code></p>
</code><p><code> выше, чем у операций сравнения, поэтому данное выражение будет вычисляться именно так, как мы предположили: сначала проверяется наличие обоих предметов и лишь потом сравниваются полученные значения. В плеерах 5.8.0 (и выше) данное выражение будет возвращать </code></p>
<code><p><code>1</code></p>
</code><p><code>, если оба предмета или отсутствуют, или присутствуют, и </code></p>
<code><p><code>0</code></p>
</code><p><code>, если одни предмет присутствует, а другой отсутствует.
</code></p>
</p>
<title>Больше аргументов для функций</title><p>
<p><code>В плеерах версии 5.7.0 (и ниже) максимальное число аргументов, которое вы могли передавать операторам и функциям, было </code></p>
<code><p><code>10</code></p>
</code><p><code>. Таким образом, например функции </code></p>
<code><p><code>MAX</code></p>
</code><p><code> и </code></p>
<code><p><code>MIN</code></p>
</code><p><code> могли производить поиск значений лишь среди десяти значений. В плеерах версии 5.8.0 и выше максимальное число аргументов, передаваемых функциям и операторам, — </code></p>
<code><p><code>20</code></p>
</code><p><code>.
</code></p>
</p>
<p><code>! работает в плеерах любых версий
</code></p>
<p><code>max('a','b','c','d','e','f','g','h','i','j')
</code></p>
<p><code>! работает лишь в плеерах версии 5.8.0 и выше
</code></p>
<p><code>max('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t')
</code></p>
</section><title>Старые новости, о которых вы могли не знать</title><section id="peredacha-argumentov-v-onnewloc"><p>
Здесь мы осветим пару изменений, которые появились в плеере версии 5.7.0 (или раньше), но которые прошли не очень заметно.
</p>
<title>Игнорирование отрицательных индексов</title><p>
В плеерах версий ниже 5.6.5 отрицательные индексы приводились к нулю, а в плеерах более новых версий, они просто напросто игнорируются:
</p>
<p><code>! версии ниже 5.6.5
</code></p>
<p><code>mass[0]=123
</code></p>
<p><code>*pl mass[-1]    & ! на экране увидим 123
</code></p>
<p><code>mass[-1]=456
</code></p>
<p><code>*pl mass[0]        & ! на экране увидим 456
</code></p>
<p><code>! версии 5.6.5 и выше
</code></p>
<p><code>mass[0]=123
</code></p>
<p><code>*pl mass[-1]    & ! на экране увидим 0
</code></p>
<p><code>mass[-1]=456
</code></p>
<p><code>*pl mass[0]        & ! на экране увидим 123
</code></p>
<title>Добавление предмета в определённую позицию</title><p>
Начиная с версии 5.6.5 вы можете добавлять предмет в указанную позицию в окне предметов. При этом, если на текущей позиции уже находится предмет, он сдвигается вниз (вправо) по списку, и все стоящие за ним предметы так же сдвигаются на одну позицию вниз (вправо).
</p>
<p><code>! версии 5.6.5 и выше
</code></p>
<p><code>addobj 'Отвёртка','путь к файлу картинки/картинка.png',4
</code></p>
<p>
<p><code>Индексация предметов в списке начинается с единицы. Можно указать индекс численно больший на один, чем число предметов, тогда предмет добавится в конец списка. Однако, если указать индекс числом больше числа предметов плюс один, или индекс меньше единицы, команда </code></p>
<code><p><code>addobj</code></p>
</code><p><code> будет проигнорирована:
</code></p>
</p>
<p><code>! версии 5.6.5 и выше
</code></p>
<p><code>addobj 'Первый предмет'
</code></p>
<p><code>addobj 'Второй предмет'
</code></p>
<p><code>addobj 'Третий предмет'
</code></p>
<p><code>addobj 'Четвёртый предмет'
</code></p>
<p><code>addobj 'Пятый предмет','',5 & ! предмет будет добавлен в конец списка
</code></p>
<p><code>addobj 'Седьмой предмет','',7 & ! предмет не будет добавлен
</code></p>
<p><code>addobj 'Нулевой предмет','',0 & ! предмет не будет добавлен
</code></p>
<title>Копирование части массива в COPYARR</title><p>
<p><code>Начиная с версии 5.7.0 вы можете копировать часть массива в другой массив, используя не обязательные параметры: начальный индекс и количество. В следующем примере в массив </code></p>
<code><p><code>'mass</code></p>
</code><p><code>' будут скопированы шесть элементов массива </code></p>
<code><p><code>'array</code></p>
</code><p><code>', начиная с третьего:
</code></p>
</p>
<p><code>! версии 5.7.0 и выше
</code></p>
<p><code>copyarr 'mass','array',3,6
</code></p>
<title>Передача аргументов в ONNEWLOC</title><p>
<p><code>Начиная с версии 5.7.0 аргументы, которые передаются на локацию при переходе на эту локацию с помощью операторов </code></p>
<code><p><code>GOTO</code></p>
</code><p><code> или </code></p>
<code><p><code>XGOTO</code></p>
</code><p><code>, передаются так же и на локацию-обработчик перехода на новую локацию (прописанную в переменной </code></p>
<code><p><code>$ONNEWLOC</code></p>
</code><p><code>). При этом, даже если значения в массиве </code></p>
<code><p><code>args</code></p>
</code><p><code> будут изменены на локации, на которую был осуществлён переход, на локацию, прописанную в переменной </code></p>
<code><p><code>$ONNEWLOC</code></p>
</code><p><code>, будут переданы исходные значения, переданные с </code></p>
<code><p><code>GOTO</code></p>
</code><p><code>/</code></p>
<code><p><code>XGOTO</code></p>
</code><p><code>.
</code></p>
</p>
<p><code># start
</code></p>
<p><code>$onnewloc='onNewLoc'
</code></p>
<p><code>goto 'next','old text',345
</code></p>
<p><code>--start
</code></p>
<p><code>
</code></p>
<p><code># next
</code></p>
<p><code>''
</code></p>
<p><code>'next:'
</code></p>
<p><code>! значения, переданные с GOTO
</code></p>
<p><code>*pl $args[0]
</code></p>
<p><code>*pl args[1]
</code></p>
<p><code>! меняем значения на текущей локации
</code></p>
<p><code>args[1]=678
</code></p>
<p><code>$args[0]='new text'
</code></p>
<p><code>! изменённые значения
</code></p>
<p><code>*pl $args[0]
</code></p>
<p><code>*pl args[1]
</code></p>
<p><code>--next
</code></p>
<p><code>
</code></p>
<p><code># onNewLoc
</code></p>
<p><code>''
</code></p>
<p><code>'onNewLoc:'
</code></p>
<p><code>! значения, переданные с GOTO
</code></p>
<p><code>*pl $args[0]
</code></p>
<p><code>*pl args[1]
</code></p>
<p><code>--onNewLoc
</code></p>
</section><title>Что ещё?</title><section id="post_scriptum_articles_0003"><p>
<p><code>Плеер продолжает развиваться и совершенствоваться, а значит мы можем ждать ещё много изменений в работе, которые непременно будут отражены в новых статьях, а так же в онлайн-справке </code></p>
<a l:href="https://wiki.qsp.org/"><p><code>wiki.qsp.org</code></p>
</a><p><code>.
</code></p>
</p>
<title>P.S.:</title><p>
Данную статью вы можете найти так же и на других ресурсах:
</p>
<p>*. <a l:href="http://aleksversus.narod.ru/index/novovvedenija_v_qsp_5_8_0/0-71"><p><code>мой_сайт/Что нового в QSP 5.8.0?</code></p>
</a></p>
<p>*. <a l:href="https://aleksversus.medium.com/нововведения-в-qsp-5-8-0-633e6eeb187e"><p><code>medium/Что нового в QSP 5.8.0?</code></p>
</a></p>
<p>*. <a l:href="https://vk.com/@qsplayer-novovvedeniya-v-qsp-580"><p><code>vk.com/Что нового в QSP 5.8.0?</code></p>
</a></p>
<p>*. <a l:href="https://ifhub.club/2021/06/11/novovvedeniya-v-qsp-580.html"><p><code>ifhub.club/Что нового в QSP 5.8.0?</code></p>
</a></p>
</section></section><section id="qspider_0120"><title>qSpider версии 0.12.0</title><section id="zakliuchenie"><section id="otlichiia-qspider-ot-klassicheskogo-pleera"><p>
qSpider — это QSP-плеер с поддержкой полноценной браузерной HTML-вёрстки, то есть в нём можно использовать такой же HTML-код, как в обычном браузере. Более того существует два варианта плеера: браузерный вариант (запускается непосредственно в браузере, и потому данный вариант можно использовать, например, для публикации игр на QSP в интернете) и десктопный вариант (для стационарных компьютеров, запускается без браузера). Изначально qSpider разрабатывался для поддержки AeroQSP игр (так как технология flash прекратила своё существование), однако позже плеер был переориентирован в основном на поддержку классических игр. Тем не менее возможность запуска игр AeroQSP сохранилась, хотя для их полноценной работы может понадобиться небольшая правка.
</p>
<p>
Релиз последней версии плеера qSpider вы всегда можете найти по этой ссылке:
</p>
<p>
<a l:href="https://github.com/qspfoundation/qspider/releases"><p><code>https://github.com/qspfoundation/qspider/releases</code></p>
</a><p><code>
</code></p>
</p>
<p>
qSpider использует последнюю версию библиотеки qsplib, а значит игры, написанные на классический плеер с той же версией библиотеки, полностью совместимы с qSpider.
</p>
<p>
<p><code>Версия qSpider 0.12.0 использует qsplib версии 5.8.0. О существенных изменениях, произошедших в новой версии библиотеки можно почитать в статье </code></p>
<a l:href="#whats_news"><p><code>"Что нового в QSP 5.8.0"</code></p>
</a><p><code>.
</code></p>
</p>
<p>
<p><code>Демонстрацию работы плеера можно посмотреть здесь: </code></p>
<a l:href="https://qspfoundation.github.io/qspider/"><p><code>https://qspfoundation.github.io/qspider/</code></p>
</a><p><code>. Одна из представленных игр была написана для AeroQSP.
</code></p>
</p>
<title>Отличия qSpider от Классического плеера:</title><p>*. Полноценная поддержка HTML, как в браузере, в том числе встраивание видео(!);</p>
<p>*. Пути к ресурсам (картинкам/аудио файлам) регистрозависимы — то есть, если файл называется 'image.jpg', а в файле игры записано 'Image.jpg' или 'image.JPG', то плеер не сможет показать такую картинку;</p>
<p>*. Для проигрывания аудио используются встроенные средства браузера, поэтому рекомендованный формат для плеера — mp3 как самый поддерживаемый (хорошая альтернатива — webm, у него меньше размер при том же качестве, но чуть хуже с поддержкой браузеров);</p>
<p>*. Есть возможность пропуска wait (кликом по странице);</p>
<p>*. Сохранения хранятся в браузере;</p>
<p>*. Можно открывать игры, упакованные в zip-архив или в aqsp-архив.</p>
<p>
Обратите внимание: для загрузки архива qsp-файл игры должен находится в корне архива (не в подпапке) и должен быть только один qsp-файл в корне (если используются дополнительные qsp-файлы, то они должны быть расположены в подпапках).
</p>
<p>
Как уже было отмечено выше, qSpider существует в двух вариантах: десктопный и браузерный (web-версия).
</p>
</section><title>Десктопная версия</title><section id="podkliuchenie-pleera-k-qgen"><p></p>
<title>Основные отличия desktop-версии от web-версии:</title><p>*. возможность открыть qsp-файл из папки (в отличии от web-версии, где можно открыть только архив);</p>
<p>*. открытие игры через drag-n-drop — перетаскивание файла игры на окно плеера;</p>
<p>*. открытие игры через консоль (с помощью параметра --file);</p>
<p>*. загрузка файла конфига из папки с игрой;</p>
<p>*. дополнительная секция в файле конфига для настройки окна desktop-плеера;</p>
<p>*. автоматическое обновление desktop-плеера при выходе новой версии.</p>
<title>Установка и запуск</title><p>
Установка десктопного варианта будет несколько отличаться для разных операционных систем, но проблем у вас не возникнет, если вы хоть раз устанавливали программы на свой компьютер. Чтобы скачать требуемую версию, воспользуйтесь соответствующей ссылкой:
</p>
<p>*. <a l:href="https://github.com/QSPFoundation/qspider/releases/download/v0.12.0/qSpider_0.12.0_x64.msi"><p><code>Windows x64</code></p>
</a></p>
<p>*. <a l:href="https://github.com/QSPFoundation/qspider/releases/download/v0.12.0/qSpider_0.12.0_x64.dmg"><p><code>MacOs</code></p>
</a></p>
<p>*. <p><code>Linux: </code></p>
<a l:href="https://github.com/QSPFoundation/qspider/releases/download/v0.12.0/q-spider_0.12.0_amd64.deb"><p><code>deb-пакет</code></p>
</a><p><code>, </code></p>
<a l:href="https://github.com/QSPFoundation/qspider/releases/download/v0.12.0/q-spider_0.12.0_amd64.AppImage"><p><code>AppImage-пакет</code></p>
</a></p>
<p>
Если в процессе установки на "Windows 7" программа выдаст ошибку похожую на эту:
</p>
image: https://i.ibb.co/8z8MHyp/image.png<p>
<p><code>— попробуйте установить webview2 вручную (скачать можно </code></p>
<a l:href="https://developer.microsoft.com/en-us/microsoft-edge/webview2/"><p><code>с этой страницы</code></p>
</a><p><code>), а затем вновь запустите установку плеера.
</code></p>
</p>
<p>
После установки запуск плеера ничем не отличается от запуска любой другой программы.
</p>
<title>Подключение плеера к QGen</title><p>
Десктопную версию можно подключить к Quest Generator, однако из-за бага в используемой библиотеке сделать плеер напрямую совместимым с QGen не получилось. Пока что для запуска можно использовать простенький bat-файл:
</p>
<p><code>SET QSPIDER=C:\Program Files\qSpider\qSpider.exe
</code></p>
<p><code>SET DESTPATH=%~f1
</code></p>
<p><code>start "" "%QSPIDER%" "--file=%DESTPATH%"
</code></p>
<p>
Чтобы создать bat-файл откройте блокнот, скопируйте в него данный код и сохраните получившийся файл с расширением ".bat".
</p>
<p>
Если у вас путь к qSpider отличается от стандартного, нужно поменять значение переменной QSPIDER в указанном коде. Далее нужно прописать путь к bat-файлу в QGen: в меню "Утилиты - Настройки" выбираете вкладку "Пути" и в поле "Путь к плееру" указываете путь до bat-файла.
</p>
</section><title>Браузерная версия, или web-версия</title><section id="addndelgames"><p>
Данная версия плеера может быть использована вами для размещения игр онлайн, то есть в интернете, однако так же её можно запускать и на компьютере. 
</p>
<title>Установка и запуск плеера на компьютере</title><p>
<p><code>Прежде всего вам необходимо скачать архив с web-версией плеера на компьютер: </code></p>
<a l:href="https://github.com/QSPFoundation/qspider/releases/download/v0.12.0/qspider-player.zip"><p><code>ссылка на скачивание</code></p>
</a><p><code>. Содержимое архива распакуйте в любую папку, эта папка и будет местом расположения плеера.
</code></p>
</p>
<p>
Из-за ограничений безопасности плеер нельзя запустить просто открыв файл "index.html" в браузере.
</p>
<p>
<p><code>Поэтому для запуска необходим локально запущенный сервер — можно использовать один из </code></p>
<a l:href="https://gist.github.com/willurd/5720255"><p><code>списка</code></p>
</a><p><code> или же расширение хрома </code></p>
<a l:href="https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb"><p><code>"Web Server for Chrome"</code></p>
</a><p><code>.
</code></p>
</p>
<p>
Дальнейшие инструкции ориентированы на использование расширения:
</p>
<p>*. <p><code>устанавливаем </code></p>
<a l:href="https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb"><p><code>"Web Server for Chrome"</code></p>
</a></p>
<p>*. в адресной строке в хроме пишем "chrome://apps/" и выбираем в списке "Web Server";</p>
<p>*. в открывшемся попапе выбираем папку, в которую распаковали плеер и запускаем сервер;</p>
<p>*. там же в попапе будет ссылка на запуск сервера в окне браузера.</p>
<title>Установка плеера на github</title><p>1. <p><code>Ознакомьтесь с порядком установки плеера на компьютер. Лучше выделить отдельную папку и распаковать браузерную версию плеера туда. Затем открыть подпапку "game" и удалить из неё ненужные файлы игр, и добавить свои, которые хотите разместить на гитхабе (см. раздел </code></p>
<a l:href="#addndelgames"><p><code>"добавление и удаление игр из списка"</code></p>
</a><p><code>.</code></p>
</p>
<p>2. <p><code>Отредактируйте файл "game.cfg" так, чтобы в нём присутствовали все секции на каждую из размещаемых игр (см. раздел </code></p>
<a l:href="#cfgfile"><p><code>"Конфигурационный файл"</code></p>
</a><p><code>).</code></p>
</p>
<p>3. Откройте github в браузере, зайдите в свой профиль и создайте новый публичный репозиторий с именем "username.github.io" (внимание! Это важно! Впоследствии репозиторий нужно будет переименовать, но пока что он должен называться так), где "username" — это ваш логин (ник) на github.</p>
<p>4. В разделе "Code" репозитория нажмите кнопку "Add file" и выберите пункт "Upload files", откроется страница загрузки файлов на github. </p>
<p>5. Перетащите все распакованные файлы браузерной версии плеера в соответствующее поле на странице (в т.ч. папки "assets" и "game").</p>
<p>6. Теперь по адресу "https://username.github.io" станет доступна страничка с вашими играми, однако таким образом в одном аккаунте сможет существовать лишь одна подобная страница. Нужно переименовать созданный репозиторий, чтобы в дальнейшем вы смогли добавлять в аккаунт и другие репозитории с подобными страницами. Зайдите в созданный репозиторий на github, найдите раздел "settings", подраздел "general". В поле "Repository name" введите новое имя репозитория, например "mygame", нажмите кнопку "rename", и таким образом страница с игрой станет доступна по адресу "https://username.github.io/mygame" (соответственно вместо "username" будет ваш ник на гитхабе, а вместо "mygame" — название репозитория, которое вы только что ввели).</p>
<title>Добавление и удаление игр из списка</title><p>
По умолчанию вместе с плеером упакованы демонстрационные игры. Вы можете заменить их, или просто добавить свою игру к списку.
</p>
<p>
Демонстрационные игры лежат в подпапке "game", там же лежит конфигурационный файл "game.cfg"
</p>
<p>
Для добавления своей игры в список, нужно разместить игру в папке "game" одним из следующих способов:
</p>
<p>*. скопировать zip-архив с упакованной в него игрой в папку "game"</p>
<p>*. скопировать папку с игрой в папку "game"</p>
<p>*. если ваша игра имеет формат игры для AeroQSP, скопировать файл ".aqsp" вашей игры в папку "game"</p>
<p>
<p><code>Чтобы игра отобразилась в списке, необходимо отредактировать файл "game.cfg". Конфигурация каждой игры в файле начинается с заголовка секции </code></p>
<code><p><code>[[game]]</code></p>
</code><p><code>, далее перечисляется несколько параметров:
</code></p>
</p>
<p>*. id — уникальный идентификатор игры (используется для сохранений);</p>
<p>*. title — название игры (будет показано в заголовке плеера);</p>
<p>*. description — необязательное краткое описание игры, аннотация;</p>
<p>*. file — путь к файлу с игрой относительно файла "game.cfg", или внешняя ссылка (например file = "qspfoundation.github.io/qspider/game/skazka/skazka.qsp";</p>
<p>*. mode — если ваша игра написана для AeroQSP, данному параметру назначается значение "aero".</p>
<p>
Таким образом вам нужно добавить в файл "game.cfg" новую секцию для вашей игры примерно такого содержания:
</p>
<p><code>[[game]]
</code></p>
<p><code>id="уникальный-идентификатор-может-быть-и-просто-числом"
</code></p>
<p><code>title="Название игры, отображаемое в виде заголовка на странице"
</code></p>
<p><code>description="""Краткое описание игры, которое будет отображаться на странице со списком игр. Аннотация."""
</code></p>
<p><code>file="путь к файлу игры/mygame.qsp"
</code></p>
<p>
Если вы убрали демонстрационные игры из папки "game", не забудьте удалить соответствующие секции из файла "game.cfg".
</p>
<p>
<p><code>См. так же информацию в разделе </code></p>
<a l:href="#cfgfile"><p><code>"Конфигурационный файл"</code></p>
</a><p><code>
</code></p>
</p>
<p>
Обратите внимание! Если вы указываете путь к внешнему файлу игры, нужно помнить о ряде ограничений, накладываемых браузером:
</p>
<p>*. с https страницы нельзя загрузить http ссылку;</p>
<p>*. <p><code>у сервера, где находится игра, должны быть настроены </code></p>
<a l:href="https://developer.mozilla.org/ru/docs/Web/HTTP/CORS"><p><code>CORS заголовки</code></p>
</a><p><code>.</code></p>
</p>
</section><title>Конфигурационный файл</title><section id="primer-fajla-gamecfg-dlia-otdel_noj-igry"><p>
Конфигурационный файл "game.cfg" определяет поведение плеера во время запуска той или иной игры. Данный файл размещается рядом с файлом ".qsp" запускаемой игры. Если игра упакована в архив ".zip" или ".aqsp", конфигурационный файл так же должен быть упакован в тот же самый архив рядом с файлом ".qsp" самого верхнего уровня. Для web-версии плеера можно написать один конфигурационный файл для всех игр и разместить его в папке "game", при этом конфигурационные файлы, которые находятся рядом с файлами игр, будут иметь приоритет над общим.
</p>
<p>
Конфигурационный файл (конфиг, конфиг-файл) состоит из секций, каждая из которых описывает одну игру. Таким образом в конфиге должна быть хотя бы одна секция, описывающая игру. Для десктопной версии плеера в конфиге указывается только одна секция игры.
</p>
<p>
<p><code>Секция, описывающая игру, начинается с заголовка </code></p>
<code><p><code>[[game]]</code></p>
</code><p><code> и заканчивается там, где начинается следующая секция, описывающая игру, либо с концом файла. Заголовок секции пишется отдельной строкой. Структура конфиг-файла для трёх игр в браузерной версии плеера может выглядеть примерно так:
</code></p>
</p>
<p><code>[[game]]
</code></p>
<p><code>id = "7466df3b-4236-4668-b0df-2a70477da67b"
</code></p>
<p><code>title = "Сказочка на ночь"
</code></p>
<p><code>description = """описание первой игры"""
</code></p>
<p><code>file = "skazka/skazka.qsp"
</code></p>
<p><code>
</code></p>
<p><code>[[game]]
</code></p>
<p><code>id = "30c8aebe-1690-4e6d-8b42-47c4be381748"
</code></p>
<p><code>title = "Куртуазная Баллада"
</code></p>
<p><code>description = """описание второй игры"""
</code></p>
<p><code>file = "ballad/ballad.zip"
</code></p>
<p><code>
</code></p>
<p><code>[[game]]
</code></p>
<p><code>id = "c2cb4b5b-6a1c-482e-bb47-9ef207fb0dcd"
</code></p>
<p><code>mode = "aero"
</code></p>
<p><code>title = "Город туманов"
</code></p>
<p><code>description = """описание третьей игры"""
</code></p>
<p><code>file = "cityofmists.aqsp"
</code></p>
<p>
Как видно из приведённого примера, следом за заголовком секции идёт ряд параметров. Сначала записывается название параметра (ключ), затем ставится знак равенства, а после в кавычках указывается значение параметра. Если значение пишется в несколько строк, оно помещается в тройные кавычки.
</p>
<p>
Для описания игры используются следующие параметры, ключи:
</p>
<p>*. <p><code>id — уникальный идентификатор игры (используется для сохранений, поэтому технически можно использовать любой набор символов, однако лучше сгенерировать собственный уникальный айди по образцу из примера, воспользовавшись онлайн-генератором </code></p>
<a l:href="https://www.uuidgenerator.net"><p><code>https://www.uuidgenerator.net</code></p>
</a><p><code>);</code></p>
</p>
<p>*. title — название игры (будет показано в заголовке плеера и на вкладке браузера);</p>
<p>*. description — необязательное краткое описание игры, аннотация;</p>
<p>*. file — путь к файлу с игрой относительно файла "game.cfg", или внешняя ссылка (например file = "qspfoundation.github.io/qspider/game/skazka/skazka.qsp", для браузерной версии;</p>
<p>*. mode — если ваша игра написана для AeroQSP, данному параметру назначается значение "aero".</p>
<p>
Для десктопной версии плеера все параметры, кроме "id", не обязательны. Тем не менее рекомендуется их проставлять для удобства чтения конфигурационного файла. Для игр, написанных для AeroQSP, параметр "mode" обязателен.
</p>
<p>
Далее каждая секция игры может содержать подсекции, расширяющие возможности управления плеером и игрой.
</p>
<title>Назначение горячих клавиш [game.hotkeys]</title><section id="spetsial_nye-klavishi"><p>
<p><code>Для каждой игры можно назначить собственные комбинации горячих клавиш. Для этого в секции игры прописываем подсекцию с заголовком </code></p>
<code><p><code>[game.hotkeys]</code></p>
</code><p><code>. После заголовка перечисляем клавиши или их сочетания в качестве ключей, а в качестве значений прописываем названия локаций, код которых будет выполнен при нажатии на горячие клавиши. Пример:
</code></p>
</p>
<p><code>[game.hotkeys]
</code></p>
<p><code>i = "Инвентарь"
</code></p>
<p><code>"ctrl+shift+m" = "карта"
</code></p>
<p><code>"up up down down left right left right b a" = "konami"
</code></p>
<p>
Для одиночного нажатия клавиш в качестве ключа указывается её обозначение:
</p>
<p><code>i="Инвентарь"
</code></p>
<p>
Для того, чтобы указать одновременное нажатие нескольких клавиш, их обозначения перечисляются через "+" (плюс):
</p>
<p><code>"ctrl+shift+m" = "карта"
</code></p>
<p>
Для того, чтобы задействовать последовательное нажатие клавиш, их обозначения перечисляются через пробел:
</p>
<p><code>"up up down down left right left right b a" = "konami"
</code></p>
<p>
Можно использовать следующие обозначения:
</p>
<title>Клавиши-модификаторы</title><p>*. <code><p><code>shift</code></p>
</code></p>
<p>*. <code><p><code>ctrl</code></p>
</code></p>
<p>*. <code><p><code>alt</code></p>
</code></p>
<p>*. <code><p><code>meta</code></p>
</code><p><code> — для поддержки на macOs лучше использовать этот модификатор вместо ctrl</code></p>
</p>
<title>Специальные клавиши</title><p>*. <code><p><code>backspace</code></p>
</code></p>
<p>*. <code><p><code>tab</code></p>
</code></p>
<p>*. <code><p><code>enter</code></p>
</code></p>
<p>*. <code><p><code>capslock</code></p>
</code></p>
<p>*. <code><p><code>esc</code></p>
</code></p>
<p>*. <code><p><code>space</code></p>
</code></p>
<p>*. <code><p><code>pageup</code></p>
</code></p>
<p>*. <code><p><code>pagedown</code></p>
</code></p>
<p>*. <code><p><code>end</code></p>
</code></p>
<p>*. <code><p><code>home</code></p>
</code></p>
<p>*. <code><p><code>left</code></p>
</code></p>
<p>*. <code><p><code>up</code></p>
</code></p>
<p>*. <code><p><code>right</code></p>
</code></p>
<p>*. <code><p><code>down</code></p>
</code></p>
<p>*. <code><p><code>ins</code></p>
</code></p>
<p>*. <code><p><code>del</code></p>
</code></p>
<p>*. <code><p><code>plus</code></p>
</code></p>
<p>*. <code><p><code>f1</code></p>
</code><p><code> - </code></p>
<code><p><code>f19</code></p>
</code></p>
<p>
<p><code>Остальные клавиши можно определять просто по имени </code></p>
<code><p><code>a</code></p>
</code><p><code>, </code></p>
<code><p><code>$</code></p>
</code><p><code>, </code></p>
<code><p><code>*</code></p>
</code><p><code>, или </code></p>
<code><p><code>=</code></p>
</code><p><code>.
</code></p>
</p>
</section><title>Подключение дополнительных ресурсов [game.resources]</title><p>
<p><code>Есть возможность подключить к каждой отдельной игре дополнительные ресурсы. Например, собственные css-файлы, скрипты, шрифты и т.д. Для этого в секции игры нужно создать подсекцию с заголовком </code></p>
<code><p><code>[game.resources]</code></p>
</code><p><code>. Пример:
</code></p>
</p>
<p><code>[game.resources]
</code></p>
<p><code>styles = [
</code></p>
<p><code>  "https://fonts.googleapis.com/css?family=Sofia",
</code></p>
<p><code>  "styles.css"
</code></p>
<p><code>]
</code></p>
<p><code>scripts = [
</code></p>
<p><code>  "script.js"
</code></p>
<p><code>]
</code></p>
<p><code>fonts = [
</code></p>
<p><code>  ["Shelter", "fonts/shelter.woff2"]
</code></p>
<p><code>]
</code></p>
<p><code>icon = "icon.png"
</code></p>
<p>
Для подключения css-файлов используем ключ "styles", значением которого выступает список ссылок на необходимые нам файлы css. Это могут быть как внешние ссылки, так и пути относительно файла "game.cfg".
</p>
<p>
Список обязательно помещается в квадратные скобки! Его элементы разделяются запятыми. Отступы между элементами и скобками ни на что не влияют. За последним значением списка нельзя ставить запятую. Пример:
</p>
<p><code>styles = ["skins/game.css","lewis.css"]
</code></p>
<p>
К основным элементам интерфейса добавлен атрибут data-qsp (например, data-qsp="main", data-qsp="actions" и т.д.), который позволит вам стилизовать данные элементы, или взаимодействовать с ними через скрипты.
</p>
<p>
<p><code>Для подключения JavaScript используется ключ "scripts". Его значением так же выступает список ссылок на нужные скрипты. Поскольку нет возможности автоматически удалить JS код из памяти (при переключении на другую игру, например) — это надо делать вручную. Подробнее об этом можно почитать в </code></p>
<a l:href="https://ifhub.club/2021/05/23/qspider-0100.html"><p><code>статье Werewolf`а, посвящённой выходу qSpider 0.10.0</code></p>
</a><p><code>.
</code></p>
</p>
<p>
Пример подключения скриптов:
</p>
<p><code>scripts=["skins/js/game.js","skins/js/QspLibBrowserTest.js"]
</code></p>
<p>
Ключ "fonts" предназначен для подключения шрифтов к игре. Его значением является список, элементами которого являются другие списки — каждый такой отвечает за подключение одного шрифта. Пример подключения:
</p>
<p><code>fonts=[
</code></p>
<p><code>    ["GoodVibesPro","skins/fonts/good-vibes-pro.woff2"],
</code></p>
<p><code>    ["AstronBold","skins/fonts/astron-bold.woff2"]
</code></p>
<p><code>]
</code></p>
<p>
Как видите, в данном примере подключаются два шрифта. Здесь "GoodVibesPro" и "AstronBold" — это имена шрифтов, которые вы можете использовать при стилизации текста в вашей игре. Вы можете сами назначать эти имена. Вторым элементом для каждого из шрифтов указывается путь к конкретному файлу шрифта. Рекомендуемый формат — woff2, он поддерживается всеми современными браузерами. В сети полно онлайн конверторов из ttf в woff2.
</p>
<p>
Если у шрифта есть Bold, Italic и BoldItalic варианты в отдельных файлах, то подключение может выглядеть так:
</p>
<p><code>fonts = [
</code></p>
<p><code>  ["Shelter", "fonts/shelter.woff2"],
</code></p>
<p><code>  ["Shelter", "fonts/shelter-bold.woff2", "bold"],
</code></p>
<p><code>  ["Shelter", "fonts/shelter-italic.woff2", "normal", "italic"],
</code></p>
<p><code>  ["Shelter", "fonts/shelter-bold-italic.woff2", "bold", "italic"]
</code></p>
<p><code>]
</code></p>
<p>
Параметр "icon" дает возможность заменить иконку во вкладке браузера, так называемый "favicon". По умолчанию там находится логотип QSP. Пример использования:
</p>
<p><code>icon="skins/gfx/doctor.png"
</code></p>
<title>Поддержка игр AeroQSP [game.aero]</title><p>
Как было сказано выше, для того, чтобы запускать AeroQSP-игру, нужно в секции игры выставить параметр "mode":
</p>
<p><code>mode="aero"
</code></p>
<p>
<p><code>Так же, если используется размер игры, отличающийся от дефолтного 800х600, необходимо добавить секцию </code></p>
<code><p><code>[game.aero]</code></p>
</code><p><code> с размерами:
</code></p>
</p>
<p><code>[game.aero]
</code></p>
<p><code>width = 504
</code></p>
<p><code>height = 680
</code></p>
<p>
<p><code>Смотрите так же раздел </code></p>
<a l:href="#aeroqspider"><p><code>"Особенности работы игр AeroQSP на qSpider"</code></p>
</a><p><code>
</code></p>
</p>
<title>Настройка окна desktop-плеера [game.window]</title><p>
<p><code>Вы можете настраивать окно плеера в десктопной версии. Для этого в основной секции игры нужно объявить подсекцию с заголовком </code></p>
<code><p><code>[game.window]</code></p>
</code><p><code>, и проставить необходимые параметры:
</code></p>
</p>
<p><code>[game.window]
</code></p>
<p><code>width = 1280
</code></p>
<p><code>height = 960
</code></p>
<p><code>resizable = true
</code></p>
<p><code>minWidth = 1024
</code></p>
<p><code>minHeight = 768
</code></p>
<p>*. width и height задают размер окна при старте игры;</p>
<p>*. minWidth и minHeight дают возможность задать минимально возможные размеры, если игрок попытается изменить размеры окна;</p>
<p>*. resizable — позволяет запретить изменения размера в принципе (автоматически включается в aero режиме).</p>
<title>Пример файла "game.cfg" для отдельной игры</title><p><code>[[game]]
</code></p>
<p><code>id = "50458ae2-c07d-ca43-4a81-7bf480eedcf6"
</code></p>
<p><code>title = "Вереница миров, или Выводы из закона Мёрфи"
</code></p>
<p><code>description = """В Лаборатории Мерфи опять неприятности. Похищен опытный образец бета-аннигилятора, и похититель скрылся в Веренице Миров - сложной системе межпространственных порталов. Кому предстоит расхлёбывать это дельце? Ну конечно же вам, майор!"""
</code></p>
<p><code>file = "merphy_law.qn.qsp"
</code></p>
<p><code>
</code></p>
<p><code>[game.hotkeys]
</code></p>
<p><code>b = "back.varriors"
</code></p>
<p><code>"ctrl+shift+m"="карта"
</code></p>
<p><code>"up up down down left right left right" = "konami"
</code></p>
<p><code>
</code></p>
<p><code>[game.resources]
</code></p>
<p><code>styles = ["skins/qspidergame.css"]
</code></p>
<p><code>fonts=[
</code></p>
<p><code>    ["GoodVibesPro","skins/fonts/good-vibes-pro.woff2"],
</code></p>
<p><code>    ["AstronBold","skins/fonts/astron-bold.woff2"]
</code></p>
<p><code>]
</code></p>
<p><code>icon="skins/gfx/doctor.png"
</code></p>
<p><code>
</code></p>
<p><code>[game.window]
</code></p>
<p><code>width = 1280
</code></p>
<p><code>height = 720
</code></p>
<p><code>resizable = true
</code></p>
<p><code>minWidth = 848
</code></p>
<p><code>minHeight = 480
</code></p>
</section><title>Особенности работы игр AeroQSP на qSpider</title><section id="vazhnoe-primechanie-ot-werewolfa"><p>
HTML-движок в флеш версии AeroQSP достаточно специфичен и не всегда совпадает с тем, как работает браузер, поэтому при запуске AeroQSP-игр на qSpider будут наблюдаться некоторые отличия в поведении игр.
</p>
<p>
Вот список особенностей и отличий:
</p>
<p>*. несколько игр использовали синтаксис, который поменялся в 5.8.0 (порядок аргументов в INSTR, ARRCOMP, ARRPOS), и в qSpider эти игры будут выдавать ошибку о несовпадении типов данных;</p>
<p>*. <p><code>в AeroQSP шрифты подключались в формате swf, использовать такой формат больше нет возможности, поэтому если игра использует нестандартные шрифты — их необходимо будет подключать через файл конфига в секции </code></p>
<a l:href="#qspider_gameresource"><p><code>game.resources</code></p>
</a><p><code>;</code></p>
</p>
<p>*. <p><code>в qSpider не поддерживаются эффекты </code></p>
<code><p><code>pixels</code></p>
</code><p><code>, </code></p>
<code><p><code>h_blinds</code></p>
</code><p><code> и </code></p>
<code><p><code>v_blinds</code></p>
</code><p><code>, остальные эффекты могут немного отличаться от того, как работала флеш-версия;</code></p>
</p>
<p>*. <p><code>не поддерживается переменная </code></p>
<code><p><code>SCROLL_SPEED</code></p>
</code><p><code> (впрочем, скорее всего нет игр, в которых она бы использовалась);</code></p>
</p>
<p>*. обработка клика в флеше отличается от браузера — если на блоке нет обработчика, то он не перехватывает клик, даже если размещен поверх другого. В ряде игр это привело к тому, что неспрятанные панельки (пустые и не видимые) в qSpider блокируют клики по линкам под ними. Пример — игра "Новогодние сказки", где кнопка "Играть" почти полностью перекрыта пустой на этот момент панелькой действий. Лечится небольшими изменениями игры — отключением неиспользуемых панелей.</p>
<p>*. <p><code>в флеше тег </code></p>
<code><p><code>center</code></p>
</code><p><code> внутри таблиц растягивает таблицу на всю ширину, при этом еще размеры ячеек без явно указанной ширины в этом случае считаются не как в браузере. Чаще всего это заметно в действиях — для форматирования по умолчанию используется таблица, и если в названии действия использовать тег center, то в флеш-версии текст будет посередине панели, а в qSpider — нет. Лечится добавлением </code></p>
<code><p><code>width=100%</code></p>
</code><p><code> в такую таблицу. Не было возможности сделать это на уровне плеера, поскольку в ряде игр это ломало отображение.</code></p>
</p>
<title>Пример подключения</title><p>
<p><code>Для подключения AeroQSP игры через конфиг — необходимо в основной секции добавить </code></p>
<code><p><code>mode="aero"</code></p>
</code><p><code>, и если используется размер экрана игры, отличающийся от дефолтного 800х600, — добавить секцию с размерами:
</code></p>
</p>
<p><code>[[game]]
</code></p>
<p><code>id = "c2cb4b5b-6a1c-482e-bb47-9ef207fb0dcd"
</code></p>
<p><code>title = "Чашка кофе"
</code></p>
<p><code>mode = "aero"
</code></p>
<p><code>file = "aero_coffee.aqsp"
</code></p>
<p><code>
</code></p>
<p><code>[game.aero]
</code></p>
<p><code>width = 504
</code></p>
<p><code>height = 680
</code></p>
<p>
При этом можно использовать как aqsp-архив, так и распаковать его и прописать ссылку на qsp-файл в папке.
</p>
<title>Важное примечание от Werewolf''а</title><cite>
<p>
Я не собираюсь развивать и поддерживать (кроме багфиксов) формат AeroQSP, поэтому не советую начинать новые игры с его использованием.</p>
</cite>
</section><title>Заключение</title><section id="post_scriptum_articles_0004"><p>
Werewolf продолжает развивать и модернизировать qSpider, добавляя в него всё новые и новые возможности. Ждите обновлений, проводите побольше тестов свежих версий плеера и пишите побольше игр.
</p>
<p>
<p><code>Обо всех ошибках и странностях в поведении при работе плеера просьба сообщать прямо на канал </code></p>
<a l:href="https://discord.gg/CXyrrznR"><p><code>#qsp_dev</code></p>
</a><p><code> на сервере интерактивной литературы в дискорде.
</code></p>
</p>
<p>
<p><code>Данная статья собрана из статей, написанных Werewolf''ом для </code></p>
<a l:href="https://ifhub.club"><p><code>ifhub.club</code></p>
</a><p><code>:
</code></p>
</p>
<p>*. <a l:href="https://ifhub.club/2020/10/11/qspider-pleer-dlya-zapuska-qsp-igr-v-brauzere.html"><p><code>qSpider - плеер для запуска QSP игр в браузере</code></p>
</a></p>
<p>*. <a l:href="https://ifhub.club/2020/10/11/qspider-hotkeys.html"><p><code>qSpider HotKeys - горячие клавиши</code></p>
</a></p>
<p>*. <a l:href="https://ifhub.club/2020/10/18/qspider-090.html"><p><code>qSpider 0.9.0 - список игр в конфиге</code></p>
</a></p>
<p>*. <a l:href="https://ifhub.club/2020/11/01/qspider-091.html"><p><code>qSpider 0.9.1 - загрузка игр из zip</code></p>
</a></p>
<p>*. <a l:href="https://ifhub.club/2021/05/23/qspider-0100.html"><p><code>qSpider 0.10.0 - подключение дополнительных ресурсов</code></p>
</a></p>
<p>*. <a l:href="https://ifhub.club/2021/10/22/qspider-0110.html"><p><code>qSpider 0.11.0 - поддержка игр в AeroQSP-формате</code></p>
</a></p>
<p>*. <a l:href="https://ifhub.club/2022/02/06/qspider-0120.html"><p><code>qSpider 0.12.0 - полноценная desktop-версия</code></p>
</a></p>
<title>P.S.:</title><p>
Данную статью вы можете найти так же и на других ресурсах:
</p>
<p>*. <a l:href="http://aleksversus.narod.ru/blog/qspider_v_0_12_0_svodnaja_statja/2022-02-15-25"><p><code>мой_сайт/qSpider 0.12.0</code></p>
</a></p>
<p>*. <a l:href="https://aleksversus.medium.com/qspider-v-0-12-0-сводная-статья-1d76af7d4f27"><p><code>medium/qSpider 0.12.0</code></p>
</a></p>
<p>*. <a l:href="https://vk.com/@qsplayer-qspider-v-0120-svodnaya-statya"><p><code>vk.com/qSpider 0.12.0</code></p>
</a></p>
</section></section></section><section id="classic_cfg"><title>Структура конфигурационного файла классического плеера версии 5.7.0</title><section id="post-scriptum"><p>
<p><code>Классический плеер QSP версии 5.7.0 хранит все настройки отображения и расположения окон в файле </code></p>
<code><p><code>qspgui.cfg</code></p>
</code><p><code>. Данный файл создаётся автоматически при первом запуске плеера и перезаписывается всякий раз, когда игрок плеер закрывает. Таким образом, чтобы сбросить настройки плеера, нужно просто удалить файл </code></p>
<code><p><code>qspgui.cfg</code></p>
</code><p><code> из папки с плеером.
</code></p>
</p>
<p>
<p><code>Если файл </code></p>
<code><p><code>qspgui.cfg</code></p>
</code><p><code> найден в папке с игрой, то применяются настройки из него. Если в папке с игрой такой файл не найден, применяются настройки из файла, который лежит рядом с плеером.
</code></p>
</p>
<p>
Это позволяет для каждой отдельной игры задавать собственные настройки оформления.
</p>
<p>
Официального, задокументированного способа сделать это — нет. Но есть небольшой трюк, позволяющий добиться нужного эффекта:
</p>
<p>1. Запускаем в плеере свою игру.</p>
<p>2. Вручную "расставляем" окна так, как нам нужно, в том числе задавая размер.</p>
<p>3. Закрываем плеер.</p>
<p>4. <p><code>Открываем папку плеера (где находится </code></p>
<code><p><code>qspgui.exe</code></p>
</code><p><code>) и копируем оттуда файл </code></p>
<code><p><code>qspgui.cfg</code></p>
</code><p><code> в папку с игрой.</code></p>
</p>
<p>5. <p><code>Ставим на файле </code></p>
<code><p><code>qspgui.cfg</code></p>
</code><p><code> в папке с игрой атрибут "только для чтения".</code></p>
</p>
<p>
Теперь игра будет открываться с нужным расположением и размером окон.
</p>
<p>
<p><code>Если не выполнить пункт </code></p>
<code><p><code>5</code></p>
</code><p><code>, то игрок сможет изменить расположение и размер окон, и новые настройки сохранятся у него для текущей игры после закрытия плеера.
</code></p>
</p>
<p>
<p><code>Некоторых особо хитрых комбинаций расположения окон можно добиться только самостоятельным редактированием </code></p>
<code><p><code>qspgui.cfg</code></p>
</code><p><code>. И опять же, нет никакой подробной официальной документации по этому файлу. Все сведения, приведённые в данной статье, получены экспериментальным путём.
</code></p>
</p>
<p>
<p><code>Конфигурационный файл </code></p>
<code><p><code>qspgui.cfg</code></p>
</code><p><code> состоит из нескольких секций настроек. Каждая секция объявляется заголовком, заключённым в квадратные скобки.
</code></p>
</p>
<p>
<p><code>Настройки представляют собой пары типа </code></p>
<code><p><code>Переменная=Значение</code></p>
</code><p><code>. Если какую-то из настроек удалить, при запуске плеера будет применена настройка по-умолчанию, после чего эта настройка будет восстановлена в конфигурационном файле.
</code></p>
</p>
<p>
На каждую игру можно создать собственный конфигурационный файл, который будет иметь приоритет перед основным конфигурационным файлом плеера.
</p>
<p>
Если на конфигурационном файле не стоит атрибут "только для чтения", после закрытия плеера все данные в конфигурационном файле будут перезаписаны в соответствии с новыми настройками плеера.
</p>
<title>Секция настроек цвета [Colors]</title><p>
<p><code>Данная секция объявляется заголовком </code></p>
<code><p><code>[Colors]</code></p>
</code><p><code>. В неё помещаются три настройки, каждая из которых должна располагаться на отдельной строке:
</code></p>
</p>
<p>
<code><p><code>BackColor</code></p>
</code><p><code> — цвет фона плеера.
</code></p>
</p>
<p>
<code><p><code>FontColor</code></p>
</code><p><code> — цвет шрифта плеера.
</code></p>
</p>
<p>
<code><p><code>LinkColor</code></p>
</code><p><code> — цвет ссылок плеера.
</code></p>
</p>
<p>
<p><code>Цвет задаётся целочисленным цветовым кодом, который вычисляется из трёх цветовых составляющих: </code></p>
<code><p><code>RED</code></p>
</code><p><code> (красная), </code></p>
<code><p><code>GREEN</code></p>
</code><p><code> (зелёная) и </code></p>
<code><p><code>BLUE</code></p>
</code><p><code> (синяя). Вычислить необходимый цветовой код можно по формуле:
</code></p>
</p>
<p><code>RED + GREEN*256 + BLUE*256*256
</code></p>
<p>
Пример настроек цветов для плеера (стандартные):
</p>
<p><code>[Colors]
</code></p>
<p><code>BackColor=14737632
</code></p>
<p><code>FontColor=0
</code></p>
<p><code>LinkColor=16711680
</code></p>
<title>Секция настроек шрифта [Font]</title><p>
<p><code>Данная секция объявляется заголовком </code></p>
<code><p><code>[Font]</code></p>
</code><p><code>. В неё помещаются три настройки, каждая на отдельной строке:
</code></p>
</p>
<p>
<code><p><code>FontSize</code></p>
</code><p><code> — утанавливает предпочтительный размер шрифта в плеере. Это основной размер шрифта так же и для HTML-разметки. Может принимать значения от 1 до 72 (или сколько позволит система). Если выставить число ноль, то будет применён размер шрифта по-умолчанию, т.е. 12.
</code></p>
</p>
<p>
<code><p><code>FontName</code></p>
</code><p><code> — устанавливает имя предпочтительного шрифта в плеере. Можно указывать названия шрифтов, установленных в системе. Если указать несуществующий в системе шрифт, будет восстановлена настройка по-умолчанию, шрифт </code></p>
<code><p><code>Segoe UI</code></p>
</code><p><code>.
</code></p>
</p>
<p>
<code><p><code>UseFontSize</code></p>
</code><p><code> — эта настройка запрещает использовать иной размер шрифта, кроме указанного в секции настроек. Т.е. переменная fsize в игре перестаёт действовать. Можно указывать значение 0 — отключает принудительное использование системного размера шрифта, 1 — включает принудительное использование системного размера шрифта.
</code></p>
</p>
<p>
Пример настроек шрифта для плеера (стандартный):
</p>
<p><code>[Font]
</code></p>
<p><code>FontSize=12
</code></p>
<p><code>FontName=Segoe UI
</code></p>
<p><code>UseFontSize=0
</code></p>
<title>Секция основных настроек [General]</title><section id="dock_size"><p>
<p><code>Данная секция объявляется заголовком </code></p>
<code><p><code>[General]</code></p>
</code><p><code>. В неё помещается множество настроек.
</code></p>
</p>
<p>
<code><p><code>Volume</code></p>
</code><p><code> — данная настройка выставляет уровень громкости звуков в плеере. Принимает значения от 0 до 100 (проценты громкости). Пишется отдельной строкой.
</code></p>
</p>
<p>
<code><p><code>ShowHotkeys</code></p>
</code><p><code> — данная настройка отвечает за отображение подсказок по горячим клавишам действий. Принимает значения: 0 — горячие клавиши действий не отображаются, 1 — горячие клавиши действий отображаются. Пишется отдельной строкой
</code></p>
</p>
<p>
<code><p><code>Language</code></p>
</code><p><code> — данная настройка отвечает за выбор языка локализации плеера. Можно выбрать один из пяти языков: </code></p>
<code><p><code>de_DE</code></p>
</code><p><code> - немецкий, </code></p>
<code><p><code>en_GB</code></p>
</code><p><code> — английский, ru_RU — русский, uk_UA — украинский, eo — эсперанто. Можно заменить один из языков на свой собственный, используя инструкцию отсюда: </code></p>
<a l:href="https://qsp.org/index.php?option=com_agora&task=topic&id=164&Itemid=57"><p><code>Локализация классического плеера QSP</code></p>
</a><p><code>.
</code></p>
</p>
<p>
<p><code>Далее следуют настройки, перечисляемые в одну строку. Лучше всего их записывать по порядку, как есть, без лишних пробелов. Данные настройки разделяются на группы. Каждая группа закрывается вертикальной чертой </code></p>
<code><p><code>|</code></p>
</code><p><code>. Последняя группа так же должна быть закрыта вертикальной чертой. Внутри группы настройки закрываются точкой с запятой </code></p>
<code><p><code>;</code></p>
</code><p><code>.
</code></p>
</p>
<title>Panels</title><p>
<p><code>Первая группа состоит из одной настройки Panels. Её значение всегда сбрасывается к </code></p>
<code><p><code>layout2</code></p>
</code><p><code>, поэтому особого смысла менять её нет. Но если всё же измените на другую, пропорции панелей сбросятся к виду с приоритетом площади у окна основного описания.
</code></p>
</p>
<p><code>Panels=layout2|
</code></p>
<p>
Следующие шесть групп настроек определяют размещение шести разных окон плеера. У всех окон настройки одинаковые, поэтому рассмотрим их вне привязки к какой либо группе. Если поведение окна будет отличаться от прочих при изменении какой либо настройки, об этом будет сказано отдельно.
</p>
<title>name</title><p>
Первая переменная служебная и не относится непосредственно к настройкам плеера. Она нужна, чтобы плеер понимал для какого окна ему применить все последующие настройки. Это системное название окна:
</p>
<p><code>name=imgview;
</code></p>
<p>
<p><code>Данной переменной можно передавать только шесть значений — системные названия окон плеера. Это значения: </code></p>
<code><p><code>imgview</code></p>
</code><p><code> (окно предпросмотра изображений), </code></p>
<code><p><code>desc</code></p>
</code><p><code> (окно основного описания), </code></p>
<code><p><code>objs</code></p>
</code><p><code> (окно предметов), </code></p>
<code><p><code>acts</code></p>
</code><p><code> (окно действий), </code></p>
<code><p><code>vars</code></p>
</code><p><code> (окно дополнительного описания), </code></p>
<code><p><code>input</code></p>
</code><p><code> (окно пользовательского ввода, поле ввода). Именно по значению в этой переменной вы можете понять, к настройкам какого окна относится данная группа настроек.
</code></p>
</p>
<title>caption</title><p>
Следующей переменной бесполезно прописывать какие-либо настройки, так как значения в неё подтягиваются из текущей локализации. Это названия окон. Поэтому значения могут быть любыми в зависимости от локализации. Вот так выглядит эта "настройка" для окна предметов в английской локализации:
</p>
<p><code>caption=Objects;
</code></p>
<p>
У окна основного описания нет своей подписи, поэтому и значение в данную переменную прописывается пустое:
</p>
<p><code>caption=;
</code></p>
<title>state</title><p>
<p><code>Переменная </code></p>
<code><p><code>state</code></p>
</code><p><code> отвечает за внешний вид и поведение окна. Можете поэкспериментировать с этой настройкой, задавая разные значения, но по-умолчанию всеми окнами используются лишь несколько значений, определяющих поведение:
</code></p>
</p>
<p>
<code><p><code>768</code></p>
</code><p><code> — это значение предопределяет поведение окна, как у окна основного описания по-умолчанию. Например, при этом значении отсутствует заголовок окна.
</code></p>
</p>
<p>
<code><p><code>6293500</code></p>
</code><p><code> — это значение предопределяет поведение окна, как у окон действий, предметов и дополнительного описания по-умолчанию. При этом значении обязательно присутствует заголовок окна.
</code></p>
</p>
<p>
<code><p><code>2099196</code></p>
</code><p><code> — это значение предопределяет поведение окна, как у окна ввода по-умолчанию. Заголовок окна присутствует.
</code></p>
</p>
<p>
<code><p><code>1080035324</code></p>
</code><p><code> — это значение предопределяет поведение окна, как у окна предпросмотра по-умолчанию.
</code></p>
</p>
<p>
Увеличение любого из этих значений на единицу сделает любое из окон независимым от основного окна плеера, то есть плавающим. Например окно основного описания можно сделать плавающим, прописав такую настройку:
</p>
<p><code>state=769;
</code></p>
<p>
Увеличение любого из этих значений на 2 — скрывает окно, однако его можно вернуть обратно через меню плеера.
</p>
<title>dir</title><p>
<p><code>Переменная </code></p>
<code><p><code>dir</code></p>
</code><p><code> отвечает за расположение и поведение окна. Можете так же поэкспериментировать с этой настройкой, задавая разные значения. Всего таких значений можно указать шесть: от 0 до 5. Если указать иное значение, окно появится в верхнем левом углу плеера в нерабочем виде. Название пременной очевидно происходит от слова "direction" — т.е. "направление". В зависимости от выбранного направления выстраиваются и прочие блоки.
</code></p>
</p>
<p>
<code><p><code>0</code></p>
</code><p><code> — полностью скрывает окно из виду, а вернее сворачивает до небольшой полоски в левом верхнем углу.
</code></p>
</p>
<p>
<code><p><code>1</code></p>
</code><p><code> — окно располагается в подвижный блок </code></p>
<code><p><code>Top</code></p>
</code><p><code> (то есть типа </code></p>
<code><p><code>верх</code></p>
</code><p><code>). При выборе данного направления, слои (</code></p>
<code><p><code>layer</code></p>
</code><p><code>) располагаются и нумеруются снизу вверх. В одном слое ряды (</code></p>
<code><p><code>row</code></p>
</code><p><code>) располагаются и нумеруются сверху вниз. В одном ряду (или слое) позиции (</code></p>
<code><p><code>pos</code></p>
</code><p><code>) располагаются и нумеруются слева направо.
</code></p>
</p>
<p>
<code><p><code>2</code></p>
</code><p><code> — окно располагается в подвижный блок </code></p>
<code><p><code>Right</code></p>
</code><p><code> (то есть типа </code></p>
<code><p><code>право</code></p>
</code><p><code>). При выборе данного направления, слои (</code></p>
<code><p><code>layer</code></p>
</code><p><code>) располагаются и нумеруются слева направо. В одном слое ряды (</code></p>
<code><p><code>row</code></p>
</code><p><code>) располагаются и нумеруются справа налево. В одном ряду (или слое) позиции (</code></p>
<code><p><code>pos</code></p>
</code><p><code>) располагаются и нумеруются сверху вниз.
</code></p>
</p>
<p>
<code><p><code>3</code></p>
</code><p><code> — окно располагается в подвижный блок </code></p>
<code><p><code>Bottom</code></p>
</code><p><code> (то есть типа </code></p>
<code><p><code>низ</code></p>
</code><p><code>). При выборе данного направления, слои (</code></p>
<code><p><code>layer</code></p>
</code><p><code>) располагаются и нумеруются сверху вниз. В одном слое ряды (</code></p>
<code><p><code>row</code></p>
</code><p><code>) располагаются и нумеруются снизу вверх. В одном ряду (или слое) позиции (</code></p>
<code><p><code>pos</code></p>
</code><p><code>) располагаются и нумеруются слева направо.
</code></p>
</p>
<p>
<code><p><code>4</code></p>
</code><p><code> — окно располагается в подвижный блок </code></p>
<code><p><code>Left</code></p>
</code><p><code> (то есть типа </code></p>
<code><p><code>лево</code></p>
</code><p><code>). При выборе данного направления, слои (</code></p>
<code><p><code>layer</code></p>
</code><p><code>) располагаются и нумеруются справа налево. В одном слое ряды (</code></p>
<code><p><code>row</code></p>
</code><p><code>) располагаются и нумеруются слева направо. В одном ряду (или слое) позиции (</code></p>
<code><p><code>pos</code></p>
</code><p><code>) располагаются и нумеруются сверху вниз.
</code></p>
</p>
<p>
<code><p><code>5</code></p>
</code><p><code> — окно располагается в неподвижный блок </code></p>
<code><p><code>Center</code></p>
</code><p><code>. При выборе данного направления, слои (</code></p>
<code><p><code>layer</code></p>
</code><p><code>) располагаются и нумеруются слева направа. В одном слое ряды (</code></p>
<code><p><code>row</code></p>
</code><p><code>) располагаются и нумеруются слева направо. В одном ряду (или слое) позиции (</code></p>
<code><p><code>pos</code></p>
</code><p><code>) располагаются и нумеруются сверху вниз.
</code></p>
</p>
<p>
Можно разместить все окна в одном блоке, однако при этом нужно учитывать, как ведут себя окна в соответствии с другими настройками.
</p>
<title>layer</title><p>
<p><code>Значение переменной </code></p>
<code><p><code>layer</code></p>
</code><p><code> определяет номер слоя, в котором будет располагаться окно. Может принимать значения от 0 до 5. Слои выстравиваются в определённом порядке в зависимости от выбранного направления (переменная </code></p>
<code><p><code>dir</code></p>
</code><p><code>).
</code></p>
</p>
<title>raw</title><p>
<p><code>Значения переменной </code></p>
<code><p><code>raw</code></p>
</code><p><code> определяет номер ряда, в котором будет располагаться окно. Ряды выстравиваются в определённом порядке внутри слоя (переменная </code></p>
<code><p><code>layer</code></p>
</code><p><code>), в зависимости от выбранного направления (переменная </code></p>
<code><p><code>dir</code></p>
</code><p><code>).
</code></p>
</p>
<title>pos</title><p>
<p><code>Значения переменной </code></p>
<code><p><code>pos</code></p>
</code><p><code> определяет номер позиции, в которой будет располагаться окно. Позиции располагаются определённым образом внутри ряда или слоя, в зависимости от выбранного направления (переменная </code></p>
<code><p><code>dir</code></p>
</code><p><code>).
</code></p>
</p>
<title>prop</title><p>
<p><code>Переменная </code></p>
<code><p><code>prop</code></p>
</code><p><code> устанавливает пропорции между окнами внутри ряда. Значения указываются от 100000 в одну или другую сторону.
</code></p>
</p>
<title>bestw, besth, minw, minh, maxw, maxh</title><p>
<p><code>Переменные </code></p>
<code><p><code>bestw</code></p>
</code><p><code> и </code></p>
<code><p><code>besth</code></p>
</code><p><code> — это предпочтительные ширина и высота окна соответственно. Эти параметры будут применяться в зависимости от того, в каком направлении размещено окно, и как изменено значение переменной </code></p>
<code><p><code>prop</code></p>
</code><p><code>.
</code></p>
</p>
<p>
<p><code>Переменные </code></p>
<code><p><code>maxw</code></p>
</code><p><code> и </code></p>
<code><p><code>maxh</code></p>
</code><p><code> — это максимальные ширина и высота окна соответственно. Эти параметры могут не работать, в зависимости от того, как скомбинированы окна. 
</code></p>
</p>
<p>
<p><code>Переменные </code></p>
<code><p><code>minw</code></p>
</code><p><code> и </code></p>
<code><p><code>minh</code></p>
</code><p><code> — это минимальные ширина и высота окна соответственно. Эти параметры могут не работать, в зависимости от того, как скомбинированы окна.
</code></p>
</p>
<title>floatx, floaty, floatw, floath</title><p>
<p><code>Переменные </code></p>
<code><p><code>floatx</code></p>
</code><p><code>, </code></p>
<code><p><code>floaty</code></p>
</code><p><code>, </code></p>
<code><p><code>floatw</code></p>
</code><p><code>, </code></p>
<code><p><code>floath</code></p>
</code><p><code> отвечают за расположение и размеры окна, когда окно откреплено от окна плеера, т.е. когда оно переключено в режим плавающего окошка. </code></p>
<code><p><code>floatx</code></p>
</code><p><code> — отступ от левой границы экрана, </code></p>
<code><p><code>floaty</code></p>
</code><p><code> — отступ от верхней границы экрана, </code></p>
<code><p><code>floatw</code></p>
</code><p><code> — ширина плавающего окна, </code></p>
<code><p><code>floath</code></p>
</code><p><code> — высота плавающего окна.
</code></p>
</p>
<title>dock_size</title><p>
<p><code>В конце секции основных настроек прописываются несколько групп </code></p>
<code><p><code>dock_size</code></p>
</code><p><code>, количество которых совпадает с числом окон, размещённых в направлениях top, right, bottom и left. Изменение значений этих настроек не влияют на отображение окон, это служебные значения.
</code></p>
</p>
</section><title>Секция настроек окна плеера [Pos]</title><p>
<p><code>Данная секция объявляется заголовком </code></p>
<code><p><code>[Pos]</code></p>
</code><p><code>. Здесь расположены пять настроек, каждая из которых записывается отдельной строкой.
</code></p>
</p>
<p>
<code><p><code>Left</code></p>
</code><p><code> и </code></p>
<code><p><code>Top</code></p>
</code><p><code> — определяют отступ от левой и верхней границ экрана.
</code></p>
</p>
<p>
<code><p><code>Width</code></p>
</code><p><code> и </code></p>
<code><p><code>Height</code></p>
</code><p><code> — определяют ширину и высоту окна соответственно.
</code></p>
</p>
<p>
<code><p><code>Maximize</code></p>
</code><p><code> — определяет развернётся ли окно плеера на всю свободную ширину и высоту экрана, или откроется в окне с размерами, указанными в настройках Left, Top, Width, Height. Может принимать значения 0 (окно с указанными размерами) и 1 (развёрнутое окно).
</code></p>
</p>
<p>
Пример настроек окна плеера (стандартные):
</p>
<p><code>[Pos]
</code></p>
<p><code>Left=10
</code></p>
<p><code>Top=10
</code></p>
<p><code>Width=850
</code></p>
<p><code>Height=650
</code></p>
<p><code>Maximize=0
</code></p>
<title>Post Scriptum</title><p>
<p><code>Для более полного понимания работы настроек рекомендуется ознакомиться с документацией по </code></p>
<a l:href="https://ru.wikipedia.org/wiki/WxWidgets"><p><code>wxWidgets</code></p>
</a><p><code>.
</code></p>
</p>
<p>
<p><code>Вводная часть статьи взята из инструкции за авторством </code></p>
<strong><p><code>Nex</code></p>
</strong><p><code>`а в теме </code></p>
<a l:href="https://qsp.org/index.php?option=com_agora&task=topic&id=861&Itemid=57"><p><code>Настройка окошек классического плеера с помощью qspgui.cfg</code></p>
</a><p><code>
</code></p>
</p>
</section></section><section id="gosub_func_args"><title>Операторы, функции, аргументы. GOSUB, FUNC, ARGS</title><section id="zakliuchenie"><p>
Очень часто новички, пришедшие в QSP, задают вопрос: что такое ARGS, и как их использовать? И хотя информации по данному вопросу очень много, вся она довольно разрознена, отвечает на вопрос слишком общо, или слишком конкретно, вплоть до одного единственного примера.
</p>
<p>
Эта статья является попыткой ответить на данный вопрос максимально просто, точно и подробно, насколько это в принципе будет возможно.
</p>
image: https://i.ibb.co/0q9D7Jb/QSP.png<p>
Все примеры рекомендую испытать самостоятельно, побаловаться, изменяя значения, и посмотреть, что из этого выйдет. Теория без практики — мертва.
</p>
<cite>
<p>
<p><code>Обратите внимание. В статье приведены фрагменты кода QSP, некоторые из которых написаны в формате TXT2GAM. Такие фрагменты легко отличить, так как в них отдельными строками прописывается начало локации (</code></p>
<code><p><code># start</code></p>
</code><p><code>) и её конец (</code></p>
<code><p><code>--- start ---</code></p>
</code><p><code>). Если вы работаете в редакторе Quest Generator, данные строчки прописывать в коде локаций не нужно, только содержимое между ними.</code></p>
</p>
</cite>
<title>Пробуем воду. Немного определений</title><section id="funktsii"><p></p>
<title>Операторы</title><p>
<p><code>При написании QSP-кода мы всегда используем различные операторы. Например, мы используем оператор </code></p>
<code><p><code>*pl</code></p>
</code><p><code> для вывода текста в окно основного описания, или оператор </code></p>
<code><p><code>addobj</code></p>
</code><p><code> для добавления предмета, или например оператор </code></p>
<code><p><code>goto</code></p>
</code><p><code> для перехода между локациями. Иными словами операторы нужны нам, чтобы что-то </code></p>
<code><p><code>делать</code></p>
</code><p><code> с игрой или с плеером, выполнять какие-то процедуры.
</code></p>
</p>
<p>
<p><code>Если мы внимательно посмотрим на все эти операторы, то мы увидим, что для некоторых операторов, чтобы они что-то сделали, нужно обязательно указать какое-то значение. Например, чтобы оператор </code></p>
<code><p><code>addobj</code></p>
</code><p><code> добавил предмет в окно предметов, мы должны указать название предмета для этого оператора:
</code></p>
</p>
<p><code>addobj "Апельсин"
</code></p>
image: https://i.ibb.co/XCyNJqv/image.png<p>
<p><code>Такое указание значения в программировании называется </code></p>
<code><p><code>передачей значения</code></p>
</code><p><code> оператору. Оператор принимает от нас указанное значение и что-то с ним делает. Например, создаёт предмет с указанным названием. Само значение, которое мы передаём оператору, нередко называют </code></p>
<code><p><code>аргументом</code></p>
</code><p><code> или </code></p>
<code><p><code>параметром</code></p>
</code><p><code>.
</code></p>
</p>
<p>
Поэтому если вы встречаете где-то такое выражение "передаю параметры оператору", или "указываю аргументы для оператора", это значит, что оператору передаются какие-то значения, которые он принимает и обрабатывает.
</p>
<p>
<p><code>В случае с оператором </code></p>
<code><p><code>addobj</code></p>
</code><p><code> мы должны обязательно указать хотя бы один аргумент, но в QSP есть операторы, для которых можно совсем не указывать аргументы. Например, оператору </code></p>
<code><p><code>clear</code></p>
</code><p><code>, который очищает окно дополнительного описания, не нужны аргументы, он и так знает, что ему делать. Или оператор </code></p>
<code><p><code>killall</code></p>
</code><p><code>, ему тоже не нужен аргумент. Ещё, совсем без аргумента, может использоваться оператор </code></p>
<code><p><code>*pl</code></p>
</code><p><code>, тогда он просто выводит на экран пустую строку и совершает переход на новую строку в окне основного описания.
</code></p>
</p>
<p>
<p><code>Некоторым операторам можно передавать больше одного аргумента. Если взглянуть на тот же оператор </code></p>
<code><p><code>addobj</code></p>
</code><p><code>, мы можем передавать ему и два и три аргумента:
</code></p>
</p>
<p><code>addobj "Апельсин","pic/orange.png",4
</code></p>
<p>
В данном случае мы передаём оператору три аргумента: название предмета, картинку предмета, и позицию в окне предметов, в которую мы данный предмет хотим поместить. Аргументы перечисляются через запятую.
</p>
<p>
В зависимости от числа принимаемых аргументов, операторы могут вести себя по-разному:
</p>
<p><code>killvar '$mass',4    & ! два аргумента. Удаляем ячейку номер 4 из массива $mass
</code></p>
<p><code>killvar '$array'    & ! один аргумент. Удаляем весь массив $array
</code></p>
<p><code>killvar                & ! без аргументов. Удаляет все массивы и переменные в игре
</code></p>
<p>
<p><code>Нужно помнить, сколько аргументов ожидает получить каждый оператор. Операторы типа </code></p>
<code><p><code>clear</code></p>
</code><p><code> и </code></p>
<code><p><code>killall</code></p>
</code><p><code> вообще не ждут аргументов, поэтому передавать им какие-либо значения бесполезно. Оперторы типа </code></p>
<code><p><code>addobj</code></p>
</code><p><code>, </code></p>
<code><p><code>goto</code></p>
</code><p><code> и </code></p>
<code><p><code>act</code></p>
</code><p><code> ждут хотя бы один аргумент, но могут принимать больше. Если передать оператору больше аргументов, чем он может принять, или меньше, чем он ожидает, это приведёт к ошибке №120: "Неверное число аргументов оператора/функции", — поэтому будьте внимательны при написании кода и чаще сверяйтесь со справкой.
</code></p>
</p>
image: https://i.ibb.co/R6WQKpb/4.png<title>Функции</title><p>
<p><code>Помимо операторов в QSP есть ещё такие вещи, как </code></p>
<code><p><code>функции</code></p>
</code><p><code>. Функции тоже могут что-нибудь делать с игрой или плеером, но в основном они нужны, чтобы получать какие-либо значения.
</code></p>
</p>
<p>
<p><code>Например, с помощью функции </code></p>
<code><p><code>rnd</code></p>
</code><p><code> мы можем получить случайное число от 1 до 1000:
</code></p>
</p>
<p><code>num=rnd    & ! в переменную num запишется случайное число от 1 до 1000
</code></p>
<p>
<p><code>В этом и заключается основное отличие функции от оператора, функция умеет </code></p>
<code><p><code>возвращать значение</code></p>
</code><p><code>. Значение, возвращаемое функцией, ещё называют </code></p>
<code><p><code>результатом</code></p>
</code><p><code>, поэтому можно сказать, что </code></p>
<code><p><code>функция возвращает результат</code></p>
</code><p><code>.
</code></p>
</p>
image: https://i.ibb.co/tbwMRvc/image.png<p>
Точно так же, как оператор, функция может принимать аргументы, однако аргументы, которые мы хотим передать функции, нужно заключать в круглые скобки, в отличие от операторов, которым такие скобки не нужны.
</p>
<p><code>num=rand(1,1000)    & ! аргументы функции rand заключены в скобки
</code></p>
<p><code>killvar '$mass',9    & ! аргументы оператора killvar не нужно заключать в скобки
</code></p>
<p>
<p><code>Таким образом функция </code></p>
<code><p><code>принимает аргументы</code></p>
</code><p><code> и </code></p>
<code><p><code>возвращает результат</code></p>
</code><p><code>. Или </code></p>
<code><p><code>получает параметры</code></p>
</code><p><code> и </code></p>
<code><p><code>возвращает значение</code></p>
</code><p><code>. Говорите, как вам удобнее, главное, чтобы вы понимали, что все эти слова значат.
</code></p>
</p>
<p>
<p><code>В QSP есть много разных функций, и так же, как и операторам, им можно передавать разное число аргументов. Есть функции, которым вообще не нужно передавать никаких аргументов, например </code></p>
<code><p><code>$selact</code></p>
</code><p><code>, </code></p>
<code><p><code>$curact</code></p>
</code><p><code>, </code></p>
<code><p><code>$curloc</code></p>
</code><p><code> и т.д. А есть функции, которые требуют строго определённого числа аргументов, например </code></p>
<code><p><code>isnum</code></p>
</code><p><code>, которая ожидает всегда только один аргумент, не больше, не меньше. Ну и конечно же есть функции, которым можно передавать разное число аргументов, и чьё поведение будет меняться в зависимости от числа аргументов:
</code></p>
</p>
<p><code>max('mass')    & ! передан один строковый аргумент. Функция вернёт максимальное число из массива mass
</code></p>
<p><code>max('mass','gass','dass')    & ! передано три строковых аргумента. Функция вернёт тот из них, который идёт позже в алфавитном порядке
</code></p>
<p><code>max(12)    & ! данная строчка кода вызовет ошибку 114
</code></p>
<p><code>max(12,34)    & ! функция вернёт наибольшее из двух чисел (34)
</code></p>
<p>image: https://i.ibb.co/CHdzh7k/function-get-gift.png</p>
</section><title>Плаваем у берега. Пользовательские функции и процедуры</title><p>
Как быть, когда нам не хватает функционала уже имеющихся в QSP функций и операторов? Что если нам нужно, например, постоянно выводить на экран значения некоторых переменных, причём не просто выводить, а выводить эти значения внутри определённой строки. Например, у нас есть вот такой набор переменных:
</p>
<p><code>$name='Леголас'
</code></p>
<p><code>age=137
</code></p>
<p><code>$arms='Лук и стрелы'
</code></p>
<p>
И мы хотим периодически видеть на экране что-то вроде:
</p>
<p><code>Вас зовут Леголас.
</code></p>
<p><code>Вам 137 лет.
</code></p>
<p><code>Вы используете Лук и стрелы.
</code></p>
<p>
Для этой ситуации в QSP предусмотрено создание собственных аналогов функций и операторов. Для этого мы должны создать отдельную локацию и написать на ней нужный код. В нашем случае локация будет называться "pl_stat":
</p>
<p><code>! # pl_stat
</code></p>
<p><code>*pl "Вас зовут <<$name>>."
</code></p>
<p><code>*pl "Вам <<age>> лет."
</code></p>
<p><code>*pl "Вы используете <<$arms>>."
</code></p>
<p>
<p><code>И теперь, когда у нас есть такая локация, нам достаточно вызвать её с помощью оператора </code></p>
<code><p><code>gosub</code></p>
</code><p><code> в любом месте нашей игры, и мы увидим на экране нужный текст со вставленной информацией из наших переменных.
</code></p>
</p>
<p><code>gosub 'pl_stat'
</code></p>
<p>
<p><code>Очевидно, что работа данной локации стала похожа на работу некоей расширенной версии оператора </code></p>
<code><p><code>*pl</code></p>
</code><p><code>.
</code></p>
</p>
<p>
Что же дальше? А дальше нам хотелось бы написать какой-нибудь аналог функции, например, чтобы посчитать квадрат числа N. И мы можем это сделать. Создадим локацию "square" и на ней напишем следующий код:
</p>
<p><code>! # square
</code></p>
<p><code>R=N*N
</code></p>
<p>
<p><code>Вот такой простой код. Если мы вызовем данную локацию с помощью </code></p>
<code><p><code>func</code></p>
</code><p><code>, то в переменную R у нас запишется результат возведения в квадрат числа N.
</code></p>
</p>
<p><code>N=12
</code></p>
<p><code>func('square')
</code></p>
<p><code>*pl R    & ! на экране появится число 144
</code></p>
<p>
<p><code>Однако с таким же успехом мы можем вызывать данную локацию через </code></p>
<code><p><code>gosub</code></p>
</code><p><code>, ведь результат вычислений всё равно пишется в переменную R прямо на локации "square". Зачем нам здесь использовать </code></p>
<code><p><code>func</code></p>
</code><p><code>? Действительно незачем. Сейчас наша локация просто вычисляет значение и записывает его в переменную, однако мы можем заставить её </code></p>
<code><p><code>возвращать значение</code></p>
</code><p><code>! То есть она будет работать почти как полноценная функция QSP.
</code></p>
</p>
<p>
<p><code>Чтобы заставить нашу локацию возвращать значение, мы должны результат вычислений записать в специальную системную переменную </code></p>
<code><p><code>result</code></p>
</code><p><code>.
</code></p>
</p>
<p><code>! # square
</code></p>
<p><code>result=N*N
</code></p>
<p>
Теперь наша локация будет возвращать нам значение аналогично любой встроенной в QSP функции. А значит мы можем присвоить значение переменной уже в той локации, из которой вызвали локацию "square":
</p>
<p><code>N=12
</code></p>
<p><code>R=func('square')
</code></p>
<p><code>*pl R    & ! на экране появится число 144
</code></p>
<p>
Или вообще не использовать промежуточную переменную:
</p>
<p><code>N=12
</code></p>
<p><code>*pl func('square')    & ! на экране появится число 144
</code></p>
<p>
<p><code>Уникальность переменной </code></p>
<code><p><code>result</code></p>
</code><p><code> заключается в том, что она действительно уникальная на каждой локации, из которой мы её вызываем. То есть, если мы на локации "start" (для примера) записали в переменную </code></p>
<code><p><code>result</code></p>
</code><p><code> какое-либо значение, то, если мы вызовем из локации "start" локацию "square", где мы тоже используем </code></p>
<code><p><code>result</code></p>
</code><p><code>, на локации "start" значение в переменной </code></p>
<code><p><code>result</code></p>
</code><p><code> не изменится. Это легко проверить:
</code></p>
</p>
<p><code># start
</code></p>
<p><code>result=123    & ! записываем число в переменную result
</code></p>
<p><code>N=24
</code></p>
<p><code>*pl func('square')    & ! выведет на экран 576
</code></p>
<p><code>*pl result    & ! выведет на экран 123
</code></p>
<p><code>--- start ---
</code></p>
<p><code>
</code></p>
<p><code># square
</code></p>
<p><code>result = N * N 
</code></p>
<p><code>--- square ---
</code></p>
<p>
И всё-таки наш код не такой удобный, как бы нам хотелось, ведь функциям QSP мы просто передаём аргументы, и не заполняем заранее разные переменные перед тем, как вызвать ту или иную функцию. Что же делать?
</p>
<p>
А всё очень просто. Разработчик QSP предусмотрел такую необходимость, и мы можем передавать нашей локации до девяти аргументов (в плеере версии 5.7.0). Просто берём и внутри круглых скобок ставим запятую после названия нашей локации "square" и указываем значение, которое хотим передать локации:
</p>
<p><code>*pl func('square',25)
</code></p>
<p>
<p><code>Вот и всё. На локацию "square" передан </code></p>
<code><p><code>параметр</code></p>
</code><p><code>, или иными словами локация "square" </code></p>
<code><p><code>получила в качестве аргумента</code></p>
</code><p><code> значение </code></p>
<code><p><code>25</code></p>
</code><p><code>. Но как же это значение использовать на локации "square", ведь теперь мы не вносили его ни в одну переменную. А вся хитрость в том, что данное значение плеер сам автоматически вносит в специальный системный массив </code></p>
<code><p><code>args</code></p>
</code><p><code>. В данном случае число </code></p>
<code><p><code>25</code></p>
</code><p><code> нужно искать в нулевой ячейке этого массива на локации "square".
</code></p>
</p>
<p><code>! # square
</code></p>
<p><code>*pl args[0]    & ! выведет на экран число, которое мы отправляем на эту локацию
</code></p>
<p><code>result=args[0]*args[0]    & ! вместо N мы теперь используем число из нулевой ячейки массива args
</code></p>
<p>
Попробуйте запустить код из предыдущего примера, но теперь без переменной N:
</p>
<p><code># start
</code></p>
<p><code>result=123    & ! записываем число в переменную result
</code></p>
<p><code>*pl func('square',24)    & ! выведет на экран 576
</code></p>
<p><code>*pl result    & ! выведет на экран 123
</code></p>
<p><code>--- start ---
</code></p>
<p><code>
</code></p>
<p><code># square
</code></p>
<p><code>*pl args[0]     & ! поскольку выше мы передаём на square число 24, то эта команда выведет на экран число 24
</code></p>
<p><code>result=args[0]*args[0]
</code></p>
<p><code>--- square ---
</code></p>
<p>
Итак, мы знаем, что можем передавать на нашу локацию-функцию до девяти аргументов. Мы нашли, где искать аргумент, если он один. А где же искать все остальные? Всё очень просто. Каждый последующий аргумент будет автоматически помещаться в следующую ячейку массива args. Таким образом, если мы передадим на локацию все девять аргументов, мы сможем их найти в массиве args, в ячейках с нулевой по восьмую.
</p>
<p>
Давайте напишем функцию, которая будет складывать девять чисел, передаваемых ей в качестве аргументов. Для этого создаём локацию "summ":
</p>
<p><code>! # summ
</code></p>
<p><code>result=args[0]+args[1]+args[2]+args[3]+args[4]+args[5]+args[6]+args[7]+args[8]
</code></p>
<p>
А вот примеры вызова этой локации "summ". Мы передаём на эту локацию девять слагаемых, а она возвращает нам сумму всех девяти слагаемых:
</p>
<p><code>*pl func('summ',1,2,3,4,5,6,7,8,9)    & ! на экране появится число 45
</code></p>
<p><code>*pl func('summ',23,45,67,89,0,11,23,5,-1)    & ! на экране появится число 262
</code></p>
<p>
<p><code>Если мы укажем не все аргументы, значения несуществующих ячеек массива </code></p>
<code><p><code>args</code></p>
</code><p><code> на локации "summ" окажутся равны нулю:
</code></p>
</p>
<p><code>*pl func('summ',1,2,3,4)    & ! на экране появится число 10
</code></p>
<p><code>*pl func('summ',23,45,67)    & ! на экране появится число 135
</code></p>
<p>
<p><code>С массивом </code></p>
<code><p><code>args</code></p>
</code><p><code> можно работать, как с обычным массивом QSP. Т.е. вы легко можете добавлять в него новые ячейки, или удалять с помощью </code></p>
<code><p><code>killvar</code></p>
</code><p><code>. Однако у этого массива есть одна особенность, которая роднит его с переменной </code></p>
<code><p><code>result</code></p>
</code><p><code>. Для каждой отдельной локации массив </code></p>
<code><p><code>args</code></p>
</code><p><code> уникален. То есть вы можете помещать в него любые значения, увеличивать или уменьшать его размер, это никак не повлияет на массив </code></p>
<code><p><code>args</code></p>
</code><p><code> в других локациях.
</code></p>
</p>
<p>
<p><code>Более того. После того, как код локации, на которой вы работали с массивом </code></p>
<code><p><code>args</code></p>
</code><p><code>, будет выполнен, этот уникальный массив будет полностью уничтожен, а значит он уже не будет занимать место в оперативной памяти. Но, надо понимать, что в других работающих локациях свои собственные массивы </code></p>
<code><p><code>args</code></p>
</code><p><code> продолжат существовать.
</code></p>
</p>
<p><code>! данный код выведет на экран последовательно числа 11, 1507, 19
</code></p>
<p><code># start
</code></p>
<p><code>args[0]=19    & ! это нулевая ячейка массива args на локации start, ей присваиваем 19
</code></p>
<p><code>*pl func('foo',11)    & ! выведет на экран 1507
</code></p>
<p><code>*pl args[0]    & ! выведет на экран 19
</code></p>
<p><code>--- start ---
</code></p>
<p><code>
</code></p>
<p><code># foo
</code></p>
<p><code>! на локации foo собственный уникальный массив args,
</code></p>
<p><code>! в который автоматически записываются значения, переданные на локацию в виде аргументов
</code></p>
<p><code>*pl args[0]    & ! выше сюда было передано число 11, вот его мы и увидим на экране
</code></p>
<p><code>result = args[0] * 137
</code></p>
<p><code>--- foo ---
</code></p>
<p>
Давайте вернёмся к локации "pl_stat", она, как вы помните, выводила на экран значения определённых переменных. Теперь мы можем переписать и её, чтобы она работала не с конкретными переменными, а с аргументами, которые мы на эту локацию передаём.
</p>
<p><code>! # pl_stat
</code></p>
<p><code>*pl "Вас зовут <<$args[0]>>."
</code></p>
<p><code>*pl "Вам <<args[1]>> лет."
</code></p>
<p><code>*pl "Вы используете <<$args[2]>>."
</code></p>
<p>
<p><code>Как видите, мы подставляем в строки данные из </code></p>
<code><p><code>$args[0]</code></p>
</code><p><code>, </code></p>
<code><p><code>args[1]</code></p>
</code><p><code> и </code></p>
<code><p><code>$args[2]</code></p>
</code><p><code>, где соответсвенно мы должны найти имя, возраст и оружие персонажа. Значит и передавать на "pl_stat" аргументы мы должны в той же последовательности:
</code></p>
</p>
<p><code>$name='Леголас'
</code></p>
<p><code>age=137
</code></p>
<p><code>$arms='Лук и стрелы'
</code></p>
<p><code>! вызов локации `pl_stat`
</code></p>
<p><code>gosub "pl_stat",$name,age,$arms
</code></p>
<p>
Это даст на экране всё тот же текст:
</p>
<p><code>Вас зовут Леголас.
</code></p>
<p><code>Вам 137 лет.
</code></p>
<p><code>Вы используете Лук и стрелы.
</code></p>
<p>
Само собой, если нет необходимости, заранее объявлять переменные не обязательно:
</p>
<p><code>gosub "pl_stat",'Леголас',137,'Лук и стрелы'
</code></p>
<p>
И теперь, один раз написанная локация позволяет нам выводить текст с нужными вставками сколько угодно раз:
</p>
<p><code>gosub 'pl_stat','Гимли',91,'Молот'
</code></p>
<p><code>gosub 'pl_stat','Арагорн',29,'Палаш'
</code></p>
<p><code>gosub 'pl_stat','Фродо Бэггинс',19,'Кольцо Всевластия'
</code></p>
<p>
Вот результат таких вызовов:
</p>
<p><code>Вас зовут Гимли.
</code></p>
<p><code>Вам 91 лет.
</code></p>
<p><code>Вы используете Молот.
</code></p>
<p><code>Вас зовут Арагорн.
</code></p>
<p><code>Вам 29 лет.
</code></p>
<p><code>Вы используете палаш.
</code></p>
<p><code>Вас зовут Фродо Бэггинс.
</code></p>
<p><code>Вам 19 лет.
</code></p>
<p><code>Вы используете Кольцо Всевластия.
</code></p>
<p>
<code><p><code>Объявить переменную</code></p>
</code><p><code> — для QSP значит записать в программе её имя. Когда мы присваиваем переменной какое-либо значение, мы тем самым автоматически объявляем переменную. Ещё это называется </code></p>
<code><p><code>инициализировать</code></p>
</code><p><code> переменную.
</code></p>
</p>
<title>Глубокое погружение. Тонкости и нюансы при написании собственных функций и процедур</title><p>
<p><code>Когда мы писали локации типа "square" и "summ", для удобства мы называли их функциями. И ещё мы говорили, что передаём им различные аргументы. Так мы говорили именно для упрощения понимания того, зачем нам нужны </code></p>
<code><p><code>args</code></p>
</code><p><code> и </code></p>
<code><p><code>result</code></p>
</code><p><code> на локациях.
</code></p>
</p>
<p>
На самом деле ни одна локация в QSP фактически не является функцией, несмотря на то, что мы действительно передаём на неё аргументы, и можем вернуть из неё некий результат.
</p>
<p>
<p><code>Функцией является только функция </code></p>
<code><p><code>func</code></p>
</code><p><code>, и как не сложно догадаться, эта функция всегда ждёт минимум один аргумент — название локации, которую она должна выполнить. Именно функция </code></p>
<code><p><code>func</code></p>
</code><p><code> выполняет код указанной локации, и именно она транслирует на эту локацию в массив </code></p>
<code><p><code>args</code></p>
</code><p><code> все прочие аргументы, "передаваемые на локацию".
</code></p>
</p>
<p>
<p><code>То же самое касается и оператора </code></p>
<code><p><code>gosub</code></p>
</code><p><code>. Этот оператор вызвает указанную в качестве первого для него аргумента локацию, и транслирует все остальные аргументы в массив </code></p>
<code><p><code>args</code></p>
</code><p><code> на этой локации.
</code></p>
</p>
<p>
<p><code>Всё это следует понимать, потому что не только оператор </code></p>
<code><p><code>gosub</code></p>
</code><p><code> и функция </code></p>
<code><p><code>func</code></p>
</code><p><code> могут принимать дополнительные аргументы и транслировать их в код вашей локации в виде значений в массиве </code></p>
<code><p><code>args</code></p>
</code><p><code>. На это способны так же операторы </code></p>
<code><p><code>goto</code></p>
</code><p><code> и </code></p>
<code><p><code>xgoto</code></p>
</code><p><code>. Да, представьте себе. При переходе на новую локацию с помощью </code></p>
<code><p><code>goto</code></p>
</code><p><code> вы можете сразу передать на эту локацию разные данные с предыдущей локации. Например, так вы можете отслеживать, с какой именно локации на текущую был осуществлён переход.
</code></p>
</p>
<p>
В качестве примера привожу код локации "start", на которой реализовано действие перехода с передачей аргумента, и код локации "комната", где в зависимости от того, какое значение мы отправили на эту локацию, выводится разный текст:
</p>
<p><code># start
</code></p>
<p><code>"Начало супер-пупер-мега игры"
</code></p>
<p><code>act "Начать":
</code></p>
<p><code>    goto "комната","start"
</code></p>
<p><code>end
</code></p>
<p><code>--- start ---
</code></p>
<p><code>
</code></p>
<p><code># комната
</code></p>
<p><code>if $args[0]='start':
</code></p>
<p><code>    "История начинается. Вы только что пришли с локации 'start', и это означает, что вас ждёт душещипательная катсцена."
</code></p>
<p><code>else:
</code></p>
<p><code>    "Вы пришли с любой другой локации. Это просто комната."
</code></p>
<p><code>end
</code></p>
<p><code>--- комната ---
</code></p>
<p>
<p><code>Но и это ещё не всё. Можно передавать аргументы не только в код локаций, но и в код, который выполняется с помощью </code></p>
<code><p><code>dynamic</code></p>
</code><p><code> или </code></p>
<code><p><code>dyneval</code></p>
</code><p><code>.
</code></p>
</p>
<p>
Для примера я напишу код, который будет выводить содержимое всех переданных аргументов, с помощью цикла:
</p>
<p><code>! помещаем код в переменную для удобства
</code></p>
<p><code>$code = {
</code></p>
<p><code>    i=0
</code></p>
<p><code>    :for
</code></p>
<p><code>    if i<arrsize('args'):
</code></p>
<p><code>        if $args[i]<>'':
</code></p>
<p><code>            *pl $args[i]
</code></p>
<p><code>        else:
</code></p>
<p><code>            *pl args[i]
</code></p>
<p><code>        end
</code></p>
<p><code>        i+=1
</code></p>
<p><code>        jump 'for'
</code></p>
<p><code>    end
</code></p>
<p><code>    killvar 'i'
</code></p>
<p><code>}
</code></p>
<p><code>! выполняем код, передавая ему произвольное число аргументов
</code></p>
<p><code>dynamic $code, 'Апельсин', 12, 'оранжевый', 144
</code></p>
<p>
<p><code>На примере кода, помещённого в переменную, видно, что мы работаем с </code></p>
<code><p><code>args</code></p>
</code><p><code>, как с обычными массивом. Т.е. мы можем получить его размер, и обойти все ячейки поочерёдно с помощью цикла. Но значения в массив </code></p>
<code><p><code>args</code></p>
</code><p><code> помещаются автоматически в момент передачи аргументов оператору </code></p>
<code><p><code>dynamic</code></p>
</code><p><code>. Для этого оператора первым и обязательным аргументом является код QSP, записанный в виде строки текста. Все остальные аргументы не обязательны и транслируются в массив </code></p>
<code><p><code>args</code></p>
</code><p><code>, который мы можем использовать уже непосредственно внутри написанного нами кода.
</code></p>
</p>
<p>
<p><code>Поскольку </code></p>
<code><p><code>dynamic</code></p>
</code><p><code> — это оператор, он не может возвращать нам никаких значений. Чтобы иметь возможность получать значение из написанного таким образом кода, мы должны использовать функцию </code></p>
<code><p><code>dyneval</code></p>
</code><p><code>. И тут действуют те же принципы, что и при написании кода для локаций. Чтобы функция вернула нам значение, мы должны это значение присвоить системной переменной </code></p>
<code><p><code>result</code></p>
</code><p><code>.
</code></p>
</p>
<p>
<p><code>С помощью </code></p>
<code><p><code>dyneval</code></p>
</code><p><code> напишем функцию, которая возводит число в степень. Прежде всего мы должны представить себе, как будет выглядеть вызов такой функции. Саму функцию мы поместим в переменную </code></p>
<code><p><code>$pow</code></p>
</code><p><code>, и будем пердавать в неё два аргумента: само число и степень, в которую мы хотим это число возвести. То есть вызов нашей функции будет выглядеть так:
</code></p>
</p>
<p><code>*pl dyneval($pow,3,4) & ! возводим число 3 в четвёртую степень
</code></p>
<p>
<p><code>Таким образом в коде функции мы будем использовать два аргумента, значения которых можно получить из массива </code></p>
<code><p><code>args</code></p>
</code><p><code>:
</code></p>
</p>
<p><code>$pow = {
</code></p>
<p><code>    ! args[0] — число, которое хотим возвести в степень
</code></p>
<p><code>    ! args[1] — степень, в которую хотим возвести число
</code></p>
<p><code>    result=1    & ! сразу присваиваем результату единицу
</code></p>
<p><code>    ! теперь с помощью цикла умножаем результат на указанное число
</code></p>
<p><code>    ! столько раз, каково значение степени.
</code></p>
<p><code>    ! т.е. само значение степени у нас будет счётчиком цикла
</code></p>
<p><code>    :for
</code></p>
<p><code>    if args[1]>0:
</code></p>
<p><code>        result=result*args[0]
</code></p>
<p><code>        args[1]-=1
</code></p>
<p><code>        jump 'for'
</code></p>
<p><code>    end
</code></p>
<p><code>}
</code></p>
<p>
Нам осталось только протестировать работу функции, чтобы проверить результаты:
</p>
<p><code>*pl dyneval($pow,3,4)    & ! выведет число 81
</code></p>
<p><code>*pl dyneval($pow,4,3)    & ! выведет число 64
</code></p>
<p><code>*pl dyneval($pow,9,9)    & ! выведет число 387420489
</code></p>
<p>
<p><code>И снова обращаю ваше внимание, что называю содержимое переменной </code></p>
<code><p><code>$pow</code></p>
</code><p><code> функцией исключительно для удобства. На самом деле функцией здесь является </code></p>
<code><p><code>dyneval</code></p>
</code><p><code>, именно она принимает все аргументы, в том числе и код, записанный в переменную </code></p>
<code><p><code>$pow</code></p>
</code><p><code> (именно поэтому в круглые скобки мы заключаем и значение переменной </code></p>
<code><p><code>$pow</code></p>
</code><p><code> и все последующие аргументы), а затем выполняет этот код, передавая на него все оставшиеся значения аргументов. Эти значения мы затем можем использовать в коде, благодаря тому, что они автоматически записываются в массив </code></p>
<code><p><code>args</code></p>
</code><p><code> в ячейки, начиная с нулевой. И именно </code></p>
<code><p><code>dyneval</code></p>
</code><p><code> забирает из переменной </code></p>
<code><p><code>result</code></p>
</code><p><code> значение и возвращает его нам.
</code></p>
</p>
<p>
<p><code>И точно так же, как это происходило на локациях, можно увидеть, что в коде, который мы передаём оператору </code></p>
<code><p><code>dynamic</code></p>
</code><p><code>, или функции </code></p>
<code><p><code>dyneval</code></p>
</code><p><code>, создаётся свой собственный уникальный массив </code></p>
<code><p><code>args</code></p>
</code><p><code> и своя собственная уникальная переменная </code></p>
<code><p><code>result</code></p>
</code><p><code>, которые уничтожаются сразу после выполнения кода.
</code></p>
</p>
<p><code>args[0]=123
</code></p>
<p><code>$result='Первый'
</code></p>
<p><code>$code="if args[0]=2: $result='Второй' else $result='Никакой'"
</code></p>
<p><code>
</code></p>
<p><code>*pl $dyneval($code,2)     & ! выведет на экран строку `Второй` 
</code></p>
<p><code>*pl args[0]    & ! выведет на экран число 123
</code></p>
<p><code>*pl $result & ! выведет на экран строку `Первый` 
</code></p>
<p>
<p><code>В программировании такие переменные и массивы, как </code></p>
<code><p><code>args</code></p>
</code><p><code> и </code></p>
<code><p><code>result</code></p>
</code><p><code> называются локальными. То есть они действительны только для определённого блока кода, а после выполнения этого блока кода уничтожаются.
</code></p>
</p>
<p>
<p><code>В нашем случае отдельным блоком кода можно считать локацию или код, который мы передаём оператору </code></p>
<code><p><code>dynamic</code></p>
</code><p><code> или функции </code></p>
<code><p><code>dyneval</code></p>
</code><p><code>. А ещё код, который выполняется при нажатии на гиперссылку.
</code></p>
</p>
<p><code>usehtml=1
</code></p>
<p><code>args[0]=137
</code></p>
<p><code>*pl "<a href='exec:args[0]=37 & *pl args[0] & ! в гиперссылке собственные args'>Нажми, чтобы вывести 37</a>"
</code></p>
<p><code>*pl "<a href='exec:*pl args[0] & ! в гиперссылке собственные args'>Нажми, чтобы вывести 0</a>"
</code></p>
<p><code>*pl args[0] & ! на экран выведется 137
</code></p>
<p>
<p><code>Отдельными блоками кода можно считать так же код действия. Однако для этих блоков кода не создаются свои собственные </code></p>
<code><p><code>args</code></p>
</code><p><code>. В них транслируются значения </code></p>
<code><p><code>args</code></p>
</code><p><code> из того уже запущенного блока кода, который их вызывает. Для примера можно посмотреть, как изменяется значение </code></p>
<code><p><code>args</code></p>
</code><p><code> на локации с помощью действий.
</code></p>
</p>
<p><code>args[0]=111    & ! выставляем значение args[0] на локации
</code></p>
<p><code>act "Действие 1":
</code></p>
<p><code>    *pl "Старое значение args[0]: "+$str(args[0])
</code></p>
<p><code>    args[0]=222    & ! изменяем значение args[0] не только в действии, а сразу на локации
</code></p>
<p><code>    *pl "Новое значение args[0]: "+$str(args[0])
</code></p>
<p><code>end
</code></p>
<p><code>act "Действие 2":
</code></p>
<p><code>    *pl "Старое значение args[0]: "+$str(args[0])
</code></p>
<p><code>    args[0]=333    & ! изменяем значение args[0] не только в действии, а сразу на локации
</code></p>
<p><code>    *pl "Новое значение args[0]: "+$str(args[0])
</code></p>
<p><code>end
</code></p>
<p>
<p><code>В дальнейшем я буду говорить только про локации и действия, но следует помнить, что всё, что справедливо для кода локаций, справедливо так же и для кода, передаваемого оператору </code></p>
<code><p><code>dynamic</code></p>
</code><p><code> или функции </code></p>
<code><p><code>dyneval</code></p>
</code><p><code>, а так же для кода в гиперссылке. И ровно так же то, что справедливо для действий, справедливо для циклов в QSP версии 5.8.0.
</code></p>
</p>
<p>
<p><code>Поскольку на каждой локации создаётся свой собственный, локальный массив </code></p>
<code><p><code>args</code></p>
</code><p><code>, этот массив можно использовать для замены любых необходимых локальных переменных.
</code></p>
</p>
<p>
<p><code>В качестве примера приведу код локации "#chk.obj.word#" из моей библиотечки </code></p>
<a l:href="https://github.com/AleksVersus/easy.math"><p><code>easy.math</code></p>
</a><p><code>, которая ищет в списке предметов предмет, содержащий в названии указанное слово. Функция принимает в качестве аргумента это самое слово, а затем возвращает позицию предмета в списке предметов:
</code></p>
</p>
<p><code>! # #chk.obj.word#
</code></p>
<p><code>$args[9]=$args[9]    & ! инициализируем девятый элемент массива, чтоб не затереть аргументы
</code></p>
<p><code>args['i'] = 1    & ! используем одну из ячеек массива args как локальную переменную
</code></p>
<p><code>:loop
</code></p>
<p><code>if no args['i'] > countobj:
</code></p>
<p><code>    !@ цикл выполняется пока счётчик не превысит число предметов
</code></p>
<p><code>    if instr($getobj(args['i']),$args[0])<>0:
</code></p>
<p><code>        !@ как только в названии очередного предмета
</code></p>
<p><code>        !@ встречается рассматриваемое слово
</code></p>
<p><code>        result = args['i']    & !@ возвращаем позицию
</code></p>
<p><code>        exit    & !@ закрываем функцию
</code></p>
<p><code>    end
</code></p>
<p><code>    args['i']+=1
</code></p>
<p><code>    jump 'loop'
</code></p>
<p><code>end
</code></p>
<p>
Вот пример работы данной функции:
</p>
<p><code>addobj "Красный помидор"    & ! первый предмет
</code></p>
<p><code>addobj "Рыжий апельсин"    & ! второй предмет
</code></p>
<p><code>addobj "Зелёное яблоко"    & ! третий предмет
</code></p>
<p><code>addobj "Синий крокодил"    & ! четвёртый предмет
</code></p>
<p><code>! ищем предмет, название которого содержит слово `Зелён`
</code></p>
<p><code>pos=func('#chk.obj.word#','Зелён')
</code></p>
<p><code>! можно вывести и позицию и название
</code></p>
<p><code>*pl "Мы нашли предмет под номером <<pos>>. Это "+$getobj(pos)+"."
</code></p>
<p>
<p><code>Используя массив </code></p>
<code><p><code>args</code></p>
</code><p><code> не только для получения переданных на локацию аргументов, но и в качестве локальных переменных, вы избавляетесь от необходимости следить, не забыли ли вы удалить какие-то промежуточные данные, которые вам требовались для вычислений исключительно на одной локации, исключительно в отдельном блоке кода. Плеер сам уничтожит массив </code></p>
<code><p><code>args</code></p>
</code><p><code>, когда код будет выполнен.
</code></p>
</p>
<p>
<p><code>Если вы до сих пор пишете игру для плеера версии 5.7.0, вы просто вынуждены использовать массив </code></p>
<code><p><code>args</code></p>
</code><p><code> вместо локальных переменных, либо вы вынуждены уничтожать переменные и массивы, используемые для временного хранения данных, вручную с помощью </code></p>
<code><p><code>killvar</code></p>
</code><p><code>. Всё изменилось с появлением плееров версии 5.8.0!
</code></p>
</p>
<title>Бездна смотрит в тебя. Локальные переменные и неявный вызов пользовательских функций</title><section id="neiavnyj-vyzov-funktsij"><p></p>
<title>Локальные переменные</title><p>
В плеерах версии 5.8.0 и выше появилась возможность объявить любую переменную локальной, т.е. значения данной переменной будут действительны только для отдельного блока кода, а после выполнения этого блока кода все переменные, объявленные для него локальными, будут уничтожены. Для примера возьмём две локации: локацию "start" и локацию "foo":
</p>
<p><code>! этот код последовательно выведет на экран числа 12, 549 и 99, 549
</code></p>
<p><code># start
</code></p>
<p><code>x=99
</code></p>
<p><code>z=4608
</code></p>
<p><code>gosub 'foo'
</code></p>
<p><code>*pl x & *pl z    & ! на экран выведутся числа 99 и 549
</code></p>
<p><code>--- start ---
</code></p>
<p><code>
</code></p>
<p><code># foo
</code></p>
<p><code>local x & ! объявляем переменную x локальной для данной локации
</code></p>
<p><code>x=12    & ! изменяем значение переменной x
</code></p>
<p><code>z=549
</code></p>
<p><code>*pl x & *pl z    & ! на экран выведутся числа 12 и 549
</code></p>
<p><code>--- foo ---
</code></p>
<p>
<p><code>Если запустите этот код, то увидите, что значение, присвоенное переменной </code></p>
<code><p><code>x</code></p>
</code><p><code>, на локации "start" до вызова локации "foo", сохраняется и после вызова локации "foo", так как на локации "foo" мы объявили собственную уникальную переменную </code></p>
<code><p><code>x</code></p>
</code><p><code>. А вот переменную </code></p>
<code><p><code>z</code></p>
</code><p><code> мы не объявляли локальной на локации "foo", а значит, если мы меняем её значение на локации "foo", то оно меняется для всех локаций. Что мы и видим.
</code></p>
</p>
<p>
<p><code>По своему поведению локальные переменные несколько отличаются от </code></p>
<code><p><code>args</code></p>
</code><p><code> и </code></p>
<code><p><code>result</code></p>
</code><p><code>. Дело в том, что </code></p>
<code><p><code>args</code></p>
</code><p><code> и </code></p>
<code><p><code>result</code></p>
</code><p><code> объявляются на каждой локации автоматически, и мы можем быть уверены, что всегда будем работать на каждой отдельной локации с уникальными (локальными) </code></p>
<code><p><code>args</code></p>
</code><p><code> и </code></p>
<code><p><code>result</code></p>
</code><p><code>. Но что будет если на локации 'foo' мы объявим локальную переменную, а затем вызовем из локации 'foo' локацию 'proc', на которой не будем эту переменную объявлять локальной? Какие значения примет переменная на каждой из этих локаций?
</code></p>
</p>
<p><code># start
</code></p>
<p><code>x=100    & ! объявляем переменную
</code></p>
<p><code>*pl "start. x до вызова foo: <<x>>"
</code></p>
<p><code>gosub 'foo'
</code></p>
<p><code>*pl "start. x после вызова foo: <<x>>"
</code></p>
<p><code>--- start ---
</code></p>
<p><code>
</code></p>
<p><code># foo
</code></p>
<p><code>local x=333
</code></p>
<p><code>*pl "foo. x до вызова proc: <<x>>"
</code></p>
<p><code>gosub 'proc'
</code></p>
<p><code>*pl "foo. x после вызова proc: <<x>>"
</code></p>
<p><code>--- foo ---
</code></p>
<p><code>
</code></p>
<p><code># proc
</code></p>
<p><code>*pl "proc. x до изменения: <<x>>"
</code></p>
<p><code>x=9091
</code></p>
<p><code>*pl "proc. x после изменения: <<x>>"
</code></p>
<p><code>--- proc ---
</code></p>
<p>
Что мы увидим при выполнении этого кода? Давайте посмотрим.
</p>
<p>1. <p><code>На локации "start" мы объявили переменную </code></p>
<code><p><code>x</code></p>
</code><p><code> со значением </code></p>
<code><p><code>100</code></p>
</code><p><code> и вывели это значение в строке. То есть на экране мы увидим строку с числом </code></p>
<code><p><code>100</code></p>
</code><p><code>.</code></p>
</p>
<p>2. <p><code>Затем мы вызвали локацию "foo", на которой объявили локальную переменную </code></p>
<code><p><code>x</code></p>
</code><p><code> со значением </code></p>
<code><p><code>333</code></p>
</code><p><code> и вывели это значение в строке. То есть на экране мы увидели строку с числом </code></p>
<code><p><code>333</code></p>
</code><p><code>.</code></p>
</p>
<p>3. <p><code>Затем мы вызвали локацию "proc", и здесь не объявляли переменную </code></p>
<code><p><code>x</code></p>
</code><p><code> локальной, но вывели её значение в строке. И вот тут мы обнаруживаем отличие в поведении локальных переменных от </code></p>
<code><p><code>args</code></p>
</code><p><code> и </code></p>
<code><p><code>proc</code></p>
</code><p><code>. Значение, которое мы увидим в строке будет равно тоже </code></p>
<code><p><code>333</code></p>
</code><p><code>. То есть в переменную </code></p>
<code><p><code>x</code></p>
</code><p><code> на локации "proc" транслируется значение этой переменной из локации "foo", а вернее транслируется сама переменная. Таким образом и локация "proc" и локация "foo" работают по сути с одной и той же переменной. Именно поэтому...</code></p>
</p>
<p>4. <p><code>... когда мы изменяем значение </code></p>
<code><p><code>x</code></p>
</code><p><code> на локации "proc" и ожидаемо видим в выводимой строке число </code></p>
<code><p><code>9091</code></p>
</code><p><code>, мы изменяем значение </code></p>
<code><p><code>x</code></p>
</code><p><code> и для локации "foo" в том числе. И поэтому...</code></p>
</p>
<p>5. <p><code>... когда плеер возвращается к выполнению кода на локации "foo", переменная </code></p>
<code><p><code>x</code></p>
</code><p><code> уже изменена, и мы видим в выводимой строке всё то же число </code></p>
<code><p><code>9091</code></p>
</code><p><code>.</code></p>
</p>
<p>6. <p><code>Когда плеер заканчивает выполнение кода локации "foo" и возвращается к выполнению кода на локации "start", локальная переменная </code></p>
<code><p><code>x</code></p>
</code><p><code>, созданная на локации "foo", автоматически уничтожается, и плеер в дальнейшем продолжает работать с переменной </code></p>
<code><p><code>x</code></p>
</code><p><code>, созданной на локации "start". А значит на экране в выводимой строке мы увидим число </code></p>
<code><p><code>100</code></p>
</code><p><code>.</code></p>
</p>
<p><code>start. x до вызова foo: 100
</code></p>
<p><code>foo. x до вызова proc: 333
</code></p>
<p><code>proc. x до изменения: 333
</code></p>
<p><code>proc. x после изменения: 9091
</code></p>
<p><code>foo. x после вызова proc: 9091
</code></p>
<p><code>start. x после вызова foo: 100
</code></p>
<p>
<p><code>Не трудно заметить, что локальные переменные ведут себя на локациях, как </code></p>
<code><p><code>args</code></p>
</code><p><code> в действиях. Всё потому что </code></p>
<code><p><code>args</code></p>
</code><p><code> автоматически объявляется на локациях, но не в действиях, а локальные переменные необходимо объявлять вручную везде, если вам нужно, чтобы они работали как локальные.
</code></p>
</p>
<p>
<p><code>Мы можем вручную объявить </code></p>
<code><p><code>args</code></p>
</code><p><code> локальным в действии, и тогда действие уже не будет работать со значениями </code></p>
<code><p><code>args</code></p>
</code><p><code> действующими на текущей локации:
</code></p>
</p>
<p><code>args[0]=111    & ! выставляем значение args[0] на локации
</code></p>
<p><code>act "Действие 1":
</code></p>
<p><code>    *pl "Старое значение args[0]: "+$str(args[0])
</code></p>
<p><code>    args[0]=222    & ! изменяем значение args[0] не только в действии, а сразу на локации
</code></p>
<p><code>    *pl "Новое значение args[0]: "+$str(args[0])
</code></p>
<p><code>end
</code></p>
<p><code>act "Действие 2":
</code></p>
<p><code>    *pl "Старое значение args[0]: "+$str(args[0])
</code></p>
<p><code>    args[0]=333    & ! изменяем значение args[0] не только в действии, а сразу на локации
</code></p>
<p><code>    *pl "Новое значение args[0]: "+$str(args[0])
</code></p>
<p><code>end
</code></p>
<p><code>act "Действие 3":
</code></p>
<p><code>    local args    & ! объявляем args локальным
</code></p>
<p><code>    *pl "Старое значение args[0]: "+$str(args[0])
</code></p>
<p><code>    args[0]=999    & ! изменяем значение args[0] только в действии,но не на локации
</code></p>
<p><code>    *pl "Новое значение args[0]: "+$str(args[0])
</code></p>
<p><code>end
</code></p>
<p>
И точно так же, если мы вручную не объявим на локации локальную переменную, мы будем работать с той переменной, которая была объявлена последней до вызова этой локации. Если мы вообще не объявляли локальную переменную, значит будем работать с переменной общей для всей игры — с глобальной переменной.
</p>
<p>
<p><code>Имея в наличии такой удобный инструмент, как локальные переменные, мы оказываемся избавлены от необходимости использовать </code></p>
<code><p><code>args</code></p>
</code><p><code> для замены этих самых локальных переменных, и можем использовать его только по прямому назначению, то есть получать из этого массива переданные на локацию аргументы. Посмотрите, насколько чище и понятнее при этом выглядит код:
</code></p>
</p>
<p><code>! # #chk.obj.word#
</code></p>
<p><code>local $word=$args[0] & ! в локальную переменную $word записываем слово, по которому производим поиск
</code></p>
<p><code>local i = 1    & ! используем локальную переменную i в качестве счётчика цикла
</code></p>
<p><code>loop while no i > countobj step i+=1:
</code></p>
<p><code>    !@ цикл выполняется пока счётчик не превысит число предметов
</code></p>
<p><code>    if instr($getobj(i),$word)<>0:
</code></p>
<p><code>        !@ как только в названии очередного предмета
</code></p>
<p><code>        !@ встречается рассматриваемое слово
</code></p>
<p><code>        result = i    & !@ возвращаем позицию
</code></p>
<p><code>        exit    & !@ закрываем функцию
</code></p>
<p><code>    end
</code></p>
<p><code>end
</code></p>
<title>Неявный вызов функций</title><p>
<p><code>Как мы уже говорили ранее, сами по себе локации в действительности не являются функциями или процедурами. Мы используем оператор </code></p>
<code><p><code>gosub</code></p>
</code><p><code> или специальную функцию </code></p>
<code><p><code>func</code></p>
</code><p><code>, чтобы выполнить код той или иной локации. Функциями мы называли эти локации для удобства. И точно так же для удобства в QSP версии 5.8.0 была введена особая синтаксическая конструкция, которая позволяет не писать оператор </code></p>
<code><p><code>gosub</code></p>
</code><p><code> и функцию </code></p>
<code><p><code>func</code></p>
</code><p><code>.
</code></p>
</p>
<p>
<p><code>Фактически мы теперь всегда вызываем все локации с помощью функции </code></p>
<code><p><code>func</code></p>
</code><p><code>, но имеем возможность не указывать само ключевое слово </code></p>
<code><p><code>func</code></p>
</code><p><code>. И такая запись данной функции называется </code></p>
<code><p><code>неявным вызовом</code></p>
</code><p><code>.
</code></p>
</p>
<p>
<p><code>Неявный вызов делается так: мы пишем символ </code></p>
<code><p><code>@</code></p>
</code><p><code> и сразу после него без пробелов указываем название локации, которую хотим использовать как функцию. Если нам нужно передать на локацию аргументы, мы перечисляем эти аргументы внутри круглых скобок сразу после названия локации:
</code></p>
</p>
<p><code># start
</code></p>
<p><code>! возводим числа в степень
</code></p>
<p><code>*pl @pow(3,4)    & ! выведет число 81
</code></p>
<p><code>*pl @pow(4,3)    & ! выведет число 64
</code></p>
<p><code>*pl @pow(9,9)    & ! выведет число 387420489
</code></p>
<p><code>--- start ---
</code></p>
<p><code>
</code></p>
<p><code># pow
</code></p>
<p><code>! функция возведения числа в степень.
</code></p>
<p><code>! Мы писали её для dyneval, а теперь оформляем в отдельной локации
</code></p>
<p><code>result=1
</code></p>
<p><code>loop while args[1]>0 step args[1]-=1:
</code></p>
<p><code>    result=result*args[0]
</code></p>
<p><code>end
</code></p>
<p><code>--- pow ---
</code></p>
<p>
Таким образом наш код становится ещё более наглядным и читаемым, и мы легко отделяем визуально передаваемые на локацию аргументы от названия самой локации.
</p>
<p>
В остальном всё работет, как прежде.
</p>
<p>
<p><code>Если на локации мы присваиваем значение переменной </code></p>
<code><p><code>result</code></p>
</code><p><code>, значит функция вернёт нам это значение.
</code></p>
</p>
<p>
<p><code>Если на локации переменной </code></p>
<code><p><code>result</code></p>
</code><p><code> не присваивается никакое значение, функция ничего не возвращает, и тогда её поведение ничем не отличается от поведения </code></p>
<code><p><code>gosub</code></p>
</code><p><code>.
</code></p>
</p>
<p><code># start
</code></p>
<p><code>@pl_stat('Леголас',137,'Лук и стрелы')
</code></p>
<p><code>--- start ---
</code></p>
<p><code>
</code></p>
<p><code># pl_stat
</code></p>
<p><code>*pl "Вас зовут <<$args[0]>>."
</code></p>
<p><code>*pl "Вам <<args[1]>> лет."
</code></p>
<p><code>*pl "Вы используете <<$args[2]>>."
</code></p>
<p><code>--- pl_stat ---
</code></p>
</section><title>Заключение</title><p>
<p><code>В данной статье мы попытались максимально подробно объяснить, что такое операторы, функции, как мы можем писать собственные функции и процедуры в QSP, что такое аргументы и зачем нужен массив </code></p>
<code><p><code>args</code></p>
</code><p><code>. Вы узнали, что такое локальные переменные, и как массив </code></p>
<code><p><code>args</code></p>
</code><p><code> заменяет локальные переменные в плеерах версии 5.7.0, и почему это больше не требуется в плеерах версии 5.8.0 и выше.
</code></p>
</p>
<p>
<p><code>Многие моменты остались за рамками данной статьи. Например, что за значения появляются в массиве </code></p>
<code><p><code>args</code></p>
</code><p><code> на локациях-обработчиках пунктов пользовательского меню, или какие значения можно найти в массиве </code></p>
<code><p><code>args</code></p>
</code><p><code> на локации </code></p>
<code><p><code>onNewLoc</code></p>
</code><p><code>, но на все эти вопросы, мы надеемся, вы найдёте ответы в большом </code></p>
<a l:href="https://aleksversus.github.io/howdo_faq"><p><code>справочнике по самым часто задаваемым вопросам из темы "Как сделать?" на форуме qsp.org</code></p>
</a><p><code>.
</code></p>
</p>
<p>
<p><code>Онлайн-версию справочника, а так же полный текст данной статьи вы можете найти </code></p>
<a l:href="https://aleksversus.github.io/howdo_faq/"><p><code>вот по этой ссылке</code></p>
</a><p><code>.
</code></p>
</p>
<p>
Если прочтение статьи не прибавило ясности, попробуйте ознакомиться с материалом следующих видеороликов:
</p>
<p>
<a l:href="https://youtu.be/701GnjpRGU0"><p><code>Уроки по QSP. Номер 11. Операторы, функции и аргументы</code></p>
</a><p><code>
</code></p>
</p>
<p>
<a l:href="https://youtu.be/TGUhW-2l1gM"><p><code>Уроки по QSP. Номер 21. Пользовательские служебные локации. Часть 1</code></p>
</a><p><code>
</code></p>
</p>
<p>
<a l:href="https://youtu.be/701GnjpRGU0"><p><code>Уроки по QSP. Номер 21. Пользовательские служебные локации. Часть 2</code></p>
</a><p><code>
</code></p>
</p>
<p>
<a l:href="https://www.youtube.com/watch?v=aEdgMuqTlH8&list=PLcAHO4WsUl2RLdiV5Lfi4d_yyHpl7zTJA&index=31&t=4517s"><p><code>Что нового в QSP 5.8.0. Объявление локальных переменных</code></p>
</a><p><code>
</code></p>
</p>
<p>
<a l:href="https://www.youtube.com/watch?v=aEdgMuqTlH8&t=3080s"><p><code>Что нового в QSP 5.8.0. Неявный вызов функций</code></p>
</a><p><code>
</code></p>
</p>
</section></section><section id="manifest-ob-organizatsii-koda-v-qsp"><title>Манифест об организации кода в QSP</title><section id="imenovanie-peremennyh"><p>
Этот манифест объявляю исключительно я, Aleks Versus. Следовать ему или не следовать, ваше право, поскольку каждый стилизует код под себя. Однако, если вы разрабатываете модуль, использование которого предполагается другими людьми, или совместно работаете над игрой, необходимо вывести стандартные правила оформления кода.
</p>
<p>
Здесь я предлагаю вам положиться на мой авторитет, поскольку я написал и перечитал неимоверное количество кода, и некоторые из нижеизложенных рекомендаций почерпнуты мной из чужих наработок и успешно внедрены в собственный стиль.
</p>
<p>
Повторюсь. Это лишь рекомендации по оформлению. Строго следовать им не нужно. В каждом конкретном случае подходите к написанию с умом и старайтесь делать код более читаемым. Хотя бы для себя.
</p>
<title>Запись команд</title><p>
Команды следует писать в отдельных строках. Допустимо объединять в одной строке две-три команды, если они очень короткие.
</p>
<p>
Правильно:
</p>
<p><code>square = a * b
</code></p>
<p><code>volume = square * height
</code></p>
<p>
Допустимо:
</p>
<p><code>square = a * b   &   volume = square * height
</code></p>
<p>
Как видите, подобное перечисление уже трудно читать, приходиться обрамлять дополнительными пробелами разделитель команд. Что уж говорить про перечисление большего количества команд в одной строке.
</p>
<p>
Недопустимо, потому что нечитаемо:
</p>
<p><code>square = a * b   &   volume = square * height  &   space = volume * 23 + dev   &  *pl space/square  &  *nl  &  *p "end of math."   &  ! ещё и комментарий
</code></p>
<p>
Так же допустимо объединять команды при заполнении каких-то структурных данных. Например, вы заполняете таблицу, разнося её по массивам. Тогда имеет смысл объединять в одной строке несколько команд, чтобы таблица была наглядной:
</p>
<p><code>$id[0]='0001' & $object[0]='Старый меч' & power[0]=100    & stam[0]=255
</code></p>
<p><code>$id[1]='0002' & $object[1]='Старый нож' & power[1]=50    & stam[1]=137
</code></p>
<p><code>$id[2]='0003' & $object[2]='Старый ган' & power[2]=99    & stam[2]=123
</code></p>
<p><code>$id[3]='0004' & $object[3]='Клиган-бой' & power[3]=9999 & stam[3]=999
</code></p>
<p>
В этом случае приходится обрамлять разделители команд дополнительными пробелами, чтобы выровнять "столбцы".
</p>
<title>Однострочные и многострочные конструкции</title><p>
Конструкции условий, действий и циклов поддерживают формы как многострочной, так и однострочной записи. В догонку предыдущему пункту: если в конструкции предполагается выполнение более одной команды, используйте многострочную форму.
</p>
<title>Именование переменных</title><p>
<p><code>Однобуквенные переменные, в т.ч. переменные типа </code></p>
<code><p><code>$y</code></p>
</code><p><code> или </code></p>
<code><p><code>$z</code></p>
</code><p><code>, никогда не используются как глобальные.
</code></p>
</p>
<p>
Если нужна многобуквенная локальная переменная в конце её названия ставим символ нижнего подчёркивания так мы сразу будем понимать, что используемая в коде переменная является локальной.
</p>
<p>
Поскольку типы кортежей и строк фактически неразличимы необходимо начинать названия переменных кортежей с символа нижнего подчёркивания.
</p>
<p>
Примеры:
</p>
<p><code>! объявляем локальные переменные числового и текстового типов
</code></p>
<p><code>local x, $z, $many_letter_
</code></p>
<p><code>! объявляем кортеж (глобальный)
</code></p>
<p><code>$_tuple = ("Вася",34,182,90,"боксёр")
</code></p>
<p><code>! объявляем локальный кортеж
</code></p>
<p><code>local $_personage_ = $_tuple
</code></p>
<p>
Аналоги констант и игровые переменные для хранения глобальных настроек пишутся заглавными буквами.
</p>
<p>
https://pythonworld.ru/osnovy/pep-8-rukovodstvo-po-napisaniyu-koda-na-python.html#section-30</p>
</section></section></section> </body>
 <binary id="cover.png" content-type="image/png">iVBORw0KGgoAAAANSUhEUgAAA+gAAAZACAIAAABltv+XAAAgAElEQVR42uzdeZwlVX3//7NU
3bVv7z3NzLDOyKqgKCKKuxhRRFAxCJgxQREXYoxRs5lNv9+YxHw1UfPT71cxalQERMEIooBL
iEYWA4KGzZlhZpie3m93372qzjm/P+re7h7WWz29Tr+ej3kgg/f2vV3LqXedOudz5LHHbREA
AAAAVjfFJgAAAAAI7gAAAAAI7gAAAADBHQAAAADBHQAAAADBHQAAACC4AwAAACC4AwAAACC4
AwAAAAR3AAAAAAR3AAAAgOAOAAAAgOAOAAAAgOAOAAAAENwBAAAAENwBAAAAENwBAAAAgjsA
AAAAgjsAAAAAgjsAAABAcAcAAABAcAcAAAAI7gAAAAAI7gAAAAAI7gAAAADBHQAAAADBHQAA
AADBHQAAACC4AwAAACC4AwAAAAR3AAAAAAR3AAAAAAR3AAAAgOAOAAAAgOAOAAAAgOAOAAAA
ENwBAAAAENwBAAAAENwBAAAAgjsAAAAAgjsAAABAcAcAAABAcAcAAABAcAcAAAAI7gAAAAAI
7gAAAAAI7gAAAADBHQAAAADBHQAAACC4AwAAACC4AwAAACC4AwAAAAR3AAAAAAR3AAAAAAR3
AAAAgOAOAAAAgOAOAAAAgOAOAAAAENwBAAAAENwBAAAAgjsAAAAAgjsAAAAAgjsAAABAcAcA
AABAcAcAAABAcAcAAAAI7gAAAAAI7gAAAADBHQAAAADBHQAAAADBHQAAACC4AwAAACC4AwAA
ACC4AwAAAAR3AAAAAAR3AAAAAAR3AAAAgOAOAAAAgOAOAAAAENwBAAAAENwBAAAAENwBAAAA
gjsAAAAAgjsAAAAAgjsAAABAcAcAAABAcAcAAAAI7gAAAAAI7gAAAAAI7gAAAADBHQAAAADB
HQAAAADBHQAAACC4AwAAACC4AwAAACC4AwAAAAR3AAAAAAR3AAAAgOAOAAAAgOAOAAAAgOAO
AAAAENwBAAAAENwBAAAAENwBAAAAgjsAAAAAgjsAAABAcAcAAABAcAcAAABAcAcAAAAI7gAA
AAAI7gAAAAAI7gAAAADBHQAAAADBHQAAAADBHQAAACC4AwAAACC4AwAAAAR3AAAAAAR3AAAA
AAR3AAAAgOAOAAAAgOAOAAAAgOAOAAAAENwBAAAAENwBAAAAgjsAAAAAgjsAAAAAgjsAAABA
cAcAAABAcAcAAABAcAcAAAAI7gAAAAAI7gAAAAAI7gAAAADBHQAAAADBHQAAACC4AwAAACC4
AwAAACC4AwAAAAR3AAAAAAR3AAAAAAR3AAAAgOAOAAAAgOAOAAAAENwBAAAAENwBAAAAENwB
AAAAgjsAAAAAgjsAAAAAgjsAAABAcAcAAABAcAcAAABAcAcAAAAI7gAAAAAI7gAAAADBHQAA
AADBHQAAAADBHQAAACC4AwAAACC4AwAAACC4AwAAAAR3AAAAAAR3AAAAgOAOAAAAgOAOAAAA
gOAOAAAAENwBAAAAENwBAAAAENwBAAAAgjsAAAAAgjsAAAAAgjsAAABAcAcAAABAcAcAAAAI
7gAAAAAI7gAAAAAI7gAAAADBHQAAAADBHQAAAADBHQAAACC4AwAAACC4AwAAAAR3AAAAAAR3
AAAAAAR3AAAAgOAOAAAAgOAOAAAAgOAOAAAAENwBAAAAENwBAAAAENwBAAAAgjsAAAAAgjsA
AABAcAcAAABAcAcAAABAcAcAAAAI7gAAAAAI7gAAAAAI7gAAAADBHQAAAADBHQAAACC4AwAA
ACC4AwAAACC4AwAAAAR3AAAAAAR3AAAAAAR3AAAAgOAOAAAAgOAOAAAAgOAOAAAAENwBAAAA
ENwBAAAAgjsAAAAAgjsAAAAAgjsAAABAcAcAAABAcAcAAABAcAcAAAAI7gAAAAAI7gAAAADB
HQAAAADBHQAAAADBHQAAACC4AwAAACC4AwAAACC4AwAAAAR3AAAAAAR3AAAAAAR3AAAAgOAO
AAAAgOAOAAAAENwBAAAAENwBAAAAENwBAAAAgjsAAAAAgjsAAAAAgjsAAABAcAcAAABAcAcA
AAAI7gAAAAAI7gAAAAAI7gAAAADBHQAAAADBHQAAAADBHQAAACC4AwAAACC4AwAAACC4AwAA
AAR3AAAAAAR3AAAAgOAOAAAAgOAOAAAAgOAOAAAAENwBAAAAENwBAAAAENwBAAAAgjsAAAAA
gjsAAABAcGcTAAAAAAR3AAAAAAR3AAAAgOAOAAAAgOAOAAAAgOAOAAAAENwBAAAAENwBAAAA
ENwBAAAAgjsAAAAAgjsAAABAcAcAAABAcAcAAABAcAcAAAAI7gAAAAAI7gAAAAAI7gAAAADB
HQAAAADBHQAAAADBHQAAACC4AwAAACC4AwAAAAR3AAAAAAR3AAAAAAR3AAAAgOAOAAAAgOAO
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
w+hpfe3eXZTqTnkqblTmLVi0OvP6Qdjq4lFeuSWM62597k79r3dMTEzowcH+VMpf2pzn6e3F
tqZ17Z1WP9mtb92pHhp3e6dMZGwq7WWz+dnCU63IHpe6lc2VZhjXTnA/aPzPsLnxIf/Mo9u9
NKaV+NtXyw9eX9y0OWWlVGq5O92dc9PTpeLkdCEjzz5OXXKKOKwzOGh2xzVvsekkl6Qzv5gK
1dxCSyLuXGChpSeMU+FJgwlS0bf+R8+tkRovQBOvtbL6NmsYhEf1tPurjVdF61FM6xBZxkHV
YRgd2bM2Dpi49H6c3GWSjrowiE4YaHd3VAOXSTUX4FQLXw6IVheL7J2nNN55ivjKL9P/+JPh
bEdnb2/X0n2WlLLS3jH1/hv9ux+xvq983yt0+XHHyrwf0+pljyurNkszMECG4H4QyeWzf3xD
7cw/SPCWs48Nr7svfefQ1MBAr5N6OU+G6enSxHjx+I3e/3mTe8Fh4cG3O7YkKSNz3hXpiYbX
0bHfQkvNB4Ke0lLyRPmxkfHYvgSvf2BMaq9ZLDGeFSlW6xLZQRge13ZSnK65eF1JpZZ5fLsQ
QkRRNH/C3GrP7kIK52RzQmSSW8S2n+3UQ5vX8QOQ5qm8quamHvStLp7ctmc23niCfPu11V/v
rW/cOLBkSyzLwLTbgqXTfsd+pdnnLeErm0v8yrg2Q7wYF51Yy46HYkvLKO+9N6QTveVfXtcQ
UaNarVlr3bIUkguCcNeuvT2ydMPF7toL6y84LFrne23vtPrlI2E+PzcFp7kCZmvSvOPIfgxr
7WBHgsg4UhY6TlRSSBVfD1Zp+x80gtMPb/ekmKk7rbWcG9i+rAdLFJkj1khwd80x7vEGancr
BUGYTXup9i5cDSuMsc0w1Czys1pyO60uYnnfXfGm2u+eHO3bO2zMkpy8vq8fmmjrnClWhdJz
y7fH49a11lprT2vf0772PF/7XvzfJKmd4H4QKhQKP7gvenBct/+WtBKfPNtOTk5FkbFtLEN9
gMqlyti+4Y+daa/fVk9U2vwgtrnLXvoCb6o4I1oLLWndKlPIQkuPJwyjTCrZ47tS3bWesLYW
tWzGq1V2Q2Ksc679U6PasFqrViVItfyj3TpSq/1oqTREvLKiFEI6J5LUMgmCsK+j3eb09j1a
63kvlqvl3KXVxaO8/wWNP3+ZGR4aNsas4EyM0DjZEmd2z9Oe53kpz/c9z/O0FxePaRXQ4FJI
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
qOVNK/FPr7Pv+vZUenPKk75qo+BZKuUPjyUrJPnp1zZe8vlUcbrU093lPO+Jrs0Tk1OmXv3k
2e6VW8I1uheag90f3nflvf75J4aJdsS/nW/f+NWin/LT6fW+oqqUsrev+69vLl2/bYHPW887
ITzvBPGjnf5nb6vcNzRdD106k/I9TzeHLAsTGWttGEZxt1B/wT+mX7702fYNx7uezON3zcZX
ICnd7LUvDKOhPUPNmJvTR/TIs57j3nxilOgcvO5+/8GRyLmoXq03L6uyVVOxjbdnUp4Q7W6l
bEpOTU43P0IKKWRfbyFX6FL6cb6x1jrf0fEXtzQS3YT0Z90P39b4xE/Tl98+rP10d08hl8sm
PZ6NMY1G0KgH9XqjXm8YYzb3+GccJX/7Ge4D35uqCpHLZR83tW/pqJ71bCuE6M6IZwyKwzqj
9jfOfP/8My+bi1sq2Zpr11zAfUXOCFrd9RvZG0FxclpEjc+/wbY/9C729btVJus329R4DTEx
r/1q29jY5BtP0scPJGgHXntMcPmd6UcmZ3p7u5ofykRVgjseff3OpP1M7o++1/j0WfVEb3zZ
UeaFW7w7h6b7B3ql1E95cqVSfmjc9qLe2pPgQvKTS4K3Xytv/c1oNpfNd2QzmYzWSikVhlHQ
CMqVarVcPeO41CdfE6z1Lp/WYPfh0w7XR3Ql2ETH9ZuPvkp/+PtjmzYPxsuSr+fjubOz4+Hd
Mzc8mHrNMcGCf8jLjgpfdlQohNgzo3+00+4qhsPlqB4JIcRghyukxdF99uSNYmuPFeLJxlE4
Iay1bnbd+9a1b8f23Tv+ZPZVC7zHOOe48Jzjlmmr3v3eR3/Jt11bv2dc9Pf3PO7re/u6b7xv
6P9n77zj5SrK/z/PM6dt33v39vSEkIQOoSNKExGkWkIRRAT5AYpdxC4W8GtBVBBQRFCQoHRB
QkelhU5CAgHSc3u/d+s5M/P7Y87u3bu3tzSeN+GlbM6ePWfKM5955plnLvsAVofHlijmq4dl
v3AI+91z/J8r2t+r9wKBgBOwLNPkBjcMw587CSGlZIrpk9OF57mecF3XzXkAqixkzC7Hfeaz
D81Wh87oq6B0Dp3A4D+ayWTrasWY8sYMSk8O3mpwyyvCzN/c6e832IYdkqzujk5nR7c+U1i7
ZhDRyM+mEIFzzhhTSnmeUEp5npfLudlMLplM2wb75N78sg+OuY5Wt/B1rV5FZSQ/MjGGhSPd
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
cuXwuo1jr/vrC+5+/7M++dmf7Pst97jbqvGxiU5RFLf+bWPv3rGHPPjO3tVBuMOvuLor6k/P
62lR0gEPdM3MdFatXDrl3HnnX1svnlp2p2YP9TiPqqxGhnv2+YmH67G02s1b1i89wP/cZ548
OXmQ5W8mJiYecP+lM5x87Rs3NZuNRiPfu3dqbHzRCJze3uaJJ64eH59fb2guNIqinJiYfPmL
l67eevmPNjZbsye53przcaenZ1KqnvHUey25/IqrNs/d4MK1gYaHBz/2nz9ecuVHnXbX4++8
ord30QCej5xzWW9f99lJ9QJaKYUYyrI85qj5p3h0z2Q9IKfZau0anbjy6q0L9uLKyy7f0G63
qyrUxb/w9o85ur8su8nbajW++o2bltyrB9z/DhMTk6E+GTfG1B3Xv1T9ypz/J2Uxxdv3xMq+
/t7/+OTSJX7f/IbTqrLodIrZndn5Z21qcjpL4aX7LMv1/cvW1ScMxBhmOp2p6em4n8H49TCV
LMUsi3mWiqI8eZ/h8uvW786yrF4oNtQrHhzsV7neJYizQ+CyLKUsZlnK8izP86zzOeVjAAAg
AElEQVSR5fVF+z/cvnnTtic+7sTvXPj8V7zklMc/5q7Pe9Z9zvuvp7/9739786Ytt77du2dr
ZHmWNbJWqzU41H/UUata7Z5Xvvb8667fueT6q1b1djqdolOUnXLujNxqn0FWWZ6WbNI9e8ZG
hhrveccZ3s9BuMOveLWnFLuH4fIsy7MYY7Z4IOq+C0buG0x5I1X1VB9VqCfjTlkaH5/s6Ynn
LRngfji1Ws3duyc3bFo0c+KTn3jS0UcNjI1N7G/l1E6n6MzMvO3vF40AKctw1U82t9vtGGOj
kX/o3y9f8l3v+5cnTE9NT09NLzwYW1XV1q3bn37mb65etWi4/NU/3bZz10R9zLhutkN8RFVV
bdmy7fWvenieL3pSLr5k3djYVLPZWDh9Xv2ffX0927aPXfrDRYdvX/XyBz3nD++78JIb146u
2zDaajXnBrjHLNUTjVRVtXLF/P3fuXMyzs6u3tvbfud75mcLedf7LqnDOoQqpaXhfuyxg93d
uKrq6Wl/8ztrlzy697zz8VVZzMx0YkxZljWyrJHneWPpP1mehxAWXJLl3TV6brdyHxzsv+jr
Sz9M6Gnnf/XaR47u2j05OV1WVVl1E3xsbGLr1m3vevsZS56U9334srIMeZ7X+7cjA/nY3r03
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
AAAIdwAAQLgDAIBwBwAAhDsAACDcAQBAuAMAAMIdAAAQ7gAAINwBAADhDgAAwh0AABDuAACA
cAcAAOEOAAAIdwAAQLgDAIBwBwAAhDsAACDcAQBAuAMAAMIdAACEOwAAINwBAADhDgAAwh0A
ABDuAACAcAcAAOEOAAAIdwAAEO4AAIBwBwAAhDsAAAh3AABAuAMAAMIdAACEOwAAINwBAADh
DgAAwh0AABDuAAAg3AEAAOEOAAAIdwAAEO4AAIBwBwAAhDsAAAh3AABAuAMAgHAHAACEOwAA
INwBAEC4AwAAwh0AABDuAAAg3AEAAOEOAAAIdwAAEO4AAIBwBwAA4Q4AAAh3AABAuAMAgHAH
AACEOwAAINwBAEC4AwAAwh0AAIQ7AAAg3AEAAOEOAADCHQAAEO4AAIBwBwAA4Q4AAAh3AABA
uAMAgHAHAACEOwAACHcAAEC4AwAAwh0AAIQ7AAAg3AEAAOEOAADCHQAAEMcJRyMAACAASURB
VO4AACDcAQAA4Q4AAAh3AAAQ7gAAgHAHAACEOwAACHcAAEC4AwAAwh0AAIQ7AAAg3AEAQLgD
AADCHQAAEO4AACDcAQAA4Q4AAAh3AAAQ7gAAgHAHAADhDgAACHcAAEC4AwCAcAcAAIQ7AAAg
3AEAQLgDAADCHQAAEO4AACDcAQAA4Q4AAMIdAAAQ7gAAgHAHAADhDgAACHcAAEC4AwCAcAcA
AIQ7AAAIdwAAQLgDAADCHQAAhDsAACDcAQAA4Q4AAMIdAAAQ7gAAgHAHAADhDgAACHcAABDu
AACAcAcAAIQ7AAAIdwAAQLgDAADCHQAAhDsAACDcAQBAuAMAAMIdAAAQ7gAAINwBAADhDgAA
CHcAABDuAACAcAcAAIQ7AAAIdwAAQLgDAIBwBwAAhDsAACDcAQBAuAMAAMIdAAAQ7gAAINwB
AADhDgAAwh0AABDuAACAcAcAAOEOAAAIdwAAQLgDAIBwBwAAhDsAACDcAQBAuAMAAMIdAACE
OwAAINwBAADhDgAAwh0AABDuAACAcAcAAOEOAAAIdwAAEO4AAIBwBwAAhDsAAAh3AABAuAMA
AMIdAACEOwAAINwBAADhDgAAwh0AABDuAAAg3AEAAOEOAAAIdwAAEO4AAIBwBwAAhDsAAAh3
AABAuAMAgHAHAACEOwAAINwBAEC4AwAAwh0AABDuAAAg3AEAAOEOAAAIdwAAEO4AAIBwBwAA
4Q4AAAh3AABAuAMAgHAHAACEOwAAINwBAEC4AwAAwh0AAIQ7AAAg3AEAAOEOAADCHQAAEO4A
AIBwBwAA4Q4AAAh3AABAuAMAgHAHAACEOwAACHcAAEC4AwAAwh0AAIQ7AAAg3AEAAOEOAADC
HQAAEO4AACDcbQIAABDuAACAcAcAAOEOAAAIdwAAQLgDAIBwBwAAhDsAACDcAQBAuAMAAMId
AACEOwAAINwBAADhDgAAwh0AABDuAACAcAcAAOEOAAAIdwAAQLgDAIBwBwAAhDsAAAh3AABA
uAMAAMIdAACEOwAAINwBAADhDgAAwh0AABDuAAAg3AEAAOEOAAAIdwAAEO4AAIBwBwAAhDsA
AAh3AABAuAMAAMIdAACEOwAAINwBAEC4AwAAwh0AABDuAAAg3AEAAOEOAAAIdwAAEO4AAIBw
BwAA4Q4AAAh3AABAuAMAgHAHAACEOwAAINwBAEC4AwAAwh0AABDuAAAg3AEAAOEOAADCHQAA
EO4AAIBwBwAA4Q4AAAh3AABAuAMAgHAHAACEOwAACHcAAEC4AwAAwh0AAIQ7AAAg3AEAAOEO
AADCHQAAEO4AAIBwBwAA4Q4AAAh3AAAQ7gAAgHAHAACEOwAACHcAAEC4AwAAwh0AAIQ7AAAg
3AEAQLgDAADCHQAAEO4AACDcAQAA4Q4AAAh3AAAQ7gAAgHAHAACEOwAACHcAAEC4AwCAcAcA
AIQ7AAAg3AEAQLgDAADCHQAAEO4AACDcAQAA4Q4AAMIdAAAQ7gAAgHAHAADhDgAACHcAAEC4
AwCAcAcAAIQ7AAAg3AEAQLgDAADCHQAAhDsAACDcAQAA4Q4AAMIdAAAQ7gAAgHAHAADhDgAA
CHcAABDuAACAcAcAAIQ7AAAIdwAAQLgDAADCHQAAhDsAACDcAQAA4Q4AAMIdAAAQ7gAAINwB
AADhDgAACHcAABDuAACAcAcAAIQ7AAAIdwAAQLgDAIBwBwAAhDsAACDcAQBAuAMAAMIdAAAQ
7gAAINwBAADhDgAACHcAABDuAACAcAcAAOEOAAAIdwAAQLgDAIBwBwAAhDsAACDcAQBAuAMA
AMIdAACEOwAAINwBAADhDgAAwh0AABDuAACAcAcAAOEOAAAIdwAAQLgDAIBwBwAAhDsAAAh3
AABAuAMAAMIdAACEOwAAINwBAADhDgAAwh0AABDuAAAg3AEAAOEOAAAIdwAAEO4AAIBwBwAA
hDsAAAh3AABAuAMAAMIdAACEOwAAINwBAEC4AwAAwh0AABDuAAAg3AEAAOEOAAAIdwAAEO4A
AIBwBwAA4Q4AAAh3AABAuAMAgHAHAACEOwAAINwBAEC4AwAAwh0AABDuAAAg3AEAAOEOAADC
HQAAEO4AAIBwBwAA4Q4AAAh3AABAuAMAgHAHAACEOwAACHcAAEC4AwAAwh0AAIQ7AAAg3AEA
AOEOAADCHQAAEO4AAIBwBwAA4Q4AAAh3AAAQ7gAAgHAHAACEOwAACHcAAEC4AwAAwh0AAIQ7
AAAg3AEAQLgDAADCHQAAEO4AACDcAQAA4Q4AAAh3AAAQ7gAAgHAHAACEOwAACHcAAEC4AwCA
cAcAAIQ7AAAg3AEAQLgDAADCHQAAEO4AACDcAQAA4Q4AAMLdJgAAAOEOAAAIdwAAEO4AAIBw
BwAAhDsAAAh3AABAuAMAAMIdAACEOwAAINwBAEC4AwAAwh0AABDuAAAg3AEAAOEOAAAIdwAA
EO4AAIBwBwAAhDsAAAh3AABAuAMAgHAHAACEOwAAINwBAEC4AwAAwh0AABDuAAAg3AEAAOEO
AADCHQAAEO4AAIBwBwAA4Q4AAAh3AABAuAMAgHAHAACEOwAAINwBAEC4AwAAwh0AAIQ7AAAg
3AEAAOEOAADCHQAAEO4AAIBwBwAA4Q4AAAh3AAAQ7gAAgHAHAACEOwAACHcAAEC4AwAAwh0A
AIQ7AAAg3AEAAOEOAADCHQAAEO4AACDcAQAA4Q4AAAh3AAAQ7gAAgHAHAACEOwAACHcAAEC4
AwCAcAcAAIQ7AAAg3AEAQLgDAADCHQAAEO4AACDcAQAA4Q4AAAh3AAAQ7gAAgHAHAADhDgAA
CHcAAEC4AwCAcAcAAIQ7AAAg3AEAQLgDAADCHQAAhDsAACDcAQAA4Q4AAMIdAAAQ7gAAgHAH
AADhDgAACHcAAEC4AwCAcAcAAIQ7AAAIdwAAQLgDAADCHQAAhDsAACDcAQAA4Q4AAMIdAAAQ
7gAAINwBAADhDgAACHcAABDuAACAcAcAAIQ7AAAIdwAAQLgDAADCHQAAhDsAACDcAQBAuAMA
AMIdAAAQ7gAAINwBAADhDgAACHcAABDuAACAcAcAAOEOAAAIdwAAQLgDAIBwBwAAhDsAACDc
AQBAuAMAAMIdAAAQ7gAAINwBAADhDgAAwh0AABDuAACAcAcAAOEOAAAIdwAAQLgDAIBwBwAA
hDsAAAh3AABAuAMAAMIdAACEOwAAINwBAADhDgAAwh0AABDuAACAcAcAAOEOAAAIdwAAEO4A
AIBwBwAAhDsAAAh3AABAuAMAAMIdAACEOwAAINwBAEC4AwAAwh0AABDuAAAg3AEAAOEOAAAI
dwAAEO4AAIBwBwAAhDsAAAh3AABAuAMAgHAHAACEOwAAINwBAEC4AwAAwh0AABDuAAAg3AEA
AOEOAADCHQAAEO4AAIBwBwAA4Q4AAAh3AABAuAMAgHAHAACEOwAAINwBAEC4AwAAwh0AAIQ7
AAAg3AEAAOEOAADCHQAAEO4AAIBwBwAA4Q4AAAh3AAAQ7gAAgHAHAACEOwAACHcAAEC4AwAA
wh0AAIQ7AAAg3AEAAOEOAADCHQAAEO4AACDcAQAA4Q4AAAh3AAAQ7gAAgHAHAACEOwAACHcA
AEC4AwCAcAcAAIQ7AAAg3AEAQLgDAADCHQAAEO4AACDcAQAA4Q4AAAh3AAAQ7gAAgHAHAADh
DgAACHcAAEC4AwCAcAcAAIQ7AAAg3AEAQLgDAADCHQAAhDsAACDcAQAA4Q4AAMIdAAAQ7gAA
gHAHAADhDgAACHcAAEC4AwCAcAcAAIQ7AAAIdwAAQLgDAADCHQAAhDsAACDcAQAA4Q4AAMId
AAAQ7gAAINxtAgAAEO4AAIBwBwAA4Q4AAAh3AABAuAMAgHAHAACEOwAAINwBAEC4AwAAwh0A
AIQ7AAAg3AEAAOEOAADCHQAAEO4AAIBwBwAA4Q4AAAh3AABAuAMAgHAHAACEOwAA/JrIbQLg
11eM7TXHtlaujikrJicmNq7rjO3+pX5AjYGhnmPumJqtsjM9uXnj9M5tt+FGWqvWNFcelTWa
oaqmd++c3Ly+nJ7+OTw5WdZac2xrZFVMqRjfO7F5fWds7225nZT1HHPH5vCKEOPM7l0TG28p
Z271w2mtXN1afXTKm+X09OTW27hhAYQ7sLz7/dP/nxqNQ7zy5JaNV/7dq47Avbr3G97eXnP0
kgvXffrszV/9wpHcOAMn3uvYxz915akPbwwOL7x8YsPNW7914frPf+KXq8wag8PHPuHpax56
eu8djl94+dTWjVu/dcG6z31satuWg97I4Em/ecwZT115/4c0hkYWXl6VxZ7rrtr6rQs3ffm/
O+NjR2BvasUDHnrMY3535L4PzHp6F9yPamzt9Vu+dv6GL37yEAt+xf0ffMzjnrri5FNTq2fu
wnJmevTKSzd++dNbL74gVNWBb6H/Lnc/9nFnrjz14c0Vqxdt2G1btn3novXnfWxi47pb8Re3
t+8OT372HZ70zLnHte5zH7v+A2/zZgUc6hvk3e9xgq0Av5Ie9l/fTs3mIV55fN1N33vpmYf7
LrVWH/2g958XYlxy+fYffOuKt/zZkdksWU/viX/yuqMfcca+d2NOMTlxw0feueH8//qleKKP
evTvnPiCV+V9A/u7Qjk1ed2H3r7xi+fu7wqp1XPSS95w1CPOOPAPmt6146f/9007fnDx4Xss
g/e4z4l/8rqBE+5+gOvM7Np+1dv+ctePvneA6zSHV97jFW8eud9DDnCd0asuu+qfXj+9Y+vy
r9VVa058watXPfhRB3idlDPTN330rFs+c/bBX3Wt1jGPf9qdnvK8xsDQol1W4Q7cqj9hq1aN
2ArwK+nOT3thzLJDvPLM7l0bvvCfhz0xT3vcylMetkwkrTxq3WfPqYrO4b4DjaGRk//P+1fc
70EHqLEQQsobKx/w0KzR3PmjS37Bn+Xjn/GSE1/wytRsHeA6Mc9XnvKwqixGr7xsua827vM3
71p16sMP/gej3bPmoafvvubKyU3rbvcHElM6/hkvvvvL39Raufpgd6N3zcNOH73i0qmtm5a9
Qs/Rx93vrR/qv+s9D3w77dXHrH7Io7ZdfEExMb7kS6se9Mj7vPms/rve48Cvk5hlI/d7cDU9
PXr1D/f/uLJjHvt793rtP63+X4/OWu0lX919zY93Xvptb1bAIXJyKnDkrDhl+TrMWq2R+556
uH96zBu/+Zfv6Dv+bod4/Ts+5XlrTnv8L/L2PPoxT7rz01+w5MLpXTvG195QTk0uufwuz/jT
Fb+1zBHoOz/lecP3vv/CS6a2btz6ra9svvBzW77+/9q78zC5qjp//J9zzt1q7T3dnZAQICEJ
+64guIGMOCqMgqjozCiguKEoroyACrgMzrCo/JgRv4AIOiqggoILssgOCZAA2ciedHrv6lrv
cs75/VHd1beW7q7udJLWvF8PD0/XrXtv3bp9U/2+pz7nnAdz2zaVR1VjyacuY1zM+HtJLj1y
/3POr/NWk5vW0ku+yc0aXyhxO3Lof1xvt5WVY2kZ5LZurK4XcubMPeRL36t4USMaW3Lx5RN8
g1F57/ThT0YX1PrumrE5J59+/A9/efCnLrNb5+CfPwDsOtS4A+wrtv7q/3lDA+M9G2RSu72d
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
8MP8jq2ln2P7Lwr/OrQMVn7rs6VR4dMb1rx42YX7v/+i/c89fywPG+a8d71//c3f3QOpveJS
6X74/nU/vHq8gRfdnp01lw+vXbn6+5flywd9t1vaKorm/dTgBKl92aVXhyuOMhvXvnTFJ4Ns
Bh8sAIDgDgD/ICJz9490lqXGBed8dNKtmo87eetv7pjBw8htKxu43W6dYzW3jdeOzk2rYtKi
4XWvzLYTm9u6oaHh2Iq7i1ev/Vpm45rqlRuWljWZh9eZe8bZ4Vum7ff/omIuJ63Upjt/ZLe0
dpx25tgv6OjX7/nU3vXHu9fd9G2txu1YnN26oWKJlnLbPbdv/NlNuqp+PbnkyLJta5238VJ7
et3LL135mSCTwj9wAEBwB4BZrfmYExuPOF4HcuCFp2pO2BnWWt7cXqeGQ482YvFJmzNjCxe3
nvhWw3bS61/tffKhCUb2SIcnByUiopYT3tj1wK9rrtx09OvDNe7K81KvrJipI5kpqTUrGw4b
C+657Zue//yHlJuvXtPpnB8eU0W6bnrtyrH8uvSI8Mo94wxruPWe28PBvWLe0Nr3P5bVdso/
xfZfFKRTvX/7c75ry66k9m2//dlrP/nviSc5Sq97WcsgnLDX3fTtrj/dU3Pllte9KfxwcJwr
uTq1D728/OWrPjdpQTwAAII7AOxNzDAP/fJ3W04YSTwLzvlo98O/X3PDlROMIdh83HSGiGHC
aDrqxN7HJxobe/7ZHzngvE+WWovnb1zz0pWf8ceZXj7ftS3ftSXc9r/fP79/55/urXnk+535
ofDDgeceqxmIp3ckM2XguccWvPffSw8jHfuZiYRb6zj3++dzw9XegyueCM+0ZTWUTcYUpIdr
vlzltxNskmF57LaOI77xw9JUpgs/8PHXfvz97b//v+ml9s2/uGXTnT+adENZyA+ter4pNDVS
/KBlVCu4W02tFR1e+558qJ7UPrjiyVXfvlS5BXwaAMBegeEgAaBe+7/v/FJqL2p/8zvmVRSs
hxsGYvGGQ8emlw+ymb6nHx7vP394KLxtywkTNdU3Hn7cgR/6VLjGI37AkqWf/voEm3Q/dH/4
YXTBgQf828XVqy0456ONh5WVoGy//xczeyQzIvXqi4WureFbnUUXfqk6TycWHVLZufPBsu8Z
ZHnWTy47oubLVTTMu907Jj68pZd8q5Tai4d30IVfTIRmz603tWu94dYb6kntNX/LnaefmVh0
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
dfReIZwEkXcAAAAASUVORK5CYII=</binary>
</FictionBook>
